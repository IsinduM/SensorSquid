
SensorSquid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f430  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  0800f600  0800f600  0001f600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080100b8  080100b8  000200b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080100c0  080100c0  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080100c4  080100c4  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  20000000  080100c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000065ac  200001f8  080102bc  000301f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200067a4  080102bc  000367a4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00036820  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007198  00000000  00000000  00066a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000217c3  00000000  00000000  0006dbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002000  00000000  00000000  0008f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001f50  00000000  00000000  000913a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002d25c  00000000  00000000  000932f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ab1e  00000000  00000000  000c054c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f7a43  00000000  00000000  000fb06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001f2aad  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000708c  00000000  00000000  001f2b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001f9b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001f9c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f5e8 	.word	0x0800f5e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800f5e8 	.word	0x0800f5e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	; 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b974 	b.w	80011a4 <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f806 	bl	8000ed4 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__udivmoddi4>:
 8000ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed8:	9d08      	ldr	r5, [sp, #32]
 8000eda:	4604      	mov	r4, r0
 8000edc:	468e      	mov	lr, r1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d14d      	bne.n	8000f7e <__udivmoddi4+0xaa>
 8000ee2:	428a      	cmp	r2, r1
 8000ee4:	4694      	mov	ip, r2
 8000ee6:	d969      	bls.n	8000fbc <__udivmoddi4+0xe8>
 8000ee8:	fab2 f282 	clz	r2, r2
 8000eec:	b152      	cbz	r2, 8000f04 <__udivmoddi4+0x30>
 8000eee:	fa01 f302 	lsl.w	r3, r1, r2
 8000ef2:	f1c2 0120 	rsb	r1, r2, #32
 8000ef6:	fa20 f101 	lsr.w	r1, r0, r1
 8000efa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efe:	ea41 0e03 	orr.w	lr, r1, r3
 8000f02:	4094      	lsls	r4, r2
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	0c21      	lsrs	r1, r4, #16
 8000f0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000f0e:	fa1f f78c 	uxth.w	r7, ip
 8000f12:	fb08 e316 	mls	r3, r8, r6, lr
 8000f16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f1a:	fb06 f107 	mul.w	r1, r6, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d90a      	bls.n	8000f38 <__udivmoddi4+0x64>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f2a:	f080 811f 	bcs.w	800116c <__udivmoddi4+0x298>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 811c 	bls.w	800116c <__udivmoddi4+0x298>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3310 	mls	r3, r8, r0, r3
 8000f44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f48:	fb00 f707 	mul.w	r7, r0, r7
 8000f4c:	42a7      	cmp	r7, r4
 8000f4e:	d90a      	bls.n	8000f66 <__udivmoddi4+0x92>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f58:	f080 810a 	bcs.w	8001170 <__udivmoddi4+0x29c>
 8000f5c:	42a7      	cmp	r7, r4
 8000f5e:	f240 8107 	bls.w	8001170 <__udivmoddi4+0x29c>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	1be4      	subs	r4, r4, r7
 8000f6c:	2600      	movs	r6, #0
 8000f6e:	b11d      	cbz	r5, 8000f78 <__udivmoddi4+0xa4>
 8000f70:	40d4      	lsrs	r4, r2
 8000f72:	2300      	movs	r3, #0
 8000f74:	e9c5 4300 	strd	r4, r3, [r5]
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d909      	bls.n	8000f96 <__udivmoddi4+0xc2>
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	f000 80ef 	beq.w	8001166 <__udivmoddi4+0x292>
 8000f88:	2600      	movs	r6, #0
 8000f8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f8e:	4630      	mov	r0, r6
 8000f90:	4631      	mov	r1, r6
 8000f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f96:	fab3 f683 	clz	r6, r3
 8000f9a:	2e00      	cmp	r6, #0
 8000f9c:	d14a      	bne.n	8001034 <__udivmoddi4+0x160>
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	d302      	bcc.n	8000fa8 <__udivmoddi4+0xd4>
 8000fa2:	4282      	cmp	r2, r0
 8000fa4:	f200 80f9 	bhi.w	800119a <__udivmoddi4+0x2c6>
 8000fa8:	1a84      	subs	r4, r0, r2
 8000faa:	eb61 0303 	sbc.w	r3, r1, r3
 8000fae:	2001      	movs	r0, #1
 8000fb0:	469e      	mov	lr, r3
 8000fb2:	2d00      	cmp	r5, #0
 8000fb4:	d0e0      	beq.n	8000f78 <__udivmoddi4+0xa4>
 8000fb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000fba:	e7dd      	b.n	8000f78 <__udivmoddi4+0xa4>
 8000fbc:	b902      	cbnz	r2, 8000fc0 <__udivmoddi4+0xec>
 8000fbe:	deff      	udf	#255	; 0xff
 8000fc0:	fab2 f282 	clz	r2, r2
 8000fc4:	2a00      	cmp	r2, #0
 8000fc6:	f040 8092 	bne.w	80010ee <__udivmoddi4+0x21a>
 8000fca:	eba1 010c 	sub.w	r1, r1, ip
 8000fce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd2:	fa1f fe8c 	uxth.w	lr, ip
 8000fd6:	2601      	movs	r6, #1
 8000fd8:	0c20      	lsrs	r0, r4, #16
 8000fda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fde:	fb07 1113 	mls	r1, r7, r3, r1
 8000fe2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fe6:	fb0e f003 	mul.w	r0, lr, r3
 8000fea:	4288      	cmp	r0, r1
 8000fec:	d908      	bls.n	8001000 <__udivmoddi4+0x12c>
 8000fee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ff6:	d202      	bcs.n	8000ffe <__udivmoddi4+0x12a>
 8000ff8:	4288      	cmp	r0, r1
 8000ffa:	f200 80cb 	bhi.w	8001194 <__udivmoddi4+0x2c0>
 8000ffe:	4643      	mov	r3, r8
 8001000:	1a09      	subs	r1, r1, r0
 8001002:	b2a4      	uxth	r4, r4
 8001004:	fbb1 f0f7 	udiv	r0, r1, r7
 8001008:	fb07 1110 	mls	r1, r7, r0, r1
 800100c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001010:	fb0e fe00 	mul.w	lr, lr, r0
 8001014:	45a6      	cmp	lr, r4
 8001016:	d908      	bls.n	800102a <__udivmoddi4+0x156>
 8001018:	eb1c 0404 	adds.w	r4, ip, r4
 800101c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001020:	d202      	bcs.n	8001028 <__udivmoddi4+0x154>
 8001022:	45a6      	cmp	lr, r4
 8001024:	f200 80bb 	bhi.w	800119e <__udivmoddi4+0x2ca>
 8001028:	4608      	mov	r0, r1
 800102a:	eba4 040e 	sub.w	r4, r4, lr
 800102e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001032:	e79c      	b.n	8000f6e <__udivmoddi4+0x9a>
 8001034:	f1c6 0720 	rsb	r7, r6, #32
 8001038:	40b3      	lsls	r3, r6
 800103a:	fa22 fc07 	lsr.w	ip, r2, r7
 800103e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001042:	fa20 f407 	lsr.w	r4, r0, r7
 8001046:	fa01 f306 	lsl.w	r3, r1, r6
 800104a:	431c      	orrs	r4, r3
 800104c:	40f9      	lsrs	r1, r7
 800104e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001052:	fa00 f306 	lsl.w	r3, r0, r6
 8001056:	fbb1 f8f9 	udiv	r8, r1, r9
 800105a:	0c20      	lsrs	r0, r4, #16
 800105c:	fa1f fe8c 	uxth.w	lr, ip
 8001060:	fb09 1118 	mls	r1, r9, r8, r1
 8001064:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001068:	fb08 f00e 	mul.w	r0, r8, lr
 800106c:	4288      	cmp	r0, r1
 800106e:	fa02 f206 	lsl.w	r2, r2, r6
 8001072:	d90b      	bls.n	800108c <__udivmoddi4+0x1b8>
 8001074:	eb1c 0101 	adds.w	r1, ip, r1
 8001078:	f108 3aff 	add.w	sl, r8, #4294967295
 800107c:	f080 8088 	bcs.w	8001190 <__udivmoddi4+0x2bc>
 8001080:	4288      	cmp	r0, r1
 8001082:	f240 8085 	bls.w	8001190 <__udivmoddi4+0x2bc>
 8001086:	f1a8 0802 	sub.w	r8, r8, #2
 800108a:	4461      	add	r1, ip
 800108c:	1a09      	subs	r1, r1, r0
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb1 f0f9 	udiv	r0, r1, r9
 8001094:	fb09 1110 	mls	r1, r9, r0, r1
 8001098:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800109c:	fb00 fe0e 	mul.w	lr, r0, lr
 80010a0:	458e      	cmp	lr, r1
 80010a2:	d908      	bls.n	80010b6 <__udivmoddi4+0x1e2>
 80010a4:	eb1c 0101 	adds.w	r1, ip, r1
 80010a8:	f100 34ff 	add.w	r4, r0, #4294967295
 80010ac:	d26c      	bcs.n	8001188 <__udivmoddi4+0x2b4>
 80010ae:	458e      	cmp	lr, r1
 80010b0:	d96a      	bls.n	8001188 <__udivmoddi4+0x2b4>
 80010b2:	3802      	subs	r0, #2
 80010b4:	4461      	add	r1, ip
 80010b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010ba:	fba0 9402 	umull	r9, r4, r0, r2
 80010be:	eba1 010e 	sub.w	r1, r1, lr
 80010c2:	42a1      	cmp	r1, r4
 80010c4:	46c8      	mov	r8, r9
 80010c6:	46a6      	mov	lr, r4
 80010c8:	d356      	bcc.n	8001178 <__udivmoddi4+0x2a4>
 80010ca:	d053      	beq.n	8001174 <__udivmoddi4+0x2a0>
 80010cc:	b15d      	cbz	r5, 80010e6 <__udivmoddi4+0x212>
 80010ce:	ebb3 0208 	subs.w	r2, r3, r8
 80010d2:	eb61 010e 	sbc.w	r1, r1, lr
 80010d6:	fa01 f707 	lsl.w	r7, r1, r7
 80010da:	fa22 f306 	lsr.w	r3, r2, r6
 80010de:	40f1      	lsrs	r1, r6
 80010e0:	431f      	orrs	r7, r3
 80010e2:	e9c5 7100 	strd	r7, r1, [r5]
 80010e6:	2600      	movs	r6, #0
 80010e8:	4631      	mov	r1, r6
 80010ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ee:	f1c2 0320 	rsb	r3, r2, #32
 80010f2:	40d8      	lsrs	r0, r3
 80010f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f8:	fa21 f303 	lsr.w	r3, r1, r3
 80010fc:	4091      	lsls	r1, r2
 80010fe:	4301      	orrs	r1, r0
 8001100:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001104:	fa1f fe8c 	uxth.w	lr, ip
 8001108:	fbb3 f0f7 	udiv	r0, r3, r7
 800110c:	fb07 3610 	mls	r6, r7, r0, r3
 8001110:	0c0b      	lsrs	r3, r1, #16
 8001112:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001116:	fb00 f60e 	mul.w	r6, r0, lr
 800111a:	429e      	cmp	r6, r3
 800111c:	fa04 f402 	lsl.w	r4, r4, r2
 8001120:	d908      	bls.n	8001134 <__udivmoddi4+0x260>
 8001122:	eb1c 0303 	adds.w	r3, ip, r3
 8001126:	f100 38ff 	add.w	r8, r0, #4294967295
 800112a:	d22f      	bcs.n	800118c <__udivmoddi4+0x2b8>
 800112c:	429e      	cmp	r6, r3
 800112e:	d92d      	bls.n	800118c <__udivmoddi4+0x2b8>
 8001130:	3802      	subs	r0, #2
 8001132:	4463      	add	r3, ip
 8001134:	1b9b      	subs	r3, r3, r6
 8001136:	b289      	uxth	r1, r1
 8001138:	fbb3 f6f7 	udiv	r6, r3, r7
 800113c:	fb07 3316 	mls	r3, r7, r6, r3
 8001140:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001144:	fb06 f30e 	mul.w	r3, r6, lr
 8001148:	428b      	cmp	r3, r1
 800114a:	d908      	bls.n	800115e <__udivmoddi4+0x28a>
 800114c:	eb1c 0101 	adds.w	r1, ip, r1
 8001150:	f106 38ff 	add.w	r8, r6, #4294967295
 8001154:	d216      	bcs.n	8001184 <__udivmoddi4+0x2b0>
 8001156:	428b      	cmp	r3, r1
 8001158:	d914      	bls.n	8001184 <__udivmoddi4+0x2b0>
 800115a:	3e02      	subs	r6, #2
 800115c:	4461      	add	r1, ip
 800115e:	1ac9      	subs	r1, r1, r3
 8001160:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001164:	e738      	b.n	8000fd8 <__udivmoddi4+0x104>
 8001166:	462e      	mov	r6, r5
 8001168:	4628      	mov	r0, r5
 800116a:	e705      	b.n	8000f78 <__udivmoddi4+0xa4>
 800116c:	4606      	mov	r6, r0
 800116e:	e6e3      	b.n	8000f38 <__udivmoddi4+0x64>
 8001170:	4618      	mov	r0, r3
 8001172:	e6f8      	b.n	8000f66 <__udivmoddi4+0x92>
 8001174:	454b      	cmp	r3, r9
 8001176:	d2a9      	bcs.n	80010cc <__udivmoddi4+0x1f8>
 8001178:	ebb9 0802 	subs.w	r8, r9, r2
 800117c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001180:	3801      	subs	r0, #1
 8001182:	e7a3      	b.n	80010cc <__udivmoddi4+0x1f8>
 8001184:	4646      	mov	r6, r8
 8001186:	e7ea      	b.n	800115e <__udivmoddi4+0x28a>
 8001188:	4620      	mov	r0, r4
 800118a:	e794      	b.n	80010b6 <__udivmoddi4+0x1e2>
 800118c:	4640      	mov	r0, r8
 800118e:	e7d1      	b.n	8001134 <__udivmoddi4+0x260>
 8001190:	46d0      	mov	r8, sl
 8001192:	e77b      	b.n	800108c <__udivmoddi4+0x1b8>
 8001194:	3b02      	subs	r3, #2
 8001196:	4461      	add	r1, ip
 8001198:	e732      	b.n	8001000 <__udivmoddi4+0x12c>
 800119a:	4630      	mov	r0, r6
 800119c:	e709      	b.n	8000fb2 <__udivmoddi4+0xde>
 800119e:	4464      	add	r4, ip
 80011a0:	3802      	subs	r0, #2
 80011a2:	e742      	b.n	800102a <__udivmoddi4+0x156>

080011a4 <__aeabi_idiv0>:
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_Init+0x30>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011b2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011ba:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 fc43 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	2005      	movs	r0, #5
 80011cc:	f009 fb2a 	bl	800a824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f009 fb06 	bl	800a7e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80011d4:	2000      	movs	r0, #0
 80011d6:	bd08      	pop	{r3, pc}
 80011d8:	40023c00 	.word	0x40023c00

080011dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011dc:	4a03      	ldr	r2, [pc, #12]	; (80011ec <HAL_IncTick+0x10>)
 80011de:	6811      	ldr	r1, [r2, #0]
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_IncTick+0x14>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	440b      	add	r3, r1
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000214 	.word	0x20000214
 80011f0:	20000000 	.word	0x20000000

080011f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011f4:	4b01      	ldr	r3, [pc, #4]	; (80011fc <HAL_GetTick+0x8>)
 80011f6:	6818      	ldr	r0, [r3, #0]
}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000214 	.word	0x20000214

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b538      	push	{r3, r4, r5, lr}
 8001202:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff fff6 	bl	80011f4 <HAL_GetTick>
 8001208:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800120e:	d002      	beq.n	8001216 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <HAL_Delay+0x24>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001216:	f7ff ffed 	bl	80011f4 <HAL_GetTick>
 800121a:	1b40      	subs	r0, r0, r5
 800121c:	42a0      	cmp	r0, r4
 800121e:	d3fa      	bcc.n	8001216 <HAL_Delay+0x16>
  {
  }
}
 8001220:	bd38      	pop	{r3, r4, r5, pc}
 8001222:	bf00      	nop
 8001224:	20000000 	.word	0x20000000

08001228 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <ADC_Init+0x12c>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001230:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	6841      	ldr	r1, [r0, #4]
 8001236:	430a      	orrs	r2, r1
 8001238:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800123a:	6802      	ldr	r2, [r0, #0]
 800123c:	6853      	ldr	r3, [r2, #4]
 800123e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001242:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001244:	6802      	ldr	r2, [r0, #0]
 8001246:	6853      	ldr	r3, [r2, #4]
 8001248:	6901      	ldr	r1, [r0, #16]
 800124a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800124e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001250:	6802      	ldr	r2, [r0, #0]
 8001252:	6853      	ldr	r3, [r2, #4]
 8001254:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001258:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800125a:	6802      	ldr	r2, [r0, #0]
 800125c:	6853      	ldr	r3, [r2, #4]
 800125e:	6881      	ldr	r1, [r0, #8]
 8001260:	430b      	orrs	r3, r1
 8001262:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001264:	6802      	ldr	r2, [r0, #0]
 8001266:	6893      	ldr	r3, [r2, #8]
 8001268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800126c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800126e:	6802      	ldr	r2, [r0, #0]
 8001270:	6893      	ldr	r3, [r2, #8]
 8001272:	68c1      	ldr	r1, [r0, #12]
 8001274:	430b      	orrs	r3, r1
 8001276:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001278:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <ADC_Init+0x130>)
 800127c:	429a      	cmp	r2, r3
 800127e:	d057      	beq.n	8001330 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001280:	6802      	ldr	r2, [r0, #0]
 8001282:	6893      	ldr	r3, [r2, #8]
 8001284:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001288:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800128a:	6802      	ldr	r2, [r0, #0]
 800128c:	6893      	ldr	r3, [r2, #8]
 800128e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001290:	430b      	orrs	r3, r1
 8001292:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001294:	6802      	ldr	r2, [r0, #0]
 8001296:	6893      	ldr	r3, [r2, #8]
 8001298:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800129c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800129e:	6802      	ldr	r2, [r0, #0]
 80012a0:	6893      	ldr	r3, [r2, #8]
 80012a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80012a4:	430b      	orrs	r3, r1
 80012a6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012a8:	6802      	ldr	r2, [r0, #0]
 80012aa:	6893      	ldr	r3, [r2, #8]
 80012ac:	f023 0302 	bic.w	r3, r3, #2
 80012b0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012b2:	6802      	ldr	r2, [r0, #0]
 80012b4:	6893      	ldr	r3, [r2, #8]
 80012b6:	7e01      	ldrb	r1, [r0, #24]
 80012b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80012bc:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012be:	f890 3020 	ldrb.w	r3, [r0, #32]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d03f      	beq.n	8001346 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012c6:	6802      	ldr	r2, [r0, #0]
 80012c8:	6853      	ldr	r3, [r2, #4]
 80012ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012ce:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012d0:	6802      	ldr	r2, [r0, #0]
 80012d2:	6853      	ldr	r3, [r2, #4]
 80012d4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80012d8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012da:	6801      	ldr	r1, [r0, #0]
 80012dc:	684b      	ldr	r3, [r1, #4]
 80012de:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80012e0:	3a01      	subs	r2, #1
 80012e2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80012e6:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012e8:	6802      	ldr	r2, [r0, #0]
 80012ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80012ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80012f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012f2:	6801      	ldr	r1, [r0, #0]
 80012f4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80012f6:	69c2      	ldr	r2, [r0, #28]
 80012f8:	3a01      	subs	r2, #1
 80012fa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80012fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001300:	6802      	ldr	r2, [r0, #0]
 8001302:	6893      	ldr	r3, [r2, #8]
 8001304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001308:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800130a:	6802      	ldr	r2, [r0, #0]
 800130c:	6893      	ldr	r3, [r2, #8]
 800130e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001312:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001316:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001318:	6802      	ldr	r2, [r0, #0]
 800131a:	6893      	ldr	r3, [r2, #8]
 800131c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001320:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001322:	6802      	ldr	r2, [r0, #0]
 8001324:	6893      	ldr	r3, [r2, #8]
 8001326:	6941      	ldr	r1, [r0, #20]
 8001328:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800132c:	6093      	str	r3, [r2, #8]
}
 800132e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001330:	6802      	ldr	r2, [r0, #0]
 8001332:	6893      	ldr	r3, [r2, #8]
 8001334:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001338:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800133a:	6802      	ldr	r2, [r0, #0]
 800133c:	6893      	ldr	r3, [r2, #8]
 800133e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001342:	6093      	str	r3, [r2, #8]
 8001344:	e7b0      	b.n	80012a8 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001346:	6802      	ldr	r2, [r0, #0]
 8001348:	6853      	ldr	r3, [r2, #4]
 800134a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800134e:	6053      	str	r3, [r2, #4]
 8001350:	e7ca      	b.n	80012e8 <ADC_Init+0xc0>
 8001352:	bf00      	nop
 8001354:	40012300 	.word	0x40012300
 8001358:	0f000001 	.word	0x0f000001

0800135c <HAL_ADC_Init>:
  if(hadc == NULL)
 800135c:	b338      	cbz	r0, 80013ae <HAL_ADC_Init+0x52>
{
 800135e:	b510      	push	{r4, lr}
 8001360:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001362:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001364:	b143      	cbz	r3, 8001378 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001368:	f013 0f10 	tst.w	r3, #16
 800136c:	d00b      	beq.n	8001386 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800136e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001370:	2300      	movs	r3, #0
 8001372:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001376:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001378:	f008 faa0 	bl	80098bc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800137c:	2300      	movs	r3, #0
 800137e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001380:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001384:	e7ef      	b.n	8001366 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001388:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800138c:	f023 0302 	bic.w	r3, r3, #2
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001396:	4620      	mov	r0, r4
 8001398:	f7ff ff46 	bl	8001228 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800139c:	2000      	movs	r0, #0
 800139e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80013a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013a2:	f023 0303 	bic.w	r3, r3, #3
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6423      	str	r3, [r4, #64]	; 0x40
 80013ac:	e7e0      	b.n	8001370 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80013ae:	2001      	movs	r0, #1
}
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_ADC_Start_DMA>:
{
 80013b4:	b510      	push	{r4, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80013ba:	2200      	movs	r2, #0
 80013bc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80013be:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80013c2:	2a01      	cmp	r2, #1
 80013c4:	f000 80ae 	beq.w	8001524 <HAL_ADC_Start_DMA+0x170>
 80013c8:	4604      	mov	r4, r0
 80013ca:	2201      	movs	r2, #1
 80013cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013d0:	6802      	ldr	r2, [r0, #0]
 80013d2:	6890      	ldr	r0, [r2, #8]
 80013d4:	f010 0f01 	tst.w	r0, #1
 80013d8:	d113      	bne.n	8001402 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 80013da:	6890      	ldr	r0, [r2, #8]
 80013dc:	f040 0001 	orr.w	r0, r0, #1
 80013e0:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013e2:	4a53      	ldr	r2, [pc, #332]	; (8001530 <HAL_ADC_Start_DMA+0x17c>)
 80013e4:	6810      	ldr	r0, [r2, #0]
 80013e6:	4a53      	ldr	r2, [pc, #332]	; (8001534 <HAL_ADC_Start_DMA+0x180>)
 80013e8:	fba2 2000 	umull	r2, r0, r2, r0
 80013ec:	0c80      	lsrs	r0, r0, #18
 80013ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80013f2:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80013f4:	e002      	b.n	80013fc <HAL_ADC_Start_DMA+0x48>
      counter--;
 80013f6:	9801      	ldr	r0, [sp, #4]
 80013f8:	3801      	subs	r0, #1
 80013fa:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80013fc:	9801      	ldr	r0, [sp, #4]
 80013fe:	2800      	cmp	r0, #0
 8001400:	d1f9      	bne.n	80013f6 <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001402:	6822      	ldr	r2, [r4, #0]
 8001404:	6890      	ldr	r0, [r2, #8]
 8001406:	f410 7f80 	tst.w	r0, #256	; 0x100
 800140a:	d003      	beq.n	8001414 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800140c:	6890      	ldr	r0, [r2, #8]
 800140e:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8001412:	6090      	str	r0, [r2, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001414:	6822      	ldr	r2, [r4, #0]
 8001416:	6890      	ldr	r0, [r2, #8]
 8001418:	f010 0f01 	tst.w	r0, #1
 800141c:	d077      	beq.n	800150e <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 800141e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001420:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001424:	f020 0001 	bic.w	r0, r0, #1
 8001428:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800142c:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800142e:	6852      	ldr	r2, [r2, #4]
 8001430:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001434:	d005      	beq.n	8001442 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001436:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001438:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800143c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001440:	6422      	str	r2, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001442:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001444:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001448:	d036      	beq.n	80014b8 <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800144a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800144c:	f022 0206 	bic.w	r2, r2, #6
 8001450:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001452:	2200      	movs	r2, #0
 8001454:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001458:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800145a:	4837      	ldr	r0, [pc, #220]	; (8001538 <HAL_ADC_Start_DMA+0x184>)
 800145c:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800145e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001460:	4836      	ldr	r0, [pc, #216]	; (800153c <HAL_ADC_Start_DMA+0x188>)
 8001462:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001464:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001466:	4836      	ldr	r0, [pc, #216]	; (8001540 <HAL_ADC_Start_DMA+0x18c>)
 8001468:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001470:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001472:	6820      	ldr	r0, [r4, #0]
 8001474:	6842      	ldr	r2, [r0, #4]
 8001476:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800147a:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800147c:	6820      	ldr	r0, [r4, #0]
 800147e:	6882      	ldr	r2, [r0, #8]
 8001480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001484:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001486:	6820      	ldr	r0, [r4, #0]
 8001488:	460a      	mov	r2, r1
 800148a:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 800148e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001490:	f000 fc1c 	bl	8001ccc <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_ADC_Start_DMA+0x190>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f013 0f1f 	tst.w	r3, #31
 800149c:	d127      	bne.n	80014ee <HAL_ADC_Start_DMA+0x13a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	4a29      	ldr	r2, [pc, #164]	; (8001548 <HAL_ADC_Start_DMA+0x194>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d011      	beq.n	80014ca <HAL_ADC_Start_DMA+0x116>
 80014a6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_ADC_Start_DMA+0x10a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014ae:	4a27      	ldr	r2, [pc, #156]	; (800154c <HAL_ADC_Start_DMA+0x198>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d014      	beq.n	80014de <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 80014b4:	2000      	movs	r0, #0
 80014b6:	e033      	b.n	8001520 <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6462      	str	r2, [r4, #68]	; 0x44
 80014bc:	e7c9      	b.n	8001452 <HAL_ADC_Start_DMA+0x9e>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014be:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80014c2:	6852      	ldr	r2, [r2, #4]
 80014c4:	f012 0f1f 	tst.w	r2, #31
 80014c8:	d1f1      	bne.n	80014ae <HAL_ADC_Start_DMA+0xfa>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80014d0:	d12a      	bne.n	8001528 <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80014da:	2000      	movs	r0, #0
 80014dc:	e020      	b.n	8001520 <HAL_ADC_Start_DMA+0x16c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80014e2:	6852      	ldr	r2, [r2, #4]
 80014e4:	f012 0f10 	tst.w	r2, #16
 80014e8:	d0ef      	beq.n	80014ca <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
 80014ec:	e018      	b.n	8001520 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	4a15      	ldr	r2, [pc, #84]	; (8001548 <HAL_ADC_Start_DMA+0x194>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d001      	beq.n	80014fa <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 80014f6:	2000      	movs	r0, #0
 80014f8:	e012      	b.n	8001520 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001500:	d114      	bne.n	800152c <HAL_ADC_Start_DMA+0x178>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001508:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800150a:	2000      	movs	r0, #0
 800150c:	e008      	b.n	8001520 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001516:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800151e:	2000      	movs	r0, #0
}
 8001520:	b002      	add	sp, #8
 8001522:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001524:	2002      	movs	r0, #2
 8001526:	e7fb      	b.n	8001520 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 8001528:	2000      	movs	r0, #0
 800152a:	e7f9      	b.n	8001520 <HAL_ADC_Start_DMA+0x16c>
 800152c:	2000      	movs	r0, #0
 800152e:	e7f7      	b.n	8001520 <HAL_ADC_Start_DMA+0x16c>
 8001530:	20000020 	.word	0x20000020
 8001534:	431bde83 	.word	0x431bde83
 8001538:	08001575 	.word	0x08001575
 800153c:	08001553 	.word	0x08001553
 8001540:	0800155f 	.word	0x0800155f
 8001544:	40012300 	.word	0x40012300
 8001548:	40012000 	.word	0x40012000
 800154c:	40012200 	.word	0x40012200

08001550 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001550:	4770      	bx	lr

08001552 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001552:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001554:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001556:	f7ff fffb 	bl	8001550 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800155a:	bd08      	pop	{r3, pc}

0800155c <HAL_ADC_ErrorCallback>:
}
 800155c:	4770      	bx	lr

0800155e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800155e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001560:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001562:	2340      	movs	r3, #64	; 0x40
 8001564:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001566:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800156e:	f7ff fff5 	bl	800155c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001572:	bd08      	pop	{r3, pc}

08001574 <ADC_DMAConvCplt>:
{
 8001574:	b508      	push	{r3, lr}
 8001576:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001578:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800157a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800157c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001580:	d125      	bne.n	80015ce <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001582:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001588:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800158a:	6803      	ldr	r3, [r0, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001592:	d119      	bne.n	80015c8 <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001594:	7e02      	ldrb	r2, [r0, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001596:	b9ba      	cbnz	r2, 80015c8 <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800159a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800159e:	d003      	beq.n	80015a8 <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015a0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015a2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80015a6:	d10f      	bne.n	80015c8 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	f022 0220 	bic.w	r2, r2, #32
 80015ae:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b6:	6403      	str	r3, [r0, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015ba:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80015be:	d103      	bne.n	80015c8 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80015c8:	f009 fb02 	bl	800abd0 <HAL_ADC_ConvCpltCallback>
}
 80015cc:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80015d0:	f012 0f10 	tst.w	r2, #16
 80015d4:	d104      	bne.n	80015e0 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80015d6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80015d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015da:	4618      	mov	r0, r3
 80015dc:	4790      	blx	r2
}
 80015de:	e7f5      	b.n	80015cc <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80015e0:	f7ff ffbc 	bl	800155c <HAL_ADC_ErrorCallback>
 80015e4:	e7f2      	b.n	80015cc <ADC_DMAConvCplt+0x58>
	...

080015e8 <HAL_ADC_ConfigChannel>:
{
 80015e8:	b430      	push	{r4, r5}
 80015ea:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80015f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f000 80c0 	beq.w	800177a <HAL_ADC_ConfigChannel+0x192>
 80015fa:	2301      	movs	r3, #1
 80015fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001600:	680b      	ldr	r3, [r1, #0]
 8001602:	2b09      	cmp	r3, #9
 8001604:	d941      	bls.n	800168a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001606:	6804      	ldr	r4, [r0, #0]
 8001608:	68e2      	ldr	r2, [r4, #12]
 800160a:	b29b      	uxth	r3, r3
 800160c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001610:	3b1e      	subs	r3, #30
 8001612:	f04f 0c07 	mov.w	ip, #7
 8001616:	fa0c f303 	lsl.w	r3, ip, r3
 800161a:	ea22 0303 	bic.w	r3, r2, r3
 800161e:	60e3      	str	r3, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001620:	6804      	ldr	r4, [r0, #0]
 8001622:	68e2      	ldr	r2, [r4, #12]
 8001624:	880b      	ldrh	r3, [r1, #0]
 8001626:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800162a:	3b1e      	subs	r3, #30
 800162c:	688d      	ldr	r5, [r1, #8]
 800162e:	fa05 f303 	lsl.w	r3, r5, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001636:	684b      	ldr	r3, [r1, #4]
 8001638:	2b06      	cmp	r3, #6
 800163a:	d83d      	bhi.n	80016b8 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800163c:	6804      	ldr	r4, [r0, #0]
 800163e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001644:	3b05      	subs	r3, #5
 8001646:	f04f 0c1f 	mov.w	ip, #31
 800164a:	fa0c f303 	lsl.w	r3, ip, r3
 800164e:	ea22 0303 	bic.w	r3, r2, r3
 8001652:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001654:	6804      	ldr	r4, [r0, #0]
 8001656:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001658:	684b      	ldr	r3, [r1, #4]
 800165a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800165e:	3b05      	subs	r3, #5
 8001660:	f8b1 c000 	ldrh.w	ip, [r1]
 8001664:	fa0c f303 	lsl.w	r3, ip, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800166c:	6802      	ldr	r2, [r0, #0]
 800166e:	4b44      	ldr	r3, [pc, #272]	; (8001780 <HAL_ADC_ConfigChannel+0x198>)
 8001670:	429a      	cmp	r2, r3
 8001672:	d051      	beq.n	8001718 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001674:	6802      	ldr	r2, [r0, #0]
 8001676:	4b42      	ldr	r3, [pc, #264]	; (8001780 <HAL_ADC_ConfigChannel+0x198>)
 8001678:	429a      	cmp	r2, r3
 800167a:	d05a      	beq.n	8001732 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 800167c:	2300      	movs	r3, #0
 800167e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001682:	4618      	mov	r0, r3
}
 8001684:	b002      	add	sp, #8
 8001686:	bc30      	pop	{r4, r5}
 8001688:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800168a:	6804      	ldr	r4, [r0, #0]
 800168c:	6922      	ldr	r2, [r4, #16]
 800168e:	b29b      	uxth	r3, r3
 8001690:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001694:	f04f 0c07 	mov.w	ip, #7
 8001698:	fa0c f303 	lsl.w	r3, ip, r3
 800169c:	ea22 0303 	bic.w	r3, r2, r3
 80016a0:	6123      	str	r3, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016a2:	6804      	ldr	r4, [r0, #0]
 80016a4:	6922      	ldr	r2, [r4, #16]
 80016a6:	880b      	ldrh	r3, [r1, #0]
 80016a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016ac:	688d      	ldr	r5, [r1, #8]
 80016ae:	fa05 f303 	lsl.w	r3, r5, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	6123      	str	r3, [r4, #16]
 80016b6:	e7be      	b.n	8001636 <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13U)
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d816      	bhi.n	80016ea <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016bc:	6805      	ldr	r5, [r0, #0]
 80016be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80016c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016c4:	3b23      	subs	r3, #35	; 0x23
 80016c6:	241f      	movs	r4, #31
 80016c8:	fa04 f303 	lsl.w	r3, r4, r3
 80016cc:	ea22 0303 	bic.w	r3, r2, r3
 80016d0:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016d2:	6805      	ldr	r5, [r0, #0]
 80016d4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80016d6:	684b      	ldr	r3, [r1, #4]
 80016d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016dc:	3b23      	subs	r3, #35	; 0x23
 80016de:	880c      	ldrh	r4, [r1, #0]
 80016e0:	fa04 f303 	lsl.w	r3, r4, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	632b      	str	r3, [r5, #48]	; 0x30
 80016e8:	e7c0      	b.n	800166c <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ea:	6805      	ldr	r5, [r0, #0]
 80016ec:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80016ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016f2:	3b41      	subs	r3, #65	; 0x41
 80016f4:	241f      	movs	r4, #31
 80016f6:	fa04 f303 	lsl.w	r3, r4, r3
 80016fa:	ea22 0303 	bic.w	r3, r2, r3
 80016fe:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001700:	6805      	ldr	r5, [r0, #0]
 8001702:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001704:	684b      	ldr	r3, [r1, #4]
 8001706:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800170a:	3b41      	subs	r3, #65	; 0x41
 800170c:	880c      	ldrh	r4, [r1, #0]
 800170e:	fa04 f303 	lsl.w	r3, r4, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001716:	e7a9      	b.n	800166c <HAL_ADC_ConfigChannel+0x84>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001718:	680b      	ldr	r3, [r1, #0]
 800171a:	2b12      	cmp	r3, #18
 800171c:	d1aa      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x8c>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_ADC_ConfigChannel+0x19c>)
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001726:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	e7a0      	b.n	8001674 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001732:	680b      	ldr	r3, [r1, #0]
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <HAL_ADC_ConfigChannel+0x1a0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d001      	beq.n	800173e <HAL_ADC_ConfigChannel+0x156>
 800173a:	2b11      	cmp	r3, #17
 800173c:	d19e      	bne.n	800167c <HAL_ADC_ConfigChannel+0x94>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_ADC_ConfigChannel+0x19c>)
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001746:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800174e:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001750:	680a      	ldr	r2, [r1, #0]
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <HAL_ADC_ConfigChannel+0x1a0>)
 8001754:	429a      	cmp	r2, r3
 8001756:	d191      	bne.n	800167c <HAL_ADC_ConfigChannel+0x94>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_ADC_ConfigChannel+0x1a4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <HAL_ADC_ConfigChannel+0x1a8>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0c9b      	lsrs	r3, r3, #18
 8001764:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800176c:	9b01      	ldr	r3, [sp, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d084      	beq.n	800167c <HAL_ADC_ConfigChannel+0x94>
        counter--;
 8001772:	9b01      	ldr	r3, [sp, #4]
 8001774:	3b01      	subs	r3, #1
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	e7f8      	b.n	800176c <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 800177a:	2002      	movs	r0, #2
 800177c:	e782      	b.n	8001684 <HAL_ADC_ConfigChannel+0x9c>
 800177e:	bf00      	nop
 8001780:	40012000 	.word	0x40012000
 8001784:	40012300 	.word	0x40012300
 8001788:	10000012 	.word	0x10000012
 800178c:	20000020 	.word	0x20000020
 8001790:	431bde83 	.word	0x431bde83

08001794 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001794:	2800      	cmp	r0, #0
 8001796:	f000 80a1 	beq.w	80018dc <HAL_CAN_Init+0x148>
{
 800179a:	b538      	push	{r3, r4, r5, lr}
 800179c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800179e:	f890 3020 	ldrb.w	r3, [r0, #32]
 80017a2:	b1d3      	cbz	r3, 80017da <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017a4:	6822      	ldr	r2, [r4, #0]
 80017a6:	6813      	ldr	r3, [r2, #0]
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ae:	f7ff fd21 	bl	80011f4 <HAL_GetTick>
 80017b2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	f012 0f01 	tst.w	r2, #1
 80017bc:	d110      	bne.n	80017e0 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017be:	f7ff fd19 	bl	80011f4 <HAL_GetTick>
 80017c2:	1b40      	subs	r0, r0, r5
 80017c4:	280a      	cmp	r0, #10
 80017c6:	d9f5      	bls.n	80017b4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ce:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017d0:	2305      	movs	r3, #5
 80017d2:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80017d8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80017da:	f008 f995 	bl	8009b08 <HAL_CAN_MspInit>
 80017de:	e7e1      	b.n	80017a4 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f022 0202 	bic.w	r2, r2, #2
 80017e6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80017e8:	f7ff fd04 	bl	80011f4 <HAL_GetTick>
 80017ec:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	f012 0f02 	tst.w	r2, #2
 80017f6:	d00d      	beq.n	8001814 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017f8:	f7ff fcfc 	bl	80011f4 <HAL_GetTick>
 80017fc:	1b40      	subs	r0, r0, r5
 80017fe:	280a      	cmp	r0, #10
 8001800:	d9f5      	bls.n	80017ee <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800180a:	2305      	movs	r3, #5
 800180c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001810:	2001      	movs	r0, #1
 8001812:	e7e1      	b.n	80017d8 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001814:	7e22      	ldrb	r2, [r4, #24]
 8001816:	2a01      	cmp	r2, #1
 8001818:	d03d      	beq.n	8001896 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001820:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001822:	7e63      	ldrb	r3, [r4, #25]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d03b      	beq.n	80018a0 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001828:	6822      	ldr	r2, [r4, #0]
 800182a:	6813      	ldr	r3, [r2, #0]
 800182c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001830:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001832:	7ea3      	ldrb	r3, [r4, #26]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d039      	beq.n	80018ac <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001838:	6822      	ldr	r2, [r4, #0]
 800183a:	6813      	ldr	r3, [r2, #0]
 800183c:	f023 0320 	bic.w	r3, r3, #32
 8001840:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001842:	7ee3      	ldrb	r3, [r4, #27]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d037      	beq.n	80018b8 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001848:	6822      	ldr	r2, [r4, #0]
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	f043 0310 	orr.w	r3, r3, #16
 8001850:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001852:	7f23      	ldrb	r3, [r4, #28]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d035      	beq.n	80018c4 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001858:	6822      	ldr	r2, [r4, #0]
 800185a:	6813      	ldr	r3, [r2, #0]
 800185c:	f023 0308 	bic.w	r3, r3, #8
 8001860:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001862:	7f63      	ldrb	r3, [r4, #29]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d033      	beq.n	80018d0 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001868:	6822      	ldr	r2, [r4, #0]
 800186a:	6813      	ldr	r3, [r2, #0]
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001872:	68a3      	ldr	r3, [r4, #8]
 8001874:	68e2      	ldr	r2, [r4, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	6922      	ldr	r2, [r4, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	6962      	ldr	r2, [r4, #20]
 800187e:	4313      	orrs	r3, r2
 8001880:	6862      	ldr	r2, [r4, #4]
 8001882:	3a01      	subs	r2, #1
 8001884:	6821      	ldr	r1, [r4, #0]
 8001886:	4313      	orrs	r3, r2
 8001888:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800188a:	2000      	movs	r0, #0
 800188c:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800188e:	2301      	movs	r3, #1
 8001890:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001894:	e7a0      	b.n	80017d8 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e7c0      	b.n	8001822 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018a0:	6822      	ldr	r2, [r4, #0]
 80018a2:	6813      	ldr	r3, [r2, #0]
 80018a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e7c2      	b.n	8001832 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f043 0320 	orr.w	r3, r3, #32
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e7c4      	b.n	8001842 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018b8:	6822      	ldr	r2, [r4, #0]
 80018ba:	6813      	ldr	r3, [r2, #0]
 80018bc:	f023 0310 	bic.w	r3, r3, #16
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e7c6      	b.n	8001852 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e7c8      	b.n	8001862 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018d0:	6822      	ldr	r2, [r4, #0]
 80018d2:	6813      	ldr	r3, [r2, #0]
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e7ca      	b.n	8001872 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80018dc:	2001      	movs	r0, #1
}
 80018de:	4770      	bx	lr

080018e0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80018e0:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80018e8:	fa5f fc8c 	uxtb.w	ip, ip
 80018ec:	f1bc 0f01 	cmp.w	ip, #1
 80018f0:	f200 8095 	bhi.w	8001a1e <HAL_CAN_GetRxMessage+0x13e>
{
 80018f4:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018f6:	b951      	cbnz	r1, 800190e <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018f8:	6804      	ldr	r4, [r0, #0]
 80018fa:	68e4      	ldr	r4, [r4, #12]
 80018fc:	f014 0f03 	tst.w	r4, #3
 8001900:	d110      	bne.n	8001924 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001902:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001908:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 800190a:	2001      	movs	r0, #1
 800190c:	e077      	b.n	80019fe <HAL_CAN_GetRxMessage+0x11e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800190e:	6804      	ldr	r4, [r0, #0]
 8001910:	6924      	ldr	r4, [r4, #16]
 8001912:	f014 0f03 	tst.w	r4, #3
 8001916:	d105      	bne.n	8001924 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001918:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800191a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800191e:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8001920:	2001      	movs	r0, #1
 8001922:	e06c      	b.n	80019fe <HAL_CAN_GetRxMessage+0x11e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001924:	f101 041b 	add.w	r4, r1, #27
 8001928:	0124      	lsls	r4, r4, #4
 800192a:	6805      	ldr	r5, [r0, #0]
 800192c:	592c      	ldr	r4, [r5, r4]
 800192e:	f004 0404 	and.w	r4, r4, #4
 8001932:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001934:	2c00      	cmp	r4, #0
 8001936:	d164      	bne.n	8001a02 <HAL_CAN_GetRxMessage+0x122>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001938:	f101 041b 	add.w	r4, r1, #27
 800193c:	0124      	lsls	r4, r4, #4
 800193e:	6805      	ldr	r5, [r0, #0]
 8001940:	592c      	ldr	r4, [r5, r4]
 8001942:	0d64      	lsrs	r4, r4, #21
 8001944:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001946:	6804      	ldr	r4, [r0, #0]
 8001948:	f101 0c1b 	add.w	ip, r1, #27
 800194c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8001950:	f854 400c 	ldr.w	r4, [r4, ip]
 8001954:	f004 0402 	and.w	r4, r4, #2
 8001958:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800195a:	6804      	ldr	r4, [r0, #0]
 800195c:	4464      	add	r4, ip
 800195e:	6864      	ldr	r4, [r4, #4]
 8001960:	f004 040f 	and.w	r4, r4, #15
 8001964:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001966:	6804      	ldr	r4, [r0, #0]
 8001968:	4464      	add	r4, ip
 800196a:	6864      	ldr	r4, [r4, #4]
 800196c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8001970:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001972:	6804      	ldr	r4, [r0, #0]
 8001974:	4464      	add	r4, ip
 8001976:	6864      	ldr	r4, [r4, #4]
 8001978:	0c24      	lsrs	r4, r4, #16
 800197a:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800197c:	6802      	ldr	r2, [r0, #0]
 800197e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001982:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001986:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001988:	6802      	ldr	r2, [r0, #0]
 800198a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800198e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001992:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001996:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001998:	6802      	ldr	r2, [r0, #0]
 800199a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800199e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80019a2:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80019a6:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019a8:	6802      	ldr	r2, [r0, #0]
 80019aa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80019ae:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80019b2:	0e12      	lsrs	r2, r2, #24
 80019b4:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019b6:	6802      	ldr	r2, [r0, #0]
 80019b8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80019bc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80019c0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019c2:	6802      	ldr	r2, [r0, #0]
 80019c4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80019c8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80019cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80019d0:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019d2:	6802      	ldr	r2, [r0, #0]
 80019d4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80019d8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80019dc:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80019e0:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019e2:	6802      	ldr	r2, [r0, #0]
 80019e4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80019e8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80019ec:	0e12      	lsrs	r2, r2, #24
 80019ee:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019f0:	b979      	cbnz	r1, 8001a12 <HAL_CAN_GetRxMessage+0x132>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019f2:	6802      	ldr	r2, [r0, #0]
 80019f4:	68d3      	ldr	r3, [r2, #12]
 80019f6:	f043 0320 	orr.w	r3, r3, #32
 80019fa:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80019fc:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80019fe:	bc30      	pop	{r4, r5}
 8001a00:	4770      	bx	lr
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a02:	f101 041b 	add.w	r4, r1, #27
 8001a06:	0124      	lsls	r4, r4, #4
 8001a08:	6805      	ldr	r5, [r0, #0]
 8001a0a:	592c      	ldr	r4, [r5, r4]
 8001a0c:	08e4      	lsrs	r4, r4, #3
 8001a0e:	6054      	str	r4, [r2, #4]
 8001a10:	e799      	b.n	8001946 <HAL_CAN_GetRxMessage+0x66>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a12:	6802      	ldr	r2, [r0, #0]
 8001a14:	6913      	ldr	r3, [r2, #16]
 8001a16:	f043 0320 	orr.w	r3, r3, #32
 8001a1a:	6113      	str	r3, [r2, #16]
 8001a1c:	e7ee      	b.n	80019fc <HAL_CAN_GetRxMessage+0x11c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a24:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001a26:	2001      	movs	r0, #1
}
 8001a28:	4770      	bx	lr

08001a2a <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a2a:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d901      	bls.n	8001a3a <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 8001a36:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8001a38:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 8001a3a:	b921      	cbnz	r1, 8001a46 <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001a3c:	6803      	ldr	r3, [r0, #0]
 8001a3e:	68d8      	ldr	r0, [r3, #12]
 8001a40:	f000 0003 	and.w	r0, r0, #3
 8001a44:	4770      	bx	lr
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001a46:	6803      	ldr	r3, [r0, #0]
 8001a48:	6918      	ldr	r0, [r3, #16]
 8001a4a:	f000 0003 	and.w	r0, r0, #3
 8001a4e:	4770      	bx	lr

08001a50 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a52:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	0200      	lsls	r0, r0, #8
 8001a5e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a62:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001a6c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a74:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_NVIC_SetPriority+0x68>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7e:	f1c3 0c07 	rsb	ip, r3, #7
 8001a82:	f1bc 0f04 	cmp.w	ip, #4
 8001a86:	bf28      	it	cs
 8001a88:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8c:	f103 0e04 	add.w	lr, r3, #4
 8001a90:	f1be 0f06 	cmp.w	lr, #6
 8001a94:	d918      	bls.n	8001ac8 <HAL_NVIC_SetPriority+0x54>
 8001a96:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 3eff 	mov.w	lr, #4294967295
 8001a9c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001aa0:	ea21 010c 	bic.w	r1, r1, ip
 8001aa4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa6:	fa0e f303 	lsl.w	r3, lr, r3
 8001aaa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	db0b      	blt.n	8001acc <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	0109      	lsls	r1, r1, #4
 8001ab6:	b2c9      	uxtb	r1, r1
 8001ab8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001abc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ac0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ac4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e7e5      	b.n	8001a98 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	f000 000f 	and.w	r0, r0, #15
 8001ad0:	0109      	lsls	r1, r1, #4
 8001ad2:	b2c9      	uxtb	r1, r1
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <HAL_NVIC_SetPriority+0x6c>)
 8001ad6:	5419      	strb	r1, [r3, r0]
 8001ad8:	e7f4      	b.n	8001ac4 <HAL_NVIC_SetPriority+0x50>
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00
 8001ae0:	e000ed14 	.word	0xe000ed14

08001ae4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	db07      	blt.n	8001af8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae8:	f000 021f 	and.w	r2, r0, #31
 8001aec:	0940      	lsrs	r0, r0, #5
 8001aee:	2301      	movs	r3, #1
 8001af0:	4093      	lsls	r3, r2
 8001af2:	4a02      	ldr	r2, [pc, #8]	; (8001afc <HAL_NVIC_EnableIRQ+0x18>)
 8001af4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b00:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b02:	6805      	ldr	r5, [r0, #0]
 8001b04:	682c      	ldr	r4, [r5, #0]
 8001b06:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001b0a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b0c:	6804      	ldr	r4, [r0, #0]
 8001b0e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b10:	6883      	ldr	r3, [r0, #8]
 8001b12:	2b40      	cmp	r3, #64	; 0x40
 8001b14:	d005      	beq.n	8001b22 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001b16:	6803      	ldr	r3, [r0, #0]
 8001b18:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001b1a:	6803      	ldr	r3, [r0, #0]
 8001b1c:	60da      	str	r2, [r3, #12]
  }
}
 8001b1e:	bc30      	pop	{r4, r5}
 8001b20:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001b22:	6803      	ldr	r3, [r0, #0]
 8001b24:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001b26:	6803      	ldr	r3, [r0, #0]
 8001b28:	60d9      	str	r1, [r3, #12]
 8001b2a:	e7f8      	b.n	8001b1e <DMA_SetConfig+0x1e>

08001b2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b2c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b2e:	6803      	ldr	r3, [r0, #0]
 8001b30:	b2d9      	uxtb	r1, r3
 8001b32:	3910      	subs	r1, #16
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <DMA_CalcBaseAndBitshift+0x3c>)
 8001b36:	fba2 4201 	umull	r4, r2, r2, r1
 8001b3a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b3c:	4c0b      	ldr	r4, [pc, #44]	; (8001b6c <DMA_CalcBaseAndBitshift+0x40>)
 8001b3e:	5ca2      	ldrb	r2, [r4, r2]
 8001b40:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b42:	295f      	cmp	r1, #95	; 0x5f
 8001b44:	d909      	bls.n	8001b5a <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	3304      	adds	r3, #4
 8001b50:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001b52:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b58:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b5e:	f023 0303 	bic.w	r3, r3, #3
 8001b62:	6583      	str	r3, [r0, #88]	; 0x58
 8001b64:	e7f5      	b.n	8001b52 <DMA_CalcBaseAndBitshift+0x26>
 8001b66:	bf00      	nop
 8001b68:	aaaaaaab 	.word	0xaaaaaaab
 8001b6c:	0800f600 	.word	0x0800f600

08001b70 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b70:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b72:	6982      	ldr	r2, [r0, #24]
 8001b74:	b992      	cbnz	r2, 8001b9c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d00a      	beq.n	8001b90 <DMA_CheckFifoParam+0x20>
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d002      	beq.n	8001b84 <DMA_CheckFifoParam+0x14>
 8001b7e:	b10b      	cbz	r3, 8001b84 <DMA_CheckFifoParam+0x14>
 8001b80:	2000      	movs	r0, #0
 8001b82:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b86:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001b8a:	d128      	bne.n	8001bde <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b96:	d024      	beq.n	8001be2 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001b98:	2000      	movs	r0, #0
 8001b9a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b9c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001ba0:	d009      	beq.n	8001bb6 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d925      	bls.n	8001bf2 <DMA_CheckFifoParam+0x82>
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d125      	bne.n	8001bf6 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001baa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001bac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001bb0:	d123      	bne.n	8001bfa <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	4770      	bx	lr
    switch (tmp)
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d803      	bhi.n	8001bc2 <DMA_CheckFifoParam+0x52>
 8001bba:	e8df f003 	tbb	[pc, r3]
 8001bbe:	0414      	.short	0x0414
 8001bc0:	0a14      	.short	0x0a14
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001bc8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001bcc:	d10d      	bne.n	8001bea <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001bce:	2000      	movs	r0, #0
 8001bd0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bd2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001bd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bd8:	d009      	beq.n	8001bee <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001bda:	2000      	movs	r0, #0
 8001bdc:	4770      	bx	lr
        status = HAL_ERROR;
 8001bde:	2001      	movs	r0, #1
 8001be0:	4770      	bx	lr
        status = HAL_ERROR;
 8001be2:	2001      	movs	r0, #1
 8001be4:	4770      	bx	lr
      status = HAL_ERROR;
 8001be6:	2001      	movs	r0, #1
 8001be8:	4770      	bx	lr
        status = HAL_ERROR;
 8001bea:	2001      	movs	r0, #1
 8001bec:	4770      	bx	lr
        status = HAL_ERROR;
 8001bee:	2001      	movs	r0, #1
 8001bf0:	4770      	bx	lr
      status = HAL_ERROR;
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	4770      	bx	lr
    switch (tmp)
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001bfa:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_DMA_Init>:
{
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff faf6 	bl	80011f4 <HAL_GetTick>
  if(hdma == NULL)
 8001c08:	2c00      	cmp	r4, #0
 8001c0a:	d05b      	beq.n	8001cc4 <HAL_DMA_Init+0xc4>
 8001c0c:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001c14:	2300      	movs	r3, #0
 8001c16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001c1a:	6822      	ldr	r2, [r4, #0]
 8001c1c:	6813      	ldr	r3, [r2, #0]
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	f012 0f01 	tst.w	r2, #1
 8001c2c:	d00a      	beq.n	8001c44 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2e:	f7ff fae1 	bl	80011f4 <HAL_GetTick>
 8001c32:	1b43      	subs	r3, r0, r5
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d9f5      	bls.n	8001c24 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c38:	2320      	movs	r3, #32
 8001c3a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001c42:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001c44:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c46:	4820      	ldr	r0, [pc, #128]	; (8001cc8 <HAL_DMA_Init+0xc8>)
 8001c48:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c4a:	6861      	ldr	r1, [r4, #4]
 8001c4c:	68a2      	ldr	r2, [r4, #8]
 8001c4e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c50:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c54:	6921      	ldr	r1, [r4, #16]
 8001c56:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c58:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5c:	69a1      	ldr	r1, [r4, #24]
 8001c5e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c60:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c62:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c64:	6a21      	ldr	r1, [r4, #32]
 8001c66:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c68:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c6c:	2904      	cmp	r1, #4
 8001c6e:	d01e      	beq.n	8001cae <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001c70:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001c72:	6826      	ldr	r6, [r4, #0]
 8001c74:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c76:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c7c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d107      	bne.n	8001c92 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001c82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c84:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c88:	b11b      	cbz	r3, 8001c92 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7ff ff70 	bl	8001b70 <DMA_CheckFifoParam>
 8001c90:	b990      	cbnz	r0, 8001cb8 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001c92:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff ff49 	bl	8001b2c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c9a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c9c:	233f      	movs	r3, #63	; 0x3f
 8001c9e:	4093      	lsls	r3, r2
 8001ca0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001cac:	e7c9      	b.n	8001c42 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001cb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001cb2:	4301      	orrs	r1, r0
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	e7db      	b.n	8001c70 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb8:	2340      	movs	r3, #64	; 0x40
 8001cba:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001cc2:	e7be      	b.n	8001c42 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	e7bc      	b.n	8001c42 <HAL_DMA_Init+0x42>
 8001cc8:	f010803f 	.word	0xf010803f

08001ccc <HAL_DMA_Start_IT>:
{
 8001ccc:	b538      	push	{r3, r4, r5, lr}
 8001cce:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001cd2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001cd6:	2801      	cmp	r0, #1
 8001cd8:	d02b      	beq.n	8001d32 <HAL_DMA_Start_IT+0x66>
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ce0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001ce4:	b2c0      	uxtb	r0, r0
 8001ce6:	2801      	cmp	r0, #1
 8001ce8:	d004      	beq.n	8001cf4 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001cea:	2300      	movs	r3, #0
 8001cec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001cf0:	2002      	movs	r0, #2
}
 8001cf2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f7ff fefe 	bl	8001b00 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d06:	233f      	movs	r3, #63	; 0x3f
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d0c:	6822      	ldr	r2, [r4, #0]
 8001d0e:	6813      	ldr	r3, [r2, #0]
 8001d10:	f043 0316 	orr.w	r3, r3, #22
 8001d14:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d18:	b123      	cbz	r3, 8001d24 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d1a:	6822      	ldr	r2, [r4, #0]
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d24:	6822      	ldr	r2, [r4, #0]
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2e:	2000      	movs	r0, #0
 8001d30:	e7df      	b.n	8001cf2 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001d32:	2002      	movs	r0, #2
 8001d34:	e7dd      	b.n	8001cf2 <HAL_DMA_Start_IT+0x26>

08001d36 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d36:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d003      	beq.n	8001d48 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
 8001d46:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d48:	2305      	movs	r3, #5
 8001d4a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001d4e:	6802      	ldr	r2, [r0, #0]
 8001d50:	6813      	ldr	r3, [r2, #0]
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001d58:	2000      	movs	r0, #0
}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_DMA_IRQHandler>:
{
 8001d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d66:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <HAL_DMA_IRQHandler+0x1d4>)
 8001d68:	681d      	ldr	r5, [r3, #0]
 8001d6a:	4b72      	ldr	r3, [pc, #456]	; (8001f34 <HAL_DMA_IRQHandler+0x1d8>)
 8001d6c:	fba3 3505 	umull	r3, r5, r3, r5
 8001d70:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d72:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001d74:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d76:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d78:	2308      	movs	r3, #8
 8001d7a:	4093      	lsls	r3, r2
 8001d7c:	4233      	tst	r3, r6
 8001d7e:	d010      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d80:	6803      	ldr	r3, [r0, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f012 0f04 	tst.w	r2, #4
 8001d88:	d00b      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	f022 0204 	bic.w	r2, r2, #4
 8001d90:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d92:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d94:	2308      	movs	r3, #8
 8001d96:	4093      	lsls	r3, r2
 8001d98:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d9a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001da4:	2301      	movs	r3, #1
 8001da6:	4093      	lsls	r3, r2
 8001da8:	4233      	tst	r3, r6
 8001daa:	d009      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dac:	6822      	ldr	r2, [r4, #0]
 8001dae:	6952      	ldr	r2, [r2, #20]
 8001db0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001db4:	d004      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001db6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001db8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	4093      	lsls	r3, r2
 8001dc6:	4233      	tst	r3, r6
 8001dc8:	d009      	beq.n	8001dde <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	f012 0f02 	tst.w	r2, #2
 8001dd2:	d004      	beq.n	8001dde <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dd4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dd6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001de0:	2310      	movs	r3, #16
 8001de2:	4093      	lsls	r3, r2
 8001de4:	4233      	tst	r3, r6
 8001de6:	d024      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	f012 0f08 	tst.w	r2, #8
 8001df0:	d01f      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001df2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001dfc:	d00d      	beq.n	8001e1a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001e04:	d104      	bne.n	8001e10 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e08:	b19b      	cbz	r3, 8001e32 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	4798      	blx	r3
 8001e0e:	e010      	b.n	8001e32 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e12:	b173      	cbz	r3, 8001e32 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001e14:	4620      	mov	r0, r4
 8001e16:	4798      	blx	r3
 8001e18:	e00b      	b.n	8001e32 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001e20:	d103      	bne.n	8001e2a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	f022 0208 	bic.w	r2, r2, #8
 8001e28:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e2c:	b10b      	cbz	r3, 8001e32 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001e2e:	4620      	mov	r0, r4
 8001e30:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e34:	2320      	movs	r3, #32
 8001e36:	4093      	lsls	r3, r2
 8001e38:	4233      	tst	r3, r6
 8001e3a:	d055      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	f012 0f10 	tst.w	r2, #16
 8001e44:	d050      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e46:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e48:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d00e      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001e5a:	d033      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001e62:	d12a      	bne.n	8001eba <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001e64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d03e      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	4798      	blx	r3
 8001e6e:	e03b      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e70:	6822      	ldr	r2, [r4, #0]
 8001e72:	6813      	ldr	r3, [r2, #0]
 8001e74:	f023 0316 	bic.w	r3, r3, #22
 8001e78:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	6953      	ldr	r3, [r2, #20]
 8001e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e82:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e86:	b1a3      	cbz	r3, 8001eb2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	f023 0308 	bic.w	r3, r3, #8
 8001e90:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e94:	233f      	movs	r3, #63	; 0x3f
 8001e96:	4093      	lsls	r3, r2
 8001e98:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001ea6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d03f      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001eac:	4620      	mov	r0, r4
 8001eae:	4798      	blx	r3
        return;
 8001eb0:	e03c      	b.n	8001f2c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1e7      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x12c>
 8001eb8:	e7eb      	b.n	8001e92 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001eba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ebc:	b1a3      	cbz	r3, 8001ee8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4798      	blx	r3
 8001ec2:	e011      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001eca:	d109      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	f022 0210 	bic.w	r2, r2, #16
 8001ed2:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001eda:	2300      	movs	r3, #0
 8001edc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001ee0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ee2:	b10b      	cbz	r3, 8001ee8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ee8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001eea:	b1fb      	cbz	r3, 8001f2c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001eec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001eee:	f013 0f01 	tst.w	r3, #1
 8001ef2:	d017      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ef4:	2305      	movs	r3, #5
 8001ef6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001efa:	6822      	ldr	r2, [r4, #0]
 8001efc:	6813      	ldr	r3, [r2, #0]
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001f04:	9b01      	ldr	r3, [sp, #4]
 8001f06:	3301      	adds	r3, #1
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	42ab      	cmp	r3, r5
 8001f0c:	d804      	bhi.n	8001f18 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f013 0f01 	tst.w	r3, #1
 8001f16:	d1f5      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001f24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f26:	b10b      	cbz	r3, 8001f2c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001f28:	4620      	mov	r0, r4
 8001f2a:	4798      	blx	r3
}
 8001f2c:	b003      	add	sp, #12
 8001f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f30:	20000020 	.word	0x20000020
 8001f34:	1b4e81b5 	.word	0x1b4e81b5

08001f38 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001f38:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2b0f      	cmp	r3, #15
 8001f40:	f200 80de 	bhi.w	8002100 <HAL_GPIO_Init+0x1c4>
{
 8001f44:	b570      	push	{r4, r5, r6, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	e060      	b.n	800200c <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f4a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f4c:	005e      	lsls	r6, r3, #1
 8001f4e:	2403      	movs	r4, #3
 8001f50:	40b4      	lsls	r4, r6
 8001f52:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f56:	68cc      	ldr	r4, [r1, #12]
 8001f58:	40b4      	lsls	r4, r6
 8001f5a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001f5c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f60:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f64:	684c      	ldr	r4, [r1, #4]
 8001f66:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001f6e:	6042      	str	r2, [r0, #4]
 8001f70:	e05a      	b.n	8002028 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f72:	08dc      	lsrs	r4, r3, #3
 8001f74:	3408      	adds	r4, #8
 8001f76:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7a:	f003 0207 	and.w	r2, r3, #7
 8001f7e:	0095      	lsls	r5, r2, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	40aa      	lsls	r2, r5
 8001f84:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f88:	690a      	ldr	r2, [r1, #16]
 8001f8a:	40aa      	lsls	r2, r5
 8001f8c:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001f90:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001f94:	e05c      	b.n	8002050 <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f96:	2206      	movs	r2, #6
 8001f98:	e000      	b.n	8001f9c <HAL_GPIO_Init+0x60>
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001fa0:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa2:	3402      	adds	r4, #2
 8001fa4:	4d57      	ldr	r5, [pc, #348]	; (8002104 <HAL_GPIO_Init+0x1c8>)
 8001fa6:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001faa:	4a57      	ldr	r2, [pc, #348]	; (8002108 <HAL_GPIO_Init+0x1cc>)
 8001fac:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	ea6f 020c 	mvn.w	r2, ip
 8001fb2:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb6:	684e      	ldr	r6, [r1, #4]
 8001fb8:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001fbc:	d001      	beq.n	8001fc2 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8001fbe:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001fc2:	4c51      	ldr	r4, [pc, #324]	; (8002108 <HAL_GPIO_Init+0x1cc>)
 8001fc4:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001fc6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fcc:	684e      	ldr	r6, [r1, #4]
 8001fce:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001fd2:	d001      	beq.n	8001fd8 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8001fd4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001fd8:	4c4b      	ldr	r4, [pc, #300]	; (8002108 <HAL_GPIO_Init+0x1cc>)
 8001fda:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001fdc:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe2:	684e      	ldr	r6, [r1, #4]
 8001fe4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001fe8:	d001      	beq.n	8001fee <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8001fea:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001fee:	4c46      	ldr	r4, [pc, #280]	; (8002108 <HAL_GPIO_Init+0x1cc>)
 8001ff0:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff2:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff6:	684d      	ldr	r5, [r1, #4]
 8001ff8:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8001ffc:	d001      	beq.n	8002002 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8001ffe:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8002002:	4c41      	ldr	r4, [pc, #260]	; (8002108 <HAL_GPIO_Init+0x1cc>)
 8002004:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	3301      	adds	r3, #1
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d877      	bhi.n	80020fc <HAL_GPIO_Init+0x1c0>
    ioposition = 0x01U << position;
 800200c:	2201      	movs	r2, #1
 800200e:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002010:	680c      	ldr	r4, [r1, #0]
 8002012:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002016:	ea32 0404 	bics.w	r4, r2, r4
 800201a:	d1f4      	bne.n	8002006 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201c:	684c      	ldr	r4, [r1, #4]
 800201e:	f004 0403 	and.w	r4, r4, #3
 8002022:	3c01      	subs	r4, #1
 8002024:	2c01      	cmp	r4, #1
 8002026:	d990      	bls.n	8001f4a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002028:	684a      	ldr	r2, [r1, #4]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	2a03      	cmp	r2, #3
 8002030:	d009      	beq.n	8002046 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 8002032:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002034:	005d      	lsls	r5, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	40aa      	lsls	r2, r5
 800203a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203e:	688a      	ldr	r2, [r1, #8]
 8002040:	40aa      	lsls	r2, r5
 8002042:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002044:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	684a      	ldr	r2, [r1, #4]
 8002048:	f002 0203 	and.w	r2, r2, #3
 800204c:	2a02      	cmp	r2, #2
 800204e:	d090      	beq.n	8001f72 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8002050:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002052:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f20e 	lsl.w	r2, r2, lr
 800205c:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002060:	684a      	ldr	r2, [r1, #4]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	fa02 f20e 	lsl.w	r2, r2, lr
 800206a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800206c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800206e:	684a      	ldr	r2, [r1, #4]
 8002070:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8002074:	d0c7      	beq.n	8002006 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2200      	movs	r2, #0
 8002078:	9201      	str	r2, [sp, #4]
 800207a:	4a24      	ldr	r2, [pc, #144]	; (800210c <HAL_GPIO_Init+0x1d0>)
 800207c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800207e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002082:	6454      	str	r4, [r2, #68]	; 0x44
 8002084:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002086:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800208a:	9201      	str	r2, [sp, #4]
 800208c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800208e:	089c      	lsrs	r4, r3, #2
 8002090:	1ca5      	adds	r5, r4, #2
 8002092:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <HAL_GPIO_Init+0x1c8>)
 8002094:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002098:	f003 0203 	and.w	r2, r3, #3
 800209c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f20e 	lsl.w	r2, r2, lr
 80020a6:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020aa:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_GPIO_Init+0x1d4>)
 80020ac:	4290      	cmp	r0, r2
 80020ae:	f43f af74 	beq.w	8001f9a <HAL_GPIO_Init+0x5e>
 80020b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b6:	4290      	cmp	r0, r2
 80020b8:	d016      	beq.n	80020e8 <HAL_GPIO_Init+0x1ac>
 80020ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020be:	4290      	cmp	r0, r2
 80020c0:	d014      	beq.n	80020ec <HAL_GPIO_Init+0x1b0>
 80020c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020c6:	4290      	cmp	r0, r2
 80020c8:	d012      	beq.n	80020f0 <HAL_GPIO_Init+0x1b4>
 80020ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ce:	4290      	cmp	r0, r2
 80020d0:	d010      	beq.n	80020f4 <HAL_GPIO_Init+0x1b8>
 80020d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020d6:	4290      	cmp	r0, r2
 80020d8:	d00e      	beq.n	80020f8 <HAL_GPIO_Init+0x1bc>
 80020da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020de:	4290      	cmp	r0, r2
 80020e0:	f43f af59 	beq.w	8001f96 <HAL_GPIO_Init+0x5a>
 80020e4:	2207      	movs	r2, #7
 80020e6:	e759      	b.n	8001f9c <HAL_GPIO_Init+0x60>
 80020e8:	2201      	movs	r2, #1
 80020ea:	e757      	b.n	8001f9c <HAL_GPIO_Init+0x60>
 80020ec:	2202      	movs	r2, #2
 80020ee:	e755      	b.n	8001f9c <HAL_GPIO_Init+0x60>
 80020f0:	2203      	movs	r2, #3
 80020f2:	e753      	b.n	8001f9c <HAL_GPIO_Init+0x60>
 80020f4:	2204      	movs	r2, #4
 80020f6:	e751      	b.n	8001f9c <HAL_GPIO_Init+0x60>
 80020f8:	2205      	movs	r2, #5
 80020fa:	e74f      	b.n	8001f9c <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 80020fc:	b002      	add	sp, #8
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40013800 	.word	0x40013800
 8002108:	40013c00 	.word	0x40013c00
 800210c:	40023800 	.word	0x40023800
 8002110:	40020000 	.word	0x40020000

08002114 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002114:	6903      	ldr	r3, [r0, #16]
 8002116:	4219      	tst	r1, r3
 8002118:	d001      	beq.n	800211e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800211a:	2001      	movs	r0, #1
 800211c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002120:	4770      	bx	lr
	...

08002124 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002124:	b510      	push	{r4, lr}
 8002126:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_PWREx_EnableOverDrive+0x70>)
 800212e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002130:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_PWREx_EnableOverDrive+0x74>)
 8002142:	2201      	movs	r2, #1
 8002144:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 8002146:	f7ff f855 	bl	80011f4 <HAL_GetTick>
 800214a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_PWREx_EnableOverDrive+0x78>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002154:	d108      	bne.n	8002168 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002156:	f7ff f84d 	bl	80011f4 <HAL_GetTick>
 800215a:	1b00      	subs	r0, r0, r4
 800215c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002160:	d9f4      	bls.n	800214c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002162:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002164:	b002      	add	sp, #8
 8002166:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_PWREx_EnableOverDrive+0x74>)
 800216a:	2201      	movs	r2, #1
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 800216e:	f7ff f841 	bl	80011f4 <HAL_GetTick>
 8002172:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_PWREx_EnableOverDrive+0x78>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800217c:	d107      	bne.n	800218e <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800217e:	f7ff f839 	bl	80011f4 <HAL_GetTick>
 8002182:	1b00      	subs	r0, r0, r4
 8002184:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002188:	d9f4      	bls.n	8002174 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 800218a:	2003      	movs	r0, #3
 800218c:	e7ea      	b.n	8002164 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800218e:	2000      	movs	r0, #0
 8002190:	e7e8      	b.n	8002164 <HAL_PWREx_EnableOverDrive+0x40>
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	420e0000 	.word	0x420e0000
 800219c:	40007000 	.word	0x40007000

080021a0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021a0:	2800      	cmp	r0, #0
 80021a2:	f000 809b 	beq.w	80022dc <HAL_RCC_ClockConfig+0x13c>
{
 80021a6:	b570      	push	{r4, r5, r6, lr}
 80021a8:	460d      	mov	r5, r1
 80021aa:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4b4f      	ldr	r3, [pc, #316]	; (80022ec <HAL_RCC_ClockConfig+0x14c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	428b      	cmp	r3, r1
 80021b6:	d208      	bcs.n	80021ca <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b8:	b2cb      	uxtb	r3, r1
 80021ba:	4a4c      	ldr	r2, [pc, #304]	; (80022ec <HAL_RCC_ClockConfig+0x14c>)
 80021bc:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	6813      	ldr	r3, [r2, #0]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	428b      	cmp	r3, r1
 80021c6:	f040 808b 	bne.w	80022e0 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	f013 0f02 	tst.w	r3, #2
 80021d0:	d017      	beq.n	8002202 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d2:	f013 0f04 	tst.w	r3, #4
 80021d6:	d004      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d8:	4a45      	ldr	r2, [pc, #276]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 80021da:	6893      	ldr	r3, [r2, #8]
 80021dc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021e0:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	f013 0f08 	tst.w	r3, #8
 80021e8:	d004      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ea:	4a41      	ldr	r2, [pc, #260]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 80021ec:	6893      	ldr	r3, [r2, #8]
 80021ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4a3e      	ldr	r2, [pc, #248]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 80021f6:	6893      	ldr	r3, [r2, #8]
 80021f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021fc:	68a1      	ldr	r1, [r4, #8]
 80021fe:	430b      	orrs	r3, r1
 8002200:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	f013 0f01 	tst.w	r3, #1
 8002208:	d032      	beq.n	8002270 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	6863      	ldr	r3, [r4, #4]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d021      	beq.n	8002254 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002210:	1e9a      	subs	r2, r3, #2
 8002212:	2a01      	cmp	r2, #1
 8002214:	d925      	bls.n	8002262 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4a36      	ldr	r2, [pc, #216]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	f012 0f02 	tst.w	r2, #2
 800221e:	d061      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002220:	4933      	ldr	r1, [pc, #204]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 8002222:	688a      	ldr	r2, [r1, #8]
 8002224:	f022 0203 	bic.w	r2, r2, #3
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800222c:	f7fe ffe2 	bl	80011f4 <HAL_GetTick>
 8002230:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	6862      	ldr	r2, [r4, #4]
 800223c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002240:	d016      	beq.n	8002270 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002242:	f7fe ffd7 	bl	80011f4 <HAL_GetTick>
 8002246:	1b80      	subs	r0, r0, r6
 8002248:	f241 3388 	movw	r3, #5000	; 0x1388
 800224c:	4298      	cmp	r0, r3
 800224e:	d9f0      	bls.n	8002232 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8002250:	2003      	movs	r0, #3
 8002252:	e042      	b.n	80022da <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800225c:	d1e0      	bne.n	8002220 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800225e:	2001      	movs	r0, #1
 8002260:	e03b      	b.n	80022da <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800226a:	d1d9      	bne.n	8002220 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800226c:	2001      	movs	r0, #1
 800226e:	e034      	b.n	80022da <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_ClockConfig+0x14c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	42ab      	cmp	r3, r5
 800227a:	d907      	bls.n	800228c <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227c:	b2ea      	uxtb	r2, r5
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_ClockConfig+0x14c>)
 8002280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	42ab      	cmp	r3, r5
 800228a:	d12d      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	f013 0f04 	tst.w	r3, #4
 8002292:	d006      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002294:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 8002296:	6893      	ldr	r3, [r2, #8]
 8002298:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800229c:	68e1      	ldr	r1, [r4, #12]
 800229e:	430b      	orrs	r3, r1
 80022a0:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	f013 0f08 	tst.w	r3, #8
 80022a8:	d007      	beq.n	80022ba <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022aa:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 80022ac:	6893      	ldr	r3, [r2, #8]
 80022ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80022b2:	6921      	ldr	r1, [r4, #16]
 80022b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022b8:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 fa9f 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x154>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	40d8      	lsrs	r0, r3
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x158>)
 80022ce:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_ClockConfig+0x15c>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	f008 faa6 	bl	800a824 <HAL_InitTick>

  return HAL_OK;
 80022d8:	2000      	movs	r0, #0
}
 80022da:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80022dc:	2001      	movs	r0, #1
}
 80022de:	4770      	bx	lr
      return HAL_ERROR;
 80022e0:	2001      	movs	r0, #1
 80022e2:	e7fa      	b.n	80022da <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80022e4:	2001      	movs	r0, #1
 80022e6:	e7f8      	b.n	80022da <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80022e8:	2001      	movs	r0, #1
 80022ea:	e7f6      	b.n	80022da <HAL_RCC_ClockConfig+0x13a>
 80022ec:	40023c00 	.word	0x40023c00
 80022f0:	40023800 	.word	0x40023800
 80022f4:	0800fab0 	.word	0x0800fab0
 80022f8:	20000020 	.word	0x20000020
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002300:	4b01      	ldr	r3, [pc, #4]	; (8002308 <HAL_RCC_GetHCLKFreq+0x8>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000020 	.word	0x20000020

0800230c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800230c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800230e:	f7ff fff7 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800231a:	4a03      	ldr	r2, [pc, #12]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800231c:	5cd3      	ldrb	r3, [r2, r3]
}
 800231e:	40d8      	lsrs	r0, r3
 8002320:	bd08      	pop	{r3, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	0800fac0 	.word	0x0800fac0

0800232c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800232c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800232e:	f7ff ffe7 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800233a:	4a03      	ldr	r2, [pc, #12]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
}
 800233e:	40d8      	lsrs	r0, r3
 8002340:	bd08      	pop	{r3, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	0800fac0 	.word	0x0800fac0

0800234c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800234c:	230f      	movs	r3, #15
 800234e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_GetClockConfig+0x34>)
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	f002 0203 	and.w	r2, r2, #3
 8002358:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002360:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002368:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002372:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_GetClockConfig+0x38>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	600b      	str	r3, [r1, #0]
}
 800237e:	4770      	bx	lr
 8002380:	40023800 	.word	0x40023800
 8002384:	40023c00 	.word	0x40023c00

08002388 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238a:	b083      	sub	sp, #12
 800238c:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800238e:	6806      	ldr	r6, [r0, #0]
 8002390:	f016 0601 	ands.w	r6, r6, #1
 8002394:	d00d      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002396:	4a96      	ldr	r2, [pc, #600]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002398:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800239c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023a0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80023a2:	430b      	orrs	r3, r1
 80023a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80023a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 809b 	beq.w	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  uint32_t plli2sused = 0U;
 80023b0:	2600      	movs	r6, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	f013 0f02 	tst.w	r3, #2
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80023ba:	4a8d      	ldr	r2, [pc, #564]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023bc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80023c0:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80023c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80023c6:	430b      	orrs	r3, r1
 80023c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80023cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023ce:	b903      	cbnz	r3, 80023d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 80023d0:	2601      	movs	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023d2:	6825      	ldr	r5, [r4, #0]
 80023d4:	f015 0504 	ands.w	r5, r5, #4
 80023d8:	d00f      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023da:	4a85      	ldr	r2, [pc, #532]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023dc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80023e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80023e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80023e6:	430b      	orrs	r3, r1
 80023e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023f2:	d07a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d07a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  uint32_t pllsaiused = 0U;
 80023f8:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	f013 0f08 	tst.w	r3, #8
 8002400:	d00e      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002402:	4a7b      	ldr	r2, [pc, #492]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002404:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002408:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800240c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800240e:	430b      	orrs	r3, r1
 8002410:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241a:	d06a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800241c:	b903      	cbnz	r3, 8002420 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      pllsaiused = 1U;
 800241e:	2501      	movs	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	f013 0f20 	tst.w	r3, #32
 8002426:	d166      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	f013 0f10 	tst.w	r3, #16
 800242e:	d004      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002430:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8002434:	4b6f      	ldr	r3, [pc, #444]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002436:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002440:	d008      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002442:	4a6b      	ldr	r2, [pc, #428]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002444:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002448:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800244c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800244e:	430b      	orrs	r3, r1
 8002450:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	f013 0f40 	tst.w	r3, #64	; 0x40
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800245c:	4a64      	ldr	r2, [pc, #400]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800245e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002462:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002466:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002468:	430b      	orrs	r3, r1
 800246a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002474:	d00d      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002476:	4a5e      	ldr	r2, [pc, #376]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002478:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800247c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002480:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002482:	430b      	orrs	r3, r1
 8002484:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002488:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800248a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248e:	f000 809b 	beq.w	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002498:	d008      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800249a:	4a55      	ldr	r2, [pc, #340]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800249c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80024a6:	430b      	orrs	r3, r1
 80024a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024b2:	d00c      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80024b4:	4a4e      	ldr	r2, [pc, #312]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024b6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80024ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80024be:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80024c0:	430b      	orrs	r3, r1
 80024c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80024c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024cc:	d07e      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d17c      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x244>
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024d8:	d078      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80024da:	2d01      	cmp	r5, #1
 80024dc:	f000 8125 	beq.w	800272a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80024e0:	2000      	movs	r0, #0
}
 80024e2:	b003      	add	sp, #12
 80024e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1U;
 80024e6:	2601      	movs	r6, #1
 80024e8:	e763      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1U;
 80024ea:	2601      	movs	r6, #1
 80024ec:	e782      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      pllsaiused = 1U;
 80024ee:	2501      	movs	r5, #1
 80024f0:	e783      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      plli2sused = 1U;
 80024f2:	2601      	movs	r6, #1
 80024f4:	e792      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x94>
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800250e:	4a3a      	ldr	r2, [pc, #232]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002510:	6813      	ldr	r3, [r2, #0]
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002518:	f7fe fe6c 	bl	80011f4 <HAL_GetTick>
 800251c:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002526:	d106      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002528:	f7fe fe64 	bl	80011f4 <HAL_GetTick>
 800252c:	1bc0      	subs	r0, r0, r7
 800252e:	2802      	cmp	r0, #2
 8002530:	d9f5      	bls.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x196>
        return HAL_TIMEOUT;
 8002532:	2003      	movs	r0, #3
 8002534:	e7d5      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800253a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800253e:	d014      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002540:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002542:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002546:	429a      	cmp	r2, r3
 8002548:	d00f      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800254a:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800254c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800254e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002552:	492a      	ldr	r1, [pc, #168]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002554:	2001      	movs	r0, #1
 8002556:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 800255a:	2000      	movs	r0, #0
 800255c:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8002560:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	f013 0f01 	tst.w	r3, #1
 8002568:	d112      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800256a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800256c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002570:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002574:	d01d      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002578:	6893      	ldr	r3, [r2, #8]
 800257a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800257e:	6093      	str	r3, [r2, #8]
 8002580:	491b      	ldr	r1, [pc, #108]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002582:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002584:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002586:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800258a:	4313      	orrs	r3, r2
 800258c:	670b      	str	r3, [r1, #112]	; 0x70
 800258e:	e74b      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        tickstart = HAL_GetTick();
 8002590:	f7fe fe30 	bl	80011f4 <HAL_GetTick>
 8002594:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	f013 0f02 	tst.w	r3, #2
 800259e:	d1e4      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a0:	f7fe fe28 	bl	80011f4 <HAL_GetTick>
 80025a4:	1bc0      	subs	r0, r0, r7
 80025a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80025aa:	4298      	cmp	r0, r3
 80025ac:	d9f3      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x20e>
            return HAL_TIMEOUT;
 80025ae:	2003      	movs	r0, #3
 80025b0:	e797      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b2:	490f      	ldr	r1, [pc, #60]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025b4:	688a      	ldr	r2, [r1, #8]
 80025b6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80025ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
 80025c6:	e7db      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      pllsaiused = 1U;
 80025c8:	2501      	movs	r5, #1
 80025ca:	e762      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_PLLI2S_DISABLE();
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80025d2:	f7fe fe0f 	bl	80011f4 <HAL_GetTick>
 80025d6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80025e0:	d00e      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025e2:	f7fe fe07 	bl	80011f4 <HAL_GetTick>
 80025e6:	1b80      	subs	r0, r0, r6
 80025e8:	2802      	cmp	r0, #2
 80025ea:	d9f5      	bls.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x250>
        return HAL_TIMEOUT;
 80025ec:	2003      	movs	r0, #3
 80025ee:	e778      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80025f0:	40023800 	.word	0x40023800
 80025f4:	42471000 	.word	0x42471000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42470000 	.word	0x42470000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	f013 0f01 	tst.w	r3, #1
 8002606:	d001      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002608:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800260a:	b122      	cbz	r2, 8002616 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800260c:	f013 0f02 	tst.w	r3, #2
 8002610:	d015      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002612:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002614:	b99b      	cbnz	r3, 800263e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002616:	4a77      	ldr	r2, [pc, #476]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002618:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800261c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002620:	6863      	ldr	r3, [r4, #4]
 8002622:	68a6      	ldr	r6, [r4, #8]
 8002624:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002628:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800262c:	4303      	orrs	r3, r0
 800262e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002632:	430b      	orrs	r3, r1
 8002634:	6961      	ldr	r1, [r4, #20]
 8002636:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800263a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	f013 0f04 	tst.w	r3, #4
 8002644:	d003      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8002646:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002648:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800264c:	d006      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800264e:	f013 0f08 	tst.w	r3, #8
 8002652:	d020      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x30e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002654:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265a:	d11c      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800265c:	4a65      	ldr	r2, [pc, #404]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800265e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002662:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002666:	6863      	ldr	r3, [r4, #4]
 8002668:	68a6      	ldr	r6, [r4, #8]
 800266a:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800266e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8002672:	4303      	orrs	r3, r0
 8002674:	6920      	ldr	r0, [r4, #16]
 8002676:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800267a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800267e:	430b      	orrs	r3, r1
 8002680:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002684:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002688:	f023 031f 	bic.w	r3, r3, #31
 800268c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800268e:	3901      	subs	r1, #1
 8002690:	430b      	orrs	r3, r1
 8002692:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800269c:	d003      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 800269e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a4:	d028      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80026ac:	d011      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026ae:	6863      	ldr	r3, [r4, #4]
 80026b0:	68a2      	ldr	r2, [r4, #8]
 80026b2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80026b6:	68e2      	ldr	r2, [r4, #12]
 80026b8:	0852      	lsrs	r2, r2, #1
 80026ba:	3a01      	subs	r2, #1
 80026bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80026c0:	6922      	ldr	r2, [r4, #16]
 80026c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80026c6:	6962      	ldr	r2, [r4, #20]
 80026c8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80026cc:	4a49      	ldr	r2, [pc, #292]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80026ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80026d2:	4b49      	ldr	r3, [pc, #292]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80026d8:	f7fe fd8c 	bl	80011f4 <HAL_GetTick>
 80026dc:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026de:	4b45      	ldr	r3, [pc, #276]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80026e6:	f47f aef8 	bne.w	80024da <HAL_RCCEx_PeriphCLKConfig+0x152>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80026ea:	f7fe fd83 	bl	80011f4 <HAL_GetTick>
 80026ee:	1b80      	subs	r0, r0, r6
 80026f0:	2802      	cmp	r0, #2
 80026f2:	d9f4      	bls.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x356>
        return HAL_TIMEOUT;
 80026f4:	2003      	movs	r0, #3
 80026f6:	e6f4      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026f8:	483e      	ldr	r0, [pc, #248]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80026fa:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80026fe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002702:	1c5a      	adds	r2, r3, #1
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002704:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002708:	6863      	ldr	r3, [r4, #4]
 800270a:	68a1      	ldr	r1, [r4, #8]
 800270c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002710:	68e1      	ldr	r1, [r4, #12]
 8002712:	0849      	lsrs	r1, r1, #1
 8002714:	3901      	subs	r1, #1
 8002716:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800271a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800271e:	f006 42e0 	and.w	r2, r6, #1879048192	; 0x70000000
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8002728:	e7bd      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_PLLSAI_DISABLE();
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800272c:	2200      	movs	r2, #0
 800272e:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8002730:	f7fe fd60 	bl	80011f4 <HAL_GetTick>
 8002734:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002736:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800273e:	d006      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002740:	f7fe fd58 	bl	80011f4 <HAL_GetTick>
 8002744:	1b40      	subs	r0, r0, r5
 8002746:	2802      	cmp	r0, #2
 8002748:	d9f5      	bls.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        return HAL_TIMEOUT;
 800274a:	2003      	movs	r0, #3
 800274c:	e6c9      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	f013 0f04 	tst.w	r3, #4
 8002754:	d001      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002756:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002758:	b122      	cbz	r2, 8002764 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 800275a:	f013 0f08 	tst.w	r3, #8
 800275e:	d01a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x40e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002762:	b9c3      	cbnz	r3, 8002796 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002764:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002766:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800276a:	69a3      	ldr	r3, [r4, #24]
 800276c:	69e0      	ldr	r0, [r4, #28]
 800276e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002772:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8002776:	430b      	orrs	r3, r1
 8002778:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800277a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800277e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002782:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002786:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800278a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800278c:	3901      	subs	r1, #1
 800278e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002792:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	f413 7f80 	tst.w	r3, #256	; 0x100
 800279c:	d003      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800279e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a4:	d011      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    __HAL_RCC_PLLSAI_ENABLE();
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 80027ac:	f7fe fd22 	bl	80011f4 <HAL_GetTick>
 80027b0:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80027ba:	d118      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x466>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80027bc:	f7fe fd1a 	bl	80011f4 <HAL_GetTick>
 80027c0:	1b00      	subs	r0, r0, r4
 80027c2:	2802      	cmp	r0, #2
 80027c4:	d9f5      	bls.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        return HAL_TIMEOUT;
 80027c6:	2003      	movs	r0, #3
 80027c8:	e68b      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027ca:	480a      	ldr	r0, [pc, #40]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80027cc:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80027d0:	69a3      	ldr	r3, [r4, #24]
 80027d2:	69e2      	ldr	r2, [r4, #28]
 80027d4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027d8:	6a22      	ldr	r2, [r4, #32]
 80027da:	0852      	lsrs	r2, r2, #1
 80027dc:	3a01      	subs	r2, #1
 80027de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80027e2:	f001 6270 	and.w	r2, r1, #251658240	; 0xf000000
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80027ec:	e7db      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  return HAL_OK;
 80027ee:	2000      	movs	r0, #0
 80027f0:	e677      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	42470000 	.word	0x42470000

080027fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027fe:	4b5c      	ldr	r3, [pc, #368]	; (8002970 <HAL_RCC_GetSysClockFreq+0x174>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b08      	cmp	r3, #8
 8002808:	d007      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x1e>
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d05b      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0xca>
 800280e:	2b04      	cmp	r3, #4
 8002810:	d001      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x1a>
 8002812:	4858      	ldr	r0, [pc, #352]	; (8002974 <HAL_RCC_GetSysClockFreq+0x178>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002814:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002816:	4858      	ldr	r0, [pc, #352]	; (8002978 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002818:	e7fc      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800281a:	4b55      	ldr	r3, [pc, #340]	; (8002970 <HAL_RCC_GetSysClockFreq+0x174>)
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002828:	d02a      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b51      	ldr	r3, [pc, #324]	; (8002970 <HAL_RCC_GetSysClockFreq+0x174>)
 800282c:	6859      	ldr	r1, [r3, #4]
 800282e:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002832:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002836:	ebb1 000c 	subs.w	r0, r1, ip
 800283a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800283e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002842:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002846:	0181      	lsls	r1, r0, #6
 8002848:	1a09      	subs	r1, r1, r0
 800284a:	eb63 030e 	sbc.w	r3, r3, lr
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002854:	00c9      	lsls	r1, r1, #3
 8002856:	eb11 0c0c 	adds.w	ip, r1, ip
 800285a:	f143 0300 	adc.w	r3, r3, #0
 800285e:	0259      	lsls	r1, r3, #9
 8002860:	2300      	movs	r3, #0
 8002862:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002866:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800286a:	f7fe fb1b 	bl	8000ea4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800286e:	4b40      	ldr	r3, [pc, #256]	; (8002970 <HAL_RCC_GetSysClockFreq+0x174>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800287a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800287e:	e7c9      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002880:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_RCC_GetSysClockFreq+0x174>)
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002888:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800288c:	ebb1 000c 	subs.w	r0, r1, ip
 8002890:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002894:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002898:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800289c:	0181      	lsls	r1, r0, #6
 800289e:	1a09      	subs	r1, r1, r0
 80028a0:	eb63 030e 	sbc.w	r3, r3, lr
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028aa:	00c9      	lsls	r1, r1, #3
 80028ac:	eb11 0c0c 	adds.w	ip, r1, ip
 80028b0:	f143 0300 	adc.w	r3, r3, #0
 80028b4:	0299      	lsls	r1, r3, #10
 80028b6:	2300      	movs	r3, #0
 80028b8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80028bc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80028c0:	f7fe faf0 	bl	8000ea4 <__aeabi_uldivmod>
 80028c4:	e7d3      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x72>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c6:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_RCC_GetSysClockFreq+0x174>)
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80028d4:	d028      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d6:	4b26      	ldr	r3, [pc, #152]	; (8002970 <HAL_RCC_GetSysClockFreq+0x174>)
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80028de:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80028e2:	ebb1 000c 	subs.w	r0, r1, ip
 80028e6:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80028ea:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80028ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028f2:	0181      	lsls	r1, r0, #6
 80028f4:	1a09      	subs	r1, r1, r0
 80028f6:	eb63 030e 	sbc.w	r3, r3, lr
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002900:	00c9      	lsls	r1, r1, #3
 8002902:	eb11 0c0c 	adds.w	ip, r1, ip
 8002906:	f143 0300 	adc.w	r3, r3, #0
 800290a:	0259      	lsls	r1, r3, #9
 800290c:	2300      	movs	r3, #0
 800290e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002912:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002916:	f7fe fac5 	bl	8000ea4 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_RCC_GetSysClockFreq+0x174>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8002922:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002926:	e775      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCC_GetSysClockFreq+0x174>)
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002930:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002934:	ebb1 000c 	subs.w	r0, r1, ip
 8002938:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800293c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002940:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002944:	0181      	lsls	r1, r0, #6
 8002946:	1a09      	subs	r1, r1, r0
 8002948:	eb63 030e 	sbc.w	r3, r3, lr
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002952:	00c9      	lsls	r1, r1, #3
 8002954:	eb11 0c0c 	adds.w	ip, r1, ip
 8002958:	f143 0300 	adc.w	r3, r3, #0
 800295c:	0299      	lsls	r1, r3, #10
 800295e:	2300      	movs	r3, #0
 8002960:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002964:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002968:	f7fe fa9c 	bl	8000ea4 <__aeabi_uldivmod>
 800296c:	e7d5      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x11e>
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	00f42400 	.word	0x00f42400
 8002978:	007a1200 	.word	0x007a1200

0800297c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297c:	2800      	cmp	r0, #0
 800297e:	f000 8201 	beq.w	8002d84 <HAL_RCC_OscConfig+0x408>
{
 8002982:	b570      	push	{r4, r5, r6, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002988:	6803      	ldr	r3, [r0, #0]
 800298a:	f013 0f01 	tst.w	r3, #1
 800298e:	d041      	beq.n	8002a14 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002990:	4b99      	ldr	r3, [pc, #612]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b04      	cmp	r3, #4
 800299a:	d032      	beq.n	8002a02 <HAL_RCC_OscConfig+0x86>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800299c:	4b96      	ldr	r3, [pc, #600]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d027      	beq.n	80029f8 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a8:	4b93      	ldr	r3, [pc, #588]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	d059      	beq.n	8002a68 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b4:	6863      	ldr	r3, [r4, #4]
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ba:	d05b      	beq.n	8002a74 <HAL_RCC_OscConfig+0xf8>
 80029bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c0:	d05e      	beq.n	8002a80 <HAL_RCC_OscConfig+0x104>
 80029c2:	4b8d      	ldr	r3, [pc, #564]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d4:	6863      	ldr	r3, [r4, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d05c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fc0b 	bl	80011f4 <HAL_GetTick>
 80029de:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e0:	4b85      	ldr	r3, [pc, #532]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029e8:	d114      	bne.n	8002a14 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ea:	f7fe fc03 	bl	80011f4 <HAL_GetTick>
 80029ee:	1b40      	subs	r0, r0, r5
 80029f0:	2864      	cmp	r0, #100	; 0x64
 80029f2:	d9f5      	bls.n	80029e0 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 80029f4:	2003      	movs	r0, #3
 80029f6:	e1cc      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029f8:	4b7f      	ldr	r3, [pc, #508]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002a00:	d0d2      	beq.n	80029a8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a02:	4b7d      	ldr	r3, [pc, #500]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a0a:	d003      	beq.n	8002a14 <HAL_RCC_OscConfig+0x98>
 8002a0c:	6863      	ldr	r3, [r4, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 81ba 	beq.w	8002d88 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	f013 0f02 	tst.w	r3, #2
 8002a1a:	d060      	beq.n	8002ade <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a1c:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f013 0f0c 	tst.w	r3, #12
 8002a24:	d04a      	beq.n	8002abc <HAL_RCC_OscConfig+0x140>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a26:	4b74      	ldr	r3, [pc, #464]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d03f      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x136>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a32:	4b71      	ldr	r3, [pc, #452]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a3a:	2b0c      	cmp	r3, #12
 8002a3c:	d069      	beq.n	8002b12 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a3e:	68e3      	ldr	r3, [r4, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d075      	beq.n	8002b30 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_OscConfig+0x280>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fbd3 	bl	80011f4 <HAL_GetTick>
 8002a4e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	4b69      	ldr	r3, [pc, #420]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f013 0f02 	tst.w	r3, #2
 8002a58:	d161      	bne.n	8002b1e <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7fe fbcb 	bl	80011f4 <HAL_GetTick>
 8002a5e:	1b40      	subs	r0, r0, r5
 8002a60:	2802      	cmp	r0, #2
 8002a62:	d9f5      	bls.n	8002a50 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002a64:	2003      	movs	r0, #3
 8002a66:	e194      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a68:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002a70:	d0a0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x38>
 8002a72:	e7c6      	b.n	8002a02 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a74:	4a60      	ldr	r2, [pc, #384]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a76:	6813      	ldr	r3, [r2, #0]
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e7a9      	b.n	80029d4 <HAL_RCC_OscConfig+0x58>
 8002a80:	4b5d      	ldr	r3, [pc, #372]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e79f      	b.n	80029d4 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8002a94:	f7fe fbae 	bl	80011f4 <HAL_GetTick>
 8002a98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002aa2:	d0b7      	beq.n	8002a14 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fba6 	bl	80011f4 <HAL_GetTick>
 8002aa8:	1b40      	subs	r0, r0, r5
 8002aaa:	2864      	cmp	r0, #100	; 0x64
 8002aac:	d9f5      	bls.n	8002a9a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002aae:	2003      	movs	r0, #3
 8002ab0:	e16f      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ab2:	4b51      	ldr	r3, [pc, #324]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002aba:	d1ba      	bne.n	8002a32 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abc:	4b4e      	ldr	r3, [pc, #312]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f013 0f02 	tst.w	r3, #2
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_OscConfig+0x152>
 8002ac6:	68e3      	ldr	r3, [r4, #12]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	f040 815f 	bne.w	8002d8c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4a4a      	ldr	r2, [pc, #296]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	6813      	ldr	r3, [r2, #0]
 8002ad2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ad6:	6921      	ldr	r1, [r4, #16]
 8002ad8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002adc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	f013 0f08 	tst.w	r3, #8
 8002ae4:	d049      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ae6:	6963      	ldr	r3, [r4, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d033      	beq.n	8002b54 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aec:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCC_OscConfig+0x280>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe fb7e 	bl	80011f4 <HAL_GetTick>
 8002af8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afe:	f013 0f02 	tst.w	r3, #2
 8002b02:	d13a      	bne.n	8002b7a <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b04:	f7fe fb76 	bl	80011f4 <HAL_GetTick>
 8002b08:	1b40      	subs	r0, r0, r5
 8002b0a:	2802      	cmp	r0, #2
 8002b0c:	d9f5      	bls.n	8002afa <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8002b0e:	2003      	movs	r0, #3
 8002b10:	e13f      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b1a:	d190      	bne.n	8002a3e <HAL_RCC_OscConfig+0xc2>
 8002b1c:	e7ce      	b.n	8002abc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4a36      	ldr	r2, [pc, #216]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b20:	6813      	ldr	r3, [r2, #0]
 8002b22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b26:	6921      	ldr	r1, [r4, #16]
 8002b28:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e7d6      	b.n	8002ade <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002b30:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <HAL_RCC_OscConfig+0x280>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b36:	f7fe fb5d 	bl	80011f4 <HAL_GetTick>
 8002b3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3c:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f013 0f02 	tst.w	r3, #2
 8002b44:	d0cb      	beq.n	8002ade <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe fb55 	bl	80011f4 <HAL_GetTick>
 8002b4a:	1b40      	subs	r0, r0, r5
 8002b4c:	2802      	cmp	r0, #2
 8002b4e:	d9f5      	bls.n	8002b3c <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8002b50:	2003      	movs	r0, #3
 8002b52:	e11e      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b54:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_RCC_OscConfig+0x280>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fb4a 	bl	80011f4 <HAL_GetTick>
 8002b60:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b62:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	f013 0f02 	tst.w	r3, #2
 8002b6a:	d006      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fb42 	bl	80011f4 <HAL_GetTick>
 8002b70:	1b40      	subs	r0, r0, r5
 8002b72:	2802      	cmp	r0, #2
 8002b74:	d9f5      	bls.n	8002b62 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8002b76:	2003      	movs	r0, #3
 8002b78:	e10b      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	f013 0f04 	tst.w	r3, #4
 8002b80:	d076      	beq.n	8002c70 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002b8a:	d133      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ba4:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_RCC_OscConfig+0x284>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002bae:	d029      	beq.n	8002c04 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	68a3      	ldr	r3, [r4, #8]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d03a      	beq.n	8002c2c <HAL_RCC_OscConfig+0x2b0>
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d03e      	beq.n	8002c38 <HAL_RCC_OscConfig+0x2bc>
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	671a      	str	r2, [r3, #112]	; 0x70
 8002bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc6:	f022 0204 	bic.w	r2, r2, #4
 8002bca:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bcc:	68a3      	ldr	r3, [r4, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d03c      	beq.n	8002c4c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fb0f 	bl	80011f4 <HAL_GetTick>
 8002bd6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	f013 0f02 	tst.w	r3, #2
 8002be0:	d145      	bne.n	8002c6e <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe fb07 	bl	80011f4 <HAL_GetTick>
 8002be6:	1b80      	subs	r0, r0, r6
 8002be8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bec:	4298      	cmp	r0, r3
 8002bee:	d9f3      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8002bf0:	2003      	movs	r0, #3
 8002bf2:	e0ce      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8002bf4:	2500      	movs	r5, #0
 8002bf6:	e7d6      	b.n	8002ba6 <HAL_RCC_OscConfig+0x22a>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	42470000 	.word	0x42470000
 8002c00:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c04:	4a6b      	ldr	r2, [pc, #428]	; (8002db4 <HAL_RCC_OscConfig+0x438>)
 8002c06:	6813      	ldr	r3, [r2, #0]
 8002c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002c0e:	f7fe faf1 	bl	80011f4 <HAL_GetTick>
 8002c12:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <HAL_RCC_OscConfig+0x438>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c1c:	d1c8      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fe fae9 	bl	80011f4 <HAL_GetTick>
 8002c22:	1b80      	subs	r0, r0, r6
 8002c24:	2802      	cmp	r0, #2
 8002c26:	d9f5      	bls.n	8002c14 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8002c28:	2003      	movs	r0, #3
 8002c2a:	e0b2      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	4a62      	ldr	r2, [pc, #392]	; (8002db8 <HAL_RCC_OscConfig+0x43c>)
 8002c2e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
 8002c36:	e7c9      	b.n	8002bcc <HAL_RCC_OscConfig+0x250>
 8002c38:	4b5f      	ldr	r3, [pc, #380]	; (8002db8 <HAL_RCC_OscConfig+0x43c>)
 8002c3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c3c:	f042 0204 	orr.w	r2, r2, #4
 8002c40:	671a      	str	r2, [r3, #112]	; 0x70
 8002c42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	671a      	str	r2, [r3, #112]	; 0x70
 8002c4a:	e7bf      	b.n	8002bcc <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe fad2 	bl	80011f4 <HAL_GetTick>
 8002c50:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <HAL_RCC_OscConfig+0x43c>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f013 0f02 	tst.w	r3, #2
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5c:	f7fe faca 	bl	80011f4 <HAL_GetTick>
 8002c60:	1b80      	subs	r0, r0, r6
 8002c62:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c66:	4298      	cmp	r0, r3
 8002c68:	d9f3      	bls.n	8002c52 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8002c6a:	2003      	movs	r0, #3
 8002c6c:	e091      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c6e:	b9ed      	cbnz	r5, 8002cac <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c70:	69a3      	ldr	r3, [r4, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 808c 	beq.w	8002d90 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c78:	4a4f      	ldr	r2, [pc, #316]	; (8002db8 <HAL_RCC_OscConfig+0x43c>)
 8002c7a:	6892      	ldr	r2, [r2, #8]
 8002c7c:	f002 020c 	and.w	r2, r2, #12
 8002c80:	2a08      	cmp	r2, #8
 8002c82:	d054      	beq.n	8002d2e <HAL_RCC_OscConfig+0x3b2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d017      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c88:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <HAL_RCC_OscConfig+0x440>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fab1 	bl	80011f4 <HAL_GetTick>
 8002c92:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c94:	4b48      	ldr	r3, [pc, #288]	; (8002db8 <HAL_RCC_OscConfig+0x43c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c9c:	d045      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe faa9 	bl	80011f4 <HAL_GetTick>
 8002ca2:	1b00      	subs	r0, r0, r4
 8002ca4:	2802      	cmp	r0, #2
 8002ca6:	d9f5      	bls.n	8002c94 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8002ca8:	2003      	movs	r0, #3
 8002caa:	e072      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	4a42      	ldr	r2, [pc, #264]	; (8002db8 <HAL_RCC_OscConfig+0x43c>)
 8002cae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	e7db      	b.n	8002c70 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002cb8:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <HAL_RCC_OscConfig+0x440>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fa99 	bl	80011f4 <HAL_GetTick>
 8002cc2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc4:	4b3c      	ldr	r3, [pc, #240]	; (8002db8 <HAL_RCC_OscConfig+0x43c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ccc:	d006      	beq.n	8002cdc <HAL_RCC_OscConfig+0x360>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fe fa91 	bl	80011f4 <HAL_GetTick>
 8002cd2:	1b40      	subs	r0, r0, r5
 8002cd4:	2802      	cmp	r0, #2
 8002cd6:	d9f5      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8002cd8:	2003      	movs	r0, #3
 8002cda:	e05a      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cdc:	69e3      	ldr	r3, [r4, #28]
 8002cde:	6a22      	ldr	r2, [r4, #32]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ce4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002ce8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002cea:	0852      	lsrs	r2, r2, #1
 8002cec:	3a01      	subs	r2, #1
 8002cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002cf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cf4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002cf8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002cfa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002cfe:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <HAL_RCC_OscConfig+0x43c>)
 8002d00:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <HAL_RCC_OscConfig+0x440>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002d08:	f7fe fa74 	bl	80011f4 <HAL_GetTick>
 8002d0c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	4b2a      	ldr	r3, [pc, #168]	; (8002db8 <HAL_RCC_OscConfig+0x43c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe fa6c 	bl	80011f4 <HAL_GetTick>
 8002d1c:	1b00      	subs	r0, r0, r4
 8002d1e:	2802      	cmp	r0, #2
 8002d20:	d9f5      	bls.n	8002d0e <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8002d22:	2003      	movs	r0, #3
 8002d24:	e035      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2000      	movs	r0, #0
 8002d28:	e033      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	e031      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d031      	beq.n	8002d96 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <HAL_RCC_OscConfig+0x43c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002d3a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3c:	4291      	cmp	r1, r2
 8002d3e:	d12c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d44:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	428a      	cmp	r2, r1
 8002d48:	d129      	bne.n	8002d9e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d4c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002d50:	401a      	ands	r2, r3
 8002d52:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002d56:	d124      	bne.n	8002da2 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d58:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002d5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002d5e:	0852      	lsrs	r2, r2, #1
 8002d60:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d62:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002d66:	d11e      	bne.n	8002da6 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8002d72:	d11a      	bne.n	8002daa <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d74:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002d78:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8002d7e:	d116      	bne.n	8002dae <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8002d80:	2000      	movs	r0, #0
 8002d82:	e006      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8002d84:	2001      	movs	r0, #1
}
 8002d86:	4770      	bx	lr
        return HAL_ERROR;
 8002d88:	2001      	movs	r0, #1
 8002d8a:	e002      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8002d90:	2000      	movs	r0, #0
}
 8002d92:	b002      	add	sp, #8
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002d96:	2001      	movs	r0, #1
 8002d98:	e7fb      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	e7f9      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
 8002d9e:	2001      	movs	r0, #1
 8002da0:	e7f7      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
 8002da2:	2001      	movs	r0, #1
 8002da4:	e7f5      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
 8002da6:	2001      	movs	r0, #1
 8002da8:	e7f3      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
 8002daa:	2001      	movs	r0, #1
 8002dac:	e7f1      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
 8002dae:	2001      	movs	r0, #1
 8002db0:	e7ef      	b.n	8002d92 <HAL_RCC_OscConfig+0x416>
 8002db2:	bf00      	nop
 8002db4:	40007000 	.word	0x40007000
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	42470000 	.word	0x42470000

08002dc0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002dc0:	b538      	push	{r3, r4, r5, lr}
 8002dc2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002dc4:	6802      	ldr	r2, [r0, #0]
 8002dc6:	68d3      	ldr	r3, [r2, #12]
 8002dc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dcc:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dce:	f7fe fa11 	bl	80011f4 <HAL_GetTick>
 8002dd2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f013 0f20 	tst.w	r3, #32
 8002ddc:	d107      	bne.n	8002dee <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dde:	f7fe fa09 	bl	80011f4 <HAL_GetTick>
 8002de2:	1b40      	subs	r0, r0, r5
 8002de4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002de8:	d9f4      	bls.n	8002dd4 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002dea:	2003      	movs	r0, #3
 8002dec:	e000      	b.n	8002df0 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8002dee:	2000      	movs	r0, #0
}
 8002df0:	bd38      	pop	{r3, r4, r5, pc}

08002df2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002df2:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002dfc:	d002      	beq.n	8002e04 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8002e00:	4628      	mov	r0, r5
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e0c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002e0e:	f7fe f9f1 	bl	80011f4 <HAL_GetTick>
 8002e12:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8002e14:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e1e:	d1ef      	bne.n	8002e00 <RTC_EnterInitMode+0xe>
 8002e20:	2d00      	cmp	r5, #0
 8002e22:	d1ed      	bne.n	8002e00 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e24:	f7fe f9e6 	bl	80011f4 <HAL_GetTick>
 8002e28:	1b83      	subs	r3, r0, r6
 8002e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e2e:	d9f2      	bls.n	8002e16 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e30:	2304      	movs	r3, #4
 8002e32:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 8002e34:	2501      	movs	r5, #1
 8002e36:	e7ee      	b.n	8002e16 <RTC_EnterInitMode+0x24>

08002e38 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e38:	6802      	ldr	r2, [r0, #0]
 8002e3a:	68d3      	ldr	r3, [r2, #12]
 8002e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e40:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002e42:	6803      	ldr	r3, [r0, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f013 0f20 	tst.w	r3, #32
 8002e4a:	d001      	beq.n	8002e50 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8002e4c:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8002e4e:	4770      	bx	lr
{
 8002e50:	b510      	push	{r4, lr}
 8002e52:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e54:	f7ff ffb4 	bl	8002dc0 <HAL_RTC_WaitForSynchro>
 8002e58:	b110      	cbz	r0, 8002e60 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8002e5e:	2001      	movs	r0, #1
}
 8002e60:	bd10      	pop	{r4, pc}

08002e62 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d041      	beq.n	8002eea <HAL_RTC_Init+0x88>
{
 8002e66:	b510      	push	{r4, lr}
 8002e68:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e6a:	7f43      	ldrb	r3, [r0, #29]
 8002e6c:	b1e3      	cbz	r3, 8002ea8 <HAL_RTC_Init+0x46>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	22ca      	movs	r2, #202	; 0xca
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	2253      	movs	r2, #83	; 0x53
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f7ff ffb7 	bl	8002df2 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002e84:	b1a0      	cbz	r0, 8002eb0 <HAL_RTC_Init+0x4e>
  if (status == HAL_OK)
 8002e86:	b958      	cbnz	r0, 8002ea0 <HAL_RTC_Init+0x3e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002e88:	6822      	ldr	r2, [r4, #0]
 8002e8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e96:	69a1      	ldr	r1, [r4, #24]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ea6:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002ea8:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002eaa:	f007 f82b 	bl	8009f04 <HAL_RTC_MspInit>
 8002eae:	e7de      	b.n	8002e6e <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002eb0:	6822      	ldr	r2, [r4, #0]
 8002eb2:	6893      	ldr	r3, [r2, #8]
 8002eb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebc:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ebe:	6821      	ldr	r1, [r4, #0]
 8002ec0:	688a      	ldr	r2, [r1, #8]
 8002ec2:	6863      	ldr	r3, [r4, #4]
 8002ec4:	6920      	ldr	r0, [r4, #16]
 8002ec6:	4303      	orrs	r3, r0
 8002ec8:	6960      	ldr	r0, [r4, #20]
 8002eca:	4303      	orrs	r3, r0
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	68e2      	ldr	r2, [r4, #12]
 8002ed4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	6913      	ldr	r3, [r2, #16]
 8002eda:	68a1      	ldr	r1, [r4, #8]
 8002edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ee0:	6113      	str	r3, [r2, #16]
    status = RTC_ExitInitMode(hrtc);
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f7ff ffa8 	bl	8002e38 <RTC_ExitInitMode>
 8002ee8:	e7cd      	b.n	8002e86 <HAL_RTC_Init+0x24>
    return HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
}
 8002eec:	4770      	bx	lr

08002eee <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;
 8002eee:	2300      	movs	r3, #0

  while (number >= 10U)
 8002ef0:	e003      	b.n	8002efa <RTC_ByteToBcd2+0xc>
  {
    bcdhigh++;
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
    number -= 10U;
 8002ef6:	380a      	subs	r0, #10
 8002ef8:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 8002efa:	2809      	cmp	r0, #9
 8002efc:	d8f9      	bhi.n	8002ef2 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	b2db      	uxtb	r3, r3
}
 8002f02:	4318      	orrs	r0, r3
 8002f04:	4770      	bx	lr

08002f06 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8002f06:	7f03      	ldrb	r3, [r0, #28]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d059      	beq.n	8002fc0 <HAL_RTC_SetTime+0xba>
{
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4604      	mov	r4, r0
 8002f10:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8002f12:	2301      	movs	r3, #1
 8002f14:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f16:	2302      	movs	r3, #2
 8002f18:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 8002f1a:	bb4a      	cbnz	r2, 8002f70 <HAL_RTC_SetTime+0x6a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f1c:	6803      	ldr	r3, [r0, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f24:	d101      	bne.n	8002f2a <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f2a:	7830      	ldrb	r0, [r6, #0]
 8002f2c:	f7ff ffdf 	bl	8002eee <RTC_ByteToBcd2>
 8002f30:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f32:	7870      	ldrb	r0, [r6, #1]
 8002f34:	f7ff ffdb 	bl	8002eee <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f38:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002f3c:	78b0      	ldrb	r0, [r6, #2]
 8002f3e:	f7ff ffd6 	bl	8002eee <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f42:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002f44:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f46:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	22ca      	movs	r2, #202	; 0xca
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	2253      	movs	r2, #83	; 0x53
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8002f56:	4620      	mov	r0, r4
 8002f58:	f7ff ff4b 	bl	8002df2 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002f5c:	b1d0      	cbz	r0, 8002f94 <HAL_RTC_SetTime+0x8e>
  if (status == HAL_OK)
 8002f5e:	b908      	cbnz	r0, 8002f64 <HAL_RTC_SetTime+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 8002f60:	2301      	movs	r3, #1
 8002f62:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	22ff      	movs	r2, #255	; 0xff
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	7723      	strb	r3, [r4, #28]
}
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f70:	6803      	ldr	r3, [r0, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f78:	d101      	bne.n	8002f7e <HAL_RTC_SetTime+0x78>
      sTime->TimeFormat = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f7e:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002f80:	7875      	ldrb	r5, [r6, #1]
 8002f82:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f84:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 8002f88:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002f8a:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f8c:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f8e:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
 8002f92:	e7da      	b.n	8002f4a <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002f9a:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002f9e:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002fa0:	6822      	ldr	r2, [r4, #0]
 8002fa2:	6893      	ldr	r3, [r2, #8]
 8002fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa8:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002faa:	6821      	ldr	r1, [r4, #0]
 8002fac:	688b      	ldr	r3, [r1, #8]
 8002fae:	68f2      	ldr	r2, [r6, #12]
 8002fb0:	6930      	ldr	r0, [r6, #16]
 8002fb2:	4302      	orrs	r2, r0
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f7ff ff3d 	bl	8002e38 <RTC_ExitInitMode>
 8002fbe:	e7ce      	b.n	8002f5e <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 8002fc0:	2002      	movs	r0, #2
}
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8002fc4:	7f03      	ldrb	r3, [r0, #28]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d048      	beq.n	800305c <HAL_RTC_SetDate+0x98>
{
 8002fca:	b570      	push	{r4, r5, r6, lr}
 8002fcc:	4604      	mov	r4, r0
 8002fce:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002fd8:	b93a      	cbnz	r2, 8002fea <HAL_RTC_SetDate+0x26>
 8002fda:	784b      	ldrb	r3, [r1, #1]
 8002fdc:	f013 0f10 	tst.w	r3, #16
 8002fe0:	d003      	beq.n	8002fea <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002fe2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002fe6:	330a      	adds	r3, #10
 8002fe8:	704b      	strb	r3, [r1, #1]
  if (Format == RTC_FORMAT_BIN)
 8002fea:	bb12      	cbnz	r2, 8003032 <HAL_RTC_SetDate+0x6e>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fec:	78f0      	ldrb	r0, [r6, #3]
 8002fee:	f7ff ff7e 	bl	8002eee <RTC_ByteToBcd2>
 8002ff2:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ff4:	7870      	ldrb	r0, [r6, #1]
 8002ff6:	f7ff ff7a 	bl	8002eee <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ffa:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002ffe:	78b0      	ldrb	r0, [r6, #2]
 8003000:	f7ff ff75 	bl	8002eee <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003004:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003006:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003008:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	22ca      	movs	r2, #202	; 0xca
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	2253      	movs	r2, #83	; 0x53
 8003016:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003018:	4620      	mov	r0, r4
 800301a:	f7ff feea 	bl	8002df2 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800301e:	b198      	cbz	r0, 8003048 <HAL_RTC_SetDate+0x84>
  if (status == HAL_OK)
 8003020:	b908      	cbnz	r0, 8003026 <HAL_RTC_SetDate+0x62>
    hrtc->State = HAL_RTC_STATE_READY;
 8003022:	2301      	movs	r3, #1
 8003024:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800302c:	2300      	movs	r3, #0
 800302e:	7723      	strb	r3, [r4, #28]
}
 8003030:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003032:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003034:	7875      	ldrb	r5, [r6, #1]
 8003036:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003038:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 800303c:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800303e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003040:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003042:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8003046:	e7e1      	b.n	800300c <HAL_RTC_SetDate+0x48>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800304e:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8003052:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8003054:	4620      	mov	r0, r4
 8003056:	f7ff feef 	bl	8002e38 <RTC_ExitInitMode>
 800305a:	e7e1      	b.n	8003020 <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 800305c:	2002      	movs	r0, #2
}
 800305e:	4770      	bx	lr

08003060 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint8_t tmp = 0U;
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003060:	0903      	lsrs	r3, r0, #4
 8003062:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 8003066:	f000 000f 	and.w	r0, r0, #15
 800306a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800306e:	b2c0      	uxtb	r0, r0
 8003070:	4770      	bx	lr

08003072 <HAL_RTC_GetTime>:
{
 8003072:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003074:	6803      	ldr	r3, [r0, #0]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800307a:	6803      	ldr	r3, [r0, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003082:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003084:	6803      	ldr	r3, [r0, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003088:	f3c3 4005 	ubfx	r0, r3, #16, #6
 800308c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800308e:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8003092:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003094:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 8003098:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800309a:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800309e:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 80030a0:	b95a      	cbnz	r2, 80030ba <HAL_RTC_GetTime+0x48>
 80030a2:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80030a4:	f7ff ffdc 	bl	8003060 <RTC_Bcd2ToByte>
 80030a8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80030aa:	4630      	mov	r0, r6
 80030ac:	f7ff ffd8 	bl	8003060 <RTC_Bcd2ToByte>
 80030b0:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80030b2:	4628      	mov	r0, r5
 80030b4:	f7ff ffd4 	bl	8003060 <RTC_Bcd2ToByte>
 80030b8:	70a0      	strb	r0, [r4, #2]
}
 80030ba:	2000      	movs	r0, #0
 80030bc:	bd70      	pop	{r4, r5, r6, pc}

080030be <SD_DMATransmitCplt>:
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80030be:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80030ca:	4770      	bx	lr

080030cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80030d6:	6800      	ldr	r0, [r0, #0]
 80030d8:	f001 fcd5 	bl	8004a86 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80030dc:	4605      	mov	r5, r0
 80030de:	b110      	cbz	r0, 80030e6 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 80030e0:	4628      	mov	r0, r5
 80030e2:	b002      	add	sp, #8
 80030e4:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	f001 ffc6 	bl	8005078 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80030ec:	b938      	cbnz	r0, 80030fe <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80030ee:	2301      	movs	r3, #1
 80030f0:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80030f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d00b      	beq.n	8003110 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80030f8:	462e      	mov	r6, r5
 80030fa:	4628      	mov	r0, r5
 80030fc:	e014      	b.n	8003128 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80030fe:	2300      	movs	r3, #0
 8003100:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003102:	6820      	ldr	r0, [r4, #0]
 8003104:	f001 fcbf 	bl	8004a86 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003108:	2800      	cmp	r0, #0
 800310a:	d0f2      	beq.n	80030f2 <SD_PowerON+0x26>
      return errorstate;
 800310c:	4605      	mov	r5, r0
 800310e:	e7e7      	b.n	80030e0 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003110:	2100      	movs	r1, #0
 8003112:	6820      	ldr	r0, [r4, #0]
 8003114:	f001 fe1e 	bl	8004d54 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003118:	2800      	cmp	r0, #0
 800311a:	d0ed      	beq.n	80030f8 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800311c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003120:	e7de      	b.n	80030e0 <SD_PowerON+0x14>
    count++;
 8003122:	9b01      	ldr	r3, [sp, #4]
 8003124:	3301      	adds	r3, #1
 8003126:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003128:	9a01      	ldr	r2, [sp, #4]
 800312a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800312e:	429a      	cmp	r2, r3
 8003130:	d813      	bhi.n	800315a <SD_PowerON+0x8e>
 8003132:	b996      	cbnz	r6, 800315a <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003134:	2100      	movs	r1, #0
 8003136:	6820      	ldr	r0, [r4, #0]
 8003138:	f001 fe0c 	bl	8004d54 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800313c:	b9e0      	cbnz	r0, 8003178 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800313e:	4912      	ldr	r1, [pc, #72]	; (8003188 <SD_PowerON+0xbc>)
 8003140:	6820      	ldr	r0, [r4, #0]
 8003142:	f001 fee5 	bl	8004f10 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003146:	4606      	mov	r6, r0
 8003148:	b9c0      	cbnz	r0, 800317c <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800314a:	2100      	movs	r1, #0
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	f001 fc85 	bl	8004a5c <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003152:	0fc3      	lsrs	r3, r0, #31
 8003154:	d0e5      	beq.n	8003122 <SD_PowerON+0x56>
 8003156:	461e      	mov	r6, r3
 8003158:	e7e3      	b.n	8003122 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800315a:	9a01      	ldr	r2, [sp, #4]
 800315c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003160:	429a      	cmp	r2, r3
 8003162:	d80e      	bhi.n	8003182 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003164:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8003168:	d002      	beq.n	8003170 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800316a:	2301      	movs	r3, #1
 800316c:	6463      	str	r3, [r4, #68]	; 0x44
 800316e:	e7b7      	b.n	80030e0 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8003170:	2200      	movs	r2, #0
 8003172:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8003174:	461d      	mov	r5, r3
 8003176:	e7b3      	b.n	80030e0 <SD_PowerON+0x14>
      return errorstate;
 8003178:	4605      	mov	r5, r0
 800317a:	e7b1      	b.n	80030e0 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800317c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003180:	e7ae      	b.n	80030e0 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003182:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8003186:	e7ab      	b.n	80030e0 <SD_PowerON+0x14>
 8003188:	c1100000 	.word	0xc1100000

0800318c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800318e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  dataremaining = hsd->RxXferSize;
 8003190:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

  if (dataremaining > 0U)
 8003192:	b9a6      	cbnz	r6, 80031be <SD_Read_IT+0x32>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize = dataremaining;
  }
}
 8003194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      data = SDIO_ReadFIFO(hsd->Instance);
 8003196:	6838      	ldr	r0, [r7, #0]
 8003198:	f001 fc3b 	bl	8004a12 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800319c:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800319e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80031a2:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80031a4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80031a8:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80031aa:	0e00      	lsrs	r0, r0, #24
 80031ac:	70e0      	strb	r0, [r4, #3]
      tmp++;
 80031ae:	3404      	adds	r4, #4
      dataremaining--;
 80031b0:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 80031b2:	3501      	adds	r5, #1
 80031b4:	2d07      	cmp	r5, #7
 80031b6:	d9ee      	bls.n	8003196 <SD_Read_IT+0xa>
    hsd->pRxBuffPtr = tmp;
 80031b8:	62bc      	str	r4, [r7, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80031ba:	62fe      	str	r6, [r7, #44]	; 0x2c
}
 80031bc:	e7ea      	b.n	8003194 <SD_Read_IT+0x8>
 80031be:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 80031c0:	2500      	movs	r5, #0
 80031c2:	e7f7      	b.n	80031b4 <SD_Read_IT+0x28>

080031c4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80031c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c6:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80031c8:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 80031ca:	6a46      	ldr	r6, [r0, #36]	; 0x24

  if (dataremaining > 0U)
 80031cc:	b9de      	cbnz	r6, 8003206 <SD_Write_IT+0x42>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
  }
}
 80031ce:	b003      	add	sp, #12
 80031d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = (uint32_t)(*tmp);
 80031d2:	7823      	ldrb	r3, [r4, #0]
 80031d4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80031d6:	7862      	ldrb	r2, [r4, #1]
 80031d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80031dc:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80031de:	78a2      	ldrb	r2, [r4, #2]
 80031e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031e4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80031e6:	78e2      	ldrb	r2, [r4, #3]
 80031e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80031ec:	9301      	str	r3, [sp, #4]
      tmp++;
 80031ee:	3404      	adds	r4, #4
      dataremaining--;
 80031f0:	3e04      	subs	r6, #4
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80031f2:	a901      	add	r1, sp, #4
 80031f4:	6838      	ldr	r0, [r7, #0]
 80031f6:	f001 fc0f 	bl	8004a18 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80031fa:	3501      	adds	r5, #1
 80031fc:	2d07      	cmp	r5, #7
 80031fe:	d9e8      	bls.n	80031d2 <SD_Write_IT+0xe>
    hsd->pTxBuffPtr = tmp;
 8003200:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 8003202:	627e      	str	r6, [r7, #36]	; 0x24
}
 8003204:	e7e3      	b.n	80031ce <SD_Write_IT+0xa>
 8003206:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8003208:	2500      	movs	r5, #0
 800320a:	e7f7      	b.n	80031fc <SD_Write_IT+0x38>

0800320c <SD_FindSCR>:
{
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	4604      	mov	r4, r0
 8003212:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7fd ffee 	bl	80011f4 <HAL_GetTick>
 8003218:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 800321a:	2300      	movs	r3, #0
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003220:	2108      	movs	r1, #8
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	f001 fcec 	bl	8004c00 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003228:	4605      	mov	r5, r0
 800322a:	b110      	cbz	r0, 8003232 <SD_FindSCR+0x26>
}
 800322c:	4628      	mov	r0, r5
 800322e:	b009      	add	sp, #36	; 0x24
 8003230:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003232:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003234:	0409      	lsls	r1, r1, #16
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	f001 fd8c 	bl	8004d54 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800323c:	4605      	mov	r5, r0
 800323e:	2800      	cmp	r0, #0
 8003240:	d1f4      	bne.n	800322c <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8003248:	2308      	movs	r3, #8
 800324a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800324c:	2330      	movs	r3, #48	; 0x30
 800324e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003250:	2302      	movs	r3, #2
 8003252:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003254:	2300      	movs	r3, #0
 8003256:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003258:	2301      	movs	r3, #1
 800325a:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800325c:	a902      	add	r1, sp, #8
 800325e:	6820      	ldr	r0, [r4, #0]
 8003260:	f001 fbff 	bl	8004a62 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003264:	6820      	ldr	r0, [r4, #0]
 8003266:	f001 fda5 	bl	8004db4 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800326a:	4605      	mov	r5, r0
 800326c:	b158      	cbz	r0, 8003286 <SD_FindSCR+0x7a>
 800326e:	e7dd      	b.n	800322c <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003270:	f001 fbcf 	bl	8004a12 <SDIO_ReadFIFO>
 8003274:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8003278:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800327a:	f7fd ffbb 	bl	80011f4 <HAL_GetTick>
 800327e:	1b83      	subs	r3, r0, r6
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d03f      	beq.n	8003306 <SD_FindSCR+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003286:	6820      	ldr	r0, [r4, #0]
 8003288:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800328a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 800328e:	d107      	bne.n	80032a0 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003290:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003292:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003296:	d1eb      	bne.n	8003270 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003298:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800329a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800329e:	d1ec      	bne.n	800327a <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80032a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032a2:	f013 0f08 	tst.w	r3, #8
 80032a6:	d125      	bne.n	80032f4 <SD_FindSCR+0xe8>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80032a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032aa:	f013 0f02 	tst.w	r3, #2
 80032ae:	d124      	bne.n	80032fa <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80032b0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80032b2:	f015 0520 	ands.w	r5, r5, #32
 80032b6:	d123      	bne.n	8003300 <SD_FindSCR+0xf4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032b8:	f240 533a 	movw	r3, #1338	; 0x53a
 80032bc:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80032be:	9a01      	ldr	r2, [sp, #4]
 80032c0:	0213      	lsls	r3, r2, #8
 80032c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80032ca:	0a11      	lsrs	r1, r2, #8
 80032cc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80032d0:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80032d2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80032d6:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032d8:	9a00      	ldr	r2, [sp, #0]
 80032da:	0213      	lsls	r3, r2, #8
 80032dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80032e4:	0a11      	lsrs	r1, r2, #8
 80032e6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032ea:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80032ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032f0:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80032f2:	e79b      	b.n	800322c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80032f4:	2508      	movs	r5, #8
 80032f6:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80032f8:	e798      	b.n	800322c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80032fa:	2502      	movs	r5, #2
 80032fc:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80032fe:	e795      	b.n	800322c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003300:	2520      	movs	r5, #32
 8003302:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8003304:	e792      	b.n	800322c <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8003306:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800330a:	e78f      	b.n	800322c <SD_FindSCR+0x20>

0800330c <SD_WideBus_Enable>:
{
 800330c:	b510      	push	{r4, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003312:	2100      	movs	r1, #0
 8003314:	9100      	str	r1, [sp, #0]
 8003316:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003318:	6800      	ldr	r0, [r0, #0]
 800331a:	f001 fb9f 	bl	8004a5c <SDIO_GetResponse>
 800331e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003322:	d113      	bne.n	800334c <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8003324:	4669      	mov	r1, sp
 8003326:	4620      	mov	r0, r4
 8003328:	f7ff ff70 	bl	800320c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800332c:	b980      	cbnz	r0, 8003350 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800332e:	9b01      	ldr	r3, [sp, #4]
 8003330:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003334:	d00e      	beq.n	8003354 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003336:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003338:	0409      	lsls	r1, r1, #16
 800333a:	6820      	ldr	r0, [r4, #0]
 800333c:	f001 fd0a 	bl	8004d54 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003340:	b930      	cbnz	r0, 8003350 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003342:	2102      	movs	r1, #2
 8003344:	6820      	ldr	r0, [r4, #0]
 8003346:	f001 fd1d 	bl	8004d84 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800334a:	e001      	b.n	8003350 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800334c:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8003350:	b002      	add	sp, #8
 8003352:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003354:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003358:	e7fa      	b.n	8003350 <SD_WideBus_Enable+0x44>

0800335a <SD_WideBus_Disable>:
{
 800335a:	b510      	push	{r4, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8003360:	2100      	movs	r1, #0
 8003362:	9100      	str	r1, [sp, #0]
 8003364:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003366:	6800      	ldr	r0, [r0, #0]
 8003368:	f001 fb78 	bl	8004a5c <SDIO_GetResponse>
 800336c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003370:	d113      	bne.n	800339a <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8003372:	4669      	mov	r1, sp
 8003374:	4620      	mov	r0, r4
 8003376:	f7ff ff49 	bl	800320c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800337a:	b980      	cbnz	r0, 800339e <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800337c:	9b01      	ldr	r3, [sp, #4]
 800337e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003382:	d00e      	beq.n	80033a2 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003384:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003386:	0409      	lsls	r1, r1, #16
 8003388:	6820      	ldr	r0, [r4, #0]
 800338a:	f001 fce3 	bl	8004d54 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800338e:	b930      	cbnz	r0, 800339e <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003390:	2100      	movs	r1, #0
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	f001 fcf6 	bl	8004d84 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003398:	e001      	b.n	800339e <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800339a:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800339e:	b002      	add	sp, #8
 80033a0:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80033a2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80033a6:	e7fa      	b.n	800339e <SD_WideBus_Disable+0x44>

080033a8 <SD_SendStatus>:
{
 80033a8:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 80033aa:	b181      	cbz	r1, 80033ce <SD_SendStatus+0x26>
 80033ac:	4604      	mov	r4, r0
 80033ae:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033b0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80033b2:	0409      	lsls	r1, r1, #16
 80033b4:	6800      	ldr	r0, [r0, #0]
 80033b6:	f001 fd15 	bl	8004de4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ba:	4605      	mov	r5, r0
 80033bc:	b108      	cbz	r0, 80033c2 <SD_SendStatus+0x1a>
}
 80033be:	4628      	mov	r0, r5
 80033c0:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033c2:	2100      	movs	r1, #0
 80033c4:	6820      	ldr	r0, [r4, #0]
 80033c6:	f001 fb49 	bl	8004a5c <SDIO_GetResponse>
 80033ca:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80033cc:	e7f7      	b.n	80033be <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80033ce:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80033d2:	e7f4      	b.n	80033be <SD_SendStatus+0x16>

080033d4 <HAL_SD_ReadBlocks_DMA>:
{
 80033d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033d8:	b087      	sub	sp, #28
 80033da:	4604      	mov	r4, r0
  if(NULL == pData)
 80033dc:	b191      	cbz	r1, 8003404 <HAL_SD_ReadBlocks_DMA+0x30>
 80033de:	4616      	mov	r6, r2
 80033e0:	461f      	mov	r7, r3
 80033e2:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 80033e4:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 80033e8:	b2ed      	uxtb	r5, r5
 80033ea:	2d01      	cmp	r5, #1
 80033ec:	d17d      	bne.n	80034ea <HAL_SD_ReadBlocks_DMA+0x116>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033f2:	19f0      	adds	r0, r6, r7
 80033f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033f6:	4298      	cmp	r0, r3
 80033f8:	d90a      	bls.n	8003410 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003400:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8003402:	e073      	b.n	80034ec <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003404:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003406:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800340a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800340c:	2501      	movs	r5, #1
 800340e:	e06d      	b.n	80034ec <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->State = HAL_SD_STATE_BUSY;
 8003410:	2303      	movs	r3, #3
 8003412:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003416:	6821      	ldr	r1, [r4, #0]
 8003418:	2300      	movs	r3, #0
 800341a:	62cb      	str	r3, [r1, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003420:	f441 7195 	orr.w	r1, r1, #298	; 0x12a
 8003424:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003426:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003428:	4833      	ldr	r0, [pc, #204]	; (80034f8 <HAL_SD_ReadBlocks_DMA+0x124>)
 800342a:	63c8      	str	r0, [r1, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800342c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800342e:	4833      	ldr	r0, [pc, #204]	; (80034fc <HAL_SD_ReadBlocks_DMA+0x128>)
 8003430:	64c8      	str	r0, [r1, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8003432:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003434:	650b      	str	r3, [r1, #80]	; 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003436:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003438:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800343a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800343c:	6801      	ldr	r1, [r0, #0]
 800343e:	680b      	ldr	r3, [r1, #0]
 8003440:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003444:	6880      	ldr	r0, [r0, #8]
 8003446:	4303      	orrs	r3, r0
 8003448:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800344a:	6821      	ldr	r1, [r4, #0]
 800344c:	ea4f 2947 	mov.w	r9, r7, lsl #9
 8003450:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8003454:	3180      	adds	r1, #128	; 0x80
 8003456:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003458:	f7fe fc38 	bl	8001ccc <HAL_DMA_Start_IT>
 800345c:	4680      	mov	r8, r0
 800345e:	bb68      	cbnz	r0, 80034bc <HAL_SD_ReadBlocks_DMA+0xe8>
      __HAL_SD_DMA_ENABLE(hsd);
 8003460:	4b27      	ldr	r3, [pc, #156]	; (8003500 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8003462:	2201      	movs	r2, #1
 8003464:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003468:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800346a:	4293      	cmp	r3, r2
 800346c:	d000      	beq.n	8003470 <HAL_SD_ReadBlocks_DMA+0x9c>
        add *= 512U;
 800346e:	0276      	lsls	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295
 8003474:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003476:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800347a:	2390      	movs	r3, #144	; 0x90
 800347c:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800347e:	2302      	movs	r3, #2
 8003480:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003482:	2300      	movs	r3, #0
 8003484:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003486:	2301      	movs	r3, #1
 8003488:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800348a:	4669      	mov	r1, sp
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	f001 fae8 	bl	8004a62 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8003492:	2f01      	cmp	r7, #1
 8003494:	d922      	bls.n	80034dc <HAL_SD_ReadBlocks_DMA+0x108>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003496:	2382      	movs	r3, #130	; 0x82
 8003498:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800349a:	4631      	mov	r1, r6
 800349c:	6820      	ldr	r0, [r4, #0]
 800349e:	f001 fbdf 	bl	8004c60 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 80034a2:	b338      	cbz	r0, 80034f4 <HAL_SD_ReadBlocks_DMA+0x120>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_SD_ReadBlocks_DMA+0x130>)
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80034aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034ac:	4318      	orrs	r0, r3
 80034ae:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80034ba:	e017      	b.n	80034ec <HAL_SD_ReadBlocks_DMA+0x118>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80034c0:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 80034c4:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <HAL_SD_ReadBlocks_DMA+0x130>)
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80034cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034d2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80034da:	e007      	b.n	80034ec <HAL_SD_ReadBlocks_DMA+0x118>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80034dc:	2381      	movs	r3, #129	; 0x81
 80034de:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80034e0:	4631      	mov	r1, r6
 80034e2:	6820      	ldr	r0, [r4, #0]
 80034e4:	f001 fba4 	bl	8004c30 <SDMMC_CmdReadSingleBlock>
 80034e8:	e7db      	b.n	80034a2 <HAL_SD_ReadBlocks_DMA+0xce>
    return HAL_BUSY;
 80034ea:	2502      	movs	r5, #2
}
 80034ec:	4628      	mov	r0, r5
 80034ee:	b007      	add	sp, #28
 80034f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 80034f4:	4645      	mov	r5, r8
 80034f6:	e7f9      	b.n	80034ec <HAL_SD_ReadBlocks_DMA+0x118>
 80034f8:	0800363b 	.word	0x0800363b
 80034fc:	08003b25 	.word	0x08003b25
 8003500:	42258000 	.word	0x42258000
 8003504:	004005ff 	.word	0x004005ff

08003508 <HAL_SD_WriteBlocks_DMA>:
{
 8003508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350a:	b087      	sub	sp, #28
 800350c:	4604      	mov	r4, r0
  if(NULL == pData)
 800350e:	2900      	cmp	r1, #0
 8003510:	d038      	beq.n	8003584 <HAL_SD_WriteBlocks_DMA+0x7c>
 8003512:	461e      	mov	r6, r3
 8003514:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8003516:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 800351a:	b2ed      	uxtb	r5, r5
 800351c:	2d01      	cmp	r5, #1
 800351e:	d17f      	bne.n	8003620 <HAL_SD_WriteBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003520:	2300      	movs	r3, #0
 8003522:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003524:	1993      	adds	r3, r2, r6
 8003526:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8003528:	428b      	cmp	r3, r1
 800352a:	d831      	bhi.n	8003590 <HAL_SD_WriteBlocks_DMA+0x88>
    hsd->State = HAL_SD_STATE_BUSY;
 800352c:	2303      	movs	r3, #3
 800352e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003532:	6803      	ldr	r3, [r0, #0]
 8003534:	2100      	movs	r1, #0
 8003536:	62d9      	str	r1, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8003538:	6800      	ldr	r0, [r0, #0]
 800353a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800353c:	f043 031a 	orr.w	r3, r3, #26
 8003540:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003542:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003544:	4838      	ldr	r0, [pc, #224]	; (8003628 <HAL_SD_WriteBlocks_DMA+0x120>)
 8003546:	63d8      	str	r0, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800354a:	4838      	ldr	r0, [pc, #224]	; (800362c <HAL_SD_WriteBlocks_DMA+0x124>)
 800354c:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 800354e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003550:	6519      	str	r1, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003552:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003554:	2b01      	cmp	r3, #1
 8003556:	d000      	beq.n	800355a <HAL_SD_WriteBlocks_DMA+0x52>
      add *= 512U;
 8003558:	0252      	lsls	r2, r2, #9
    if(NumberOfBlocks > 1U)
 800355a:	2e01      	cmp	r6, #1
 800355c:	d91d      	bls.n	800359a <HAL_SD_WriteBlocks_DMA+0x92>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800355e:	23a0      	movs	r3, #160	; 0xa0
 8003560:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003562:	4611      	mov	r1, r2
 8003564:	6820      	ldr	r0, [r4, #0]
 8003566:	f001 fbab 	bl	8004cc0 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800356a:	b1e8      	cbz	r0, 80035a8 <HAL_SD_WriteBlocks_DMA+0xa0>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	4a30      	ldr	r2, [pc, #192]	; (8003630 <HAL_SD_WriteBlocks_DMA+0x128>)
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003572:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003574:	4318      	orrs	r0, r3
 8003576:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003578:	2301      	movs	r3, #1
 800357a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800357e:	2300      	movs	r3, #0
 8003580:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003582:	e04e      	b.n	8003622 <HAL_SD_WriteBlocks_DMA+0x11a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003584:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003586:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800358a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800358c:	2501      	movs	r5, #1
 800358e:	e048      	b.n	8003622 <HAL_SD_WriteBlocks_DMA+0x11a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003590:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003596:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8003598:	e043      	b.n	8003622 <HAL_SD_WriteBlocks_DMA+0x11a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800359a:	2390      	movs	r3, #144	; 0x90
 800359c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800359e:	4611      	mov	r1, r2
 80035a0:	6820      	ldr	r0, [r4, #0]
 80035a2:	f001 fb75 	bl	8004c90 <SDMMC_CmdWriteSingleBlock>
 80035a6:	e7e0      	b.n	800356a <HAL_SD_WriteBlocks_DMA+0x62>
    __HAL_SD_DMA_ENABLE(hsd);
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_SD_WriteBlocks_DMA+0x12c>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80035b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80035b8:	680a      	ldr	r2, [r1, #0]
 80035ba:	6813      	ldr	r3, [r2, #0]
 80035bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035c0:	6889      	ldr	r1, [r1, #8]
 80035c2:	430b      	orrs	r3, r1
 80035c4:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80035c6:	6822      	ldr	r2, [r4, #0]
 80035c8:	0276      	lsls	r6, r6, #9
 80035ca:	08b3      	lsrs	r3, r6, #2
 80035cc:	3280      	adds	r2, #128	; 0x80
 80035ce:	4639      	mov	r1, r7
 80035d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80035d2:	f7fe fb7b 	bl	8001ccc <HAL_DMA_Start_IT>
 80035d6:	4607      	mov	r7, r0
 80035d8:	b188      	cbz	r0, 80035fe <HAL_SD_WriteBlocks_DMA+0xf6>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80035da:	6822      	ldr	r2, [r4, #0]
 80035dc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80035de:	f023 031a 	bic.w	r3, r3, #26
 80035e2:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <HAL_SD_WriteBlocks_DMA+0x128>)
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80035ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035f0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80035fc:	e011      	b.n	8003622 <HAL_SD_WriteBlocks_DMA+0x11a>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003604:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003606:	2390      	movs	r3, #144	; 0x90
 8003608:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800360a:	2300      	movs	r3, #0
 800360c:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800360e:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003610:	2301      	movs	r3, #1
 8003612:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003614:	4669      	mov	r1, sp
 8003616:	6820      	ldr	r0, [r4, #0]
 8003618:	f001 fa23 	bl	8004a62 <SDIO_ConfigData>
      return HAL_OK;
 800361c:	463d      	mov	r5, r7
 800361e:	e000      	b.n	8003622 <HAL_SD_WriteBlocks_DMA+0x11a>
    return HAL_BUSY;
 8003620:	2502      	movs	r5, #2
}
 8003622:	4628      	mov	r0, r5
 8003624:	b007      	add	sp, #28
 8003626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003628:	080030bf 	.word	0x080030bf
 800362c:	08003b25 	.word	0x08003b25
 8003630:	004005ff 	.word	0x004005ff
 8003634:	42258000 	.word	0x42258000

08003638 <HAL_SD_ErrorCallback>:
}
 8003638:	4770      	bx	lr

0800363a <SD_DMAReceiveCplt>:
{
 800363a:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800363c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800363e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003640:	2b82      	cmp	r3, #130	; 0x82
 8003642:	d011      	beq.n	8003668 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003648:	f023 0308 	bic.w	r3, r3, #8
 800364c:	62d3      	str	r3, [r2, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	f240 523a 	movw	r2, #1338	; 0x53a
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8003656:	2301      	movs	r3, #1
 8003658:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800365c:	2300      	movs	r3, #0
 800365e:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8003660:	4620      	mov	r0, r4
 8003662:	f006 f9de 	bl	8009a22 <HAL_SD_RxCpltCallback>
}
 8003666:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003668:	6820      	ldr	r0, [r4, #0]
 800366a:	f001 fb41 	bl	8004cf0 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 800366e:	4603      	mov	r3, r0
 8003670:	2800      	cmp	r0, #0
 8003672:	d0e7      	beq.n	8003644 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8003674:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003676:	4313      	orrs	r3, r2
 8003678:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 800367a:	4620      	mov	r0, r4
 800367c:	f7ff ffdc 	bl	8003638 <HAL_SD_ErrorCallback>
 8003680:	e7e0      	b.n	8003644 <SD_DMAReceiveCplt+0xa>
	...

08003684 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003684:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003686:	0f9b      	lsrs	r3, r3, #30
 8003688:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800368a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800368c:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8003690:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003692:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800369c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80036a0:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80036a2:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 80036a6:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80036a8:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80036ac:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80036ae:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036b0:	0d1b      	lsrs	r3, r3, #20
 80036b2:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80036b4:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80036be:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036c0:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80036c4:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80036c6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036c8:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80036cc:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80036ce:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036d0:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80036d4:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80036d6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80036d8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80036dc:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80036de:	2300      	movs	r3, #0
 80036e0:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80036e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 8086 	bne.w	80037f6 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80036ea:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80036ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036f0:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 80036f4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80036f6:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80036fa:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80036fc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80036fe:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8003702:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003704:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800370e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003710:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8003714:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003716:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003718:	f3c3 4382 	ubfx	r3, r3, #18, #3
 800371c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800371e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003720:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8003724:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003726:	690b      	ldr	r3, [r1, #16]
 8003728:	3301      	adds	r3, #1
 800372a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800372c:	7e0a      	ldrb	r2, [r1, #24]
 800372e:	f002 0207 	and.w	r2, r2, #7
 8003732:	3202      	adds	r2, #2
 8003734:	4093      	lsls	r3, r2
 8003736:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003738:	7a0a      	ldrb	r2, [r1, #8]
 800373a:	f002 0c0f 	and.w	ip, r2, #15
 800373e:	2201      	movs	r2, #1
 8003740:	fa02 f20c 	lsl.w	r2, r2, ip
 8003744:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003746:	0a52      	lsrs	r2, r2, #9
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800374e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003752:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003754:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003756:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800375a:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800375c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800375e:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8003762:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003764:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376a:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800376c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800376e:	0fdb      	lsrs	r3, r3, #31
 8003770:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003772:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003774:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8003778:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800377a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800377c:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8003780:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003782:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003784:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8003788:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800378a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800378c:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8003790:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800379a:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 800379e:	f002 0201 	and.w	r2, r2, #1
 80037a2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80037a6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037a8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80037ac:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80037b0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037b2:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80037b6:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80037ba:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037bc:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80037c0:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80037c4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037c6:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80037ca:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80037ce:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037d0:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80037d4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80037d8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037da:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80037de:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80037e2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80037e4:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80037e8:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80037ec:	2201      	movs	r2, #1
 80037ee:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 80037f2:	4618      	mov	r0, r3
}
 80037f4:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d111      	bne.n	800381e <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80037fa:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80037fc:	041b      	lsls	r3, r3, #16
 80037fe:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003802:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8003806:	4313      	orrs	r3, r2
 8003808:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800380a:	690b      	ldr	r3, [r1, #16]
 800380c:	3301      	adds	r3, #1
 800380e:	029b      	lsls	r3, r3, #10
 8003810:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003812:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003818:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800381a:	6603      	str	r3, [r0, #96]	; 0x60
 800381c:	e79a      	b.n	8003754 <HAL_SD_GetCardCSD+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	4a05      	ldr	r2, [pc, #20]	; (8003838 <HAL_SD_GetCardCSD+0x1b4>)
 8003822:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003824:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382a:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800382c:	2301      	movs	r3, #1
 800382e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003832:	4618      	mov	r0, r3
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	004005ff 	.word	0x004005ff

0800383c <SD_InitCard>:
{
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	b090      	sub	sp, #64	; 0x40
 8003840:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8003842:	2301      	movs	r3, #1
 8003844:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003848:	6800      	ldr	r0, [r0, #0]
 800384a:	f001 f8ee 	bl	8004a2a <SDIO_GetPowerState>
 800384e:	2800      	cmp	r0, #0
 8003850:	d06c      	beq.n	800392c <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003852:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003854:	2b03      	cmp	r3, #3
 8003856:	d145      	bne.n	80038e4 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003858:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800385a:	2b03      	cmp	r3, #3
 800385c:	d15d      	bne.n	800391a <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800385e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003860:	2b03      	cmp	r3, #3
 8003862:	d01d      	beq.n	80038a0 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8003864:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8003868:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800386a:	0409      	lsls	r1, r1, #16
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	f001 fb14 	bl	8004e9a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003872:	4605      	mov	r5, r0
 8003874:	2800      	cmp	r0, #0
 8003876:	d15b      	bne.n	8003930 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003878:	2100      	movs	r1, #0
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	f001 f8ee 	bl	8004a5c <SDIO_GetResponse>
 8003880:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003882:	2104      	movs	r1, #4
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	f001 f8e9 	bl	8004a5c <SDIO_GetResponse>
 800388a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800388c:	2108      	movs	r1, #8
 800388e:	6820      	ldr	r0, [r4, #0]
 8003890:	f001 f8e4 	bl	8004a5c <SDIO_GetResponse>
 8003894:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003896:	210c      	movs	r1, #12
 8003898:	6820      	ldr	r0, [r4, #0]
 800389a:	f001 f8df 	bl	8004a5c <SDIO_GetResponse>
 800389e:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80038a0:	2104      	movs	r1, #4
 80038a2:	6820      	ldr	r0, [r4, #0]
 80038a4:	f001 f8da 	bl	8004a5c <SDIO_GetResponse>
 80038a8:	0d00      	lsrs	r0, r0, #20
 80038aa:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80038ac:	a905      	add	r1, sp, #20
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff fee8 	bl	8003684 <HAL_SD_GetCardCSD>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d13e      	bne.n	8003936 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80038b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80038ba:	0412      	lsls	r2, r2, #16
 80038bc:	2300      	movs	r3, #0
 80038be:	6820      	ldr	r0, [r4, #0]
 80038c0:	f001 fa30 	bl	8004d24 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80038c4:	4605      	mov	r5, r0
 80038c6:	bb98      	cbnz	r0, 8003930 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80038c8:	4623      	mov	r3, r4
 80038ca:	f853 6b10 	ldr.w	r6, [r3], #16
 80038ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80038d6:	3404      	adds	r4, #4
 80038d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80038dc:	4630      	mov	r0, r6
 80038de:	f001 f87f 	bl	80049e0 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 80038e2:	e025      	b.n	8003930 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80038e4:	6820      	ldr	r0, [r4, #0]
 80038e6:	f001 fac3 	bl	8004e70 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80038ea:	4605      	mov	r5, r0
 80038ec:	bb00      	cbnz	r0, 8003930 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038ee:	2100      	movs	r1, #0
 80038f0:	6820      	ldr	r0, [r4, #0]
 80038f2:	f001 f8b3 	bl	8004a5c <SDIO_GetResponse>
 80038f6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80038f8:	2104      	movs	r1, #4
 80038fa:	6820      	ldr	r0, [r4, #0]
 80038fc:	f001 f8ae 	bl	8004a5c <SDIO_GetResponse>
 8003900:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003902:	2108      	movs	r1, #8
 8003904:	6820      	ldr	r0, [r4, #0]
 8003906:	f001 f8a9 	bl	8004a5c <SDIO_GetResponse>
 800390a:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800390c:	210c      	movs	r1, #12
 800390e:	6820      	ldr	r0, [r4, #0]
 8003910:	f001 f8a4 	bl	8004a5c <SDIO_GetResponse>
 8003914:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8003918:	e79e      	b.n	8003858 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800391a:	f10d 0112 	add.w	r1, sp, #18
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	f001 fb60 	bl	8004fe4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003924:	4605      	mov	r5, r0
 8003926:	2800      	cmp	r0, #0
 8003928:	d099      	beq.n	800385e <SD_InitCard+0x22>
 800392a:	e001      	b.n	8003930 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800392c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8003930:	4628      	mov	r0, r5
 8003932:	b010      	add	sp, #64	; 0x40
 8003934:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003936:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800393a:	e7f9      	b.n	8003930 <SD_InitCard+0xf4>

0800393c <HAL_SD_InitCard>:
{
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003942:	2300      	movs	r3, #0
 8003944:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003946:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003948:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800394a:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800394c:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800394e:	2376      	movs	r3, #118	; 0x76
 8003950:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8003952:	ab0a      	add	r3, sp, #40	; 0x28
 8003954:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003958:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800395c:	ab04      	add	r3, sp, #16
 800395e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003960:	6820      	ldr	r0, [r4, #0]
 8003962:	f001 f83d 	bl	80049e0 <SDIO_Init>
  if(status != HAL_OK)
 8003966:	b118      	cbz	r0, 8003970 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8003968:	2501      	movs	r5, #1
}
 800396a:	4628      	mov	r0, r5
 800396c:	b00a      	add	sp, #40	; 0x28
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 8003972:	4e1a      	ldr	r6, [pc, #104]	; (80039dc <HAL_SD_InitCard+0xa0>)
 8003974:	2300      	movs	r3, #0
 8003976:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 800397a:	6820      	ldr	r0, [r4, #0]
 800397c:	f001 f851 	bl	8004a22 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8003980:	2301      	movs	r3, #1
 8003982:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  HAL_Delay(2);
 8003986:	2002      	movs	r0, #2
 8003988:	f7fd fc3a 	bl	8001200 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 800398c:	4620      	mov	r0, r4
 800398e:	f7ff fb9d 	bl	80030cc <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003992:	b130      	cbz	r0, 80039a2 <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8003994:	2501      	movs	r5, #1
 8003996:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800399a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800399c:	4303      	orrs	r3, r0
 800399e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80039a0:	e7e3      	b.n	800396a <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7ff ff4a 	bl	800383c <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 80039a8:	b130      	cbz	r0, 80039b8 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 80039aa:	2501      	movs	r5, #1
 80039ac:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80039b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039b2:	4303      	orrs	r3, r0
 80039b4:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80039b6:	e7d8      	b.n	800396a <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80039b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	f001 f91f 	bl	8004c00 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d0d1      	beq.n	800396a <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	4905      	ldr	r1, [pc, #20]	; (80039e0 <HAL_SD_InitCard+0xa4>)
 80039ca:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80039cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039ce:	4303      	orrs	r3, r0
 80039d0:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80039d2:	2501      	movs	r5, #1
 80039d4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 80039d8:	e7c7      	b.n	800396a <HAL_SD_InitCard+0x2e>
 80039da:	bf00      	nop
 80039dc:	42258000 	.word	0x42258000
 80039e0:	004005ff 	.word	0x004005ff

080039e4 <HAL_SD_Init>:
  if(hsd == NULL)
 80039e4:	b1a8      	cbz	r0, 8003a12 <HAL_SD_Init+0x2e>
{
 80039e6:	b510      	push	{r4, lr}
 80039e8:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80039ea:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80039ee:	b163      	cbz	r3, 8003a0a <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 80039f0:	2303      	movs	r3, #3
 80039f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff ffa0 	bl	800393c <HAL_SD_InitCard>
 80039fc:	b958      	cbnz	r0, 8003a16 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039fe:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003a00:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003a08:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8003a0a:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003a0c:	f006 fdea 	bl	800a5e4 <HAL_SD_MspInit>
 8003a10:	e7ee      	b.n	80039f0 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8003a12:	2001      	movs	r0, #1
}
 8003a14:	4770      	bx	lr
    return HAL_ERROR;
 8003a16:	2001      	movs	r0, #1
 8003a18:	e7f6      	b.n	8003a08 <HAL_SD_Init+0x24>

08003a1a <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003a1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a1c:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003a1e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003a20:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003a22:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003a24:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003a26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003a28:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003a2a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a2c:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003a2e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003a30:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003a32:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003a34:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003a36:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003a38:	61cb      	str	r3, [r1, #28]
}
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_SD_ConfigWideBusOperation>:
{
 8003a40:	b530      	push	{r4, r5, lr}
 8003a42:	b08b      	sub	sp, #44	; 0x2c
 8003a44:	4604      	mov	r4, r0
 8003a46:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d01c      	beq.n	8003a8e <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003a54:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003a58:	d008      	beq.n	8003a6c <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003a5a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003a5e:	d00a      	beq.n	8003a76 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003a60:	b179      	cbz	r1, 8003a82 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a68:	6383      	str	r3, [r0, #56]	; 0x38
 8003a6a:	e014      	b.n	8003a96 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a72:	6383      	str	r3, [r0, #56]	; 0x38
 8003a74:	e00f      	b.n	8003a96 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8003a76:	f7ff fc49 	bl	800330c <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8003a7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a7c:	4303      	orrs	r3, r0
 8003a7e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a80:	e009      	b.n	8003a96 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8003a82:	f7ff fc6a 	bl	800335a <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8003a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a88:	4303      	orrs	r3, r0
 8003a8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a8c:	e003      	b.n	8003a96 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a98:	b1c3      	cbz	r3, 8003acc <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <HAL_SD_ConfigWideBusOperation+0xbc>)
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003aa0:	2501      	movs	r5, #1
 8003aa2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aaa:	6820      	ldr	r0, [r4, #0]
 8003aac:	f001 f8a8 	bl	8004c00 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ab0:	b130      	cbz	r0, 8003ac0 <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	4911      	ldr	r1, [pc, #68]	; (8003afc <HAL_SD_ConfigWideBusOperation+0xbc>)
 8003ab6:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003ab8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003aba:	4303      	orrs	r3, r0
 8003abc:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8003abe:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	b00b      	add	sp, #44	; 0x2c
 8003aca:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003acc:	6863      	ldr	r3, [r4, #4]
 8003ace:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003ad0:	68a3      	ldr	r3, [r4, #8]
 8003ad2:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003ad4:	68e3      	ldr	r3, [r4, #12]
 8003ad6:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8003ad8:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003ada:	6963      	ldr	r3, [r4, #20]
 8003adc:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003ade:	69a3      	ldr	r3, [r4, #24]
 8003ae0:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8003ae2:	ab0a      	add	r3, sp, #40	; 0x28
 8003ae4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003ae8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003aec:	ab04      	add	r3, sp, #16
 8003aee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af0:	6820      	ldr	r0, [r4, #0]
 8003af2:	f000 ff75 	bl	80049e0 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2500      	movs	r5, #0
 8003af8:	e7d5      	b.n	8003aa6 <HAL_SD_ConfigWideBusOperation+0x66>
 8003afa:	bf00      	nop
 8003afc:	004005ff 	.word	0x004005ff

08003b00 <HAL_SD_GetCardState>:
{
 8003b00:	b510      	push	{r4, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8003b0a:	a901      	add	r1, sp, #4
 8003b0c:	f7ff fc4c 	bl	80033a8 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b10:	b110      	cbz	r0, 8003b18 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8003b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b14:	4303      	orrs	r3, r0
 8003b16:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003b18:	9801      	ldr	r0, [sp, #4]
 8003b1a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8003b1e:	b002      	add	sp, #8
 8003b20:	bd10      	pop	{r4, pc}
	...

08003b24 <SD_DMAError>:
{
 8003b24:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b26:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003b28:	f7fe fa06 	bl	8001f38 <HAL_DMA_GetError>
 8003b2c:	2802      	cmp	r0, #2
 8003b2e:	d00a      	beq.n	8003b46 <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003b34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b36:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d005      	beq.n	8003b48 <SD_DMAError+0x24>
 8003b3c:	2a01      	cmp	r2, #1
 8003b3e:	d003      	beq.n	8003b48 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8003b40:	4620      	mov	r0, r4
 8003b42:	f7ff fd79 	bl	8003638 <HAL_SD_ErrorCallback>
}
 8003b46:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	4a0f      	ldr	r2, [pc, #60]	; (8003b88 <SD_DMAError+0x64>)
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003b52:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8003b56:	63d3      	str	r3, [r2, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b5e:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff ffcd 	bl	8003b00 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003b66:	3805      	subs	r0, #5
 8003b68:	2801      	cmp	r0, #1
 8003b6a:	d905      	bls.n	8003b78 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	6323      	str	r3, [r4, #48]	; 0x30
 8003b76:	e7e3      	b.n	8003b40 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b78:	6820      	ldr	r0, [r4, #0]
 8003b7a:	f001 f8b9 	bl	8004cf0 <SDMMC_CmdStopTransfer>
 8003b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b80:	4303      	orrs	r3, r0
 8003b82:	63a3      	str	r3, [r4, #56]	; 0x38
 8003b84:	e7f2      	b.n	8003b6c <SD_DMAError+0x48>
 8003b86:	bf00      	nop
 8003b88:	004005ff 	.word	0x004005ff

08003b8c <SD_DMATxAbort>:
{
 8003b8c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b8e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f7ff ffb1 	bl	8003b00 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ba8:	3805      	subs	r0, #5
 8003baa:	2801      	cmp	r0, #1
 8003bac:	d905      	bls.n	8003bba <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bb0:	b953      	cbnz	r3, 8003bc8 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f005 ff2d 	bl	8009a12 <HAL_SD_AbortCallback>
}
 8003bb8:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003bba:	6820      	ldr	r0, [r4, #0]
 8003bbc:	f001 f898 	bl	8004cf0 <SDMMC_CmdStopTransfer>
 8003bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bc2:	4303      	orrs	r3, r0
 8003bc4:	63a3      	str	r3, [r4, #56]	; 0x38
 8003bc6:	e7f2      	b.n	8003bae <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7ff fd35 	bl	8003638 <HAL_SD_ErrorCallback>
}
 8003bce:	e7f3      	b.n	8003bb8 <SD_DMATxAbort+0x2c>

08003bd0 <SD_DMARxAbort>:
{
 8003bd0:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003bd2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7ff ff8f 	bl	8003b00 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003bec:	3805      	subs	r0, #5
 8003bee:	2801      	cmp	r0, #1
 8003bf0:	d905      	bls.n	8003bfe <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003bf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bf4:	b953      	cbnz	r3, 8003c0c <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f005 ff0b 	bl	8009a12 <HAL_SD_AbortCallback>
}
 8003bfc:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003bfe:	6820      	ldr	r0, [r4, #0]
 8003c00:	f001 f876 	bl	8004cf0 <SDMMC_CmdStopTransfer>
 8003c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c06:	4303      	orrs	r3, r0
 8003c08:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c0a:	e7f2      	b.n	8003bf2 <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7ff fd13 	bl	8003638 <HAL_SD_ErrorCallback>
}
 8003c12:	e7f3      	b.n	8003bfc <SD_DMARxAbort+0x2c>

08003c14 <HAL_SD_IRQHandler>:
{
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8003c18:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c1a:	6803      	ldr	r3, [r0, #0]
 8003c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003c22:	d002      	beq.n	8003c2a <HAL_SD_IRQHandler+0x16>
 8003c24:	f015 0f08 	tst.w	r5, #8
 8003c28:	d128      	bne.n	8003c7c <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c2c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003c30:	d05a      	beq.n	8003ce8 <HAL_SD_IRQHandler+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003c38:	6822      	ldr	r2, [r4, #0]
 8003c3a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003c3c:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003c40:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c44:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003c46:	6822      	ldr	r2, [r4, #0]
 8003c48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8003c50:	f015 0f08 	tst.w	r5, #8
 8003c54:	d026      	beq.n	8003ca4 <HAL_SD_IRQHandler+0x90>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c56:	f015 0f22 	tst.w	r5, #34	; 0x22
 8003c5a:	d112      	bne.n	8003c82 <HAL_SD_IRQHandler+0x6e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c6e:	f015 0f03 	tst.w	r5, #3
 8003c72:	d013      	beq.n	8003c9c <HAL_SD_IRQHandler+0x88>
        HAL_SD_RxCpltCallback(hsd);
 8003c74:	4620      	mov	r0, r4
 8003c76:	f005 fed4 	bl	8009a22 <HAL_SD_RxCpltCallback>
 8003c7a:	e001      	b.n	8003c80 <HAL_SD_IRQHandler+0x6c>
    SD_Read_IT(hsd);
 8003c7c:	f7ff fa86 	bl	800318c <SD_Read_IT>
}
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c82:	6820      	ldr	r0, [r4, #0]
 8003c84:	f001 f834 	bl	8004cf0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d0e6      	beq.n	8003c5c <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8003c8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c90:	4313      	orrs	r3, r2
 8003c92:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003c94:	4620      	mov	r0, r4
 8003c96:	f7ff fccf 	bl	8003638 <HAL_SD_ErrorCallback>
 8003c9a:	e7df      	b.n	8003c5c <HAL_SD_IRQHandler+0x48>
        HAL_SD_TxCpltCallback(hsd);
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f005 febc 	bl	8009a1a <HAL_SD_TxCpltCallback>
 8003ca2:	e7ed      	b.n	8003c80 <HAL_SD_IRQHandler+0x6c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ca4:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003ca8:	d0ea      	beq.n	8003c80 <HAL_SD_IRQHandler+0x6c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003caa:	f015 0f20 	tst.w	r5, #32
 8003cae:	d10e      	bne.n	8003cce <HAL_SD_IRQHandler+0xba>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003cb0:	f015 0f03 	tst.w	r5, #3
 8003cb4:	d1e4      	bne.n	8003c80 <HAL_SD_IRQHandler+0x6c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003cba:	f023 0308 	bic.w	r3, r3, #8
 8003cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f005 fea7 	bl	8009a1a <HAL_SD_TxCpltCallback>
 8003ccc:	e7d8      	b.n	8003c80 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cce:	6820      	ldr	r0, [r4, #0]
 8003cd0:	f001 f80e 	bl	8004cf0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d0ea      	beq.n	8003cb0 <HAL_SD_IRQHandler+0x9c>
          hsd->ErrorCode |= errorstate;
 8003cda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7ff fca9 	bl	8003638 <HAL_SD_ErrorCallback>
 8003ce6:	e7e3      	b.n	8003cb0 <HAL_SD_IRQHandler+0x9c>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cea:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003cee:	d002      	beq.n	8003cf6 <HAL_SD_IRQHandler+0xe2>
 8003cf0:	f015 0f08 	tst.w	r5, #8
 8003cf4:	d14a      	bne.n	8003d8c <HAL_SD_IRQHandler+0x178>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf8:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 8003cfc:	d0c0      	beq.n	8003c80 <HAL_SD_IRQHandler+0x6c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d00:	f012 0f02 	tst.w	r2, #2
 8003d04:	d003      	beq.n	8003d0e <HAL_SD_IRQHandler+0xfa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d08:	f042 0202 	orr.w	r2, r2, #2
 8003d0c:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d10:	f012 0f08 	tst.w	r2, #8
 8003d14:	d003      	beq.n	8003d1e <HAL_SD_IRQHandler+0x10a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d18:	f042 0208 	orr.w	r2, r2, #8
 8003d1c:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d20:	f012 0f20 	tst.w	r2, #32
 8003d24:	d003      	beq.n	8003d2e <HAL_SD_IRQHandler+0x11a>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003d26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d28:	f042 0220 	orr.w	r2, r2, #32
 8003d2c:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d30:	f012 0f10 	tst.w	r2, #16
 8003d34:	d003      	beq.n	8003d3e <HAL_SD_IRQHandler+0x12a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003d36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d38:	f042 0210 	orr.w	r2, r2, #16
 8003d3c:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003d3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d42:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003d44:	6822      	ldr	r2, [r4, #0]
 8003d46:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003d48:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8003d4c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d4e:	6820      	ldr	r0, [r4, #0]
 8003d50:	f000 ffce 	bl	8004cf0 <SDMMC_CmdStopTransfer>
 8003d54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d56:	4303      	orrs	r3, r0
 8003d58:	63a3      	str	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003d5a:	f015 0f08 	tst.w	r5, #8
 8003d5e:	d119      	bne.n	8003d94 <HAL_SD_IRQHandler+0x180>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003d60:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003d64:	d08c      	beq.n	8003c80 <HAL_SD_IRQHandler+0x6c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003d66:	f015 0f30 	tst.w	r5, #48	; 0x30
 8003d6a:	d11c      	bne.n	8003da6 <HAL_SD_IRQHandler+0x192>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003d6c:	f015 0f03 	tst.w	r5, #3
 8003d70:	d026      	beq.n	8003dc0 <HAL_SD_IRQHandler+0x1ac>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d74:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <HAL_SD_IRQHandler+0x1c0>)
 8003d76:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003d78:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d7a:	f7fd ffdc 	bl	8001d36 <HAL_DMA_Abort_IT>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	f43f af7e 	beq.w	8003c80 <HAL_SD_IRQHandler+0x6c>
          SD_DMARxAbort(hsd->hdmarx);
 8003d84:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d86:	f7ff ff23 	bl	8003bd0 <SD_DMARxAbort>
 8003d8a:	e779      	b.n	8003c80 <HAL_SD_IRQHandler+0x6c>
    SD_Write_IT(hsd);
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f7ff fa19 	bl	80031c4 <SD_Write_IT>
 8003d92:	e775      	b.n	8003c80 <HAL_SD_IRQHandler+0x6c>
      hsd->State = HAL_SD_STATE_READY;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7ff fc4a 	bl	8003638 <HAL_SD_ErrorCallback>
 8003da4:	e76c      	b.n	8003c80 <HAL_SD_IRQHandler+0x6c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003da6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003da8:	4a0b      	ldr	r2, [pc, #44]	; (8003dd8 <HAL_SD_IRQHandler+0x1c4>)
 8003daa:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003dac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003dae:	f7fd ffc2 	bl	8001d36 <HAL_DMA_Abort_IT>
 8003db2:	2800      	cmp	r0, #0
 8003db4:	f43f af64 	beq.w	8003c80 <HAL_SD_IRQHandler+0x6c>
          SD_DMATxAbort(hsd->hdmatx);
 8003db8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003dba:	f7ff fee7 	bl	8003b8c <SD_DMATxAbort>
 8003dbe:	e75f      	b.n	8003c80 <HAL_SD_IRQHandler+0x6c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003dca:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f005 fe20 	bl	8009a12 <HAL_SD_AbortCallback>
}
 8003dd2:	e755      	b.n	8003c80 <HAL_SD_IRQHandler+0x6c>
 8003dd4:	08003bd1 	.word	0x08003bd1
 8003dd8:	08003b8d 	.word	0x08003b8d

08003ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ddc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dde:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003de0:	6a04      	ldr	r4, [r0, #32]
 8003de2:	f024 0401 	bic.w	r4, r4, #1
 8003de6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dea:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dee:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003df2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003df6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003df8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003dfa:	6203      	str	r3, [r0, #32]
}
 8003dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e02:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e04:	6a04      	ldr	r4, [r0, #32]
 8003e06:	f024 0410 	bic.w	r4, r4, #16
 8003e0a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003e0e:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e10:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e14:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e18:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e1c:	031b      	lsls	r3, r3, #12
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e24:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e28:	0109      	lsls	r1, r1, #4
 8003e2a:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8003e2e:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e30:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e32:	6201      	str	r1, [r0, #32]
}
 8003e34:	bc30      	pop	{r4, r5}
 8003e36:	4770      	bx	lr

08003e38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e38:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e3a:	6a04      	ldr	r4, [r0, #32]
 8003e3c:	f024 0410 	bic.w	r4, r4, #16
 8003e40:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e42:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003e44:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e46:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e4a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e52:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e56:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e58:	6203      	str	r3, [r0, #32]
}
 8003e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e60:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e62:	6a04      	ldr	r4, [r0, #32]
 8003e64:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8003e68:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e6a:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003e6c:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e6e:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003e72:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e76:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e82:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e86:	0209      	lsls	r1, r1, #8
 8003e88:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8003e8c:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e8e:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8003e90:	6201      	str	r1, [r0, #32]
}
 8003e92:	bc30      	pop	{r4, r5}
 8003e94:	4770      	bx	lr

08003e96 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e96:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e98:	6a04      	ldr	r4, [r0, #32]
 8003e9a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003e9e:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ea0:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003ea2:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ea4:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ea8:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003eac:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003eb0:	031b      	lsls	r3, r3, #12
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003eb8:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ebc:	0309      	lsls	r1, r1, #12
 8003ebe:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8003ec2:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ec4:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003ec6:	6201      	str	r1, [r0, #32]
}
 8003ec8:	bc30      	pop	{r4, r5}
 8003eca:	4770      	bx	lr

08003ecc <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ecc:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed8:	6083      	str	r3, [r0, #8]
}
 8003eda:	4770      	bx	lr

08003edc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003edc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d137      	bne.n	8003f56 <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eec:	6802      	ldr	r2, [r0, #0]
 8003eee:	68d3      	ldr	r3, [r2, #12]
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef6:	6803      	ldr	r3, [r0, #0]
 8003ef8:	4a19      	ldr	r2, [pc, #100]	; (8003f60 <HAL_TIM_Base_Start_IT+0x84>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d020      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x64>
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f02:	d01d      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x64>
 8003f04:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d019      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x64>
 8003f0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d015      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x64>
 8003f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d011      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x64>
 8003f1c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00d      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x64>
 8003f24:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x64>
 8003f2c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d005      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f46:	2a06      	cmp	r2, #6
 8003f48:	d007      	beq.n	8003f5a <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f52:	2000      	movs	r0, #0
 8003f54:	4770      	bx	lr
    return HAL_ERROR;
 8003f56:	2001      	movs	r0, #1
 8003f58:	4770      	bx	lr
  return HAL_OK;
 8003f5a:	2000      	movs	r0, #0
}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000

08003f64 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003f64:	4770      	bx	lr

08003f66 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIM_TriggerCallback>:
}
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_IRQHandler>:
{
 8003f6a:	b510      	push	{r4, lr}
 8003f6c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f6e:	6803      	ldr	r3, [r0, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	f012 0f02 	tst.w	r2, #2
 8003f76:	d011      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	f012 0f02 	tst.w	r2, #2
 8003f7e:	d00d      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f80:	f06f 0202 	mvn.w	r2, #2
 8003f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f86:	2301      	movs	r3, #1
 8003f88:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8a:	6803      	ldr	r3, [r0, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f013 0f03 	tst.w	r3, #3
 8003f92:	d070      	beq.n	8004076 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f94:	f007 f9b8 	bl	800b308 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	f012 0f04 	tst.w	r2, #4
 8003fa4:	d012      	beq.n	8003fcc <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	f012 0f04 	tst.w	r2, #4
 8003fac:	d00e      	beq.n	8003fcc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fae:	f06f 0204 	mvn.w	r2, #4
 8003fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003fc0:	d05f      	beq.n	8004082 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f007 f9a0 	bl	800b308 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	f012 0f08 	tst.w	r2, #8
 8003fd4:	d012      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	f012 0f08 	tst.w	r2, #8
 8003fdc:	d00e      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fde:	f06f 0208 	mvn.w	r2, #8
 8003fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f013 0f03 	tst.w	r3, #3
 8003ff0:	d04e      	beq.n	8004090 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f007 f988 	bl	800b308 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	f012 0f10 	tst.w	r2, #16
 8004004:	d012      	beq.n	800402c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	f012 0f10 	tst.w	r2, #16
 800400c:	d00e      	beq.n	800402c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800400e:	f06f 0210 	mvn.w	r2, #16
 8004012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004014:	2308      	movs	r3, #8
 8004016:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004020:	d03d      	beq.n	800409e <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004022:	4620      	mov	r0, r4
 8004024:	f007 f970 	bl	800b308 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004028:	2300      	movs	r3, #0
 800402a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	f012 0f01 	tst.w	r2, #1
 8004034:	d003      	beq.n	800403e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	f012 0f01 	tst.w	r2, #1
 800403c:	d136      	bne.n	80040ac <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004046:	d003      	beq.n	8004050 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800404e:	d134      	bne.n	80040ba <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004060:	d132      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	f012 0f20 	tst.w	r2, #32
 800406a:	d003      	beq.n	8004074 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	f012 0f20 	tst.w	r2, #32
 8004072:	d130      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x16c>
}
 8004074:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	f7ff ff75 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407a:	4620      	mov	r0, r4
 800407c:	f7ff ff73 	bl	8003f66 <HAL_TIM_PWM_PulseFinishedCallback>
 8004080:	e78a      	b.n	8003f98 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	4620      	mov	r0, r4
 8004084:	f7ff ff6e 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	4620      	mov	r0, r4
 800408a:	f7ff ff6c 	bl	8003f66 <HAL_TIM_PWM_PulseFinishedCallback>
 800408e:	e79b      	b.n	8003fc8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004090:	4620      	mov	r0, r4
 8004092:	f7ff ff67 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004096:	4620      	mov	r0, r4
 8004098:	f7ff ff65 	bl	8003f66 <HAL_TIM_PWM_PulseFinishedCallback>
 800409c:	e7ac      	b.n	8003ff8 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	4620      	mov	r0, r4
 80040a0:	f7ff ff60 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	4620      	mov	r0, r4
 80040a6:	f7ff ff5e 	bl	8003f66 <HAL_TIM_PWM_PulseFinishedCallback>
 80040aa:	e7bd      	b.n	8004028 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ac:	f06f 0201 	mvn.w	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b2:	4620      	mov	r0, r4
 80040b4:	f005 feb6 	bl	8009e24 <HAL_TIM_PeriodElapsedCallback>
 80040b8:	e7c1      	b.n	800403e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80040c0:	4620      	mov	r0, r4
 80040c2:	f000 fb08 	bl	80046d6 <HAL_TIMEx_BreakCallback>
 80040c6:	e7c3      	b.n	8004050 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80040ce:	4620      	mov	r0, r4
 80040d0:	f7ff ff4a 	bl	8003f68 <HAL_TIM_TriggerCallback>
 80040d4:	e7c5      	b.n	8004062 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040d6:	f06f 0220 	mvn.w	r2, #32
 80040da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80040dc:	4620      	mov	r0, r4
 80040de:	f000 faf9 	bl	80046d4 <HAL_TIMEx_CommutCallback>
}
 80040e2:	e7c7      	b.n	8004074 <HAL_TIM_IRQHandler+0x10a>

080040e4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80040e4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e6:	4a30      	ldr	r2, [pc, #192]	; (80041a8 <TIM_Base_SetConfig+0xc4>)
 80040e8:	4290      	cmp	r0, r2
 80040ea:	d012      	beq.n	8004112 <TIM_Base_SetConfig+0x2e>
 80040ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80040f0:	d00f      	beq.n	8004112 <TIM_Base_SetConfig+0x2e>
 80040f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80040f6:	4290      	cmp	r0, r2
 80040f8:	d00b      	beq.n	8004112 <TIM_Base_SetConfig+0x2e>
 80040fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040fe:	4290      	cmp	r0, r2
 8004100:	d007      	beq.n	8004112 <TIM_Base_SetConfig+0x2e>
 8004102:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004106:	4290      	cmp	r0, r2
 8004108:	d003      	beq.n	8004112 <TIM_Base_SetConfig+0x2e>
 800410a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800410e:	4290      	cmp	r0, r2
 8004110:	d103      	bne.n	800411a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004116:	684a      	ldr	r2, [r1, #4]
 8004118:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411a:	4a23      	ldr	r2, [pc, #140]	; (80041a8 <TIM_Base_SetConfig+0xc4>)
 800411c:	4290      	cmp	r0, r2
 800411e:	d02a      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 8004120:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004124:	d027      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 8004126:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800412a:	4290      	cmp	r0, r2
 800412c:	d023      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 800412e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004132:	4290      	cmp	r0, r2
 8004134:	d01f      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 8004136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800413a:	4290      	cmp	r0, r2
 800413c:	d01b      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 800413e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004142:	4290      	cmp	r0, r2
 8004144:	d017      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 8004146:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800414a:	4290      	cmp	r0, r2
 800414c:	d013      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 800414e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004152:	4290      	cmp	r0, r2
 8004154:	d00f      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 8004156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800415a:	4290      	cmp	r0, r2
 800415c:	d00b      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 800415e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004162:	4290      	cmp	r0, r2
 8004164:	d007      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 8004166:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800416a:	4290      	cmp	r0, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0x92>
 800416e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004172:	4290      	cmp	r0, r2
 8004174:	d103      	bne.n	800417e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417a:	68ca      	ldr	r2, [r1, #12]
 800417c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800417e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004182:	694a      	ldr	r2, [r1, #20]
 8004184:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004186:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004188:	688b      	ldr	r3, [r1, #8]
 800418a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800418c:	680b      	ldr	r3, [r1, #0]
 800418e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <TIM_Base_SetConfig+0xc4>)
 8004192:	4298      	cmp	r0, r3
 8004194:	d003      	beq.n	800419e <TIM_Base_SetConfig+0xba>
 8004196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800419a:	4298      	cmp	r0, r3
 800419c:	d101      	bne.n	80041a2 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800419e:	690b      	ldr	r3, [r1, #16]
 80041a0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80041a2:	2301      	movs	r3, #1
 80041a4:	6143      	str	r3, [r0, #20]
}
 80041a6:	4770      	bx	lr
 80041a8:	40010000 	.word	0x40010000

080041ac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80041ac:	b340      	cbz	r0, 8004200 <HAL_TIM_Base_Init+0x54>
{
 80041ae:	b510      	push	{r4, lr}
 80041b0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80041b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041b6:	b1f3      	cbz	r3, 80041f6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	2302      	movs	r3, #2
 80041ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041be:	4621      	mov	r1, r4
 80041c0:	f851 0b04 	ldr.w	r0, [r1], #4
 80041c4:	f7ff ff8e 	bl	80040e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80041d2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80041d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80041da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80041ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80041ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80041f2:	2000      	movs	r0, #0
}
 80041f4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80041f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80041fa:	f006 fe2d 	bl	800ae58 <HAL_TIM_Base_MspInit>
 80041fe:	e7db      	b.n	80041b8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004200:	2001      	movs	r0, #1
}
 8004202:	4770      	bx	lr

08004204 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8004204:	b340      	cbz	r0, 8004258 <HAL_TIM_IC_Init+0x54>
{
 8004206:	b510      	push	{r4, lr}
 8004208:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800420a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800420e:	b1f3      	cbz	r3, 800424e <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	2302      	movs	r3, #2
 8004212:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004216:	4621      	mov	r1, r4
 8004218:	f851 0b04 	ldr.w	r0, [r1], #4
 800421c:	f7ff ff62 	bl	80040e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004220:	2301      	movs	r3, #1
 8004222:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004226:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800422a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800422e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004232:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800423e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004246:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800424a:	2000      	movs	r0, #0
}
 800424c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800424e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8004252:	f006 fe87 	bl	800af64 <HAL_TIM_IC_MspInit>
 8004256:	e7db      	b.n	8004210 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8004258:	2001      	movs	r0, #1
}
 800425a:	4770      	bx	lr

0800425c <TIM_TI1_SetConfig>:
{
 800425c:	b470      	push	{r4, r5, r6}
 800425e:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004260:	6a04      	ldr	r4, [r0, #32]
 8004262:	f024 0401 	bic.w	r4, r4, #1
 8004266:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004268:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800426a:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800426c:	4d18      	ldr	r5, [pc, #96]	; (80042d0 <TIM_TI1_SetConfig+0x74>)
 800426e:	42a8      	cmp	r0, r5
 8004270:	d01c      	beq.n	80042ac <TIM_TI1_SetConfig+0x50>
 8004272:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004276:	d019      	beq.n	80042ac <TIM_TI1_SetConfig+0x50>
 8004278:	4a16      	ldr	r2, [pc, #88]	; (80042d4 <TIM_TI1_SetConfig+0x78>)
 800427a:	4290      	cmp	r0, r2
 800427c:	d016      	beq.n	80042ac <TIM_TI1_SetConfig+0x50>
 800427e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004282:	4290      	cmp	r0, r2
 8004284:	d012      	beq.n	80042ac <TIM_TI1_SetConfig+0x50>
 8004286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800428a:	4290      	cmp	r0, r2
 800428c:	d00e      	beq.n	80042ac <TIM_TI1_SetConfig+0x50>
 800428e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004292:	4290      	cmp	r0, r2
 8004294:	d00a      	beq.n	80042ac <TIM_TI1_SetConfig+0x50>
 8004296:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800429a:	4290      	cmp	r0, r2
 800429c:	d006      	beq.n	80042ac <TIM_TI1_SetConfig+0x50>
 800429e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80042a2:	4290      	cmp	r0, r2
 80042a4:	d002      	beq.n	80042ac <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042a6:	f044 0201 	orr.w	r2, r4, #1
 80042aa:	e003      	b.n	80042b4 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042ac:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80042b0:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042be:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80042c2:	f001 010a 	and.w	r1, r1, #10
 80042c6:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80042c8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80042ca:	6201      	str	r1, [r0, #32]
}
 80042cc:	bc70      	pop	{r4, r5, r6}
 80042ce:	4770      	bx	lr
 80042d0:	40010000 	.word	0x40010000
 80042d4:	40000400 	.word	0x40000400

080042d8 <HAL_TIM_IC_ConfigChannel>:
{
 80042d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80042da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d05a      	beq.n	8004398 <HAL_TIM_IC_ConfigChannel+0xc0>
 80042e2:	4604      	mov	r4, r0
 80042e4:	460d      	mov	r5, r1
 80042e6:	2301      	movs	r3, #1
 80042e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80042ec:	b152      	cbz	r2, 8004304 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 80042ee:	2a04      	cmp	r2, #4
 80042f0:	d01a      	beq.n	8004328 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 80042f2:	2a08      	cmp	r2, #8
 80042f4:	d02b      	beq.n	800434e <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 80042f6:	2a0c      	cmp	r2, #12
 80042f8:	d03b      	beq.n	8004372 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 80042fa:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80042fc:	2300      	movs	r3, #0
 80042fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004302:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8004304:	68cb      	ldr	r3, [r1, #12]
 8004306:	684a      	ldr	r2, [r1, #4]
 8004308:	6809      	ldr	r1, [r1, #0]
 800430a:	6800      	ldr	r0, [r0, #0]
 800430c:	f7ff ffa6 	bl	800425c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004310:	6822      	ldr	r2, [r4, #0]
 8004312:	6993      	ldr	r3, [r2, #24]
 8004314:	f023 030c 	bic.w	r3, r3, #12
 8004318:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800431a:	6822      	ldr	r2, [r4, #0]
 800431c:	6993      	ldr	r3, [r2, #24]
 800431e:	68a9      	ldr	r1, [r5, #8]
 8004320:	430b      	orrs	r3, r1
 8004322:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2000      	movs	r0, #0
 8004326:	e7e9      	b.n	80042fc <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8004328:	68cb      	ldr	r3, [r1, #12]
 800432a:	684a      	ldr	r2, [r1, #4]
 800432c:	6809      	ldr	r1, [r1, #0]
 800432e:	6800      	ldr	r0, [r0, #0]
 8004330:	f7ff fd67 	bl	8003e02 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	6993      	ldr	r3, [r2, #24]
 8004338:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800433c:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	6993      	ldr	r3, [r2, #24]
 8004342:	68a9      	ldr	r1, [r5, #8]
 8004344:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004348:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800434a:	2000      	movs	r0, #0
 800434c:	e7d6      	b.n	80042fc <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800434e:	68cb      	ldr	r3, [r1, #12]
 8004350:	684a      	ldr	r2, [r1, #4]
 8004352:	6809      	ldr	r1, [r1, #0]
 8004354:	6800      	ldr	r0, [r0, #0]
 8004356:	f7ff fd83 	bl	8003e60 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	69d3      	ldr	r3, [r2, #28]
 800435e:	f023 030c 	bic.w	r3, r3, #12
 8004362:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	69d3      	ldr	r3, [r2, #28]
 8004368:	68a9      	ldr	r1, [r5, #8]
 800436a:	430b      	orrs	r3, r1
 800436c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2000      	movs	r0, #0
 8004370:	e7c4      	b.n	80042fc <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8004372:	68cb      	ldr	r3, [r1, #12]
 8004374:	684a      	ldr	r2, [r1, #4]
 8004376:	6809      	ldr	r1, [r1, #0]
 8004378:	6800      	ldr	r0, [r0, #0]
 800437a:	f7ff fd8c 	bl	8003e96 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	69d3      	ldr	r3, [r2, #28]
 8004382:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004386:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	69d3      	ldr	r3, [r2, #28]
 800438c:	68a9      	ldr	r1, [r5, #8]
 800438e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004392:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004394:	2000      	movs	r0, #0
 8004396:	e7b1      	b.n	80042fc <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8004398:	2002      	movs	r0, #2
 800439a:	e7b2      	b.n	8004302 <HAL_TIM_IC_ConfigChannel+0x2a>

0800439c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800439c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800439e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043a4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80043a8:	430a      	orrs	r2, r1
 80043aa:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	6082      	str	r2, [r0, #8]
}
 80043b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80043b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d078      	beq.n	80044b0 <HAL_TIM_ConfigClockSource+0xfa>
{
 80043be:	b510      	push	{r4, lr}
 80043c0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80043c2:	2301      	movs	r3, #1
 80043c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	2302      	movs	r3, #2
 80043ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80043ce:	6802      	ldr	r2, [r0, #0]
 80043d0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80043da:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80043dc:	680b      	ldr	r3, [r1, #0]
 80043de:	2b60      	cmp	r3, #96	; 0x60
 80043e0:	d04c      	beq.n	800447c <HAL_TIM_ConfigClockSource+0xc6>
 80043e2:	d829      	bhi.n	8004438 <HAL_TIM_ConfigClockSource+0x82>
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d054      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0xdc>
 80043e8:	d90c      	bls.n	8004404 <HAL_TIM_ConfigClockSource+0x4e>
 80043ea:	2b50      	cmp	r3, #80	; 0x50
 80043ec:	d122      	bne.n	8004434 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	68ca      	ldr	r2, [r1, #12]
 80043f0:	6849      	ldr	r1, [r1, #4]
 80043f2:	6800      	ldr	r0, [r0, #0]
 80043f4:	f7ff fcf2 	bl	8003ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f8:	2150      	movs	r1, #80	; 0x50
 80043fa:	6820      	ldr	r0, [r4, #0]
 80043fc:	f7ff fd66 	bl	8003ecc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	2000      	movs	r0, #0
      break;
 8004402:	e005      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004404:	2b20      	cmp	r3, #32
 8004406:	d00d      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0x6e>
 8004408:	d909      	bls.n	800441e <HAL_TIM_ConfigClockSource+0x68>
 800440a:	2b30      	cmp	r3, #48	; 0x30
 800440c:	d00a      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800440e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004410:	2301      	movs	r3, #1
 8004412:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004416:	2300      	movs	r3, #0
 8004418:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800441c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800441e:	b10b      	cbz	r3, 8004424 <HAL_TIM_ConfigClockSource+0x6e>
 8004420:	2b10      	cmp	r3, #16
 8004422:	d105      	bne.n	8004430 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004424:	4619      	mov	r1, r3
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	f7ff fd50 	bl	8003ecc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800442c:	2000      	movs	r0, #0
      break;
 800442e:	e7ef      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004430:	2001      	movs	r0, #1
 8004432:	e7ed      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x5a>
 8004434:	2001      	movs	r0, #1
 8004436:	e7eb      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443c:	d034      	beq.n	80044a8 <HAL_TIM_ConfigClockSource+0xf2>
 800443e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004442:	d10c      	bne.n	800445e <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8004444:	68cb      	ldr	r3, [r1, #12]
 8004446:	684a      	ldr	r2, [r1, #4]
 8004448:	6889      	ldr	r1, [r1, #8]
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	f7ff ffa6 	bl	800439c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004450:	6822      	ldr	r2, [r4, #0]
 8004452:	6893      	ldr	r3, [r2, #8]
 8004454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004458:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2000      	movs	r0, #0
      break;
 800445c:	e7d8      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800445e:	2b70      	cmp	r3, #112	; 0x70
 8004460:	d124      	bne.n	80044ac <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004462:	68cb      	ldr	r3, [r1, #12]
 8004464:	684a      	ldr	r2, [r1, #4]
 8004466:	6889      	ldr	r1, [r1, #8]
 8004468:	6800      	ldr	r0, [r0, #0]
 800446a:	f7ff ff97 	bl	800439c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800446e:	6822      	ldr	r2, [r4, #0]
 8004470:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004472:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004476:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2000      	movs	r0, #0
      break;
 800447a:	e7c9      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800447c:	68ca      	ldr	r2, [r1, #12]
 800447e:	6849      	ldr	r1, [r1, #4]
 8004480:	6800      	ldr	r0, [r0, #0]
 8004482:	f7ff fcd9 	bl	8003e38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004486:	2160      	movs	r1, #96	; 0x60
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	f7ff fd1f 	bl	8003ecc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800448e:	2000      	movs	r0, #0
      break;
 8004490:	e7be      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004492:	68ca      	ldr	r2, [r1, #12]
 8004494:	6849      	ldr	r1, [r1, #4]
 8004496:	6800      	ldr	r0, [r0, #0]
 8004498:	f7ff fca0 	bl	8003ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800449c:	2140      	movs	r1, #64	; 0x40
 800449e:	6820      	ldr	r0, [r4, #0]
 80044a0:	f7ff fd14 	bl	8003ecc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80044a4:	2000      	movs	r0, #0
      break;
 80044a6:	e7b3      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80044a8:	2000      	movs	r0, #0
 80044aa:	e7b1      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80044ac:	2001      	movs	r0, #1
 80044ae:	e7af      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80044b0:	2002      	movs	r0, #2
}
 80044b2:	4770      	bx	lr

080044b4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044b4:	f001 011f 	and.w	r1, r1, #31
 80044b8:	2301      	movs	r3, #1
 80044ba:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044be:	6a03      	ldr	r3, [r0, #32]
 80044c0:	ea23 030c 	bic.w	r3, r3, ip
 80044c4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044c6:	6a03      	ldr	r3, [r0, #32]
 80044c8:	fa02 f101 	lsl.w	r1, r2, r1
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6203      	str	r3, [r0, #32]
}
 80044d0:	4770      	bx	lr
	...

080044d4 <HAL_TIM_IC_Start_IT>:
{
 80044d4:	b510      	push	{r4, lr}
 80044d6:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80044d8:	460b      	mov	r3, r1
 80044da:	bb09      	cbnz	r1, 8004520 <HAL_TIM_IC_Start_IT+0x4c>
 80044dc:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80044e0:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80044e2:	bb6b      	cbnz	r3, 8004540 <HAL_TIM_IC_Start_IT+0x6c>
 80044e4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80044e8:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ea:	2801      	cmp	r0, #1
 80044ec:	f040 80a4 	bne.w	8004638 <HAL_TIM_IC_Start_IT+0x164>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80044f0:	2a01      	cmp	r2, #1
 80044f2:	f040 80a2 	bne.w	800463a <HAL_TIM_IC_Start_IT+0x166>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f6:	bb9b      	cbnz	r3, 8004560 <HAL_TIM_IC_Start_IT+0x8c>
 80044f8:	2102      	movs	r1, #2
 80044fa:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d13e      	bne.n	8004580 <HAL_TIM_IC_Start_IT+0xac>
 8004502:	2102      	movs	r1, #2
 8004504:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  switch (Channel)
 8004508:	2b0c      	cmp	r3, #12
 800450a:	f200 8097 	bhi.w	800463c <HAL_TIM_IC_Start_IT+0x168>
 800450e:	e8df f003 	tbb	[pc, r3]
 8004512:	9547      	.short	0x9547
 8004514:	95769595 	.word	0x95769595
 8004518:	957c9595 	.word	0x957c9595
 800451c:	9595      	.short	0x9595
 800451e:	82          	.byte	0x82
 800451f:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004520:	2904      	cmp	r1, #4
 8004522:	d005      	beq.n	8004530 <HAL_TIM_IC_Start_IT+0x5c>
 8004524:	2908      	cmp	r1, #8
 8004526:	d007      	beq.n	8004538 <HAL_TIM_IC_Start_IT+0x64>
 8004528:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800452c:	b2c0      	uxtb	r0, r0
 800452e:	e7d8      	b.n	80044e2 <HAL_TIM_IC_Start_IT+0xe>
 8004530:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8004534:	b2c0      	uxtb	r0, r0
 8004536:	e7d4      	b.n	80044e2 <HAL_TIM_IC_Start_IT+0xe>
 8004538:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800453c:	b2c0      	uxtb	r0, r0
 800453e:	e7d0      	b.n	80044e2 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004540:	2b04      	cmp	r3, #4
 8004542:	d005      	beq.n	8004550 <HAL_TIM_IC_Start_IT+0x7c>
 8004544:	2b08      	cmp	r3, #8
 8004546:	d007      	beq.n	8004558 <HAL_TIM_IC_Start_IT+0x84>
 8004548:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	e7cc      	b.n	80044ea <HAL_TIM_IC_Start_IT+0x16>
 8004550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	e7c8      	b.n	80044ea <HAL_TIM_IC_Start_IT+0x16>
 8004558:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	e7c4      	b.n	80044ea <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004560:	2b04      	cmp	r3, #4
 8004562:	d005      	beq.n	8004570 <HAL_TIM_IC_Start_IT+0x9c>
 8004564:	2b08      	cmp	r3, #8
 8004566:	d007      	beq.n	8004578 <HAL_TIM_IC_Start_IT+0xa4>
 8004568:	2102      	movs	r1, #2
 800456a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 800456e:	e7c6      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x2a>
 8004570:	2102      	movs	r1, #2
 8004572:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 8004576:	e7c2      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x2a>
 8004578:	2102      	movs	r1, #2
 800457a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 800457e:	e7be      	b.n	80044fe <HAL_TIM_IC_Start_IT+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004580:	2b04      	cmp	r3, #4
 8004582:	d005      	beq.n	8004590 <HAL_TIM_IC_Start_IT+0xbc>
 8004584:	2b08      	cmp	r3, #8
 8004586:	d007      	beq.n	8004598 <HAL_TIM_IC_Start_IT+0xc4>
 8004588:	2102      	movs	r1, #2
 800458a:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800458e:	e7bb      	b.n	8004508 <HAL_TIM_IC_Start_IT+0x34>
 8004590:	2102      	movs	r1, #2
 8004592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004596:	e7b7      	b.n	8004508 <HAL_TIM_IC_Start_IT+0x34>
 8004598:	2102      	movs	r1, #2
 800459a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 800459e:	e7b3      	b.n	8004508 <HAL_TIM_IC_Start_IT+0x34>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045a0:	6821      	ldr	r1, [r4, #0]
 80045a2:	68ca      	ldr	r2, [r1, #12]
 80045a4:	f042 0202 	orr.w	r2, r2, #2
 80045a8:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045aa:	2201      	movs	r2, #1
 80045ac:	4619      	mov	r1, r3
 80045ae:	6820      	ldr	r0, [r4, #0]
 80045b0:	f7ff ff80 	bl	80044b4 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	4a23      	ldr	r2, [pc, #140]	; (8004644 <HAL_TIM_IC_Start_IT+0x170>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d032      	beq.n	8004622 <HAL_TIM_IC_Start_IT+0x14e>
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c0:	d02f      	beq.n	8004622 <HAL_TIM_IC_Start_IT+0x14e>
 80045c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d02b      	beq.n	8004622 <HAL_TIM_IC_Start_IT+0x14e>
 80045ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d027      	beq.n	8004622 <HAL_TIM_IC_Start_IT+0x14e>
 80045d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d023      	beq.n	8004622 <HAL_TIM_IC_Start_IT+0x14e>
 80045da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01f      	beq.n	8004622 <HAL_TIM_IC_Start_IT+0x14e>
 80045e2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01b      	beq.n	8004622 <HAL_TIM_IC_Start_IT+0x14e>
 80045ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d017      	beq.n	8004622 <HAL_TIM_IC_Start_IT+0x14e>
      __HAL_TIM_ENABLE(htim);
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	2000      	movs	r0, #0
 80045fc:	e01d      	b.n	800463a <HAL_TIM_IC_Start_IT+0x166>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045fe:	6821      	ldr	r1, [r4, #0]
 8004600:	68ca      	ldr	r2, [r1, #12]
 8004602:	f042 0204 	orr.w	r2, r2, #4
 8004606:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004608:	e7cf      	b.n	80045aa <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800460a:	6821      	ldr	r1, [r4, #0]
 800460c:	68ca      	ldr	r2, [r1, #12]
 800460e:	f042 0208 	orr.w	r2, r2, #8
 8004612:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004614:	e7c9      	b.n	80045aa <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004616:	6821      	ldr	r1, [r4, #0]
 8004618:	68ca      	ldr	r2, [r1, #12]
 800461a:	f042 0210 	orr.w	r2, r2, #16
 800461e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004620:	e7c3      	b.n	80045aa <HAL_TIM_IC_Start_IT+0xd6>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004628:	2a06      	cmp	r2, #6
 800462a:	d009      	beq.n	8004640 <HAL_TIM_IC_Start_IT+0x16c>
        __HAL_TIM_ENABLE(htim);
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	2000      	movs	r0, #0
 8004636:	e000      	b.n	800463a <HAL_TIM_IC_Start_IT+0x166>
    return HAL_ERROR;
 8004638:	2001      	movs	r0, #1
}
 800463a:	bd10      	pop	{r4, pc}
  switch (Channel)
 800463c:	4610      	mov	r0, r2
 800463e:	e7fc      	b.n	800463a <HAL_TIM_IC_Start_IT+0x166>
 8004640:	2000      	movs	r0, #0
 8004642:	e7fa      	b.n	800463a <HAL_TIM_IC_Start_IT+0x166>
 8004644:	40010000 	.word	0x40010000

08004648 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004648:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d03d      	beq.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8004650:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8004652:	2301      	movs	r3, #1
 8004654:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	2302      	movs	r3, #2
 800465a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800465e:	6803      	ldr	r3, [r0, #0]
 8004660:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004662:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004664:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004668:	680a      	ldr	r2, [r1, #0]
 800466a:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004670:	6803      	ldr	r3, [r0, #0]
 8004672:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d01a      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467c:	d017      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800467e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004686:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800468a:	4293      	cmp	r3, r2
 800468c:	d00f      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800468e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004692:	4293      	cmp	r3, r2
 8004694:	d00b      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004696:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800469e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80046a6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d104      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ae:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b2:	684a      	ldr	r2, [r1, #4]
 80046b4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046b6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046be:	2300      	movs	r3, #0
 80046c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80046c4:	4618      	mov	r0, r3
}
 80046c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046ca:	4770      	bx	lr
  __HAL_LOCK(htim);
 80046cc:	2002      	movs	r0, #2
}
 80046ce:	4770      	bx	lr
 80046d0:	40010000 	.word	0x40010000

080046d4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d6:	4770      	bx	lr

080046d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046dc:	6802      	ldr	r2, [r0, #0]
 80046de:	6913      	ldr	r3, [r2, #16]
 80046e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046e4:	68c1      	ldr	r1, [r0, #12]
 80046e6:	430b      	orrs	r3, r1
 80046e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ea:	6883      	ldr	r3, [r0, #8]
 80046ec:	6902      	ldr	r2, [r0, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	6942      	ldr	r2, [r0, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	69c2      	ldr	r2, [r0, #28]
 80046f6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80046f8:	6801      	ldr	r1, [r0, #0]
 80046fa:	68cb      	ldr	r3, [r1, #12]
 80046fc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004700:	f023 030c 	bic.w	r3, r3, #12
 8004704:	4313      	orrs	r3, r2
 8004706:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004708:	6802      	ldr	r2, [r0, #0]
 800470a:	6953      	ldr	r3, [r2, #20]
 800470c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004710:	6981      	ldr	r1, [r0, #24]
 8004712:	430b      	orrs	r3, r1
 8004714:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004716:	6803      	ldr	r3, [r0, #0]
 8004718:	4a31      	ldr	r2, [pc, #196]	; (80047e0 <UART_SetConfig+0x108>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d006      	beq.n	800472c <UART_SetConfig+0x54>
 800471e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004722:	4293      	cmp	r3, r2
 8004724:	d002      	beq.n	800472c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004726:	f7fd fdf1 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 800472a:	e001      	b.n	8004730 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800472c:	f7fd fdfe 	bl	800232c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004730:	69e3      	ldr	r3, [r4, #28]
 8004732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004736:	d029      	beq.n	800478c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004738:	2100      	movs	r1, #0
 800473a:	1803      	adds	r3, r0, r0
 800473c:	4149      	adcs	r1, r1
 800473e:	181b      	adds	r3, r3, r0
 8004740:	f141 0100 	adc.w	r1, r1, #0
 8004744:	00c9      	lsls	r1, r1, #3
 8004746:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	1818      	adds	r0, r3, r0
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004754:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8004758:	f141 0100 	adc.w	r1, r1, #0
 800475c:	f7fc fba2 	bl	8000ea4 <__aeabi_uldivmod>
 8004760:	4d20      	ldr	r5, [pc, #128]	; (80047e4 <UART_SetConfig+0x10c>)
 8004762:	fba5 3200 	umull	r3, r2, r5, r0
 8004766:	0951      	lsrs	r1, r2, #5
 8004768:	2364      	movs	r3, #100	; 0x64
 800476a:	fb03 0311 	mls	r3, r3, r1, r0
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	3332      	adds	r3, #50	; 0x32
 8004772:	fba5 2303 	umull	r2, r3, r5, r3
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800477c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	6821      	ldr	r1, [r4, #0]
 8004786:	4413      	add	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }
}
 800478a:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800478c:	2300      	movs	r3, #0
 800478e:	1802      	adds	r2, r0, r0
 8004790:	eb43 0103 	adc.w	r1, r3, r3
 8004794:	1812      	adds	r2, r2, r0
 8004796:	f141 0100 	adc.w	r1, r1, #0
 800479a:	00c9      	lsls	r1, r1, #3
 800479c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047a0:	00d2      	lsls	r2, r2, #3
 80047a2:	1810      	adds	r0, r2, r0
 80047a4:	f141 0100 	adc.w	r1, r1, #0
 80047a8:	6862      	ldr	r2, [r4, #4]
 80047aa:	1892      	adds	r2, r2, r2
 80047ac:	415b      	adcs	r3, r3
 80047ae:	f7fc fb79 	bl	8000ea4 <__aeabi_uldivmod>
 80047b2:	4d0c      	ldr	r5, [pc, #48]	; (80047e4 <UART_SetConfig+0x10c>)
 80047b4:	fba5 3200 	umull	r3, r2, r5, r0
 80047b8:	0951      	lsrs	r1, r2, #5
 80047ba:	2364      	movs	r3, #100	; 0x64
 80047bc:	fb03 0311 	mls	r3, r3, r1, r0
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	3332      	adds	r3, #50	; 0x32
 80047c4:	fba5 2303 	umull	r2, r3, r5, r3
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	005a      	lsls	r2, r3, #1
 80047cc:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80047d0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	6821      	ldr	r1, [r4, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
 80047de:	e7d4      	b.n	800478a <UART_SetConfig+0xb2>
 80047e0:	40011000 	.word	0x40011000
 80047e4:	51eb851f 	.word	0x51eb851f

080047e8 <UART_WaitOnFlagUntilTimeout>:
{
 80047e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047ec:	4605      	mov	r5, r0
 80047ee:	460f      	mov	r7, r1
 80047f0:	4616      	mov	r6, r2
 80047f2:	4699      	mov	r9, r3
 80047f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f8:	682c      	ldr	r4, [r5, #0]
 80047fa:	6824      	ldr	r4, [r4, #0]
 80047fc:	ea37 0304 	bics.w	r3, r7, r4
 8004800:	bf0c      	ite	eq
 8004802:	f04f 0c01 	moveq.w	ip, #1
 8004806:	f04f 0c00 	movne.w	ip, #0
 800480a:	45b4      	cmp	ip, r6
 800480c:	d12d      	bne.n	800486a <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 800480e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004812:	d0f1      	beq.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004814:	f1b8 0f00 	cmp.w	r8, #0
 8004818:	d005      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0x3e>
 800481a:	f7fc fceb 	bl	80011f4 <HAL_GetTick>
 800481e:	eba0 0009 	sub.w	r0, r0, r9
 8004822:	4540      	cmp	r0, r8
 8004824:	d9e8      	bls.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004826:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	f102 030c 	add.w	r3, r2, #12
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	320c      	adds	r2, #12
 8004836:	e842 3100 	strex	r1, r3, [r2]
 800483a:	2900      	cmp	r1, #0
 800483c:	d1f3      	bne.n	8004826 <UART_WaitOnFlagUntilTimeout+0x3e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	f102 0314 	add.w	r3, r2, #20
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	3214      	adds	r2, #20
 800484e:	e842 3100 	strex	r1, r3, [r2]
 8004852:	2900      	cmp	r1, #0
 8004854:	d1f3      	bne.n	800483e <UART_WaitOnFlagUntilTimeout+0x56>
        huart->gState  = HAL_UART_STATE_READY;
 8004856:	2320      	movs	r3, #32
 8004858:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800485c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004860:	2300      	movs	r3, #0
 8004862:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004866:	2003      	movs	r0, #3
 8004868:	e000      	b.n	800486c <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 800486a:	2000      	movs	r0, #0
}
 800486c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004870 <HAL_UART_Init>:
  if (huart == NULL)
 8004870:	b358      	cbz	r0, 80048ca <HAL_UART_Init+0x5a>
{
 8004872:	b510      	push	{r4, lr}
 8004874:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004876:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800487a:	b30b      	cbz	r3, 80048c0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800487c:	2324      	movs	r3, #36	; 0x24
 800487e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	68d3      	ldr	r3, [r2, #12]
 8004886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800488a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800488c:	4620      	mov	r0, r4
 800488e:	f7ff ff23 	bl	80046d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	6913      	ldr	r3, [r2, #16]
 8004896:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800489a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	6953      	ldr	r3, [r2, #20]
 80048a0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80048a4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	68d3      	ldr	r3, [r2, #12]
 80048aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048ae:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b0:	2000      	movs	r0, #0
 80048b2:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048b4:	2320      	movs	r3, #32
 80048b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80048be:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80048c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80048c4:	f006 fbf6 	bl	800b0b4 <HAL_UART_MspInit>
 80048c8:	e7d8      	b.n	800487c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80048ca:	2001      	movs	r0, #1
}
 80048cc:	4770      	bx	lr

080048ce <HAL_UART_Transmit>:
{
 80048ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80048d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d154      	bne.n	800498a <HAL_UART_Transmit+0xbc>
 80048e0:	4604      	mov	r4, r0
 80048e2:	460d      	mov	r5, r1
 80048e4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80048e6:	2900      	cmp	r1, #0
 80048e8:	d053      	beq.n	8004992 <HAL_UART_Transmit+0xc4>
 80048ea:	2a00      	cmp	r2, #0
 80048ec:	d053      	beq.n	8004996 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80048ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d051      	beq.n	800499a <HAL_UART_Transmit+0xcc>
 80048f6:	2301      	movs	r3, #1
 80048f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004900:	2321      	movs	r3, #33	; 0x21
 8004902:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004906:	f7fc fc75 	bl	80011f4 <HAL_GetTick>
 800490a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800490c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004910:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004914:	68a3      	ldr	r3, [r4, #8]
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491a:	d005      	beq.n	8004928 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 800491c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8004920:	2300      	movs	r3, #0
 8004922:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004926:	e012      	b.n	800494e <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004928:	6923      	ldr	r3, [r4, #16]
 800492a:	b113      	cbz	r3, 8004932 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 800492c:	f04f 0800 	mov.w	r8, #0
 8004930:	e7f6      	b.n	8004920 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 8004932:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004934:	2500      	movs	r5, #0
 8004936:	e7f3      	b.n	8004920 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004938:	f838 3b02 	ldrh.w	r3, [r8], #2
 800493c:	6822      	ldr	r2, [r4, #0]
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004944:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004946:	b292      	uxth	r2, r2
 8004948:	3a01      	subs	r2, #1
 800494a:	b292      	uxth	r2, r2
 800494c:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800494e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004950:	b29b      	uxth	r3, r3
 8004952:	b173      	cbz	r3, 8004972 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004954:	9600      	str	r6, [sp, #0]
 8004956:	463b      	mov	r3, r7
 8004958:	2200      	movs	r2, #0
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	4620      	mov	r0, r4
 800495e:	f7ff ff43 	bl	80047e8 <UART_WaitOnFlagUntilTimeout>
 8004962:	b9e0      	cbnz	r0, 800499e <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8004964:	2d00      	cmp	r5, #0
 8004966:	d0e7      	beq.n	8004938 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004968:	f815 2b01 	ldrb.w	r2, [r5], #1
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004970:	e7e8      	b.n	8004944 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004972:	9600      	str	r6, [sp, #0]
 8004974:	463b      	mov	r3, r7
 8004976:	2200      	movs	r2, #0
 8004978:	2140      	movs	r1, #64	; 0x40
 800497a:	4620      	mov	r0, r4
 800497c:	f7ff ff34 	bl	80047e8 <UART_WaitOnFlagUntilTimeout>
 8004980:	b978      	cbnz	r0, 80049a2 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8004982:	2320      	movs	r3, #32
 8004984:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004988:	e000      	b.n	800498c <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 800498a:	2002      	movs	r0, #2
}
 800498c:	b002      	add	sp, #8
 800498e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004992:	2001      	movs	r0, #1
 8004994:	e7fa      	b.n	800498c <HAL_UART_Transmit+0xbe>
 8004996:	2001      	movs	r0, #1
 8004998:	e7f8      	b.n	800498c <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 800499a:	2002      	movs	r0, #2
 800499c:	e7f6      	b.n	800498c <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 800499e:	2003      	movs	r0, #3
 80049a0:	e7f4      	b.n	800498c <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80049a2:	2003      	movs	r0, #3
 80049a4:	e7f2      	b.n	800498c <HAL_UART_Transmit+0xbe>
	...

080049a8 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <SDMMC_GetCmdError+0x30>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0b      	ldr	r2, [pc, #44]	; (80049dc <SDMMC_GetCmdError+0x34>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0a5b      	lsrs	r3, r3, #9
 80049b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 80049bc:	461a      	mov	r2, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b13a      	cbz	r2, 80049d2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80049c2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80049c4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80049c8:	d0f8      	beq.n	80049bc <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80049ca:	23c5      	movs	r3, #197	; 0xc5
 80049cc:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80049ce:	2000      	movs	r0, #0
 80049d0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80049d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80049d6:	4770      	bx	lr
 80049d8:	20000020 	.word	0x20000020
 80049dc:	10624dd3 	.word	0x10624dd3

080049e0 <SDIO_Init>:
{
 80049e0:	b084      	sub	sp, #16
 80049e2:	f10d 0c04 	add.w	ip, sp, #4
 80049e6:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80049ea:	460b      	mov	r3, r1
 80049ec:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 80049ee:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 80049f0:	4313      	orrs	r3, r2
             Init.BusWide             |\
 80049f2:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 80049f4:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 80049f6:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 80049f8:	4313      	orrs	r3, r2
             Init.ClockDiv
 80049fa:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 80049fc:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80049fe:	6842      	ldr	r2, [r0, #4]
 8004a00:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8004a04:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	6043      	str	r3, [r0, #4]
}
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	b004      	add	sp, #16
 8004a10:	4770      	bx	lr

08004a12 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8004a12:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8004a16:	4770      	bx	lr

08004a18 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8004a18:	680b      	ldr	r3, [r1, #0]
 8004a1a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8004a1e:	2000      	movs	r0, #0
 8004a20:	4770      	bx	lr

08004a22 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004a22:	2303      	movs	r3, #3
 8004a24:	6003      	str	r3, [r0, #0]
}
 8004a26:	2000      	movs	r0, #0
 8004a28:	4770      	bx	lr

08004a2a <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004a2a:	6800      	ldr	r0, [r0, #0]
}
 8004a2c:	f000 0003 	and.w	r0, r0, #3
 8004a30:	4770      	bx	lr

08004a32 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8004a32:	680b      	ldr	r3, [r1, #0]
 8004a34:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a36:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8004a38:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a3a:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8004a3c:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8004a3e:	4313      	orrs	r3, r2
                       Command->CPSM);
 8004a40:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8004a42:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004a44:	68c2      	ldr	r2, [r0, #12]
 8004a46:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004a4a:	f022 020f 	bic.w	r2, r2, #15
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60c3      	str	r3, [r0, #12]
}
 8004a52:	2000      	movs	r0, #0
 8004a54:	4770      	bx	lr

08004a56 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8004a56:	6900      	ldr	r0, [r0, #16]
}
 8004a58:	b2c0      	uxtb	r0, r0
 8004a5a:	4770      	bx	lr

08004a5c <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004a5c:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8004a5e:	5840      	ldr	r0, [r0, r1]
}  
 8004a60:	4770      	bx	lr

08004a62 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8004a62:	680b      	ldr	r3, [r1, #0]
 8004a64:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8004a66:	684b      	ldr	r3, [r1, #4]
 8004a68:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a6a:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8004a6c:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a6e:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8004a70:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8004a72:	4313      	orrs	r3, r2
                       Data->DPSM);
 8004a74:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8004a76:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004a78:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004a7a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004a82:	2000      	movs	r0, #0
 8004a84:	4770      	bx	lr

08004a86 <SDMMC_CmdGoIdleState>:
{
 8004a86:	b510      	push	{r4, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004a90:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004a92:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a94:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a9a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a9c:	a901      	add	r1, sp, #4
 8004a9e:	f7ff ffc8 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f7ff ff80 	bl	80049a8 <SDMMC_GetCmdError>
}
 8004aa8:	b006      	add	sp, #24
 8004aaa:	bd10      	pop	{r4, pc}

08004aac <SDMMC_GetCmdResp1>:
{
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4604      	mov	r4, r0
 8004ab0:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004ab2:	4b50      	ldr	r3, [pc, #320]	; (8004bf4 <SDMMC_GetCmdResp1+0x148>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4950      	ldr	r1, [pc, #320]	; (8004bf8 <SDMMC_GetCmdResp1+0x14c>)
 8004ab8:	fba1 1303 	umull	r1, r3, r1, r3
 8004abc:	0a5b      	lsrs	r3, r3, #9
 8004abe:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	3a01      	subs	r2, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d05d      	beq.n	8004b86 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8004aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004acc:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004ad0:	d0f7      	beq.n	8004ac2 <SDMMC_GetCmdResp1+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ad2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ad6:	d1f4      	bne.n	8004ac2 <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ada:	f013 0f04 	tst.w	r3, #4
 8004ade:	d106      	bne.n	8004aee <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ae2:	f013 0f01 	tst.w	r3, #1
 8004ae6:	d005      	beq.n	8004af4 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ae8:	2001      	movs	r0, #1
 8004aea:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004aec:	e04d      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004aee:	2004      	movs	r0, #4
 8004af0:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004af2:	e04a      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004af4:	23c5      	movs	r3, #197	; 0xc5
 8004af6:	63a3      	str	r3, [r4, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004af8:	4620      	mov	r0, r4
 8004afa:	f7ff ffac 	bl	8004a56 <SDIO_GetCommandResponse>
 8004afe:	42a8      	cmp	r0, r5
 8004b00:	d001      	beq.n	8004b06 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b02:	2001      	movs	r0, #1
 8004b04:	e041      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004b06:	2100      	movs	r1, #0
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f7ff ffa7 	bl	8004a5c <SDIO_GetResponse>
 8004b0e:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004b10:	483a      	ldr	r0, [pc, #232]	; (8004bfc <SDMMC_GetCmdResp1+0x150>)
 8004b12:	4018      	ands	r0, r3
 8004b14:	b3c8      	cbz	r0, 8004b8a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	db38      	blt.n	8004b8c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004b1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004b1e:	d138      	bne.n	8004b92 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004b20:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004b24:	d137      	bne.n	8004b96 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004b26:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004b2a:	d136      	bne.n	8004b9a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004b2c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004b30:	d136      	bne.n	8004ba0 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004b32:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8004b36:	d136      	bne.n	8004ba6 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004b38:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004b3c:	d136      	bne.n	8004bac <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b3e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004b42:	d136      	bne.n	8004bb2 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b44:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b48:	d136      	bne.n	8004bb8 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004b4a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004b4e:	d136      	bne.n	8004bbe <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004b50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004b54:	d136      	bne.n	8004bc4 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004b56:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004b5a:	d136      	bne.n	8004bca <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004b5c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b60:	d136      	bne.n	8004bd0 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004b62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004b66:	d136      	bne.n	8004bd6 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004b68:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004b6c:	d136      	bne.n	8004bdc <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004b6e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004b72:	d136      	bne.n	8004be2 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004b74:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004b78:	d136      	bne.n	8004be8 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004b7a:	f013 0f08 	tst.w	r3, #8
 8004b7e:	d036      	beq.n	8004bee <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004b80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004b84:	e001      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8004b86:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004b8c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004b90:	e7fb      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004b92:	2040      	movs	r0, #64	; 0x40
 8004b94:	e7f9      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004b96:	2080      	movs	r0, #128	; 0x80
 8004b98:	e7f7      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004b9a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004b9e:	e7f4      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ba0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ba4:	e7f1      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004ba6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004baa:	e7ee      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004bac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004bb0:	e7eb      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004bb2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004bb6:	e7e8      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004bb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004bbc:	e7e5      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004bbe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004bc2:	e7e2      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8004bc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004bc8:	e7df      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004bca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004bce:	e7dc      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004bd0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004bd4:	e7d9      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004bd6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004bda:	e7d6      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004bdc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004be0:	e7d3      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004be2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004be6:	e7d0      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8004be8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004bec:	e7cd      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004bee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004bf2:	e7ca      	b.n	8004b8a <SDMMC_GetCmdResp1+0xde>
 8004bf4:	20000020 	.word	0x20000020
 8004bf8:	10624dd3 	.word	0x10624dd3
 8004bfc:	fdffe008 	.word	0xfdffe008

08004c00 <SDMMC_CmdBlockLength>:
{
 8004c00:	b530      	push	{r4, r5, lr}
 8004c02:	b087      	sub	sp, #28
 8004c04:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004c06:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004c08:	2510      	movs	r5, #16
 8004c0a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c0c:	2340      	movs	r3, #64	; 0x40
 8004c0e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c10:	2300      	movs	r3, #0
 8004c12:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c18:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c1a:	a901      	add	r1, sp, #4
 8004c1c:	f7ff ff09 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c24:	4629      	mov	r1, r5
 8004c26:	4620      	mov	r0, r4
 8004c28:	f7ff ff40 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004c2c:	b007      	add	sp, #28
 8004c2e:	bd30      	pop	{r4, r5, pc}

08004c30 <SDMMC_CmdReadSingleBlock>:
{
 8004c30:	b530      	push	{r4, r5, lr}
 8004c32:	b087      	sub	sp, #28
 8004c34:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c36:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004c38:	2511      	movs	r5, #17
 8004c3a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c3c:	2340      	movs	r3, #64	; 0x40
 8004c3e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c40:	2300      	movs	r3, #0
 8004c42:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c48:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c4a:	a901      	add	r1, sp, #4
 8004c4c:	f7ff fef1 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4629      	mov	r1, r5
 8004c56:	4620      	mov	r0, r4
 8004c58:	f7ff ff28 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004c5c:	b007      	add	sp, #28
 8004c5e:	bd30      	pop	{r4, r5, pc}

08004c60 <SDMMC_CmdReadMultiBlock>:
{
 8004c60:	b530      	push	{r4, r5, lr}
 8004c62:	b087      	sub	sp, #28
 8004c64:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c66:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004c68:	2512      	movs	r5, #18
 8004c6a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c6c:	2340      	movs	r3, #64	; 0x40
 8004c6e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c70:	2300      	movs	r3, #0
 8004c72:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c78:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c7a:	a901      	add	r1, sp, #4
 8004c7c:	f7ff fed9 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c84:	4629      	mov	r1, r5
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7ff ff10 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004c8c:	b007      	add	sp, #28
 8004c8e:	bd30      	pop	{r4, r5, pc}

08004c90 <SDMMC_CmdWriteSingleBlock>:
{
 8004c90:	b530      	push	{r4, r5, lr}
 8004c92:	b087      	sub	sp, #28
 8004c94:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c96:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004c98:	2518      	movs	r5, #24
 8004c9a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004caa:	a901      	add	r1, sp, #4
 8004cac:	f7ff fec1 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7ff fef8 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004cbc:	b007      	add	sp, #28
 8004cbe:	bd30      	pop	{r4, r5, pc}

08004cc0 <SDMMC_CmdWriteMultiBlock>:
{
 8004cc0:	b530      	push	{r4, r5, lr}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004cc6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004cc8:	2519      	movs	r5, #25
 8004cca:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ccc:	2340      	movs	r3, #64	; 0x40
 8004cce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cda:	a901      	add	r1, sp, #4
 8004cdc:	f7ff fea9 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f7ff fee0 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004cec:	b007      	add	sp, #28
 8004cee:	bd30      	pop	{r4, r5, pc}

08004cf0 <SDMMC_CmdStopTransfer>:
{
 8004cf0:	b530      	push	{r4, r5, lr}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004cfa:	250c      	movs	r5, #12
 8004cfc:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d02:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d08:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d0a:	a901      	add	r1, sp, #4
 8004d0c:	f7ff fe91 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004d10:	4a03      	ldr	r2, [pc, #12]	; (8004d20 <SDMMC_CmdStopTransfer+0x30>)
 8004d12:	4629      	mov	r1, r5
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7ff fec9 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004d1a:	b007      	add	sp, #28
 8004d1c:	bd30      	pop	{r4, r5, pc}
 8004d1e:	bf00      	nop
 8004d20:	05f5e100 	.word	0x05f5e100

08004d24 <SDMMC_CmdSelDesel>:
{
 8004d24:	b530      	push	{r4, r5, lr}
 8004d26:	b087      	sub	sp, #28
 8004d28:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004d2a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004d2c:	2507      	movs	r5, #7
 8004d2e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d30:	2340      	movs	r3, #64	; 0x40
 8004d32:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d34:	2300      	movs	r3, #0
 8004d36:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d3c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d3e:	a901      	add	r1, sp, #4
 8004d40:	f7ff fe77 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f7ff feae 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004d50:	b007      	add	sp, #28
 8004d52:	bd30      	pop	{r4, r5, pc}

08004d54 <SDMMC_CmdAppCommand>:
{
 8004d54:	b530      	push	{r4, r5, lr}
 8004d56:	b087      	sub	sp, #28
 8004d58:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004d5a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004d5c:	2537      	movs	r5, #55	; 0x37
 8004d5e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d60:	2340      	movs	r3, #64	; 0x40
 8004d62:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d64:	2300      	movs	r3, #0
 8004d66:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d6c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d6e:	a901      	add	r1, sp, #4
 8004d70:	f7ff fe5f 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f7ff fe96 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004d80:	b007      	add	sp, #28
 8004d82:	bd30      	pop	{r4, r5, pc}

08004d84 <SDMMC_CmdBusWidth>:
{
 8004d84:	b530      	push	{r4, r5, lr}
 8004d86:	b087      	sub	sp, #28
 8004d88:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004d8a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004d8c:	2506      	movs	r5, #6
 8004d8e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d90:	2340      	movs	r3, #64	; 0x40
 8004d92:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d94:	2300      	movs	r3, #0
 8004d96:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d9c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d9e:	a901      	add	r1, sp, #4
 8004da0:	f7ff fe47 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da8:	4629      	mov	r1, r5
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7ff fe7e 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004db0:	b007      	add	sp, #28
 8004db2:	bd30      	pop	{r4, r5, pc}

08004db4 <SDMMC_CmdSendSCR>:
{
 8004db4:	b530      	push	{r4, r5, lr}
 8004db6:	b087      	sub	sp, #28
 8004db8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004dbe:	2533      	movs	r5, #51	; 0x33
 8004dc0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dc2:	2240      	movs	r2, #64	; 0x40
 8004dc4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dc6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dcc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dce:	a901      	add	r1, sp, #4
 8004dd0:	f7ff fe2f 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd8:	4629      	mov	r1, r5
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f7ff fe66 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004de0:	b007      	add	sp, #28
 8004de2:	bd30      	pop	{r4, r5, pc}

08004de4 <SDMMC_CmdSendStatus>:
{
 8004de4:	b530      	push	{r4, r5, lr}
 8004de6:	b087      	sub	sp, #28
 8004de8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004dea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004dec:	250d      	movs	r5, #13
 8004dee:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004df0:	2340      	movs	r3, #64	; 0x40
 8004df2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004df4:	2300      	movs	r3, #0
 8004df6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dfc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dfe:	a901      	add	r1, sp, #4
 8004e00:	f7ff fe17 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f7ff fe4e 	bl	8004aac <SDMMC_GetCmdResp1>
}
 8004e10:	b007      	add	sp, #28
 8004e12:	bd30      	pop	{r4, r5, pc}

08004e14 <SDMMC_GetCmdResp2>:
{
 8004e14:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <SDMMC_GetCmdResp2+0x54>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <SDMMC_GetCmdResp2+0x58>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	0a5b      	lsrs	r3, r3, #9
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b1ba      	cbz	r2, 8004e60 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 8004e30:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e32:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004e36:	d0f8      	beq.n	8004e2a <SDMMC_GetCmdResp2+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e38:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004e3c:	d1f5      	bne.n	8004e2a <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e3e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004e40:	f013 0f04 	tst.w	r3, #4
 8004e44:	d106      	bne.n	8004e54 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e46:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004e48:	f010 0001 	ands.w	r0, r0, #1
 8004e4c:	d105      	bne.n	8004e5a <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e4e:	23c5      	movs	r3, #197	; 0xc5
 8004e50:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004e52:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e54:	2004      	movs	r0, #4
 8004e56:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e58:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e5e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004e60:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000020 	.word	0x20000020
 8004e6c:	10624dd3 	.word	0x10624dd3

08004e70 <SDMMC_CmdSendCID>:
{
 8004e70:	b510      	push	{r4, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e7e:	22c0      	movs	r2, #192	; 0xc0
 8004e80:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e82:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e88:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e8a:	a901      	add	r1, sp, #4
 8004e8c:	f7ff fdd1 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004e90:	4620      	mov	r0, r4
 8004e92:	f7ff ffbf 	bl	8004e14 <SDMMC_GetCmdResp2>
}
 8004e96:	b006      	add	sp, #24
 8004e98:	bd10      	pop	{r4, pc}

08004e9a <SDMMC_CmdSendCSD>:
{
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004ea0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004ea2:	2309      	movs	r3, #9
 8004ea4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004ea6:	23c0      	movs	r3, #192	; 0xc0
 8004ea8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eb2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eb4:	a901      	add	r1, sp, #4
 8004eb6:	f7ff fdbc 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7ff ffaa 	bl	8004e14 <SDMMC_GetCmdResp2>
}
 8004ec0:	b006      	add	sp, #24
 8004ec2:	bd10      	pop	{r4, pc}

08004ec4 <SDMMC_GetCmdResp3>:
{
 8004ec4:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ec6:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <SDMMC_GetCmdResp3+0x44>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <SDMMC_GetCmdResp3+0x48>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	0a5b      	lsrs	r3, r3, #9
 8004ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004eda:	461a      	mov	r2, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b182      	cbz	r2, 8004f02 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 8004ee0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ee2:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004ee6:	d0f8      	beq.n	8004eda <SDMMC_GetCmdResp3+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ee8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004eec:	d1f5      	bne.n	8004eda <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004eee:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004ef0:	f010 0004 	ands.w	r0, r0, #4
 8004ef4:	d102      	bne.n	8004efc <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ef6:	23c5      	movs	r3, #197	; 0xc5
 8004ef8:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004efa:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004efc:	2004      	movs	r0, #4
 8004efe:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f00:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004f02:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004f06:	4770      	bx	lr
 8004f08:	20000020 	.word	0x20000020
 8004f0c:	10624dd3 	.word	0x10624dd3

08004f10 <SDMMC_CmdAppOperCommand>:
{
 8004f10:	b510      	push	{r4, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004f16:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004f1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f1e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004f20:	2329      	movs	r3, #41	; 0x29
 8004f22:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f24:	2340      	movs	r3, #64	; 0x40
 8004f26:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f30:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f32:	a901      	add	r1, sp, #4
 8004f34:	f7ff fd7d 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f7ff ffc3 	bl	8004ec4 <SDMMC_GetCmdResp3>
}
 8004f3e:	b006      	add	sp, #24
 8004f40:	bd10      	pop	{r4, pc}
	...

08004f44 <SDMMC_GetCmdResp6>:
{
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	4605      	mov	r5, r0
 8004f48:	460e      	mov	r6, r1
 8004f4a:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f4c:	4b23      	ldr	r3, [pc, #140]	; (8004fdc <SDMMC_GetCmdResp6+0x98>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <SDMMC_GetCmdResp6+0x9c>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	0a5b      	lsrs	r3, r3, #9
 8004f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5c:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004f60:	461a      	mov	r2, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b38a      	cbz	r2, 8004fca <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 8004f66:	6b6c      	ldr	r4, [r5, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f68:	f014 0f45 	tst.w	r4, #69	; 0x45
 8004f6c:	d0f8      	beq.n	8004f60 <SDMMC_GetCmdResp6+0x1c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f6e:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8004f72:	d1f5      	bne.n	8004f60 <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f74:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004f76:	f013 0f04 	tst.w	r3, #4
 8004f7a:	d106      	bne.n	8004f8a <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004f7e:	f013 0f01 	tst.w	r3, #1
 8004f82:	d005      	beq.n	8004f90 <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f84:	2001      	movs	r0, #1
 8004f86:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f88:	e021      	b.n	8004fce <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f8a:	2004      	movs	r0, #4
 8004f8c:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f8e:	e01e      	b.n	8004fce <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004f90:	4628      	mov	r0, r5
 8004f92:	f7ff fd60 	bl	8004a56 <SDIO_GetCommandResponse>
 8004f96:	42b0      	cmp	r0, r6
 8004f98:	d001      	beq.n	8004f9e <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	e017      	b.n	8004fce <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f9e:	23c5      	movs	r3, #197	; 0xc5
 8004fa0:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f7ff fd59 	bl	8004a5c <SDIO_GetResponse>
 8004faa:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004fac:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 8004fb0:	d008      	beq.n	8004fc4 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004fb2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004fb6:	d10b      	bne.n	8004fd0 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004fb8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004fbc:	d00b      	beq.n	8004fd6 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004fbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004fc2:	e004      	b.n	8004fce <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8004fc8:	e001      	b.n	8004fce <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8004fca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004fd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004fd4:	e7fb      	b.n	8004fce <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004fd6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004fda:	e7f8      	b.n	8004fce <SDMMC_GetCmdResp6+0x8a>
 8004fdc:	20000020 	.word	0x20000020
 8004fe0:	10624dd3 	.word	0x10624dd3

08004fe4 <SDMMC_CmdSetRelAdd>:
{
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	4604      	mov	r4, r0
 8004fea:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004ff0:	2603      	movs	r6, #3
 8004ff2:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ff4:	2240      	movs	r2, #64	; 0x40
 8004ff6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ff8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ffe:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005000:	a901      	add	r1, sp, #4
 8005002:	f7ff fd16 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005006:	462a      	mov	r2, r5
 8005008:	4631      	mov	r1, r6
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff ff9a 	bl	8004f44 <SDMMC_GetCmdResp6>
}
 8005010:	b006      	add	sp, #24
 8005012:	bd70      	pop	{r4, r5, r6, pc}

08005014 <SDMMC_GetCmdResp7>:
{
 8005014:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <SDMMC_GetCmdResp7+0x5c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a16      	ldr	r2, [pc, #88]	; (8005074 <SDMMC_GetCmdResp7+0x60>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	0a5b      	lsrs	r3, r3, #9
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800502a:	461a      	mov	r2, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b1e2      	cbz	r2, 800506a <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8005030:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005032:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005036:	d0f8      	beq.n	800502a <SDMMC_GetCmdResp7+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005038:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800503c:	d1f5      	bne.n	800502a <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800503e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005040:	f013 0f04 	tst.w	r3, #4
 8005044:	d10b      	bne.n	800505e <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005046:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005048:	f013 0301 	ands.w	r3, r3, #1
 800504c:	d10a      	bne.n	8005064 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800504e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005050:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8005054:	d00b      	beq.n	800506e <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005056:	2240      	movs	r2, #64	; 0x40
 8005058:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800505a:	4618      	mov	r0, r3
 800505c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800505e:	2004      	movs	r0, #4
 8005060:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005062:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005064:	2001      	movs	r0, #1
 8005066:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005068:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800506a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800506e:	4770      	bx	lr
 8005070:	20000020 	.word	0x20000020
 8005074:	10624dd3 	.word	0x10624dd3

08005078 <SDMMC_CmdOperCond>:
{
 8005078:	b510      	push	{r4, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800507e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005082:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005084:	2308      	movs	r3, #8
 8005086:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005088:	2340      	movs	r3, #64	; 0x40
 800508a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800508c:	2300      	movs	r3, #0
 800508e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005094:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005096:	a901      	add	r1, sp, #4
 8005098:	f7ff fccb 	bl	8004a32 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800509c:	4620      	mov	r0, r4
 800509e:	f7ff ffb9 	bl	8005014 <SDMMC_GetCmdResp7>
}
 80050a2:	b006      	add	sp, #24
 80050a4:	bd10      	pop	{r4, pc}
	...

080050a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80050a8:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80050aa:	4b04      	ldr	r3, [pc, #16]	; (80050bc <disk_status+0x14>)
 80050ac:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80050b0:	6852      	ldr	r2, [r2, #4]
 80050b2:	6852      	ldr	r2, [r2, #4]
 80050b4:	4403      	add	r3, r0
 80050b6:	7a18      	ldrb	r0, [r3, #8]
 80050b8:	4790      	blx	r2
  return stat;
}
 80050ba:	bd08      	pop	{r3, pc}
 80050bc:	20000240 	.word	0x20000240

080050c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80050c0:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80050c2:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <disk_initialize+0x24>)
 80050c4:	5c1b      	ldrb	r3, [r3, r0]
 80050c6:	b953      	cbnz	r3, 80050de <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <disk_initialize+0x24>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80050ce:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80050d2:	6852      	ldr	r2, [r2, #4]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	4418      	add	r0, r3
 80050d8:	7a00      	ldrb	r0, [r0, #8]
 80050da:	4790      	blx	r2
  }
  return stat;
}
 80050dc:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 80050de:	2000      	movs	r0, #0
 80050e0:	e7fc      	b.n	80050dc <disk_initialize+0x1c>
 80050e2:	bf00      	nop
 80050e4:	20000240 	.word	0x20000240

080050e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80050e8:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80050ea:	4c04      	ldr	r4, [pc, #16]	; (80050fc <disk_read+0x14>)
 80050ec:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80050f0:	686d      	ldr	r5, [r5, #4]
 80050f2:	68ad      	ldr	r5, [r5, #8]
 80050f4:	4404      	add	r4, r0
 80050f6:	7a20      	ldrb	r0, [r4, #8]
 80050f8:	47a8      	blx	r5
  return res;
}
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	20000240 	.word	0x20000240

08005100 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005100:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005102:	4c04      	ldr	r4, [pc, #16]	; (8005114 <disk_write+0x14>)
 8005104:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8005108:	686d      	ldr	r5, [r5, #4]
 800510a:	68ed      	ldr	r5, [r5, #12]
 800510c:	4404      	add	r4, r0
 800510e:	7a20      	ldrb	r0, [r4, #8]
 8005110:	47a8      	blx	r5
  return res;
}
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	20000240 	.word	0x20000240

08005118 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005118:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800511a:	4b04      	ldr	r3, [pc, #16]	; (800512c <disk_ioctl+0x14>)
 800511c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8005120:	6864      	ldr	r4, [r4, #4]
 8005122:	6924      	ldr	r4, [r4, #16]
 8005124:	4403      	add	r3, r0
 8005126:	7a18      	ldrb	r0, [r3, #8]
 8005128:	47a0      	blx	r4
  return res;
}
 800512a:	bd10      	pop	{r4, pc}
 800512c:	20000240 	.word	0x20000240

08005130 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8005130:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8005132:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8005134:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8005138:	4770      	bx	lr

0800513a <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800513a:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 800513c:	7883      	ldrb	r3, [r0, #2]
 800513e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8005142:	7843      	ldrb	r3, [r0, #1]
 8005144:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8005148:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800514a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800514e:	4770      	bx	lr

08005150 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8005150:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8005152:	0a09      	lsrs	r1, r1, #8
 8005154:	7041      	strb	r1, [r0, #1]
}
 8005156:	4770      	bx	lr

08005158 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8005158:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800515a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800515e:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8005160:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005164:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8005166:	0e09      	lsrs	r1, r1, #24
 8005168:	70c1      	strb	r1, [r0, #3]
}
 800516a:	4770      	bx	lr

0800516c <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800516c:	4694      	mov	ip, r2
 800516e:	b132      	cbz	r2, 800517e <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8005170:	780a      	ldrb	r2, [r1, #0]
 8005172:	3101      	adds	r1, #1
 8005174:	7002      	strb	r2, [r0, #0]
 8005176:	3001      	adds	r0, #1
		} while (--cnt);
 8005178:	f1bc 0c01 	subs.w	ip, ip, #1
 800517c:	d1f8      	bne.n	8005170 <mem_cpy+0x4>
	}
}
 800517e:	4770      	bx	lr

08005180 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8005180:	7001      	strb	r1, [r0, #0]
 8005182:	3001      	adds	r0, #1
	} while (--cnt);
 8005184:	3a01      	subs	r2, #1
 8005186:	d1fb      	bne.n	8005180 <mem_set>
}
 8005188:	4770      	bx	lr

0800518a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800518a:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800518c:	f89c 0000 	ldrb.w	r0, [ip]
 8005190:	f10c 0c01 	add.w	ip, ip, #1
 8005194:	780b      	ldrb	r3, [r1, #0]
 8005196:	3101      	adds	r1, #1
 8005198:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 800519a:	3a01      	subs	r2, #1
 800519c:	d001      	beq.n	80051a2 <mem_cmp+0x18>
 800519e:	2800      	cmp	r0, #0
 80051a0:	d0f4      	beq.n	800518c <mem_cmp+0x2>

	return r;
}
 80051a2:	4770      	bx	lr

080051a4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80051a4:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 80051a6:	e000      	b.n	80051aa <chk_chr+0x6>
 80051a8:	3301      	adds	r3, #1
 80051aa:	7818      	ldrb	r0, [r3, #0]
 80051ac:	b108      	cbz	r0, 80051b2 <chk_chr+0xe>
 80051ae:	4288      	cmp	r0, r1
 80051b0:	d1fa      	bne.n	80051a8 <chk_chr+0x4>
	return *str;
}
 80051b2:	4770      	bx	lr

080051b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80051b4:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051b6:	2500      	movs	r5, #0
 80051b8:	462b      	mov	r3, r5
 80051ba:	e001      	b.n	80051c0 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 80051bc:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051be:	3301      	adds	r3, #1
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d815      	bhi.n	80051f0 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 80051c4:	011a      	lsls	r2, r3, #4
 80051c6:	4c17      	ldr	r4, [pc, #92]	; (8005224 <chk_lock+0x70>)
 80051c8:	58a2      	ldr	r2, [r4, r2]
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	d0f6      	beq.n	80051bc <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051ce:	6804      	ldr	r4, [r0, #0]
 80051d0:	42a2      	cmp	r2, r4
 80051d2:	d1f4      	bne.n	80051be <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 80051d4:	4a13      	ldr	r2, [pc, #76]	; (8005224 <chk_lock+0x70>)
 80051d6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80051da:	6854      	ldr	r4, [r2, #4]
 80051dc:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051de:	4294      	cmp	r4, r2
 80051e0:	d1ed      	bne.n	80051be <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 80051e2:	4a10      	ldr	r2, [pc, #64]	; (8005224 <chk_lock+0x70>)
 80051e4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80051e8:	6894      	ldr	r4, [r2, #8]
 80051ea:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 80051ec:	4294      	cmp	r4, r2
 80051ee:	d1e6      	bne.n	80051be <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d00a      	beq.n	800520a <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80051f4:	b9a1      	cbnz	r1, 8005220 <chk_lock+0x6c>
 80051f6:	4a0b      	ldr	r2, [pc, #44]	; (8005224 <chk_lock+0x70>)
 80051f8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80051fc:	899b      	ldrh	r3, [r3, #12]
 80051fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005202:	d00b      	beq.n	800521c <chk_lock+0x68>
 8005204:	2000      	movs	r0, #0
}
 8005206:	bc30      	pop	{r4, r5}
 8005208:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800520a:	b92d      	cbnz	r5, 8005218 <chk_lock+0x64>
 800520c:	2902      	cmp	r1, #2
 800520e:	d001      	beq.n	8005214 <chk_lock+0x60>
 8005210:	2012      	movs	r0, #18
 8005212:	e7f8      	b.n	8005206 <chk_lock+0x52>
 8005214:	2000      	movs	r0, #0
 8005216:	e7f6      	b.n	8005206 <chk_lock+0x52>
 8005218:	2000      	movs	r0, #0
 800521a:	e7f4      	b.n	8005206 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800521c:	2010      	movs	r0, #16
 800521e:	e7f2      	b.n	8005206 <chk_lock+0x52>
 8005220:	2010      	movs	r0, #16
 8005222:	e7f0      	b.n	8005206 <chk_lock+0x52>
 8005224:	20000218 	.word	0x20000218

08005228 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005228:	2000      	movs	r0, #0
 800522a:	e000      	b.n	800522e <enq_lock+0x6>
 800522c:	3001      	adds	r0, #1
 800522e:	2801      	cmp	r0, #1
 8005230:	d804      	bhi.n	800523c <enq_lock+0x14>
 8005232:	0103      	lsls	r3, r0, #4
 8005234:	4a03      	ldr	r2, [pc, #12]	; (8005244 <enq_lock+0x1c>)
 8005236:	58d3      	ldr	r3, [r2, r3]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f7      	bne.n	800522c <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 800523c:	3802      	subs	r0, #2
 800523e:	bf18      	it	ne
 8005240:	2001      	movne	r0, #1
 8005242:	4770      	bx	lr
 8005244:	20000218 	.word	0x20000218

08005248 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005248:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800524a:	2300      	movs	r3, #0
 800524c:	e000      	b.n	8005250 <inc_lock+0x8>
 800524e:	3301      	adds	r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	d813      	bhi.n	800527c <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8005254:	011a      	lsls	r2, r3, #4
 8005256:	4c24      	ldr	r4, [pc, #144]	; (80052e8 <inc_lock+0xa0>)
 8005258:	58a4      	ldr	r4, [r4, r2]
 800525a:	6802      	ldr	r2, [r0, #0]
 800525c:	4294      	cmp	r4, r2
 800525e:	d1f6      	bne.n	800524e <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8005260:	4a21      	ldr	r2, [pc, #132]	; (80052e8 <inc_lock+0xa0>)
 8005262:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005266:	6854      	ldr	r4, [r2, #4]
 8005268:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 800526a:	4294      	cmp	r4, r2
 800526c:	d1ef      	bne.n	800524e <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 800526e:	4a1e      	ldr	r2, [pc, #120]	; (80052e8 <inc_lock+0xa0>)
 8005270:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005274:	6894      	ldr	r4, [r2, #8]
 8005276:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8005278:	4294      	cmp	r4, r2
 800527a:	d1e8      	bne.n	800524e <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800527c:	2b02      	cmp	r3, #2
 800527e:	d00d      	beq.n	800529c <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005280:	b121      	cbz	r1, 800528c <inc_lock+0x44>
 8005282:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <inc_lock+0xa0>)
 8005284:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005288:	8992      	ldrh	r2, [r2, #12]
 800528a:	bb52      	cbnz	r2, 80052e2 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800528c:	b9f1      	cbnz	r1, 80052cc <inc_lock+0x84>
 800528e:	4a16      	ldr	r2, [pc, #88]	; (80052e8 <inc_lock+0xa0>)
 8005290:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005294:	8991      	ldrh	r1, [r2, #12]
 8005296:	3101      	adds	r1, #1
 8005298:	b289      	uxth	r1, r1
 800529a:	e019      	b.n	80052d0 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800529c:	2300      	movs	r3, #0
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d805      	bhi.n	80052ae <inc_lock+0x66>
 80052a2:	011a      	lsls	r2, r3, #4
 80052a4:	4c10      	ldr	r4, [pc, #64]	; (80052e8 <inc_lock+0xa0>)
 80052a6:	58a2      	ldr	r2, [r4, r2]
 80052a8:	b10a      	cbz	r2, 80052ae <inc_lock+0x66>
 80052aa:	3301      	adds	r3, #1
 80052ac:	e7f7      	b.n	800529e <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d015      	beq.n	80052de <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 80052b2:	4d0d      	ldr	r5, [pc, #52]	; (80052e8 <inc_lock+0xa0>)
 80052b4:	011c      	lsls	r4, r3, #4
 80052b6:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 80052ba:	6806      	ldr	r6, [r0, #0]
 80052bc:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 80052be:	6884      	ldr	r4, [r0, #8]
 80052c0:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 80052c2:	6940      	ldr	r0, [r0, #20]
 80052c4:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80052c6:	2000      	movs	r0, #0
 80052c8:	8190      	strh	r0, [r2, #12]
 80052ca:	e7d9      	b.n	8005280 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80052cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052d0:	4a05      	ldr	r2, [pc, #20]	; (80052e8 <inc_lock+0xa0>)
 80052d2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80052d6:	8191      	strh	r1, [r2, #12]

	return i + 1;
 80052d8:	1c58      	adds	r0, r3, #1
}
 80052da:	bc70      	pop	{r4, r5, r6}
 80052dc:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80052de:	2000      	movs	r0, #0
 80052e0:	e7fb      	b.n	80052da <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80052e2:	2000      	movs	r0, #0
 80052e4:	e7f9      	b.n	80052da <inc_lock+0x92>
 80052e6:	bf00      	nop
 80052e8:	20000218 	.word	0x20000218

080052ec <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80052ec:	3801      	subs	r0, #1
 80052ee:	2801      	cmp	r0, #1
 80052f0:	d815      	bhi.n	800531e <dec_lock+0x32>
		n = Files[i].ctr;
 80052f2:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <dec_lock+0x3c>)
 80052f4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80052f8:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80052fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fe:	d003      	beq.n	8005308 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8005300:	b11b      	cbz	r3, 800530a <dec_lock+0x1e>
 8005302:	3b01      	subs	r3, #1
 8005304:	b29b      	uxth	r3, r3
 8005306:	e000      	b.n	800530a <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005308:	2300      	movs	r3, #0
		Files[i].ctr = n;
 800530a:	4a07      	ldr	r2, [pc, #28]	; (8005328 <dec_lock+0x3c>)
 800530c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8005310:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005312:	b933      	cbnz	r3, 8005322 <dec_lock+0x36>
 8005314:	0103      	lsls	r3, r0, #4
 8005316:	2000      	movs	r0, #0
 8005318:	4a03      	ldr	r2, [pc, #12]	; (8005328 <dec_lock+0x3c>)
 800531a:	50d0      	str	r0, [r2, r3]
 800531c:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800531e:	2002      	movs	r0, #2
 8005320:	4770      	bx	lr
		res = FR_OK;
 8005322:	2000      	movs	r0, #0
	}
	return res;
}
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000218 	.word	0x20000218

0800532c <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800532c:	2300      	movs	r3, #0
 800532e:	e003      	b.n	8005338 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8005330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005334:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8005336:	3301      	adds	r3, #1
 8005338:	2b01      	cmp	r3, #1
 800533a:	d811      	bhi.n	8005360 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800533c:	011a      	lsls	r2, r3, #4
 800533e:	4909      	ldr	r1, [pc, #36]	; (8005364 <clear_lock+0x38>)
 8005340:	588a      	ldr	r2, [r1, r2]
 8005342:	4282      	cmp	r2, r0
 8005344:	d1f7      	bne.n	8005336 <clear_lock+0xa>
{
 8005346:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005348:	011a      	lsls	r2, r3, #4
 800534a:	2400      	movs	r4, #0
 800534c:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 800534e:	3301      	adds	r3, #1
 8005350:	2b01      	cmp	r3, #1
 8005352:	d8ed      	bhi.n	8005330 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005354:	011a      	lsls	r2, r3, #4
 8005356:	4903      	ldr	r1, [pc, #12]	; (8005364 <clear_lock+0x38>)
 8005358:	588a      	ldr	r2, [r1, r2]
 800535a:	4282      	cmp	r2, r0
 800535c:	d1f7      	bne.n	800534e <clear_lock+0x22>
 800535e:	e7f3      	b.n	8005348 <clear_lock+0x1c>
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000218 	.word	0x20000218

08005368 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8005368:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800536a:	6a03      	ldr	r3, [r0, #32]
 800536c:	3b02      	subs	r3, #2
 800536e:	428b      	cmp	r3, r1
 8005370:	d904      	bls.n	800537c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8005372:	8943      	ldrh	r3, [r0, #10]
 8005374:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005376:	fb01 0003 	mla	r0, r1, r3, r0
 800537a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800537c:	2000      	movs	r0, #0
}
 800537e:	4770      	bx	lr

08005380 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005380:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005382:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005384:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005386:	0a49      	lsrs	r1, r1, #9
 8005388:	8952      	ldrh	r2, [r2, #10]
 800538a:	fbb1 f1f2 	udiv	r1, r1, r2
 800538e:	e001      	b.n	8005394 <clmt_clust+0x14>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 8005390:	1a09      	subs	r1, r1, r0
 8005392:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005394:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005396:	b118      	cbz	r0, 80053a0 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8005398:	4281      	cmp	r1, r0
 800539a:	d2f9      	bcs.n	8005390 <clmt_clust+0x10>
	}
	return cl + *tbl;	/* Return the cluster number */
 800539c:	6858      	ldr	r0, [r3, #4]
 800539e:	4408      	add	r0, r1
}
 80053a0:	4770      	bx	lr

080053a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80053a2:	b570      	push	{r4, r5, r6, lr}
 80053a4:	4606      	mov	r6, r0
 80053a6:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80053a8:	f101 001a 	add.w	r0, r1, #26
 80053ac:	f7ff fec0 	bl	8005130 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 80053b0:	7833      	ldrb	r3, [r6, #0]
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d000      	beq.n	80053b8 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80053ba:	f105 0014 	add.w	r0, r5, #20
 80053be:	f7ff feb7 	bl	8005130 <ld_word>
 80053c2:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 80053c6:	e7f6      	b.n	80053b6 <ld_clust+0x14>

080053c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	4606      	mov	r6, r0
 80053cc:	460c      	mov	r4, r1
 80053ce:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80053d0:	b291      	uxth	r1, r2
 80053d2:	f104 001a 	add.w	r0, r4, #26
 80053d6:	f7ff febb 	bl	8005150 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80053da:	7833      	ldrb	r3, [r6, #0]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d000      	beq.n	80053e2 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 80053e0:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80053e2:	0c29      	lsrs	r1, r5, #16
 80053e4:	f104 0014 	add.w	r0, r4, #20
 80053e8:	f7ff feb2 	bl	8005150 <st_word>
}
 80053ec:	e7f8      	b.n	80053e0 <st_clust+0x18>
	...

080053f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80053f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053f4:	4680      	mov	r8, r0
 80053f6:	460f      	mov	r7, r1
 80053f8:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80053fa:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80053fc:	230f      	movs	r3, #15
 80053fe:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8005400:	2400      	movs	r4, #0
 8005402:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8005404:	4621      	mov	r1, r4
 8005406:	f107 001a 	add.w	r0, r7, #26
 800540a:	f7ff fea1 	bl	8005150 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800540e:	f109 36ff 	add.w	r6, r9, #4294967295
 8005412:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8005416:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800541a:	4625      	mov	r5, r4
 800541c:	e002      	b.n	8005424 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800541e:	3401      	adds	r4, #1
 8005420:	2c0c      	cmp	r4, #12
 8005422:	d811      	bhi.n	8005448 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005428:	429d      	cmp	r5, r3
 800542a:	d002      	beq.n	8005432 <put_lfn+0x42>
 800542c:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8005430:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <put_lfn+0x74>)
 8005434:	5d18      	ldrb	r0, [r3, r4]
 8005436:	4629      	mov	r1, r5
 8005438:	4438      	add	r0, r7
 800543a:	f7ff fe89 	bl	8005150 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800543e:	2d00      	cmp	r5, #0
 8005440:	d1ed      	bne.n	800541e <put_lfn+0x2e>
 8005442:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8005446:	e7ea      	b.n	800541e <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800544c:	429d      	cmp	r5, r3
 800544e:	d002      	beq.n	8005456 <put_lfn+0x66>
 8005450:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8005454:	b90b      	cbnz	r3, 800545a <put_lfn+0x6a>
 8005456:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800545a:	f887 9000 	strb.w	r9, [r7]
}
 800545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005462:	bf00      	nop
 8005464:	0800f608 	.word	0x0800f608

08005468 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	4605      	mov	r5, r0
 800546e:	4616      	mov	r6, r2
 8005470:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005472:	220b      	movs	r2, #11
 8005474:	f7ff fe7a 	bl	800516c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005478:	2c05      	cmp	r4, #5
 800547a:	d811      	bhi.n	80054a0 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 800547c:	2307      	movs	r3, #7
 800547e:	e01f      	b.n	80054c0 <gen_numname+0x58>
 8005480:	3101      	adds	r1, #1
 8005482:	290f      	cmp	r1, #15
 8005484:	d80c      	bhi.n	80054a0 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 8005486:	f003 0c01 	and.w	ip, r3, #1
 800548a:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 800548e:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005490:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8005494:	d0f4      	beq.n	8005480 <gen_numname+0x18>
 8005496:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 800549a:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 800549e:	e7ef      	b.n	8005480 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 80054a0:	8833      	ldrh	r3, [r6, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0ea      	beq.n	800547c <gen_numname+0x14>
			wc = *lfn++;
 80054a6:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 80054a8:	2100      	movs	r1, #0
 80054aa:	e7ea      	b.n	8005482 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 80054ac:	1e5a      	subs	r2, r3, #1
 80054ae:	3308      	adds	r3, #8
 80054b0:	446b      	add	r3, sp
 80054b2:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 80054b6:	0921      	lsrs	r1, r4, #4
	} while (seq);
 80054b8:	2c0f      	cmp	r4, #15
 80054ba:	d90a      	bls.n	80054d2 <gen_numname+0x6a>
		ns[i--] = c;
 80054bc:	4613      	mov	r3, r2
		seq /= 16;
 80054be:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 80054c0:	f004 020f 	and.w	r2, r4, #15
 80054c4:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 80054c8:	2939      	cmp	r1, #57	; 0x39
 80054ca:	d9ef      	bls.n	80054ac <gen_numname+0x44>
 80054cc:	f102 0137 	add.w	r1, r2, #55	; 0x37
 80054d0:	e7ec      	b.n	80054ac <gen_numname+0x44>
	ns[i] = '~';
 80054d2:	217e      	movs	r1, #126	; 0x7e
 80054d4:	f102 0308 	add.w	r3, r2, #8
 80054d8:	446b      	add	r3, sp
 80054da:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80054de:	2300      	movs	r3, #0
 80054e0:	e000      	b.n	80054e4 <gen_numname+0x7c>
 80054e2:	3301      	adds	r3, #1
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d209      	bcs.n	80054fc <gen_numname+0x94>
 80054e8:	5ce9      	ldrb	r1, [r5, r3]
 80054ea:	2920      	cmp	r1, #32
 80054ec:	d1f9      	bne.n	80054e2 <gen_numname+0x7a>
 80054ee:	e005      	b.n	80054fc <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80054f0:	2020      	movs	r0, #32
 80054f2:	1c59      	adds	r1, r3, #1
 80054f4:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 80054f6:	2907      	cmp	r1, #7
 80054f8:	d809      	bhi.n	800550e <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80054fa:	460b      	mov	r3, r1
 80054fc:	2a07      	cmp	r2, #7
 80054fe:	d8f7      	bhi.n	80054f0 <gen_numname+0x88>
 8005500:	f102 0108 	add.w	r1, r2, #8
 8005504:	4469      	add	r1, sp
 8005506:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 800550a:	3201      	adds	r2, #1
 800550c:	e7f1      	b.n	80054f2 <gen_numname+0x8a>
}
 800550e:	b002      	add	sp, #8
 8005510:	bd70      	pop	{r4, r5, r6, pc}

08005512 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005512:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8005514:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 8005518:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800551a:	01c3      	lsls	r3, r0, #7
 800551c:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8005520:	7808      	ldrb	r0, [r1, #0]
 8005522:	3101      	adds	r1, #1
 8005524:	fa50 f383 	uxtab	r3, r0, r3
 8005528:	b2d8      	uxtb	r0, r3
	} while (--n);
 800552a:	f1bc 0c01 	subs.w	ip, ip, #1
 800552e:	d1f4      	bne.n	800551a <sum_sfn+0x8>
	return sum;
}
 8005530:	4770      	bx	lr

08005532 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005532:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005534:	6800      	ldr	r0, [r0, #0]
 8005536:	b138      	cbz	r0, 8005548 <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005538:	4602      	mov	r2, r0
 800553a:	7813      	ldrb	r3, [r2, #0]
 800553c:	2b1f      	cmp	r3, #31
 800553e:	d906      	bls.n	800554e <get_ldnumber+0x1c>
 8005540:	2b3a      	cmp	r3, #58	; 0x3a
 8005542:	d004      	beq.n	800554e <get_ldnumber+0x1c>
 8005544:	3201      	adds	r2, #1
 8005546:	e7f8      	b.n	800553a <get_ldnumber+0x8>
	int vol = -1;
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800554e:	2b3a      	cmp	r3, #58	; 0x3a
 8005550:	d001      	beq.n	8005556 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005552:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8005554:	4770      	bx	lr
{
 8005556:	b410      	push	{r4}
			i = *tp++ - '0';
 8005558:	4603      	mov	r3, r0
 800555a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800555e:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005560:	2809      	cmp	r0, #9
 8005562:	d808      	bhi.n	8005576 <get_ldnumber+0x44>
 8005564:	429a      	cmp	r2, r3
 8005566:	d002      	beq.n	800556e <get_ldnumber+0x3c>
	int vol = -1;
 8005568:	f04f 30ff 	mov.w	r0, #4294967295
 800556c:	e005      	b.n	800557a <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800556e:	b938      	cbnz	r0, 8005580 <get_ldnumber+0x4e>
					*path = ++tt;
 8005570:	3201      	adds	r2, #1
 8005572:	600a      	str	r2, [r1, #0]
 8005574:	e001      	b.n	800557a <get_ldnumber+0x48>
	int vol = -1;
 8005576:	f04f 30ff 	mov.w	r0, #4294967295
}
 800557a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800557e:	4770      	bx	lr
	int vol = -1;
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 8005584:	e7f9      	b.n	800557a <get_ldnumber+0x48>

08005586 <putc_init>:
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
 8005586:	6001      	str	r1, [r0, #0]
	pb->nchr = pb->idx = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	6043      	str	r3, [r0, #4]
 800558c:	6083      	str	r3, [r0, #8]
}
 800558e:	4770      	bx	lr

08005590 <lock_fs>:
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005590:	b130      	cbz	r0, 80055a0 <lock_fs+0x10>
{
 8005592:	b508      	push	{r3, lr}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005594:	6900      	ldr	r0, [r0, #16]
 8005596:	f001 ff78 	bl	800748a <ff_req_grant>
 800559a:	b100      	cbz	r0, 800559e <lock_fs+0xe>
 800559c:	2001      	movs	r0, #1
}
 800559e:	bd08      	pop	{r3, pc}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80055a0:	2000      	movs	r0, #0
}
 80055a2:	4770      	bx	lr

080055a4 <sync_window>:
{
 80055a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80055a8:	78c5      	ldrb	r5, [r0, #3]
 80055aa:	b915      	cbnz	r5, 80055b2 <sync_window+0xe>
}
 80055ac:	4628      	mov	r0, r5
 80055ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b2:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80055b4:	6b87      	ldr	r7, [r0, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80055b6:	f100 083c 	add.w	r8, r0, #60	; 0x3c
 80055ba:	2301      	movs	r3, #1
 80055bc:	463a      	mov	r2, r7
 80055be:	4641      	mov	r1, r8
 80055c0:	7840      	ldrb	r0, [r0, #1]
 80055c2:	f7ff fd9d 	bl	8005100 <disk_write>
 80055c6:	4605      	mov	r5, r0
 80055c8:	b9a0      	cbnz	r0, 80055f4 <sync_window+0x50>
			fs->wflag = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80055ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80055d0:	1afb      	subs	r3, r7, r3
 80055d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d2e9      	bcs.n	80055ac <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055d8:	78a6      	ldrb	r6, [r4, #2]
 80055da:	e008      	b.n	80055ee <sync_window+0x4a>
					wsect += fs->fsize;
 80055dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055de:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80055e0:	2301      	movs	r3, #1
 80055e2:	463a      	mov	r2, r7
 80055e4:	4641      	mov	r1, r8
 80055e6:	7860      	ldrb	r0, [r4, #1]
 80055e8:	f7ff fd8a 	bl	8005100 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055ec:	3e01      	subs	r6, #1
 80055ee:	2e01      	cmp	r6, #1
 80055f0:	d8f4      	bhi.n	80055dc <sync_window+0x38>
 80055f2:	e7db      	b.n	80055ac <sync_window+0x8>
			res = FR_DISK_ERR;
 80055f4:	2501      	movs	r5, #1
 80055f6:	e7d9      	b.n	80055ac <sync_window+0x8>

080055f8 <move_window>:
{
 80055f8:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80055fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80055fc:	428b      	cmp	r3, r1
 80055fe:	d102      	bne.n	8005606 <move_window+0xe>
	FRESULT res = FR_OK;
 8005600:	2600      	movs	r6, #0
}
 8005602:	4630      	mov	r0, r6
 8005604:	bd70      	pop	{r4, r5, r6, pc}
 8005606:	4604      	mov	r4, r0
 8005608:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800560a:	f7ff ffcb 	bl	80055a4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800560e:	4606      	mov	r6, r0
 8005610:	2800      	cmp	r0, #0
 8005612:	d1f6      	bne.n	8005602 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005614:	2301      	movs	r3, #1
 8005616:	462a      	mov	r2, r5
 8005618:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800561c:	7860      	ldrb	r0, [r4, #1]
 800561e:	f7ff fd63 	bl	80050e8 <disk_read>
 8005622:	b110      	cbz	r0, 800562a <move_window+0x32>
				res = FR_DISK_ERR;
 8005624:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005626:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800562a:	63a5      	str	r5, [r4, #56]	; 0x38
 800562c:	e7e9      	b.n	8005602 <move_window+0xa>
	...

08005630 <check_fs>:
{
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005634:	2300      	movs	r3, #0
 8005636:	70c3      	strb	r3, [r0, #3]
 8005638:	f04f 33ff 	mov.w	r3, #4294967295
 800563c:	6383      	str	r3, [r0, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800563e:	f7ff ffdb 	bl	80055f8 <move_window>
 8005642:	bb30      	cbnz	r0, 8005692 <check_fs+0x62>
 8005644:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005646:	f204 203a 	addw	r0, r4, #570	; 0x23a
 800564a:	f7ff fd71 	bl	8005130 <ld_word>
 800564e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005652:	4298      	cmp	r0, r3
 8005654:	d11f      	bne.n	8005696 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005656:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800565a:	2be9      	cmp	r3, #233	; 0xe9
 800565c:	d007      	beq.n	800566e <check_fs+0x3e>
 800565e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005660:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005664:	4a0d      	ldr	r2, [pc, #52]	; (800569c <check_fs+0x6c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d001      	beq.n	800566e <check_fs+0x3e>
	return 2;
 800566a:	2502      	movs	r5, #2
 800566c:	e014      	b.n	8005698 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800566e:	f104 0072 	add.w	r0, r4, #114	; 0x72
 8005672:	f7ff fd62 	bl	800513a <ld_dword>
 8005676:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <check_fs+0x70>)
 800567c:	4298      	cmp	r0, r3
 800567e:	d00b      	beq.n	8005698 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005680:	f104 008e 	add.w	r0, r4, #142	; 0x8e
 8005684:	f7ff fd59 	bl	800513a <ld_dword>
 8005688:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <check_fs+0x74>)
 800568a:	4298      	cmp	r0, r3
 800568c:	d004      	beq.n	8005698 <check_fs+0x68>
	return 2;
 800568e:	2502      	movs	r5, #2
 8005690:	e002      	b.n	8005698 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005692:	2504      	movs	r5, #4
 8005694:	e000      	b.n	8005698 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005696:	2503      	movs	r5, #3
}
 8005698:	4628      	mov	r0, r5
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	009000eb 	.word	0x009000eb
 80056a0:	00544146 	.word	0x00544146
 80056a4:	33544146 	.word	0x33544146

080056a8 <find_volume>:
{
 80056a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	b085      	sub	sp, #20
 80056ae:	460e      	mov	r6, r1
 80056b0:	4617      	mov	r7, r2
	*rfs = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80056b6:	f7ff ff3c 	bl	8005532 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80056ba:	1e04      	subs	r4, r0, #0
 80056bc:	f2c0 814d 	blt.w	800595a <find_volume+0x2b2>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80056c0:	4bba      	ldr	r3, [pc, #744]	; (80059ac <find_volume+0x304>)
 80056c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80056c6:	6a1d      	ldr	r5, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80056c8:	2d00      	cmp	r5, #0
 80056ca:	f000 8148 	beq.w	800595e <find_volume+0x2b6>
	ENTER_FF(fs);						/* Lock the volume */
 80056ce:	4628      	mov	r0, r5
 80056d0:	f7ff ff5e 	bl	8005590 <lock_fs>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f000 8147 	beq.w	8005968 <find_volume+0x2c0>
	*rfs = fs;							/* Return pointer to the file system object */
 80056da:	6035      	str	r5, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80056dc:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80056e0:	782b      	ldrb	r3, [r5, #0]
 80056e2:	b173      	cbz	r3, 8005702 <find_volume+0x5a>
		stat = disk_status(fs->drv);
 80056e4:	7868      	ldrb	r0, [r5, #1]
 80056e6:	f7ff fcdf 	bl	80050a8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80056ea:	f010 0601 	ands.w	r6, r0, #1
 80056ee:	d108      	bne.n	8005702 <find_volume+0x5a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80056f0:	2f00      	cmp	r7, #0
 80056f2:	f000 8135 	beq.w	8005960 <find_volume+0x2b8>
 80056f6:	f010 0f04 	tst.w	r0, #4
 80056fa:	f000 8131 	beq.w	8005960 <find_volume+0x2b8>
				return FR_WRITE_PROTECTED;
 80056fe:	260a      	movs	r6, #10
 8005700:	e12e      	b.n	8005960 <find_volume+0x2b8>
	fs->fs_type = 0;					/* Clear the file system object */
 8005702:	2300      	movs	r3, #0
 8005704:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005706:	b2e0      	uxtb	r0, r4
 8005708:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800570a:	f7ff fcd9 	bl	80050c0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800570e:	f010 0601 	ands.w	r6, r0, #1
 8005712:	f040 812b 	bne.w	800596c <find_volume+0x2c4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005716:	b11f      	cbz	r7, 8005720 <find_volume+0x78>
 8005718:	f010 0f04 	tst.w	r0, #4
 800571c:	f040 8128 	bne.w	8005970 <find_volume+0x2c8>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005720:	2100      	movs	r1, #0
 8005722:	4628      	mov	r0, r5
 8005724:	f7ff ff84 	bl	8005630 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005728:	2802      	cmp	r0, #2
 800572a:	f000 80b8 	beq.w	800589e <find_volume+0x1f6>
	bsect = 0;
 800572e:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005730:	2804      	cmp	r0, #4
 8005732:	f000 811f 	beq.w	8005974 <find_volume+0x2cc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005736:	2801      	cmp	r0, #1
 8005738:	f200 811e 	bhi.w	8005978 <find_volume+0x2d0>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800573c:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8005740:	f7ff fcf6 	bl	8005130 <ld_word>
 8005744:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005748:	f040 8118 	bne.w	800597c <find_volume+0x2d4>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800574c:	f105 0052 	add.w	r0, r5, #82	; 0x52
 8005750:	f7ff fcee 	bl	8005130 <ld_word>
 8005754:	4604      	mov	r4, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005756:	b920      	cbnz	r0, 8005762 <find_volume+0xba>
 8005758:	f105 0060 	add.w	r0, r5, #96	; 0x60
 800575c:	f7ff fced 	bl	800513a <ld_dword>
 8005760:	4604      	mov	r4, r0
		fs->fsize = fasize;
 8005762:	626c      	str	r4, [r5, #36]	; 0x24
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005764:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
 8005768:	70aa      	strb	r2, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800576a:	1e53      	subs	r3, r2, #1
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b01      	cmp	r3, #1
 8005770:	f200 8106 	bhi.w	8005980 <find_volume+0x2d8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005774:	fb04 f802 	mul.w	r8, r4, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005778:	f895 9049 	ldrb.w	r9, [r5, #73]	; 0x49
 800577c:	f8a5 900a 	strh.w	r9, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005780:	f1b9 0f00 	cmp.w	r9, #0
 8005784:	f000 80fe 	beq.w	8005984 <find_volume+0x2dc>
 8005788:	f109 33ff 	add.w	r3, r9, #4294967295
 800578c:	ea19 0f03 	tst.w	r9, r3
 8005790:	f040 80fa 	bne.w	8005988 <find_volume+0x2e0>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005794:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8005798:	f7ff fcca 	bl	8005130 <ld_word>
 800579c:	4682      	mov	sl, r0
 800579e:	8128      	strh	r0, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80057a0:	f010 0f0f 	tst.w	r0, #15
 80057a4:	f040 80f2 	bne.w	800598c <find_volume+0x2e4>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80057a8:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 80057ac:	f7ff fcc0 	bl	8005130 <ld_word>
 80057b0:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80057b2:	b920      	cbnz	r0, 80057be <find_volume+0x116>
 80057b4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80057b8:	f7ff fcbf 	bl	800513a <ld_dword>
 80057bc:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80057be:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 80057c2:	f7ff fcb5 	bl	8005130 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80057c6:	4602      	mov	r2, r0
 80057c8:	2800      	cmp	r0, #0
 80057ca:	f000 80e1 	beq.w	8005990 <find_volume+0x2e8>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80057ce:	eb00 0308 	add.w	r3, r0, r8
 80057d2:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80057d6:	459b      	cmp	fp, r3
 80057d8:	f0c0 80dc 	bcc.w	8005994 <find_volume+0x2ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80057dc:	ebab 0b03 	sub.w	fp, fp, r3
 80057e0:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80057e4:	45cb      	cmp	fp, r9
 80057e6:	f0c0 80d7 	bcc.w	8005998 <find_volume+0x2f0>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80057ea:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80057ee:	4281      	cmp	r1, r0
 80057f0:	d96d      	bls.n	80058ce <find_volume+0x226>
		fmt = FS_FAT32;
 80057f2:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80057f6:	f640 70f5 	movw	r0, #4085	; 0xff5
 80057fa:	4281      	cmp	r1, r0
 80057fc:	d801      	bhi.n	8005802 <find_volume+0x15a>
 80057fe:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005802:	f101 0902 	add.w	r9, r1, #2
 8005806:	f8c5 9020 	str.w	r9, [r5, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800580a:	62af      	str	r7, [r5, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800580c:	443a      	add	r2, r7
 800580e:	62ea      	str	r2, [r5, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8005810:	443b      	add	r3, r7
 8005812:	636b      	str	r3, [r5, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8005814:	f1bb 0f03 	cmp.w	fp, #3
 8005818:	d05c      	beq.n	80058d4 <find_volume+0x22c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800581a:	f1ba 0f00 	cmp.w	sl, #0
 800581e:	f000 80c1 	beq.w	80059a4 <find_volume+0x2fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005822:	4442      	add	r2, r8
 8005824:	632a      	str	r2, [r5, #48]	; 0x30
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005826:	f1bb 0f02 	cmp.w	fp, #2
 800582a:	d064      	beq.n	80058f6 <find_volume+0x24e>
 800582c:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8005830:	f009 0901 	and.w	r9, r9, #1
 8005834:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005838:	f209 13ff 	addw	r3, r9, #511	; 0x1ff
 800583c:	ebb4 2f53 	cmp.w	r4, r3, lsr #9
 8005840:	f0c0 80b2 	bcc.w	80059a8 <find_volume+0x300>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005844:	f04f 33ff 	mov.w	r3, #4294967295
 8005848:	61ab      	str	r3, [r5, #24]
 800584a:	616b      	str	r3, [r5, #20]
		fs->fsi_flag = 0x80;
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	712b      	strb	r3, [r5, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005850:	f1bb 0f03 	cmp.w	fp, #3
 8005854:	d052      	beq.n	80058fc <find_volume+0x254>
	fs->fs_type = fmt;		/* FAT sub-type */
 8005856:	f885 b000 	strb.w	fp, [r5]
	fs->id = ++Fsid;		/* File system mount ID */
 800585a:	4a54      	ldr	r2, [pc, #336]	; (80059ac <find_volume+0x304>)
 800585c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 800585e:	3301      	adds	r3, #1
 8005860:	b29b      	uxth	r3, r3
 8005862:	8493      	strh	r3, [r2, #36]	; 0x24
 8005864:	80eb      	strh	r3, [r5, #6]
	fs->cdir = 0;			/* Initialize current directory */
 8005866:	2300      	movs	r3, #0
 8005868:	61eb      	str	r3, [r5, #28]
	clear_lock(fs);
 800586a:	4628      	mov	r0, r5
 800586c:	f7ff fd5e 	bl	800532c <clear_lock>
	return FR_OK;
 8005870:	e076      	b.n	8005960 <find_volume+0x2b8>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005872:	2000      	movs	r0, #0
 8005874:	ab04      	add	r3, sp, #16
 8005876:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800587a:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800587e:	3401      	adds	r4, #1
 8005880:	2c03      	cmp	r4, #3
 8005882:	d80e      	bhi.n	80058a2 <find_volume+0x1fa>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005884:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8005888:	0123      	lsls	r3, r4, #4
 800588a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800588e:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005890:	7903      	ldrb	r3, [r0, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0ed      	beq.n	8005872 <find_volume+0x1ca>
 8005896:	3008      	adds	r0, #8
 8005898:	f7ff fc4f 	bl	800513a <ld_dword>
 800589c:	e7ea      	b.n	8005874 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800589e:	2400      	movs	r4, #0
 80058a0:	e7ee      	b.n	8005880 <find_volume+0x1d8>
 80058a2:	2400      	movs	r4, #0
 80058a4:	e00a      	b.n	80058bc <find_volume+0x214>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80058a6:	4639      	mov	r1, r7
 80058a8:	4628      	mov	r0, r5
 80058aa:	f7ff fec1 	bl	8005630 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80058ae:	2801      	cmp	r0, #1
 80058b0:	f67f af3e 	bls.w	8005730 <find_volume+0x88>
 80058b4:	3401      	adds	r4, #1
 80058b6:	2c03      	cmp	r4, #3
 80058b8:	f63f af3a 	bhi.w	8005730 <find_volume+0x88>
			bsect = br[i];
 80058bc:	ab04      	add	r3, sp, #16
 80058be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80058c2:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80058c6:	2f00      	cmp	r7, #0
 80058c8:	d1ed      	bne.n	80058a6 <find_volume+0x1fe>
 80058ca:	2003      	movs	r0, #3
 80058cc:	e7f2      	b.n	80058b4 <find_volume+0x20c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80058ce:	f04f 0b02 	mov.w	fp, #2
 80058d2:	e790      	b.n	80057f6 <find_volume+0x14e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80058d4:	f105 0066 	add.w	r0, r5, #102	; 0x66
 80058d8:	f7ff fc2a 	bl	8005130 <ld_word>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d15d      	bne.n	800599c <find_volume+0x2f4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80058e0:	f1ba 0f00 	cmp.w	sl, #0
 80058e4:	d15c      	bne.n	80059a0 <find_volume+0x2f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80058e6:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80058ea:	f7ff fc26 	bl	800513a <ld_dword>
 80058ee:	6328      	str	r0, [r5, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80058f0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80058f4:	e7a0      	b.n	8005838 <find_volume+0x190>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80058f6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80058fa:	e79d      	b.n	8005838 <find_volume+0x190>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80058fc:	f105 006c 	add.w	r0, r5, #108	; 0x6c
 8005900:	f7ff fc16 	bl	8005130 <ld_word>
 8005904:	2801      	cmp	r0, #1
 8005906:	d1a6      	bne.n	8005856 <find_volume+0x1ae>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005908:	1c79      	adds	r1, r7, #1
 800590a:	4628      	mov	r0, r5
 800590c:	f7ff fe74 	bl	80055f8 <move_window>
 8005910:	2800      	cmp	r0, #0
 8005912:	d1a0      	bne.n	8005856 <find_volume+0x1ae>
			fs->fsi_flag = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	712b      	strb	r3, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005918:	f205 203a 	addw	r0, r5, #570	; 0x23a
 800591c:	f7ff fc08 	bl	8005130 <ld_word>
 8005920:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005924:	4298      	cmp	r0, r3
 8005926:	d196      	bne.n	8005856 <find_volume+0x1ae>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005928:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 800592c:	f7ff fc05 	bl	800513a <ld_dword>
 8005930:	4b1f      	ldr	r3, [pc, #124]	; (80059b0 <find_volume+0x308>)
 8005932:	4298      	cmp	r0, r3
 8005934:	d18f      	bne.n	8005856 <find_volume+0x1ae>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005936:	f505 7008 	add.w	r0, r5, #544	; 0x220
 800593a:	f7ff fbfe 	bl	800513a <ld_dword>
 800593e:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <find_volume+0x30c>)
 8005940:	4298      	cmp	r0, r3
 8005942:	d188      	bne.n	8005856 <find_volume+0x1ae>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005944:	f505 7009 	add.w	r0, r5, #548	; 0x224
 8005948:	f7ff fbf7 	bl	800513a <ld_dword>
 800594c:	61a8      	str	r0, [r5, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800594e:	f505 700a 	add.w	r0, r5, #552	; 0x228
 8005952:	f7ff fbf2 	bl	800513a <ld_dword>
 8005956:	6168      	str	r0, [r5, #20]
 8005958:	e77d      	b.n	8005856 <find_volume+0x1ae>
	if (vol < 0) return FR_INVALID_DRIVE;
 800595a:	260b      	movs	r6, #11
 800595c:	e000      	b.n	8005960 <find_volume+0x2b8>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800595e:	260c      	movs	r6, #12
}
 8005960:	4630      	mov	r0, r6
 8005962:	b005      	add	sp, #20
 8005964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ENTER_FF(fs);						/* Lock the volume */
 8005968:	260f      	movs	r6, #15
 800596a:	e7f9      	b.n	8005960 <find_volume+0x2b8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800596c:	2603      	movs	r6, #3
 800596e:	e7f7      	b.n	8005960 <find_volume+0x2b8>
		return FR_WRITE_PROTECTED;
 8005970:	260a      	movs	r6, #10
 8005972:	e7f5      	b.n	8005960 <find_volume+0x2b8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005974:	2601      	movs	r6, #1
 8005976:	e7f3      	b.n	8005960 <find_volume+0x2b8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005978:	260d      	movs	r6, #13
 800597a:	e7f1      	b.n	8005960 <find_volume+0x2b8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800597c:	260d      	movs	r6, #13
 800597e:	e7ef      	b.n	8005960 <find_volume+0x2b8>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005980:	260d      	movs	r6, #13
 8005982:	e7ed      	b.n	8005960 <find_volume+0x2b8>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005984:	260d      	movs	r6, #13
 8005986:	e7eb      	b.n	8005960 <find_volume+0x2b8>
 8005988:	260d      	movs	r6, #13
 800598a:	e7e9      	b.n	8005960 <find_volume+0x2b8>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800598c:	260d      	movs	r6, #13
 800598e:	e7e7      	b.n	8005960 <find_volume+0x2b8>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005990:	260d      	movs	r6, #13
 8005992:	e7e5      	b.n	8005960 <find_volume+0x2b8>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005994:	260d      	movs	r6, #13
 8005996:	e7e3      	b.n	8005960 <find_volume+0x2b8>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005998:	260d      	movs	r6, #13
 800599a:	e7e1      	b.n	8005960 <find_volume+0x2b8>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800599c:	260d      	movs	r6, #13
 800599e:	e7df      	b.n	8005960 <find_volume+0x2b8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80059a0:	260d      	movs	r6, #13
 80059a2:	e7dd      	b.n	8005960 <find_volume+0x2b8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80059a4:	260d      	movs	r6, #13
 80059a6:	e7db      	b.n	8005960 <find_volume+0x2b8>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80059a8:	260d      	movs	r6, #13
 80059aa:	e7d9      	b.n	8005960 <find_volume+0x2b8>
 80059ac:	20000218 	.word	0x20000218
 80059b0:	41615252 	.word	0x41615252
 80059b4:	61417272 	.word	0x61417272

080059b8 <put_fat>:
{
 80059b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80059bc:	2901      	cmp	r1, #1
 80059be:	d97e      	bls.n	8005abe <put_fat+0x106>
 80059c0:	4607      	mov	r7, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	4616      	mov	r6, r2
 80059c6:	6a03      	ldr	r3, [r0, #32]
 80059c8:	428b      	cmp	r3, r1
 80059ca:	d97a      	bls.n	8005ac2 <put_fat+0x10a>
		switch (fs->fs_type) {
 80059cc:	7803      	ldrb	r3, [r0, #0]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d045      	beq.n	8005a5e <put_fat+0xa6>
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d057      	beq.n	8005a86 <put_fat+0xce>
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d003      	beq.n	80059e2 <put_fat+0x2a>
 80059da:	2502      	movs	r5, #2
}
 80059dc:	4628      	mov	r0, r5
 80059de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 80059e2:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059e6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80059e8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80059ec:	f7ff fe04 	bl	80055f8 <move_window>
			if (res != FR_OK) break;
 80059f0:	4605      	mov	r5, r0
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d1f2      	bne.n	80059dc <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 80059f6:	f107 0a3c 	add.w	sl, r7, #60	; 0x3c
 80059fa:	f108 0901 	add.w	r9, r8, #1
 80059fe:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a02:	f014 0401 	ands.w	r4, r4, #1
 8005a06:	d01f      	beq.n	8005a48 <put_fat+0x90>
 8005a08:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	0132      	lsls	r2, r6, #4
 8005a12:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a24:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f7ff fde5 	bl	80055f8 <move_window>
			if (res != FR_OK) break;
 8005a2e:	4605      	mov	r5, r0
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d1d3      	bne.n	80059dc <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 8005a34:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a38:	b144      	cbz	r4, 8005a4c <put_fat+0x94>
 8005a3a:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8005a3e:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 8005a42:	2301      	movs	r3, #1
 8005a44:	70fb      	strb	r3, [r7, #3]
			break;
 8005a46:	e7c9      	b.n	80059dc <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a48:	b2f3      	uxtb	r3, r6
 8005a4a:	e7e6      	b.n	8005a1a <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a4c:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8005a50:	f022 020f 	bic.w	r2, r2, #15
 8005a54:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8005a58:	4332      	orrs	r2, r6
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	e7ef      	b.n	8005a3e <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005a5e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005a60:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005a64:	f7ff fdc8 	bl	80055f8 <move_window>
			if (res != FR_OK) break;
 8005a68:	4605      	mov	r5, r0
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d1b6      	bne.n	80059dc <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005a6e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8005a72:	0064      	lsls	r4, r4, #1
 8005a74:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8005a78:	b2b1      	uxth	r1, r6
 8005a7a:	4420      	add	r0, r4
 8005a7c:	f7ff fb68 	bl	8005150 <st_word>
			fs->wflag = 1;
 8005a80:	2301      	movs	r3, #1
 8005a82:	70fb      	strb	r3, [r7, #3]
			break;
 8005a84:	e7aa      	b.n	80059dc <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005a86:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005a88:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005a8c:	f7ff fdb4 	bl	80055f8 <move_window>
			if (res != FR_OK) break;
 8005a90:	4605      	mov	r5, r0
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d1a2      	bne.n	80059dc <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005a96:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8005a9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a9e:	00a4      	lsls	r4, r4, #2
 8005aa0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005aa4:	441c      	add	r4, r3
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f7ff fb47 	bl	800513a <ld_dword>
 8005aac:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005ab0:	4331      	orrs	r1, r6
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f7ff fb50 	bl	8005158 <st_dword>
			fs->wflag = 1;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	70fb      	strb	r3, [r7, #3]
			break;
 8005abc:	e78e      	b.n	80059dc <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 8005abe:	2502      	movs	r5, #2
 8005ac0:	e78c      	b.n	80059dc <put_fat+0x24>
 8005ac2:	2502      	movs	r5, #2
 8005ac4:	e78a      	b.n	80059dc <put_fat+0x24>

08005ac6 <get_fat>:
{
 8005ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8005ac8:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005aca:	2901      	cmp	r1, #1
 8005acc:	d956      	bls.n	8005b7c <get_fat+0xb6>
 8005ace:	460c      	mov	r4, r1
 8005ad0:	6a2b      	ldr	r3, [r5, #32]
 8005ad2:	428b      	cmp	r3, r1
 8005ad4:	d954      	bls.n	8005b80 <get_fat+0xba>
		switch (fs->fs_type) {
 8005ad6:	782b      	ldrb	r3, [r5, #0]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d02d      	beq.n	8005b38 <get_fat+0x72>
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d03b      	beq.n	8005b58 <get_fat+0x92>
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d001      	beq.n	8005ae8 <get_fat+0x22>
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	e04a      	b.n	8005b7e <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 8005ae8:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005aec:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005aee:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8005af2:	4628      	mov	r0, r5
 8005af4:	f7ff fd80 	bl	80055f8 <move_window>
 8005af8:	b110      	cbz	r0, 8005b00 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005afa:	f04f 30ff 	mov.w	r0, #4294967295
 8005afe:	e03e      	b.n	8005b7e <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 8005b00:	1c77      	adds	r7, r6, #1
 8005b02:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8005b06:	442e      	add	r6, r5
 8005b08:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b0c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005b0e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8005b12:	4628      	mov	r0, r5
 8005b14:	f7ff fd70 	bl	80055f8 <move_window>
 8005b18:	bba0      	cbnz	r0, 8005b84 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005b1a:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8005b1e:	443d      	add	r5, r7
 8005b20:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
 8005b24:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005b28:	f014 0f01 	tst.w	r4, #1
 8005b2c:	d001      	beq.n	8005b32 <get_fat+0x6c>
 8005b2e:	0900      	lsrs	r0, r0, #4
 8005b30:	e025      	b.n	8005b7e <get_fat+0xb8>
 8005b32:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8005b36:	e022      	b.n	8005b7e <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b38:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005b3a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f7ff fd5a 	bl	80055f8 <move_window>
 8005b44:	bb08      	cbnz	r0, 8005b8a <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005b46:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8005b4a:	0064      	lsls	r4, r4, #1
 8005b4c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8005b50:	4420      	add	r0, r4
 8005b52:	f7ff faed 	bl	8005130 <ld_word>
			break;
 8005b56:	e012      	b.n	8005b7e <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b58:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005b5a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f7ff fd4a 	bl	80055f8 <move_window>
 8005b64:	b9a0      	cbnz	r0, 8005b90 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005b66:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8005b6a:	00a4      	lsls	r4, r4, #2
 8005b6c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005b70:	4420      	add	r0, r4
 8005b72:	f7ff fae2 	bl	800513a <ld_dword>
 8005b76:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8005b7a:	e000      	b.n	8005b7e <get_fat+0xb8>
		val = 1;	/* Internal error */
 8005b7c:	2001      	movs	r0, #1
}
 8005b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8005b80:	2001      	movs	r0, #1
 8005b82:	e7fc      	b.n	8005b7e <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	e7f9      	b.n	8005b7e <get_fat+0xb8>
 8005b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8e:	e7f6      	b.n	8005b7e <get_fat+0xb8>
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8005b94:	e7f3      	b.n	8005b7e <get_fat+0xb8>

08005b96 <dir_sdi>:
{
 8005b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8005b9a:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005b9e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005ba2:	d240      	bcs.n	8005c26 <dir_sdi+0x90>
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	f011 0f1f 	tst.w	r1, #31
 8005bac:	d13d      	bne.n	8005c2a <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
 8005bae:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005bb0:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005bb2:	b92c      	cbnz	r4, 8005bc0 <dir_sdi+0x2a>
 8005bb4:	f898 3000 	ldrb.w	r3, [r8]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <dir_sdi+0x2a>
		clst = fs->dirbase;
 8005bbc:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005bc0:	b9b4      	cbnz	r4, 8005bf0 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005bc2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8005bc6:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8005bca:	d930      	bls.n	8005c2e <dir_sdi+0x98>
		dp->sect = fs->dirbase;
 8005bcc:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8005bd0:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8005bd2:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005bd4:	69f3      	ldr	r3, [r6, #28]
 8005bd6:	b393      	cbz	r3, 8005c3e <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005bd8:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 8005bdc:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005bde:	f108 033c 	add.w	r3, r8, #60	; 0x3c
 8005be2:	f3c7 0108 	ubfx	r1, r7, #0, #9
 8005be6:	4419      	add	r1, r3
 8005be8:	6231      	str	r1, [r6, #32]
	return FR_OK;
 8005bea:	2000      	movs	r0, #0
}
 8005bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005bf0:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8005bf4:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8005bf6:	42af      	cmp	r7, r5
 8005bf8:	d30f      	bcc.n	8005c1a <dir_sdi+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	f7ff ff62 	bl	8005ac6 <get_fat>
 8005c02:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c08:	d013      	beq.n	8005c32 <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005c0a:	2801      	cmp	r0, #1
 8005c0c:	d913      	bls.n	8005c36 <dir_sdi+0xa0>
 8005c0e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8005c12:	4283      	cmp	r3, r0
 8005c14:	d911      	bls.n	8005c3a <dir_sdi+0xa4>
			ofs -= csz;
 8005c16:	1b7f      	subs	r7, r7, r5
 8005c18:	e7ed      	b.n	8005bf6 <dir_sdi+0x60>
		dp->sect = clust2sect(fs, clst);
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	f7ff fba3 	bl	8005368 <clust2sect>
 8005c22:	61f0      	str	r0, [r6, #28]
 8005c24:	e7d5      	b.n	8005bd2 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8005c26:	2002      	movs	r0, #2
 8005c28:	e7e0      	b.n	8005bec <dir_sdi+0x56>
 8005c2a:	2002      	movs	r0, #2
 8005c2c:	e7de      	b.n	8005bec <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005c2e:	2002      	movs	r0, #2
 8005c30:	e7dc      	b.n	8005bec <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c32:	2001      	movs	r0, #1
 8005c34:	e7da      	b.n	8005bec <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005c36:	2002      	movs	r0, #2
 8005c38:	e7d8      	b.n	8005bec <dir_sdi+0x56>
 8005c3a:	2002      	movs	r0, #2
 8005c3c:	e7d6      	b.n	8005bec <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 8005c3e:	2002      	movs	r0, #2
 8005c40:	e7d4      	b.n	8005bec <dir_sdi+0x56>

08005c42 <create_chain>:
{
 8005c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8005c48:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005c4a:	460f      	mov	r7, r1
 8005c4c:	b951      	cbnz	r1, 8005c64 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005c4e:	f8d6 8014 	ldr.w	r8, [r6, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c52:	f1b8 0f00 	cmp.w	r8, #0
 8005c56:	d012      	beq.n	8005c7e <create_chain+0x3c>
 8005c58:	6a33      	ldr	r3, [r6, #32]
 8005c5a:	4543      	cmp	r3, r8
 8005c5c:	d811      	bhi.n	8005c82 <create_chain+0x40>
 8005c5e:	f04f 0801 	mov.w	r8, #1
 8005c62:	e00e      	b.n	8005c82 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005c64:	f7ff ff2f 	bl	8005ac6 <get_fat>
 8005c68:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005c6a:	2801      	cmp	r0, #1
 8005c6c:	d947      	bls.n	8005cfe <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005c6e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c72:	d049      	beq.n	8005d08 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005c74:	6a32      	ldr	r2, [r6, #32]
 8005c76:	4282      	cmp	r2, r0
 8005c78:	d846      	bhi.n	8005d08 <create_chain+0xc6>
		scl = clst;
 8005c7a:	46b8      	mov	r8, r7
 8005c7c:	e001      	b.n	8005c82 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c7e:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8005c82:	4644      	mov	r4, r8
 8005c84:	e00c      	b.n	8005ca0 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005c86:	4621      	mov	r1, r4
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f7ff ff1c 	bl	8005ac6 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8005c8e:	4603      	mov	r3, r0
 8005c90:	b178      	cbz	r0, 8005cb2 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005c92:	2801      	cmp	r0, #1
 8005c94:	d038      	beq.n	8005d08 <create_chain+0xc6>
 8005c96:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c9a:	d035      	beq.n	8005d08 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8005c9c:	4544      	cmp	r4, r8
 8005c9e:	d032      	beq.n	8005d06 <create_chain+0xc4>
			ncl++;							/* Next cluster */
 8005ca0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005ca2:	6a33      	ldr	r3, [r6, #32]
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	d8ee      	bhi.n	8005c86 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8005ca8:	f1b8 0f01 	cmp.w	r8, #1
 8005cac:	d929      	bls.n	8005d02 <create_chain+0xc0>
				ncl = 2;
 8005cae:	2402      	movs	r4, #2
 8005cb0:	e7e9      	b.n	8005c86 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f7ff fe7d 	bl	80059b8 <put_fat>
		if (res == FR_OK && clst != 0) {
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	b900      	cbnz	r0, 8005cc4 <create_chain+0x82>
 8005cc2:	b977      	cbnz	r7, 8005ce2 <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005cc4:	b9a3      	cbnz	r3, 8005cf0 <create_chain+0xae>
		fs->last_clst = ncl;
 8005cc6:	6174      	str	r4, [r6, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005cc8:	69b2      	ldr	r2, [r6, #24]
 8005cca:	6a33      	ldr	r3, [r6, #32]
 8005ccc:	3b02      	subs	r3, #2
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d801      	bhi.n	8005cd6 <create_chain+0x94>
 8005cd2:	3a01      	subs	r2, #1
 8005cd4:	61b2      	str	r2, [r6, #24]
		fs->fsi_flag |= 1;
 8005cd6:	7933      	ldrb	r3, [r6, #4]
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	7133      	strb	r3, [r6, #4]
 8005cde:	4623      	mov	r3, r4
 8005ce0:	e012      	b.n	8005d08 <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	4639      	mov	r1, r7
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7ff fe66 	bl	80059b8 <put_fat>
 8005cec:	4603      	mov	r3, r0
 8005cee:	e7e9      	b.n	8005cc4 <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d001      	beq.n	8005cf8 <create_chain+0xb6>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e007      	b.n	8005d08 <create_chain+0xc6>
 8005cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfc:	e004      	b.n	8005d08 <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e002      	b.n	8005d08 <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d0e <remove_chain>:
{
 8005d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d10:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8005d12:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005d14:	2901      	cmp	r1, #1
 8005d16:	d92e      	bls.n	8005d76 <remove_chain+0x68>
 8005d18:	4606      	mov	r6, r0
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	6a2b      	ldr	r3, [r5, #32]
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	d92b      	bls.n	8005d7a <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005d22:	b14a      	cbz	r2, 8005d38 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f7ff fe45 	bl	80059b8 <put_fat>
		if (res != FR_OK) return res;
 8005d2e:	4607      	mov	r7, r0
 8005d30:	b110      	cbz	r0, 8005d38 <remove_chain+0x2a>
 8005d32:	e023      	b.n	8005d7c <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005d34:	42a2      	cmp	r2, r4
 8005d36:	d921      	bls.n	8005d7c <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005d38:	4627      	mov	r7, r4
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f7ff fec2 	bl	8005ac6 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8005d42:	4604      	mov	r4, r0
 8005d44:	b1e0      	cbz	r0, 8005d80 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d46:	2801      	cmp	r0, #1
 8005d48:	d01c      	beq.n	8005d84 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005d4a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d4e:	d01b      	beq.n	8005d88 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d50:	2200      	movs	r2, #0
 8005d52:	4639      	mov	r1, r7
 8005d54:	4628      	mov	r0, r5
 8005d56:	f7ff fe2f 	bl	80059b8 <put_fat>
			if (res != FR_OK) return res;
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	b970      	cbnz	r0, 8005d7c <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005d5e:	69ab      	ldr	r3, [r5, #24]
 8005d60:	6a2a      	ldr	r2, [r5, #32]
 8005d62:	1e91      	subs	r1, r2, #2
 8005d64:	428b      	cmp	r3, r1
 8005d66:	d2e5      	bcs.n	8005d34 <remove_chain+0x26>
			fs->free_clst++;
 8005d68:	3301      	adds	r3, #1
 8005d6a:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 8005d6c:	792b      	ldrb	r3, [r5, #4]
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	712b      	strb	r3, [r5, #4]
 8005d74:	e7de      	b.n	8005d34 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005d76:	2702      	movs	r7, #2
 8005d78:	e000      	b.n	8005d7c <remove_chain+0x6e>
 8005d7a:	2702      	movs	r7, #2
}
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8005d80:	2700      	movs	r7, #0
 8005d82:	e7fb      	b.n	8005d7c <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d84:	2702      	movs	r7, #2
 8005d86:	e7f9      	b.n	8005d7c <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005d88:	2701      	movs	r7, #1
 8005d8a:	e7f7      	b.n	8005d7c <remove_chain+0x6e>

08005d8c <dir_next>:
{
 8005d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 8005d90:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005d92:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005d94:	69c3      	ldr	r3, [r0, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d06c      	beq.n	8005e74 <dir_next+0xe8>
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4688      	mov	r8, r1
 8005d9e:	3520      	adds	r5, #32
 8005da0:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8005da4:	d268      	bcs.n	8005e78 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005da6:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8005daa:	b93f      	cbnz	r7, 8005dbc <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8005dac:	3301      	adds	r3, #1
 8005dae:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8005db0:	6981      	ldr	r1, [r0, #24]
 8005db2:	b979      	cbnz	r1, 8005dd4 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005db4:	8933      	ldrh	r3, [r6, #8]
 8005db6:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8005dba:	d907      	bls.n	8005dcc <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 8005dbc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005dbe:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8005dc2:	443b      	add	r3, r7
 8005dc4:	6223      	str	r3, [r4, #32]
	return FR_OK;
 8005dc6:	2000      	movs	r0, #0
}
 8005dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61c3      	str	r3, [r0, #28]
 8005dd0:	2004      	movs	r0, #4
 8005dd2:	e7f9      	b.n	8005dc8 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005dd4:	8973      	ldrh	r3, [r6, #10]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8005ddc:	d1ee      	bne.n	8005dbc <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005dde:	f7ff fe72 	bl	8005ac6 <get_fat>
 8005de2:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005de4:	2801      	cmp	r0, #1
 8005de6:	d949      	bls.n	8005e7c <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005de8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005dec:	d048      	beq.n	8005e80 <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005dee:	6a33      	ldr	r3, [r6, #32]
 8005df0:	4283      	cmp	r3, r0
 8005df2:	d837      	bhi.n	8005e64 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8005df4:	f1b8 0f00 	cmp.w	r8, #0
 8005df8:	d011      	beq.n	8005e1e <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005dfa:	69a1      	ldr	r1, [r4, #24]
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7ff ff20 	bl	8005c42 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005e02:	4682      	mov	sl, r0
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d03d      	beq.n	8005e84 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005e08:	2801      	cmp	r0, #1
 8005e0a:	d03d      	beq.n	8005e88 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e10:	d03c      	beq.n	8005e8c <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005e12:	4630      	mov	r0, r6
 8005e14:	f7ff fbc6 	bl	80055a4 <sync_window>
 8005e18:	b128      	cbz	r0, 8005e26 <dir_next+0x9a>
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	e7d4      	b.n	8005dc8 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61e3      	str	r3, [r4, #28]
 8005e22:	2004      	movs	r0, #4
 8005e24:	e7d0      	b.n	8005dc8 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 8005e30:	f7ff f9a6 	bl	8005180 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005e34:	4651      	mov	r1, sl
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7ff fa96 	bl	8005368 <clust2sect>
 8005e3c:	63b0      	str	r0, [r6, #56]	; 0x38
 8005e3e:	8973      	ldrh	r3, [r6, #10]
 8005e40:	4599      	cmp	r9, r3
 8005e42:	d20b      	bcs.n	8005e5c <dir_next+0xd0>
						fs->wflag = 1;
 8005e44:	2301      	movs	r3, #1
 8005e46:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f7ff fbab 	bl	80055a4 <sync_window>
 8005e4e:	b9f8      	cbnz	r0, 8005e90 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005e50:	f109 0901 	add.w	r9, r9, #1
 8005e54:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005e56:	3301      	adds	r3, #1
 8005e58:	63b3      	str	r3, [r6, #56]	; 0x38
 8005e5a:	e7f0      	b.n	8005e3e <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 8005e5c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005e5e:	eba3 0309 	sub.w	r3, r3, r9
 8005e62:	63b3      	str	r3, [r6, #56]	; 0x38
				dp->clust = clst;		/* Initialize data for new cluster */
 8005e64:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8005e68:	4651      	mov	r1, sl
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	f7ff fa7c 	bl	8005368 <clust2sect>
 8005e70:	61e0      	str	r0, [r4, #28]
 8005e72:	e7a3      	b.n	8005dbc <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005e74:	2004      	movs	r0, #4
 8005e76:	e7a7      	b.n	8005dc8 <dir_next+0x3c>
 8005e78:	2004      	movs	r0, #4
 8005e7a:	e7a5      	b.n	8005dc8 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005e7c:	2002      	movs	r0, #2
 8005e7e:	e7a3      	b.n	8005dc8 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005e80:	2001      	movs	r0, #1
 8005e82:	e7a1      	b.n	8005dc8 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005e84:	2007      	movs	r0, #7
 8005e86:	e79f      	b.n	8005dc8 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005e88:	2002      	movs	r0, #2
 8005e8a:	e79d      	b.n	8005dc8 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	e79b      	b.n	8005dc8 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005e90:	2001      	movs	r0, #1
 8005e92:	e799      	b.n	8005dc8 <dir_next+0x3c>

08005e94 <dir_alloc>:
{
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	4604      	mov	r4, r0
 8005e98:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8005e9a:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	f7ff fe7a 	bl	8005b96 <dir_sdi>
	if (res == FR_OK) {
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	b9c0      	cbnz	r0, 8005ed8 <dir_alloc+0x44>
		n = 0;
 8005ea6:	2500      	movs	r5, #0
 8005ea8:	e008      	b.n	8005ebc <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005eaa:	3501      	adds	r5, #1
 8005eac:	42b5      	cmp	r5, r6
 8005eae:	d013      	beq.n	8005ed8 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f7ff ff6a 	bl	8005d8c <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005eb8:	4602      	mov	r2, r0
 8005eba:	b968      	cbnz	r0, 8005ed8 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 8005ebc:	69e1      	ldr	r1, [r4, #28]
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	f7ff fb9a 	bl	80055f8 <move_window>
			if (res != FR_OK) break;
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	b938      	cbnz	r0, 8005ed8 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005ec8:	6a23      	ldr	r3, [r4, #32]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2be5      	cmp	r3, #229	; 0xe5
 8005ece:	d0ec      	beq.n	8005eaa <dir_alloc+0x16>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0ea      	beq.n	8005eaa <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8005ed4:	2500      	movs	r5, #0
 8005ed6:	e7eb      	b.n	8005eb0 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005ed8:	2a04      	cmp	r2, #4
 8005eda:	d001      	beq.n	8005ee0 <dir_alloc+0x4c>
}
 8005edc:	4610      	mov	r0, r2
 8005ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005ee0:	2207      	movs	r2, #7
 8005ee2:	e7fb      	b.n	8005edc <dir_alloc+0x48>

08005ee4 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005ee4:	b158      	cbz	r0, 8005efe <unlock_fs+0x1a>
{
 8005ee6:	b508      	push	{r3, lr}
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005ee8:	290c      	cmp	r1, #12
 8005eea:	d003      	beq.n	8005ef4 <unlock_fs+0x10>
 8005eec:	290b      	cmp	r1, #11
 8005eee:	d001      	beq.n	8005ef4 <unlock_fs+0x10>
 8005ef0:	290f      	cmp	r1, #15
 8005ef2:	d100      	bne.n	8005ef6 <unlock_fs+0x12>
}
 8005ef4:	bd08      	pop	{r3, pc}
		ff_rel_grant(fs->sobj);
 8005ef6:	6900      	ldr	r0, [r0, #16]
 8005ef8:	f001 fad1 	bl	800749e <ff_rel_grant>
}
 8005efc:	e7fa      	b.n	8005ef4 <unlock_fs+0x10>
 8005efe:	4770      	bx	lr

08005f00 <validate>:
{
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005f04:	4604      	mov	r4, r0
 8005f06:	b308      	cbz	r0, 8005f4c <validate+0x4c>
 8005f08:	6800      	ldr	r0, [r0, #0]
 8005f0a:	b308      	cbz	r0, 8005f50 <validate+0x50>
 8005f0c:	7803      	ldrb	r3, [r0, #0]
 8005f0e:	b313      	cbz	r3, 8005f56 <validate+0x56>
 8005f10:	88a2      	ldrh	r2, [r4, #4]
 8005f12:	88c3      	ldrh	r3, [r0, #6]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d003      	beq.n	8005f20 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8005f18:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005f1a:	2400      	movs	r4, #0
 8005f1c:	602c      	str	r4, [r5, #0]
}
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8005f20:	f7ff fb36 	bl	8005590 <lock_fs>
 8005f24:	b910      	cbnz	r0, 8005f2c <validate+0x2c>
			res = FR_TIMEOUT;
 8005f26:	200f      	movs	r0, #15
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005f28:	2400      	movs	r4, #0
 8005f2a:	e7f7      	b.n	8005f1c <validate+0x1c>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	7858      	ldrb	r0, [r3, #1]
 8005f30:	f7ff f8ba 	bl	80050a8 <disk_status>
 8005f34:	f010 0001 	ands.w	r0, r0, #1
 8005f38:	d101      	bne.n	8005f3e <validate+0x3e>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005f3a:	6824      	ldr	r4, [r4, #0]
 8005f3c:	e7ee      	b.n	8005f1c <validate+0x1c>
				unlock_fs(obj->fs, FR_OK);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6820      	ldr	r0, [r4, #0]
 8005f42:	f7ff ffcf 	bl	8005ee4 <unlock_fs>
	FRESULT res = FR_INVALID_OBJECT;
 8005f46:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005f48:	2400      	movs	r4, #0
 8005f4a:	e7e7      	b.n	8005f1c <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8005f4c:	2009      	movs	r0, #9
 8005f4e:	e7e5      	b.n	8005f1c <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005f50:	4604      	mov	r4, r0
	FRESULT res = FR_INVALID_OBJECT;
 8005f52:	2009      	movs	r0, #9
 8005f54:	e7e2      	b.n	8005f1c <validate+0x1c>
 8005f56:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005f58:	2400      	movs	r4, #0
 8005f5a:	e7df      	b.n	8005f1c <validate+0x1c>

08005f5c <create_name>:
{
 8005f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	b083      	sub	sp, #12
 8005f62:	4606      	mov	r6, r0
 8005f64:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005f66:	f8d1 9000 	ldr.w	r9, [r1]
 8005f6a:	6803      	ldr	r3, [r0, #0]
 8005f6c:	68dd      	ldr	r5, [r3, #12]
 8005f6e:	2400      	movs	r4, #0
 8005f70:	4623      	mov	r3, r4
 8005f72:	e024      	b.n	8005fbe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005f74:	3701      	adds	r7, #1
 8005f76:	f819 3007 	ldrb.w	r3, [r9, r7]
 8005f7a:	2b2f      	cmp	r3, #47	; 0x2f
 8005f7c:	d0fa      	beq.n	8005f74 <create_name+0x18>
 8005f7e:	2b5c      	cmp	r3, #92	; 0x5c
 8005f80:	d0f8      	beq.n	8005f74 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 8005f82:	444f      	add	r7, r9
 8005f84:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005f88:	281f      	cmp	r0, #31
 8005f8a:	d835      	bhi.n	8005ff8 <create_name+0x9c>
 8005f8c:	f04f 0804 	mov.w	r8, #4
	if ((di == 1 && lfn[di - 1] == '.') ||
 8005f90:	2c01      	cmp	r4, #1
 8005f92:	d034      	beq.n	8005ffe <create_name+0xa2>
 8005f94:	2c02      	cmp	r4, #2
 8005f96:	d150      	bne.n	800603a <create_name+0xde>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8005f98:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8005fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa4:	d149      	bne.n	800603a <create_name+0xde>
 8005fa6:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8005faa:	3b02      	subs	r3, #2
 8005fac:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8005fb0:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb2:	d142      	bne.n	800603a <create_name+0xde>
 8005fb4:	e02a      	b.n	800600c <create_name+0xb0>
		lfn[di++] = w;					/* Store the Unicode character */
 8005fb6:	f825 8014 	strh.w	r8, [r5, r4, lsl #1]
 8005fba:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 8005fbc:	463b      	mov	r3, r7
 8005fbe:	1c5f      	adds	r7, r3, #1
 8005fc0:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 8005fc4:	281f      	cmp	r0, #31
 8005fc6:	d9dc      	bls.n	8005f82 <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005fc8:	282f      	cmp	r0, #47	; 0x2f
 8005fca:	d0d4      	beq.n	8005f76 <create_name+0x1a>
 8005fcc:	285c      	cmp	r0, #92	; 0x5c
 8005fce:	d0d2      	beq.n	8005f76 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005fd0:	2cfe      	cmp	r4, #254	; 0xfe
 8005fd2:	f200 80fd 	bhi.w	80061d0 <create_name+0x274>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	f001 f9d6 	bl	8007388 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005fdc:	4680      	mov	r8, r0
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f000 80f8 	beq.w	80061d4 <create_name+0x278>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005fe4:	287f      	cmp	r0, #127	; 0x7f
 8005fe6:	d8e6      	bhi.n	8005fb6 <create_name+0x5a>
 8005fe8:	4601      	mov	r1, r0
 8005fea:	487c      	ldr	r0, [pc, #496]	; (80061dc <create_name+0x280>)
 8005fec:	f7ff f8da 	bl	80051a4 <chk_chr>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d0e0      	beq.n	8005fb6 <create_name+0x5a>
 8005ff4:	2006      	movs	r0, #6
 8005ff6:	e0a2      	b.n	800613e <create_name+0x1e2>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005ff8:	f04f 0800 	mov.w	r8, #0
 8005ffc:	e7c8      	b.n	8005f90 <create_name+0x34>
	if ((di == 1 && lfn[di - 1] == '.') ||
 8005ffe:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8006002:	3b01      	subs	r3, #1
 8006004:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8006008:	2b2e      	cmp	r3, #46	; 0x2e
 800600a:	d1c3      	bne.n	8005f94 <create_name+0x38>
		lfn[di] = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8006012:	e004      	b.n	800601e <create_name+0xc2>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8006014:	2120      	movs	r1, #32
 8006016:	18f2      	adds	r2, r6, r3
 8006018:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800601c:	3301      	adds	r3, #1
 800601e:	2b0a      	cmp	r3, #10
 8006020:	d803      	bhi.n	800602a <create_name+0xce>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8006022:	42a3      	cmp	r3, r4
 8006024:	d2f6      	bcs.n	8006014 <create_name+0xb8>
 8006026:	212e      	movs	r1, #46	; 0x2e
 8006028:	e7f5      	b.n	8006016 <create_name+0xba>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800602a:	4433      	add	r3, r6
 800602c:	f048 0820 	orr.w	r8, r8, #32
 8006030:	f883 8024 	strb.w	r8, [r3, #36]	; 0x24
		return FR_OK;
 8006034:	2000      	movs	r0, #0
 8006036:	e082      	b.n	800613e <create_name+0x1e2>
		di--;
 8006038:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800603a:	b144      	cbz	r4, 800604e <create_name+0xf2>
		w = lfn[di - 1];
 800603c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8006040:	3b01      	subs	r3, #1
 8006042:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8006046:	2b20      	cmp	r3, #32
 8006048:	d0f6      	beq.n	8006038 <create_name+0xdc>
 800604a:	2b2e      	cmp	r3, #46	; 0x2e
 800604c:	d0f4      	beq.n	8006038 <create_name+0xdc>
	lfn[di] = 0;						/* LFN is created */
 800604e:	2300      	movs	r3, #0
 8006050:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006054:	2c00      	cmp	r4, #0
 8006056:	f000 80bf 	beq.w	80061d8 <create_name+0x27c>
	mem_set(dp->fn, ' ', 11);
 800605a:	220b      	movs	r2, #11
 800605c:	2120      	movs	r1, #32
 800605e:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8006062:	f7ff f88d 	bl	8005180 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <create_name+0x110>
 800606a:	3301      	adds	r3, #1
 800606c:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8006070:	2a20      	cmp	r2, #32
 8006072:	d0fa      	beq.n	800606a <create_name+0x10e>
 8006074:	2a2e      	cmp	r2, #46	; 0x2e
 8006076:	d0f8      	beq.n	800606a <create_name+0x10e>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006078:	b11b      	cbz	r3, 8006082 <create_name+0x126>
 800607a:	f048 0803 	orr.w	r8, r8, #3
 800607e:	e000      	b.n	8006082 <create_name+0x126>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006080:	3c01      	subs	r4, #1
 8006082:	b16c      	cbz	r4, 80060a0 <create_name+0x144>
 8006084:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 8006088:	3a01      	subs	r2, #1
 800608a:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800608e:	2a2e      	cmp	r2, #46	; 0x2e
 8006090:	d1f6      	bne.n	8006080 <create_name+0x124>
 8006092:	f04f 0b08 	mov.w	fp, #8
 8006096:	f04f 0a00 	mov.w	sl, #0
 800609a:	f8cd a004 	str.w	sl, [sp, #4]
 800609e:	e00a      	b.n	80060b6 <create_name+0x15a>
 80060a0:	46a2      	mov	sl, r4
 80060a2:	f04f 0b08 	mov.w	fp, #8
 80060a6:	2200      	movs	r2, #0
 80060a8:	9201      	str	r2, [sp, #4]
 80060aa:	e004      	b.n	80060b6 <create_name+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80060ac:	454c      	cmp	r4, r9
 80060ae:	d00b      	beq.n	80060c8 <create_name+0x16c>
			cf |= NS_LOSS | NS_LFN; continue;
 80060b0:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 80060b4:	464b      	mov	r3, r9
 80060b6:	f103 0901 	add.w	r9, r3, #1
 80060ba:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 80060be:	b1ff      	cbz	r7, 8006100 <create_name+0x1a4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80060c0:	2f20      	cmp	r7, #32
 80060c2:	d0f5      	beq.n	80060b0 <create_name+0x154>
 80060c4:	2f2e      	cmp	r7, #46	; 0x2e
 80060c6:	d0f1      	beq.n	80060ac <create_name+0x150>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80060c8:	45da      	cmp	sl, fp
 80060ca:	d210      	bcs.n	80060ee <create_name+0x192>
 80060cc:	454c      	cmp	r4, r9
 80060ce:	d00e      	beq.n	80060ee <create_name+0x192>
		if (w >= 0x80) {				/* Non ASCII character */
 80060d0:	2f7f      	cmp	r7, #127	; 0x7f
 80060d2:	d844      	bhi.n	800615e <create_name+0x202>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80060d4:	2f00      	cmp	r7, #0
 80060d6:	d150      	bne.n	800617a <create_name+0x21e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80060d8:	f048 0803 	orr.w	r8, r8, #3
 80060dc:	275f      	movs	r7, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80060de:	eb06 030a 	add.w	r3, r6, sl
 80060e2:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80060e6:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 80060e8:	f10a 0a01 	add.w	sl, sl, #1
 80060ec:	e7e3      	b.n	80060b6 <create_name+0x15a>
			if (ni == 11) {				/* Long extension */
 80060ee:	f1bb 0f0b 	cmp.w	fp, #11
 80060f2:	d027      	beq.n	8006144 <create_name+0x1e8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80060f4:	454c      	cmp	r4, r9
 80060f6:	d001      	beq.n	80060fc <create_name+0x1a0>
 80060f8:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 80060fc:	454c      	cmp	r4, r9
 80060fe:	d224      	bcs.n	800614a <create_name+0x1ee>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006100:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8006104:	2be5      	cmp	r3, #229	; 0xe5
 8006106:	d054      	beq.n	80061b2 <create_name+0x256>
	if (ni == 8) b <<= 2;
 8006108:	f1bb 0f08 	cmp.w	fp, #8
 800610c:	d055      	beq.n	80061ba <create_name+0x25e>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800610e:	9b01      	ldr	r3, [sp, #4]
 8006110:	f003 020c 	and.w	r2, r3, #12
 8006114:	2a0c      	cmp	r2, #12
 8006116:	d003      	beq.n	8006120 <create_name+0x1c4>
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	2b03      	cmp	r3, #3
 800611e:	d101      	bne.n	8006124 <create_name+0x1c8>
 8006120:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006124:	f018 0f02 	tst.w	r8, #2
 8006128:	d106      	bne.n	8006138 <create_name+0x1dc>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800612a:	9b01      	ldr	r3, [sp, #4]
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d047      	beq.n	80061c4 <create_name+0x268>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006134:	2a04      	cmp	r2, #4
 8006136:	d048      	beq.n	80061ca <create_name+0x26e>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006138:	f886 802f 	strb.w	r8, [r6, #47]	; 0x2f
	return FR_OK;
 800613c:	2000      	movs	r0, #0
}
 800613e:	b003      	add	sp, #12
 8006140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8006144:	f048 0803 	orr.w	r8, r8, #3
 8006148:	e7da      	b.n	8006100 <create_name+0x1a4>
			b <<= 2; continue;
 800614a:	9b01      	ldr	r3, [sp, #4]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	b2db      	uxtb	r3, r3
 8006150:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006152:	4623      	mov	r3, r4
 8006154:	f04f 0b0b 	mov.w	fp, #11
 8006158:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800615c:	e7ab      	b.n	80060b6 <create_name+0x15a>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800615e:	2100      	movs	r1, #0
 8006160:	4638      	mov	r0, r7
 8006162:	f001 f911 	bl	8007388 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006166:	4607      	mov	r7, r0
 8006168:	b120      	cbz	r0, 8006174 <create_name+0x218>
 800616a:	f1a0 0780 	sub.w	r7, r0, #128	; 0x80
 800616e:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <create_name+0x284>)
 8006170:	443b      	add	r3, r7
 8006172:	7c1f      	ldrb	r7, [r3, #16]
			cf |= NS_LFN;				/* Force create LFN entry */
 8006174:	f048 0802 	orr.w	r8, r8, #2
 8006178:	e7ac      	b.n	80060d4 <create_name+0x178>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800617a:	4639      	mov	r1, r7
 800617c:	4819      	ldr	r0, [pc, #100]	; (80061e4 <create_name+0x288>)
 800617e:	f7ff f811 	bl	80051a4 <chk_chr>
 8006182:	2800      	cmp	r0, #0
 8006184:	d1a8      	bne.n	80060d8 <create_name+0x17c>
				if (IsUpper(w)) {		/* ASCII large capital */
 8006186:	f1a7 0341 	sub.w	r3, r7, #65	; 0x41
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b19      	cmp	r3, #25
 800618e:	d804      	bhi.n	800619a <create_name+0x23e>
					b |= 2;
 8006190:	9b01      	ldr	r3, [sp, #4]
 8006192:	f043 0302 	orr.w	r3, r3, #2
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	e7a1      	b.n	80060de <create_name+0x182>
					if (IsLower(w)) {	/* ASCII small capital */
 800619a:	f1a7 0361 	sub.w	r3, r7, #97	; 0x61
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b19      	cmp	r3, #25
 80061a2:	d89c      	bhi.n	80060de <create_name+0x182>
						b |= 1; w -= 0x20;
 80061a4:	9b01      	ldr	r3, [sp, #4]
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	3f20      	subs	r7, #32
 80061ae:	b2bf      	uxth	r7, r7
 80061b0:	e795      	b.n	80060de <create_name+0x182>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80061b2:	2305      	movs	r3, #5
 80061b4:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 80061b8:	e7a6      	b.n	8006108 <create_name+0x1ac>
	if (ni == 8) b <<= 2;
 80061ba:	9b01      	ldr	r3, [sp, #4]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	e7a4      	b.n	800610e <create_name+0x1b2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80061c4:	f048 0810 	orr.w	r8, r8, #16
 80061c8:	e7b4      	b.n	8006134 <create_name+0x1d8>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80061ca:	f048 0808 	orr.w	r8, r8, #8
 80061ce:	e7b3      	b.n	8006138 <create_name+0x1dc>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80061d0:	2006      	movs	r0, #6
 80061d2:	e7b4      	b.n	800613e <create_name+0x1e2>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80061d4:	2006      	movs	r0, #6
 80061d6:	e7b2      	b.n	800613e <create_name+0x1e2>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80061d8:	2006      	movs	r0, #6
 80061da:	e7b0      	b.n	800613e <create_name+0x1e2>
 80061dc:	0800fac8 	.word	0x0800fac8
 80061e0:	0800f608 	.word	0x0800f608
 80061e4:	0800fad4 	.word	0x0800fad4

080061e8 <cmp_lfn>:
{
 80061e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ec:	4681      	mov	r9, r0
 80061ee:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80061f0:	f101 001a 	add.w	r0, r1, #26
 80061f4:	f7fe ff9c 	bl	8005130 <ld_word>
 80061f8:	bbc8      	cbnz	r0, 800626e <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80061fa:	783e      	ldrb	r6, [r7, #0]
 80061fc:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8006200:	3e01      	subs	r6, #1
 8006202:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8006206:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800620a:	f04f 0801 	mov.w	r8, #1
 800620e:	2500      	movs	r5, #0
 8006210:	e006      	b.n	8006220 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 8006212:	2000      	movs	r0, #0
 8006214:	e02c      	b.n	8006270 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006216:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800621a:	4298      	cmp	r0, r3
 800621c:	d12a      	bne.n	8006274 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800621e:	3501      	adds	r5, #1
 8006220:	2d0c      	cmp	r5, #12
 8006222:	d818      	bhi.n	8006256 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006224:	4b17      	ldr	r3, [pc, #92]	; (8006284 <cmp_lfn+0x9c>)
 8006226:	5d58      	ldrb	r0, [r3, r5]
 8006228:	4438      	add	r0, r7
 800622a:	f7fe ff81 	bl	8005130 <ld_word>
 800622e:	4604      	mov	r4, r0
		if (wc) {
 8006230:	f1b8 0f00 	cmp.w	r8, #0
 8006234:	d0ef      	beq.n	8006216 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006236:	2efe      	cmp	r6, #254	; 0xfe
 8006238:	d8eb      	bhi.n	8006212 <cmp_lfn+0x2a>
 800623a:	f001 f8c3 	bl	80073c4 <ff_wtoupper>
 800623e:	4680      	mov	r8, r0
 8006240:	f106 0a01 	add.w	sl, r6, #1
 8006244:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 8006248:	f001 f8bc 	bl	80073c4 <ff_wtoupper>
 800624c:	4580      	cmp	r8, r0
 800624e:	d1e0      	bne.n	8006212 <cmp_lfn+0x2a>
			wc = uc;
 8006250:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006252:	4656      	mov	r6, sl
 8006254:	e7e3      	b.n	800621e <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006256:	783b      	ldrb	r3, [r7, #0]
 8006258:	f013 0f40 	tst.w	r3, #64	; 0x40
 800625c:	d00c      	beq.n	8006278 <cmp_lfn+0x90>
 800625e:	f1b8 0f00 	cmp.w	r8, #0
 8006262:	d00b      	beq.n	800627c <cmp_lfn+0x94>
 8006264:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8006268:	b953      	cbnz	r3, 8006280 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 800626a:	2001      	movs	r0, #1
 800626c:	e000      	b.n	8006270 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800626e:	2000      	movs	r0, #0
}
 8006270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006274:	2000      	movs	r0, #0
 8006276:	e7fb      	b.n	8006270 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 8006278:	2001      	movs	r0, #1
 800627a:	e7f9      	b.n	8006270 <cmp_lfn+0x88>
 800627c:	2001      	movs	r0, #1
 800627e:	e7f7      	b.n	8006270 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006280:	2000      	movs	r0, #0
 8006282:	e7f5      	b.n	8006270 <cmp_lfn+0x88>
 8006284:	0800f608 	.word	0x0800f608

08006288 <dir_find>:
{
 8006288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800628c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800628e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006292:	2100      	movs	r1, #0
 8006294:	f7ff fc7f 	bl	8005b96 <dir_sdi>
	if (res != FR_OK) return res;
 8006298:	4606      	mov	r6, r0
 800629a:	2800      	cmp	r0, #0
 800629c:	d164      	bne.n	8006368 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800629e:	f04f 33ff 	mov.w	r3, #4294967295
 80062a2:	6323      	str	r3, [r4, #48]	; 0x30
 80062a4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80062a8:	464f      	mov	r7, r9
 80062aa:	e00a      	b.n	80062c2 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80062ac:	f04f 33ff 	mov.w	r3, #4294967295
 80062b0:	6323      	str	r3, [r4, #48]	; 0x30
 80062b2:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 80062b4:	2100      	movs	r1, #0
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7ff fd68 	bl	8005d8c <dir_next>
	} while (res == FR_OK);
 80062bc:	4606      	mov	r6, r0
 80062be:	2800      	cmp	r0, #0
 80062c0:	d152      	bne.n	8006368 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 80062c2:	69e1      	ldr	r1, [r4, #28]
 80062c4:	4640      	mov	r0, r8
 80062c6:	f7ff f997 	bl	80055f8 <move_window>
		if (res != FR_OK) break;
 80062ca:	4606      	mov	r6, r0
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d14b      	bne.n	8006368 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 80062d0:	6a25      	ldr	r5, [r4, #32]
 80062d2:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d046      	beq.n	8006366 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80062d8:	7ae9      	ldrb	r1, [r5, #11]
 80062da:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 80062de:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80062e0:	2be5      	cmp	r3, #229	; 0xe5
 80062e2:	d0e3      	beq.n	80062ac <dir_find+0x24>
 80062e4:	f011 0f08 	tst.w	r1, #8
 80062e8:	d001      	beq.n	80062ee <dir_find+0x66>
 80062ea:	2a0f      	cmp	r2, #15
 80062ec:	d1de      	bne.n	80062ac <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80062ee:	2a0f      	cmp	r2, #15
 80062f0:	d016      	beq.n	8006320 <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80062f2:	b927      	cbnz	r7, 80062fe <dir_find+0x76>
 80062f4:	4628      	mov	r0, r5
 80062f6:	f7ff f90c 	bl	8005512 <sum_sfn>
 80062fa:	4548      	cmp	r0, r9
 80062fc:	d034      	beq.n	8006368 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80062fe:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8006302:	f013 0f01 	tst.w	r3, #1
 8006306:	d106      	bne.n	8006316 <dir_find+0x8e>
 8006308:	220b      	movs	r2, #11
 800630a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800630e:	4628      	mov	r0, r5
 8006310:	f7fe ff3b 	bl	800518a <mem_cmp>
 8006314:	b340      	cbz	r0, 8006368 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006316:	f04f 33ff 	mov.w	r3, #4294967295
 800631a:	6323      	str	r3, [r4, #48]	; 0x30
 800631c:	27ff      	movs	r7, #255	; 0xff
 800631e:	e7c9      	b.n	80062b4 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006320:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8006324:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006328:	d1c4      	bne.n	80062b4 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800632a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800632e:	d006      	beq.n	800633e <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 8006330:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006334:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006338:	6962      	ldr	r2, [r4, #20]
 800633a:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800633c:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800633e:	42bb      	cmp	r3, r7
 8006340:	d001      	beq.n	8006346 <dir_find+0xbe>
 8006342:	27ff      	movs	r7, #255	; 0xff
 8006344:	e7b6      	b.n	80062b4 <dir_find+0x2c>
 8006346:	7b6b      	ldrb	r3, [r5, #13]
 8006348:	454b      	cmp	r3, r9
 800634a:	d001      	beq.n	8006350 <dir_find+0xc8>
 800634c:	27ff      	movs	r7, #255	; 0xff
 800634e:	e7b1      	b.n	80062b4 <dir_find+0x2c>
 8006350:	4629      	mov	r1, r5
 8006352:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8006356:	f7ff ff47 	bl	80061e8 <cmp_lfn>
 800635a:	b110      	cbz	r0, 8006362 <dir_find+0xda>
 800635c:	3f01      	subs	r7, #1
 800635e:	b2ff      	uxtb	r7, r7
 8006360:	e7a8      	b.n	80062b4 <dir_find+0x2c>
 8006362:	27ff      	movs	r7, #255	; 0xff
 8006364:	e7a6      	b.n	80062b4 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006366:	2604      	movs	r6, #4
}
 8006368:	4630      	mov	r0, r6
 800636a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800636e <follow_path>:
{
 800636e:	b570      	push	{r4, r5, r6, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	4604      	mov	r4, r0
 8006374:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8006376:	6805      	ldr	r5, [r0, #0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8006378:	780b      	ldrb	r3, [r1, #0]
 800637a:	2b2f      	cmp	r3, #47	; 0x2f
 800637c:	d006      	beq.n	800638c <follow_path+0x1e>
 800637e:	2b5c      	cmp	r3, #92	; 0x5c
 8006380:	d004      	beq.n	800638c <follow_path+0x1e>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8006382:	69eb      	ldr	r3, [r5, #28]
 8006384:	6083      	str	r3, [r0, #8]
 8006386:	e009      	b.n	800639c <follow_path+0x2e>
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006388:	3301      	adds	r3, #1
 800638a:	9301      	str	r3, [sp, #4]
 800638c:	9b01      	ldr	r3, [sp, #4]
 800638e:	781a      	ldrb	r2, [r3, #0]
 8006390:	2a2f      	cmp	r2, #47	; 0x2f
 8006392:	d0f9      	beq.n	8006388 <follow_path+0x1a>
 8006394:	2a5c      	cmp	r2, #92	; 0x5c
 8006396:	d0f7      	beq.n	8006388 <follow_path+0x1a>
		obj->sclust = 0;					/* Start from root directory */
 8006398:	2300      	movs	r3, #0
 800639a:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800639c:	9b01      	ldr	r3, [sp, #4]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b1f      	cmp	r3, #31
 80063a2:	d81e      	bhi.n	80063e2 <follow_path+0x74>
		dp->fn[NSFLAG] = NS_NONAME;
 80063a4:	2380      	movs	r3, #128	; 0x80
 80063a6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80063aa:	2100      	movs	r1, #0
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7ff fbf2 	bl	8005b96 <dir_sdi>
 80063b2:	4606      	mov	r6, r0
 80063b4:	e02d      	b.n	8006412 <follow_path+0xa4>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80063b6:	f013 0f04 	tst.w	r3, #4
 80063ba:	d02f      	beq.n	800641c <follow_path+0xae>
			res = dir_find(dp);				/* Find an object with the segment name */
 80063bc:	4606      	mov	r6, r0
 80063be:	e028      	b.n	8006412 <follow_path+0xa4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80063c0:	f013 0f04 	tst.w	r3, #4
 80063c4:	d12c      	bne.n	8006420 <follow_path+0xb2>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80063c6:	79a3      	ldrb	r3, [r4, #6]
 80063c8:	f013 0f10 	tst.w	r3, #16
 80063cc:	d02a      	beq.n	8006424 <follow_path+0xb6>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80063ce:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 80063d2:	6961      	ldr	r1, [r4, #20]
 80063d4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80063d8:	4419      	add	r1, r3
 80063da:	4628      	mov	r0, r5
 80063dc:	f7fe ffe1 	bl	80053a2 <ld_clust>
 80063e0:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80063e2:	a901      	add	r1, sp, #4
 80063e4:	4620      	mov	r0, r4
 80063e6:	f7ff fdb9 	bl	8005f5c <create_name>
			if (res != FR_OK) break;
 80063ea:	4606      	mov	r6, r0
 80063ec:	b988      	cbnz	r0, 8006412 <follow_path+0xa4>
			res = dir_find(dp);				/* Find an object with the segment name */
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7ff ff4a 	bl	8006288 <dir_find>
			ns = dp->fn[NSFLAG];
 80063f4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d0e1      	beq.n	80063c0 <follow_path+0x52>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80063fc:	2804      	cmp	r0, #4
 80063fe:	d10b      	bne.n	8006418 <follow_path+0xaa>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8006400:	f013 0f20 	tst.w	r3, #32
 8006404:	d0d7      	beq.n	80063b6 <follow_path+0x48>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8006406:	f013 0f04 	tst.w	r3, #4
 800640a:	d0ea      	beq.n	80063e2 <follow_path+0x74>
						dp->fn[NSFLAG] = NS_NONAME;
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 8006412:	4630      	mov	r0, r6
 8006414:	b002      	add	sp, #8
 8006416:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_find(dp);				/* Find an object with the segment name */
 8006418:	4606      	mov	r6, r0
 800641a:	e7fa      	b.n	8006412 <follow_path+0xa4>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800641c:	2605      	movs	r6, #5
 800641e:	e7f8      	b.n	8006412 <follow_path+0xa4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006420:	4606      	mov	r6, r0
 8006422:	e7f6      	b.n	8006412 <follow_path+0xa4>
				res = FR_NO_PATH; break;
 8006424:	2605      	movs	r6, #5
 8006426:	e7f4      	b.n	8006412 <follow_path+0xa4>

08006428 <dir_register>:
{
 8006428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800642c:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 800642e:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006430:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8006434:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8006438:	f040 808e 	bne.w	8006558 <dir_register+0x130>
 800643c:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800643e:	2400      	movs	r4, #0
 8006440:	e000      	b.n	8006444 <dir_register+0x1c>
 8006442:	3401      	adds	r4, #1
 8006444:	68f3      	ldr	r3, [r6, #12]
 8006446:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f9      	bne.n	8006442 <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 800644e:	f107 0824 	add.w	r8, r7, #36	; 0x24
 8006452:	220c      	movs	r2, #12
 8006454:	4641      	mov	r1, r8
 8006456:	a801      	add	r0, sp, #4
 8006458:	f7fe fe88 	bl	800516c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800645c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006460:	f013 0f01 	tst.w	r3, #1
 8006464:	d01c      	beq.n	80064a0 <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006466:	2340      	movs	r3, #64	; 0x40
 8006468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800646c:	2501      	movs	r5, #1
 800646e:	e000      	b.n	8006472 <dir_register+0x4a>
 8006470:	3501      	adds	r5, #1
 8006472:	2d63      	cmp	r5, #99	; 0x63
 8006474:	d80b      	bhi.n	800648e <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006476:	462b      	mov	r3, r5
 8006478:	68f2      	ldr	r2, [r6, #12]
 800647a:	a901      	add	r1, sp, #4
 800647c:	4640      	mov	r0, r8
 800647e:	f7fe fff3 	bl	8005468 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006482:	4638      	mov	r0, r7
 8006484:	f7ff ff00 	bl	8006288 <dir_find>
			if (res != FR_OK) break;
 8006488:	4681      	mov	r9, r0
 800648a:	2800      	cmp	r0, #0
 800648c:	d0f0      	beq.n	8006470 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800648e:	2d64      	cmp	r5, #100	; 0x64
 8006490:	d065      	beq.n	800655e <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006492:	f1b9 0f04 	cmp.w	r9, #4
 8006496:	d11b      	bne.n	80064d0 <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006498:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800649c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80064a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80064a4:	f013 0f02 	tst.w	r3, #2
 80064a8:	d006      	beq.n	80064b8 <dir_register+0x90>
 80064aa:	340c      	adds	r4, #12
 80064ac:	4b2d      	ldr	r3, [pc, #180]	; (8006564 <dir_register+0x13c>)
 80064ae:	fba3 3404 	umull	r3, r4, r3, r4
 80064b2:	08a4      	lsrs	r4, r4, #2
 80064b4:	3401      	adds	r4, #1
 80064b6:	e000      	b.n	80064ba <dir_register+0x92>
 80064b8:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80064ba:	4621      	mov	r1, r4
 80064bc:	4638      	mov	r0, r7
 80064be:	f7ff fce9 	bl	8005e94 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80064c2:	4681      	mov	r9, r0
 80064c4:	b908      	cbnz	r0, 80064ca <dir_register+0xa2>
 80064c6:	3c01      	subs	r4, #1
 80064c8:	d106      	bne.n	80064d8 <dir_register+0xb0>
	if (res == FR_OK) {
 80064ca:	f1b9 0f00 	cmp.w	r9, #0
 80064ce:	d029      	beq.n	8006524 <dir_register+0xfc>
}
 80064d0:	4648      	mov	r0, r9
 80064d2:	b005      	add	sp, #20
 80064d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80064d8:	6979      	ldr	r1, [r7, #20]
 80064da:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 80064de:	4638      	mov	r0, r7
 80064e0:	f7ff fb59 	bl	8005b96 <dir_sdi>
		if (res == FR_OK) {
 80064e4:	4681      	mov	r9, r0
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d1ef      	bne.n	80064ca <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80064ea:	4640      	mov	r0, r8
 80064ec:	f7ff f811 	bl	8005512 <sum_sfn>
 80064f0:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 80064f2:	69f9      	ldr	r1, [r7, #28]
 80064f4:	4630      	mov	r0, r6
 80064f6:	f7ff f87f 	bl	80055f8 <move_window>
				if (res != FR_OK) break;
 80064fa:	4681      	mov	r9, r0
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d1e4      	bne.n	80064ca <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006500:	462b      	mov	r3, r5
 8006502:	b2e2      	uxtb	r2, r4
 8006504:	6a39      	ldr	r1, [r7, #32]
 8006506:	68f0      	ldr	r0, [r6, #12]
 8006508:	f7fe ff72 	bl	80053f0 <put_lfn>
				fs->wflag = 1;
 800650c:	2301      	movs	r3, #1
 800650e:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006510:	2100      	movs	r1, #0
 8006512:	4638      	mov	r0, r7
 8006514:	f7ff fc3a 	bl	8005d8c <dir_next>
			} while (res == FR_OK && --nent);
 8006518:	4681      	mov	r9, r0
 800651a:	2800      	cmp	r0, #0
 800651c:	d1d5      	bne.n	80064ca <dir_register+0xa2>
 800651e:	3c01      	subs	r4, #1
 8006520:	d1e7      	bne.n	80064f2 <dir_register+0xca>
 8006522:	e7d2      	b.n	80064ca <dir_register+0xa2>
		res = move_window(fs, dp->sect);
 8006524:	69f9      	ldr	r1, [r7, #28]
 8006526:	4630      	mov	r0, r6
 8006528:	f7ff f866 	bl	80055f8 <move_window>
		if (res == FR_OK) {
 800652c:	4681      	mov	r9, r0
 800652e:	2800      	cmp	r0, #0
 8006530:	d1ce      	bne.n	80064d0 <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006532:	2220      	movs	r2, #32
 8006534:	2100      	movs	r1, #0
 8006536:	6a38      	ldr	r0, [r7, #32]
 8006538:	f7fe fe22 	bl	8005180 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800653c:	220b      	movs	r2, #11
 800653e:	4641      	mov	r1, r8
 8006540:	6a38      	ldr	r0, [r7, #32]
 8006542:	f7fe fe13 	bl	800516c <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800654a:	6a3a      	ldr	r2, [r7, #32]
 800654c:	f003 0318 	and.w	r3, r3, #24
 8006550:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8006552:	2301      	movs	r3, #1
 8006554:	70f3      	strb	r3, [r6, #3]
 8006556:	e7bb      	b.n	80064d0 <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006558:	f04f 0906 	mov.w	r9, #6
 800655c:	e7b8      	b.n	80064d0 <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800655e:	f04f 0907 	mov.w	r9, #7
 8006562:	e7b5      	b.n	80064d0 <dir_register+0xa8>
 8006564:	4ec4ec4f 	.word	0x4ec4ec4f

08006568 <sync_fs>:
{
 8006568:	b570      	push	{r4, r5, r6, lr}
 800656a:	4604      	mov	r4, r0
	res = sync_window(fs);
 800656c:	f7ff f81a 	bl	80055a4 <sync_window>
	if (res == FR_OK) {
 8006570:	4605      	mov	r5, r0
 8006572:	b948      	cbnz	r0, 8006588 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006574:	7823      	ldrb	r3, [r4, #0]
 8006576:	2b03      	cmp	r3, #3
 8006578:	d008      	beq.n	800658c <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800657a:	2200      	movs	r2, #0
 800657c:	4611      	mov	r1, r2
 800657e:	7860      	ldrb	r0, [r4, #1]
 8006580:	f7fe fdca 	bl	8005118 <disk_ioctl>
 8006584:	b100      	cbz	r0, 8006588 <sync_fs+0x20>
 8006586:	2501      	movs	r5, #1
}
 8006588:	4628      	mov	r0, r5
 800658a:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800658c:	7923      	ldrb	r3, [r4, #4]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d1f3      	bne.n	800657a <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8006592:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8006596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800659a:	2100      	movs	r1, #0
 800659c:	4630      	mov	r0, r6
 800659e:	f7fe fdef 	bl	8005180 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80065a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80065a6:	f204 203a 	addw	r0, r4, #570	; 0x23a
 80065aa:	f7fe fdd1 	bl	8005150 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80065ae:	490f      	ldr	r1, [pc, #60]	; (80065ec <sync_fs+0x84>)
 80065b0:	4630      	mov	r0, r6
 80065b2:	f7fe fdd1 	bl	8005158 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80065b6:	490e      	ldr	r1, [pc, #56]	; (80065f0 <sync_fs+0x88>)
 80065b8:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80065bc:	f7fe fdcc 	bl	8005158 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80065c0:	69a1      	ldr	r1, [r4, #24]
 80065c2:	f504 7009 	add.w	r0, r4, #548	; 0x224
 80065c6:	f7fe fdc7 	bl	8005158 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80065ca:	6961      	ldr	r1, [r4, #20]
 80065cc:	f504 700a 	add.w	r0, r4, #552	; 0x228
 80065d0:	f7fe fdc2 	bl	8005158 <st_dword>
			fs->winsect = fs->volbase + 1;
 80065d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80065d6:	3201      	adds	r2, #1
 80065d8:	63a2      	str	r2, [r4, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80065da:	2301      	movs	r3, #1
 80065dc:	4631      	mov	r1, r6
 80065de:	7860      	ldrb	r0, [r4, #1]
 80065e0:	f7fe fd8e 	bl	8005100 <disk_write>
			fs->fsi_flag = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	7123      	strb	r3, [r4, #4]
 80065e8:	e7c7      	b.n	800657a <sync_fs+0x12>
 80065ea:	bf00      	nop
 80065ec:	41615252 	.word	0x41615252
 80065f0:	61417272 	.word	0x61417272

080065f4 <f_mount>:
{
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	9001      	str	r0, [sp, #4]
 80065fa:	9100      	str	r1, [sp, #0]
 80065fc:	4615      	mov	r5, r2
	const TCHAR *rp = path;
 80065fe:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8006600:	a803      	add	r0, sp, #12
 8006602:	f7fe ff96 	bl	8005532 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006606:	1e04      	subs	r4, r0, #0
 8006608:	db2e      	blt.n	8006668 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800660a:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <f_mount+0x84>)
 800660c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006610:	6a1e      	ldr	r6, [r3, #32]
	if (cfs) {
 8006612:	b146      	cbz	r6, 8006626 <f_mount+0x32>
		clear_lock(cfs);
 8006614:	4630      	mov	r0, r6
 8006616:	f7fe fe89 	bl	800532c <clear_lock>
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800661a:	6930      	ldr	r0, [r6, #16]
 800661c:	f000 ff30 	bl	8007480 <ff_del_syncobj>
 8006620:	b320      	cbz	r0, 800666c <f_mount+0x78>
		cfs->fs_type = 0;				/* Clear old fs object */
 8006622:	2300      	movs	r3, #0
 8006624:	7033      	strb	r3, [r6, #0]
	if (fs) {
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	b13b      	cbz	r3, 800663a <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800662e:	9901      	ldr	r1, [sp, #4]
 8006630:	3110      	adds	r1, #16
 8006632:	b2e0      	uxtb	r0, r4
 8006634:	f000 ff14 	bl	8007460 <ff_cre_syncobj>
 8006638:	b1d0      	cbz	r0, 8006670 <f_mount+0x7c>
	FatFs[vol] = fs;					/* Register new fs object */
 800663a:	9b01      	ldr	r3, [sp, #4]
 800663c:	480e      	ldr	r0, [pc, #56]	; (8006678 <f_mount+0x84>)
 800663e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8006642:	6203      	str	r3, [r0, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006644:	b1b3      	cbz	r3, 8006674 <f_mount+0x80>
 8006646:	2d01      	cmp	r5, #1
 8006648:	d003      	beq.n	8006652 <f_mount+0x5e>
 800664a:	2400      	movs	r4, #0
}
 800664c:	4620      	mov	r0, r4
 800664e:	b004      	add	sp, #16
 8006650:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006652:	2200      	movs	r2, #0
 8006654:	a901      	add	r1, sp, #4
 8006656:	4668      	mov	r0, sp
 8006658:	f7ff f826 	bl	80056a8 <find_volume>
 800665c:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800665e:	4601      	mov	r1, r0
 8006660:	9801      	ldr	r0, [sp, #4]
 8006662:	f7ff fc3f 	bl	8005ee4 <unlock_fs>
 8006666:	e7f1      	b.n	800664c <f_mount+0x58>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006668:	240b      	movs	r4, #11
 800666a:	e7ef      	b.n	800664c <f_mount+0x58>
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800666c:	2402      	movs	r4, #2
 800666e:	e7ed      	b.n	800664c <f_mount+0x58>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006670:	2402      	movs	r4, #2
 8006672:	e7eb      	b.n	800664c <f_mount+0x58>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006674:	2400      	movs	r4, #0
 8006676:	e7e9      	b.n	800664c <f_mount+0x58>
 8006678:	20000218 	.word	0x20000218

0800667c <f_open>:
{
 800667c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006680:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006684:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8006686:	2800      	cmp	r0, #0
 8006688:	f000 8111 	beq.w	80068ae <f_open+0x232>
 800668c:	4615      	mov	r5, r2
 800668e:	4606      	mov	r6, r0
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006690:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8006694:	463a      	mov	r2, r7
 8006696:	a983      	add	r1, sp, #524	; 0x20c
 8006698:	a801      	add	r0, sp, #4
 800669a:	f7ff f805 	bl	80056a8 <find_volume>
	if (res == FR_OK) {
 800669e:	4604      	mov	r4, r0
 80066a0:	b158      	cbz	r0, 80066ba <f_open+0x3e>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80066a2:	b10c      	cbz	r4, 80066a8 <f_open+0x2c>
 80066a4:	2300      	movs	r3, #0
 80066a6:	6033      	str	r3, [r6, #0]
	LEAVE_FF(fs, res);
 80066a8:	4621      	mov	r1, r4
 80066aa:	9883      	ldr	r0, [sp, #524]	; 0x20c
 80066ac:	f7ff fc1a 	bl	8005ee4 <unlock_fs>
}
 80066b0:	4620      	mov	r0, r4
 80066b2:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80066b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 80066ba:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 80066bc:	9384      	str	r3, [sp, #528]	; 0x210
		INIT_NAMBUF(fs);
 80066be:	aa03      	add	r2, sp, #12
 80066c0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80066c2:	9901      	ldr	r1, [sp, #4]
 80066c4:	a884      	add	r0, sp, #528	; 0x210
 80066c6:	f7ff fe52 	bl	800636e <follow_path>
		if (res == FR_OK) {
 80066ca:	4604      	mov	r4, r0
 80066cc:	b960      	cbnz	r0, 80066e8 <f_open+0x6c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80066ce:	f99d 323f 	ldrsb.w	r3, [sp, #575]	; 0x23f
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	db50      	blt.n	8006778 <f_open+0xfc>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80066d6:	f037 0301 	bics.w	r3, r7, #1
 80066da:	bf14      	ite	ne
 80066dc:	2101      	movne	r1, #1
 80066de:	2100      	moveq	r1, #0
 80066e0:	a884      	add	r0, sp, #528	; 0x210
 80066e2:	f7fe fd67 	bl	80051b4 <chk_lock>
 80066e6:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80066e8:	f015 0f1c 	tst.w	r5, #28
 80066ec:	d05a      	beq.n	80067a4 <f_open+0x128>
			if (res != FR_OK) {					/* No file, create new */
 80066ee:	2c00      	cmp	r4, #0
 80066f0:	d04e      	beq.n	8006790 <f_open+0x114>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80066f2:	2c04      	cmp	r4, #4
 80066f4:	d042      	beq.n	800677c <f_open+0x100>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80066f6:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80066fa:	2c00      	cmp	r4, #0
 80066fc:	d161      	bne.n	80067c2 <f_open+0x146>
 80066fe:	f017 0f08 	tst.w	r7, #8
 8006702:	d05e      	beq.n	80067c2 <f_open+0x146>
				dw = GET_FATTIME();
 8006704:	f003 fa6e 	bl	8009be4 <get_fattime>
 8006708:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800670a:	4601      	mov	r1, r0
 800670c:	988c      	ldr	r0, [sp, #560]	; 0x230
 800670e:	300e      	adds	r0, #14
 8006710:	f7fe fd22 	bl	8005158 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006714:	4629      	mov	r1, r5
 8006716:	988c      	ldr	r0, [sp, #560]	; 0x230
 8006718:	3016      	adds	r0, #22
 800671a:	f7fe fd1d 	bl	8005158 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800671e:	9b8c      	ldr	r3, [sp, #560]	; 0x230
 8006720:	2220      	movs	r2, #32
 8006722:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006724:	f8dd 820c 	ldr.w	r8, [sp, #524]	; 0x20c
 8006728:	f8dd 9230 	ldr.w	r9, [sp, #560]	; 0x230
 800672c:	4649      	mov	r1, r9
 800672e:	4640      	mov	r0, r8
 8006730:	f7fe fe37 	bl	80053a2 <ld_clust>
 8006734:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006736:	2200      	movs	r2, #0
 8006738:	4649      	mov	r1, r9
 800673a:	4640      	mov	r0, r8
 800673c:	f7fe fe44 	bl	80053c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006740:	2100      	movs	r1, #0
 8006742:	988c      	ldr	r0, [sp, #560]	; 0x230
 8006744:	301c      	adds	r0, #28
 8006746:	f7fe fd07 	bl	8005158 <st_dword>
					fs->wflag = 1;
 800674a:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800674c:	2201      	movs	r2, #1
 800674e:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8006750:	b3bd      	cbz	r5, 80067c2 <f_open+0x146>
						dw = fs->winsect;
 8006752:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006754:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
 8006758:	2200      	movs	r2, #0
 800675a:	4629      	mov	r1, r5
 800675c:	a884      	add	r0, sp, #528	; 0x210
 800675e:	f7ff fad6 	bl	8005d0e <remove_chain>
						if (res == FR_OK) {
 8006762:	4604      	mov	r4, r0
 8006764:	bb68      	cbnz	r0, 80067c2 <f_open+0x146>
							res = move_window(fs, dw);
 8006766:	4641      	mov	r1, r8
 8006768:	9883      	ldr	r0, [sp, #524]	; 0x20c
 800676a:	f7fe ff45 	bl	80055f8 <move_window>
 800676e:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006770:	3d01      	subs	r5, #1
 8006772:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006774:	615d      	str	r5, [r3, #20]
 8006776:	e024      	b.n	80067c2 <f_open+0x146>
				res = FR_INVALID_NAME;
 8006778:	2406      	movs	r4, #6
 800677a:	e7b5      	b.n	80066e8 <f_open+0x6c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800677c:	f7fe fd54 	bl	8005228 <enq_lock>
 8006780:	b908      	cbnz	r0, 8006786 <f_open+0x10a>
 8006782:	2412      	movs	r4, #18
 8006784:	e7b7      	b.n	80066f6 <f_open+0x7a>
 8006786:	a884      	add	r0, sp, #528	; 0x210
 8006788:	f7ff fe4e 	bl	8006428 <dir_register>
 800678c:	4604      	mov	r4, r0
 800678e:	e7b2      	b.n	80066f6 <f_open+0x7a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006790:	f89d 3216 	ldrb.w	r3, [sp, #534]	; 0x216
 8006794:	f013 0f11 	tst.w	r3, #17
 8006798:	d112      	bne.n	80067c0 <f_open+0x144>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800679a:	f015 0f04 	tst.w	r5, #4
 800679e:	d0ac      	beq.n	80066fa <f_open+0x7e>
 80067a0:	2408      	movs	r4, #8
 80067a2:	e00e      	b.n	80067c2 <f_open+0x146>
			if (res == FR_OK) {					/* Following succeeded */
 80067a4:	b96c      	cbnz	r4, 80067c2 <f_open+0x146>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80067a6:	f89d 3216 	ldrb.w	r3, [sp, #534]	; 0x216
 80067aa:	f013 0f10 	tst.w	r3, #16
 80067ae:	d14c      	bne.n	800684a <f_open+0x1ce>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80067b0:	f015 0f02 	tst.w	r5, #2
 80067b4:	d005      	beq.n	80067c2 <f_open+0x146>
 80067b6:	f013 0f01 	tst.w	r3, #1
 80067ba:	d002      	beq.n	80067c2 <f_open+0x146>
						res = FR_DENIED;
 80067bc:	2407      	movs	r4, #7
 80067be:	e016      	b.n	80067ee <f_open+0x172>
					res = FR_DENIED;
 80067c0:	2407      	movs	r4, #7
		if (res == FR_OK) {
 80067c2:	b9a4      	cbnz	r4, 80067ee <f_open+0x172>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80067c4:	f017 0f08 	tst.w	r7, #8
 80067c8:	d001      	beq.n	80067ce <f_open+0x152>
				mode |= FA_MODIFIED;
 80067ca:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80067ce:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80067d4:	9b8c      	ldr	r3, [sp, #560]	; 0x230
 80067d6:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067d8:	f037 0301 	bics.w	r3, r7, #1
 80067dc:	bf14      	ite	ne
 80067de:	2101      	movne	r1, #1
 80067e0:	2100      	moveq	r1, #0
 80067e2:	a884      	add	r0, sp, #528	; 0x210
 80067e4:	f7fe fd30 	bl	8005248 <inc_lock>
 80067e8:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d05d      	beq.n	80068aa <f_open+0x22e>
		if (res == FR_OK) {
 80067ee:	2c00      	cmp	r4, #0
 80067f0:	f47f af57 	bne.w	80066a2 <f_open+0x26>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80067f4:	9d83      	ldr	r5, [sp, #524]	; 0x20c
 80067f6:	f8dd 8230 	ldr.w	r8, [sp, #560]	; 0x230
 80067fa:	4641      	mov	r1, r8
 80067fc:	4628      	mov	r0, r5
 80067fe:	f7fe fdd0 	bl	80053a2 <ld_clust>
 8006802:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006804:	f108 001c 	add.w	r0, r8, #28
 8006808:	f7fe fc97 	bl	800513a <ld_dword>
 800680c:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800680e:	2100      	movs	r1, #0
 8006810:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006812:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 8006814:	88eb      	ldrh	r3, [r5, #6]
 8006816:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8006818:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800681a:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800681c:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800681e:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006820:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8006824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006828:	4640      	mov	r0, r8
 800682a:	f7fe fca9 	bl	8005180 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800682e:	f017 0f20 	tst.w	r7, #32
 8006832:	f43f af36 	beq.w	80066a2 <f_open+0x26>
 8006836:	68f5      	ldr	r5, [r6, #12]
 8006838:	2d00      	cmp	r5, #0
 800683a:	f43f af32 	beq.w	80066a2 <f_open+0x26>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800683e:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006840:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006842:	895f      	ldrh	r7, [r3, #10]
 8006844:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006846:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006848:	e005      	b.n	8006856 <f_open+0x1da>
					res = FR_NO_FILE;
 800684a:	2404      	movs	r4, #4
 800684c:	e7cf      	b.n	80067ee <f_open+0x172>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800684e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006852:	d00b      	beq.n	800686c <f_open+0x1f0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006854:	1bed      	subs	r5, r5, r7
 8006856:	b95c      	cbnz	r4, 8006870 <f_open+0x1f4>
 8006858:	42bd      	cmp	r5, r7
 800685a:	d909      	bls.n	8006870 <f_open+0x1f4>
					clst = get_fat(&fp->obj, clst);
 800685c:	4630      	mov	r0, r6
 800685e:	f7ff f932 	bl	8005ac6 <get_fat>
 8006862:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8006864:	2801      	cmp	r0, #1
 8006866:	d8f2      	bhi.n	800684e <f_open+0x1d2>
 8006868:	2402      	movs	r4, #2
 800686a:	e7f0      	b.n	800684e <f_open+0x1d2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800686c:	2401      	movs	r4, #1
 800686e:	e7f1      	b.n	8006854 <f_open+0x1d8>
				fp->clust = clst;
 8006870:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006872:	2c00      	cmp	r4, #0
 8006874:	f47f af15 	bne.w	80066a2 <f_open+0x26>
 8006878:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800687c:	2b00      	cmp	r3, #0
 800687e:	f43f af10 	beq.w	80066a2 <f_open+0x26>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006882:	9f83      	ldr	r7, [sp, #524]	; 0x20c
 8006884:	4638      	mov	r0, r7
 8006886:	f7fe fd6f 	bl	8005368 <clust2sect>
 800688a:	b908      	cbnz	r0, 8006890 <f_open+0x214>
						res = FR_INT_ERR;
 800688c:	2402      	movs	r4, #2
 800688e:	e709      	b.n	80066a4 <f_open+0x28>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006890:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8006894:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006896:	2301      	movs	r3, #1
 8006898:	4641      	mov	r1, r8
 800689a:	7878      	ldrb	r0, [r7, #1]
 800689c:	f7fe fc24 	bl	80050e8 <disk_read>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	f43f aefe 	beq.w	80066a2 <f_open+0x26>
 80068a6:	2401      	movs	r4, #1
 80068a8:	e6fc      	b.n	80066a4 <f_open+0x28>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80068aa:	2402      	movs	r4, #2
 80068ac:	e6f9      	b.n	80066a2 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 80068ae:	2409      	movs	r4, #9
 80068b0:	e6fe      	b.n	80066b0 <f_open+0x34>

080068b2 <f_read>:
{
 80068b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b6:	b085      	sub	sp, #20
 80068b8:	4604      	mov	r4, r0
 80068ba:	4688      	mov	r8, r1
 80068bc:	4615      	mov	r5, r2
 80068be:	4699      	mov	r9, r3
	*br = 0;	/* Clear read byte counter */
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80068c6:	a903      	add	r1, sp, #12
 80068c8:	f7ff fb1a 	bl	8005f00 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068cc:	9001      	str	r0, [sp, #4]
 80068ce:	b968      	cbnz	r0, 80068ec <f_read+0x3a>
 80068d0:	7d63      	ldrb	r3, [r4, #21]
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	b953      	cbnz	r3, 80068ec <f_read+0x3a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80068d6:	7d23      	ldrb	r3, [r4, #20]
 80068d8:	f013 0f01 	tst.w	r3, #1
 80068dc:	d00e      	beq.n	80068fc <f_read+0x4a>
	remain = fp->obj.objsize - fp->fptr;
 80068de:	68e6      	ldr	r6, [r4, #12]
 80068e0:	69a3      	ldr	r3, [r4, #24]
 80068e2:	1af6      	subs	r6, r6, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80068e4:	42ae      	cmp	r6, r5
 80068e6:	d375      	bcc.n	80069d4 <f_read+0x122>
 80068e8:	462e      	mov	r6, r5
 80068ea:	e073      	b.n	80069d4 <f_read+0x122>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068ec:	9901      	ldr	r1, [sp, #4]
 80068ee:	9803      	ldr	r0, [sp, #12]
 80068f0:	f7ff faf8 	bl	8005ee4 <unlock_fs>
}
 80068f4:	9801      	ldr	r0, [sp, #4]
 80068f6:	b005      	add	sp, #20
 80068f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80068fc:	2107      	movs	r1, #7
 80068fe:	9803      	ldr	r0, [sp, #12]
 8006900:	f7ff faf0 	bl	8005ee4 <unlock_fs>
 8006904:	2307      	movs	r3, #7
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	e7f4      	b.n	80068f4 <f_read+0x42>
					if (fp->cltbl) {
 800690a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800690c:	b11b      	cbz	r3, 8006916 <f_read+0x64>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800690e:	4620      	mov	r0, r4
 8006910:	f7fe fd36 	bl	8005380 <clmt_clust>
 8006914:	e06e      	b.n	80069f4 <f_read+0x142>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006916:	69e1      	ldr	r1, [r4, #28]
 8006918:	4620      	mov	r0, r4
 800691a:	f7ff f8d4 	bl	8005ac6 <get_fat>
 800691e:	e069      	b.n	80069f4 <f_read+0x142>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006920:	2502      	movs	r5, #2
 8006922:	7565      	strb	r5, [r4, #21]
 8006924:	4629      	mov	r1, r5
 8006926:	9803      	ldr	r0, [sp, #12]
 8006928:	f7ff fadc 	bl	8005ee4 <unlock_fs>
 800692c:	9501      	str	r5, [sp, #4]
 800692e:	e7e1      	b.n	80068f4 <f_read+0x42>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006930:	2501      	movs	r5, #1
 8006932:	7565      	strb	r5, [r4, #21]
 8006934:	4629      	mov	r1, r5
 8006936:	9803      	ldr	r0, [sp, #12]
 8006938:	f7ff fad4 	bl	8005ee4 <unlock_fs>
 800693c:	9501      	str	r5, [sp, #4]
 800693e:	e7d9      	b.n	80068f4 <f_read+0x42>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006940:	2502      	movs	r5, #2
 8006942:	7565      	strb	r5, [r4, #21]
 8006944:	4629      	mov	r1, r5
 8006946:	4658      	mov	r0, fp
 8006948:	f7ff facc 	bl	8005ee4 <unlock_fs>
 800694c:	9501      	str	r5, [sp, #4]
 800694e:	e7d1      	b.n	80068f4 <f_read+0x42>
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006950:	2501      	movs	r5, #1
 8006952:	7565      	strb	r5, [r4, #21]
 8006954:	4629      	mov	r1, r5
 8006956:	9803      	ldr	r0, [sp, #12]
 8006958:	f7ff fac4 	bl	8005ee4 <unlock_fs>
 800695c:	9501      	str	r5, [sp, #4]
 800695e:	e7c9      	b.n	80068f4 <f_read+0x42>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006960:	6a20      	ldr	r0, [r4, #32]
 8006962:	eba0 000a 	sub.w	r0, r0, sl
 8006966:	42a8      	cmp	r0, r5
 8006968:	d26b      	bcs.n	8006a42 <f_read+0x190>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800696a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800696e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006972:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 8006976:	f7fe fbf9 	bl	800516c <mem_cpy>
 800697a:	e062      	b.n	8006a42 <f_read+0x190>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800697c:	6a22      	ldr	r2, [r4, #32]
 800697e:	4552      	cmp	r2, sl
 8006980:	d00d      	beq.n	800699e <f_read+0xec>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006982:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	db5d      	blt.n	8006a46 <f_read+0x194>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800698a:	2301      	movs	r3, #1
 800698c:	4652      	mov	r2, sl
 800698e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006992:	9803      	ldr	r0, [sp, #12]
 8006994:	7840      	ldrb	r0, [r0, #1]
 8006996:	f7fe fba7 	bl	80050e8 <disk_read>
 800699a:	2800      	cmp	r0, #0
 800699c:	d168      	bne.n	8006a70 <f_read+0x1be>
			fp->sect = sect;
 800699e:	f8c4 a020 	str.w	sl, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80069a2:	69a3      	ldr	r3, [r4, #24]
 80069a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a8:	f5c3 7500 	rsb	r5, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80069ac:	42ae      	cmp	r6, r5
 80069ae:	d200      	bcs.n	80069b2 <f_read+0x100>
 80069b0:	4635      	mov	r5, r6
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80069b2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80069b6:	462a      	mov	r2, r5
 80069b8:	4419      	add	r1, r3
 80069ba:	4640      	mov	r0, r8
 80069bc:	f7fe fbd6 	bl	800516c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80069c0:	44a8      	add	r8, r5
 80069c2:	69a3      	ldr	r3, [r4, #24]
 80069c4:	442b      	add	r3, r5
 80069c6:	61a3      	str	r3, [r4, #24]
 80069c8:	f8d9 3000 	ldr.w	r3, [r9]
 80069cc:	442b      	add	r3, r5
 80069ce:	f8c9 3000 	str.w	r3, [r9]
 80069d2:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
 80069d4:	2e00      	cmp	r6, #0
 80069d6:	d053      	beq.n	8006a80 <f_read+0x1ce>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80069d8:	69a1      	ldr	r1, [r4, #24]
 80069da:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1df      	bne.n	80069a2 <f_read+0xf0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	895f      	ldrh	r7, [r3, #10]
 80069e6:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80069e8:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 80069ec:	d108      	bne.n	8006a00 <f_read+0x14e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d18b      	bne.n	800690a <f_read+0x58>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80069f2:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80069f4:	2801      	cmp	r0, #1
 80069f6:	d993      	bls.n	8006920 <f_read+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80069f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80069fc:	d098      	beq.n	8006930 <f_read+0x7e>
				fp->clust = clst;				/* Update current cluster */
 80069fe:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006a00:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006a04:	69e1      	ldr	r1, [r4, #28]
 8006a06:	4658      	mov	r0, fp
 8006a08:	f7fe fcae 	bl	8005368 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006a0c:	4682      	mov	sl, r0
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d096      	beq.n	8006940 <f_read+0x8e>
			sect += csect;
 8006a12:	44ba      	add	sl, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006a14:	0a75      	lsrs	r5, r6, #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006a16:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006a1a:	d3af      	bcc.n	800697c <f_read+0xca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006a1c:	197b      	adds	r3, r7, r5
 8006a1e:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d900      	bls.n	8006a28 <f_read+0x176>
					cc = fs->csize - csect;
 8006a26:	1bd5      	subs	r5, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a28:	462b      	mov	r3, r5
 8006a2a:	4652      	mov	r2, sl
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006a32:	f7fe fb59 	bl	80050e8 <disk_read>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d18a      	bne.n	8006950 <f_read+0x9e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006a3a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	db8e      	blt.n	8006960 <f_read+0xae>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006a42:	026d      	lsls	r5, r5, #9
				continue;
 8006a44:	e7bc      	b.n	80069c0 <f_read+0x10e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a46:	2301      	movs	r3, #1
 8006a48:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006a4c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006a50:	f7fe fb56 	bl	8005100 <disk_write>
 8006a54:	b920      	cbnz	r0, 8006a60 <f_read+0x1ae>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006a56:	7d23      	ldrb	r3, [r4, #20]
 8006a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a5c:	7523      	strb	r3, [r4, #20]
 8006a5e:	e794      	b.n	800698a <f_read+0xd8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a60:	2501      	movs	r5, #1
 8006a62:	7565      	strb	r5, [r4, #21]
 8006a64:	4629      	mov	r1, r5
 8006a66:	9803      	ldr	r0, [sp, #12]
 8006a68:	f7ff fa3c 	bl	8005ee4 <unlock_fs>
 8006a6c:	9501      	str	r5, [sp, #4]
 8006a6e:	e741      	b.n	80068f4 <f_read+0x42>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006a70:	2501      	movs	r5, #1
 8006a72:	7565      	strb	r5, [r4, #21]
 8006a74:	4629      	mov	r1, r5
 8006a76:	9803      	ldr	r0, [sp, #12]
 8006a78:	f7ff fa34 	bl	8005ee4 <unlock_fs>
 8006a7c:	9501      	str	r5, [sp, #4]
 8006a7e:	e739      	b.n	80068f4 <f_read+0x42>
	LEAVE_FF(fs, FR_OK);
 8006a80:	2100      	movs	r1, #0
 8006a82:	9803      	ldr	r0, [sp, #12]
 8006a84:	f7ff fa2e 	bl	8005ee4 <unlock_fs>
 8006a88:	e734      	b.n	80068f4 <f_read+0x42>

08006a8a <f_write>:
{
 8006a8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	4604      	mov	r4, r0
 8006a92:	4688      	mov	r8, r1
 8006a94:	4616      	mov	r6, r2
 8006a96:	4699      	mov	r9, r3
	*bw = 0;	/* Clear write byte counter */
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006a9e:	a903      	add	r1, sp, #12
 8006aa0:	f7ff fa2e 	bl	8005f00 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006aa4:	9001      	str	r0, [sp, #4]
 8006aa6:	b960      	cbnz	r0, 8006ac2 <f_write+0x38>
 8006aa8:	7d63      	ldrb	r3, [r4, #21]
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	b94b      	cbnz	r3, 8006ac2 <f_write+0x38>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006aae:	7d23      	ldrb	r3, [r4, #20]
 8006ab0:	f013 0f02 	tst.w	r3, #2
 8006ab4:	d00d      	beq.n	8006ad2 <f_write+0x48>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006ab6:	69a3      	ldr	r3, [r4, #24]
 8006ab8:	42f3      	cmn	r3, r6
 8006aba:	f0c0 80be 	bcc.w	8006c3a <f_write+0x1b0>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006abe:	43de      	mvns	r6, r3
 8006ac0:	e0bb      	b.n	8006c3a <f_write+0x1b0>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006ac2:	9901      	ldr	r1, [sp, #4]
 8006ac4:	9803      	ldr	r0, [sp, #12]
 8006ac6:	f7ff fa0d 	bl	8005ee4 <unlock_fs>
}
 8006aca:	9801      	ldr	r0, [sp, #4]
 8006acc:	b005      	add	sp, #20
 8006ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006ad2:	2107      	movs	r1, #7
 8006ad4:	9803      	ldr	r0, [sp, #12]
 8006ad6:	f7ff fa05 	bl	8005ee4 <unlock_fs>
 8006ada:	2307      	movs	r3, #7
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	e7f4      	b.n	8006aca <f_write+0x40>
					if (fp->cltbl) {
 8006ae0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d036      	beq.n	8006b54 <f_write+0xca>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f7fe fc4a 	bl	8005380 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f000 80ce 	beq.w	8006c8e <f_write+0x204>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006af2:	2801      	cmp	r0, #1
 8006af4:	d033      	beq.n	8006b5e <f_write+0xd4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006af6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006afa:	d038      	beq.n	8006b6e <f_write+0xe4>
				fp->clust = clst;			/* Update current cluster */
 8006afc:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006afe:	68a3      	ldr	r3, [r4, #8]
 8006b00:	b903      	cbnz	r3, 8006b04 <f_write+0x7a>
 8006b02:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006b04:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	db38      	blt.n	8006b7e <f_write+0xf4>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b0c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006b10:	69e1      	ldr	r1, [r4, #28]
 8006b12:	4658      	mov	r0, fp
 8006b14:	f7fe fc28 	bl	8005368 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006b18:	4682      	mov	sl, r0
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d045      	beq.n	8006baa <f_write+0x120>
			sect += csect;
 8006b1e:	44ba      	add	sl, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006b20:	0a75      	lsrs	r5, r6, #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006b22:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006b26:	d35d      	bcc.n	8006be4 <f_write+0x15a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006b28:	197b      	adds	r3, r7, r5
 8006b2a:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d900      	bls.n	8006b34 <f_write+0xaa>
					cc = fs->csize - csect;
 8006b32:	1bd5      	subs	r5, r2, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b34:	462b      	mov	r3, r5
 8006b36:	4652      	mov	r2, sl
 8006b38:	4641      	mov	r1, r8
 8006b3a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006b3e:	f7fe fadf 	bl	8005100 <disk_write>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d139      	bne.n	8006bba <f_write+0x130>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006b46:	6a21      	ldr	r1, [r4, #32]
 8006b48:	eba1 010a 	sub.w	r1, r1, sl
 8006b4c:	42a9      	cmp	r1, r5
 8006b4e:	d33c      	bcc.n	8006bca <f_write+0x140>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006b50:	026d      	lsls	r5, r5, #9
				continue;
 8006b52:	e063      	b.n	8006c1c <f_write+0x192>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006b54:	69e1      	ldr	r1, [r4, #28]
 8006b56:	4620      	mov	r0, r4
 8006b58:	f7ff f873 	bl	8005c42 <create_chain>
 8006b5c:	e7c6      	b.n	8006aec <f_write+0x62>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006b5e:	2502      	movs	r5, #2
 8006b60:	7565      	strb	r5, [r4, #21]
 8006b62:	4629      	mov	r1, r5
 8006b64:	9803      	ldr	r0, [sp, #12]
 8006b66:	f7ff f9bd 	bl	8005ee4 <unlock_fs>
 8006b6a:	9501      	str	r5, [sp, #4]
 8006b6c:	e7ad      	b.n	8006aca <f_write+0x40>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b6e:	2501      	movs	r5, #1
 8006b70:	7565      	strb	r5, [r4, #21]
 8006b72:	4629      	mov	r1, r5
 8006b74:	9803      	ldr	r0, [sp, #12]
 8006b76:	f7ff f9b5 	bl	8005ee4 <unlock_fs>
 8006b7a:	9501      	str	r5, [sp, #4]
 8006b7c:	e7a5      	b.n	8006aca <f_write+0x40>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b7e:	2301      	movs	r3, #1
 8006b80:	6a22      	ldr	r2, [r4, #32]
 8006b82:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006b86:	9803      	ldr	r0, [sp, #12]
 8006b88:	7840      	ldrb	r0, [r0, #1]
 8006b8a:	f7fe fab9 	bl	8005100 <disk_write>
 8006b8e:	b920      	cbnz	r0, 8006b9a <f_write+0x110>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b90:	7d23      	ldrb	r3, [r4, #20]
 8006b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b96:	7523      	strb	r3, [r4, #20]
 8006b98:	e7b8      	b.n	8006b0c <f_write+0x82>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b9a:	2501      	movs	r5, #1
 8006b9c:	7565      	strb	r5, [r4, #21]
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	9803      	ldr	r0, [sp, #12]
 8006ba2:	f7ff f99f 	bl	8005ee4 <unlock_fs>
 8006ba6:	9501      	str	r5, [sp, #4]
 8006ba8:	e78f      	b.n	8006aca <f_write+0x40>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006baa:	2502      	movs	r5, #2
 8006bac:	7565      	strb	r5, [r4, #21]
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4658      	mov	r0, fp
 8006bb2:	f7ff f997 	bl	8005ee4 <unlock_fs>
 8006bb6:	9501      	str	r5, [sp, #4]
 8006bb8:	e787      	b.n	8006aca <f_write+0x40>
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bba:	2501      	movs	r5, #1
 8006bbc:	7565      	strb	r5, [r4, #21]
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	9803      	ldr	r0, [sp, #12]
 8006bc2:	f7ff f98f 	bl	8005ee4 <unlock_fs>
 8006bc6:	9501      	str	r5, [sp, #4]
 8006bc8:	e77f      	b.n	8006aca <f_write+0x40>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bce:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8006bd2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006bd6:	f7fe fac9 	bl	800516c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006bda:	7d23      	ldrb	r3, [r4, #20]
 8006bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be0:	7523      	strb	r3, [r4, #20]
 8006be2:	e7b5      	b.n	8006b50 <f_write+0xc6>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006be4:	6a23      	ldr	r3, [r4, #32]
 8006be6:	4553      	cmp	r3, sl
 8006be8:	d003      	beq.n	8006bf2 <f_write+0x168>
				fp->fptr < fp->obj.objsize &&
 8006bea:	69a2      	ldr	r2, [r4, #24]
 8006bec:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d33b      	bcc.n	8006c6a <f_write+0x1e0>
			fp->sect = sect;
 8006bf2:	f8c4 a020 	str.w	sl, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006bf6:	69a3      	ldr	r3, [r4, #24]
 8006bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfc:	f5c3 7500 	rsb	r5, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006c00:	42ae      	cmp	r6, r5
 8006c02:	d200      	bcs.n	8006c06 <f_write+0x17c>
 8006c04:	4635      	mov	r5, r6
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006c06:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	4641      	mov	r1, r8
 8006c0e:	4418      	add	r0, r3
 8006c10:	f7fe faac 	bl	800516c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006c14:	7d23      	ldrb	r3, [r4, #20]
 8006c16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c1a:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006c1c:	44a8      	add	r8, r5
 8006c1e:	69a3      	ldr	r3, [r4, #24]
 8006c20:	442b      	add	r3, r5
 8006c22:	61a3      	str	r3, [r4, #24]
 8006c24:	68e2      	ldr	r2, [r4, #12]
 8006c26:	4293      	cmp	r3, r2
 8006c28:	bf38      	it	cc
 8006c2a:	4613      	movcc	r3, r2
 8006c2c:	60e3      	str	r3, [r4, #12]
 8006c2e:	f8d9 3000 	ldr.w	r3, [r9]
 8006c32:	442b      	add	r3, r5
 8006c34:	f8c9 3000 	str.w	r3, [r9]
 8006c38:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
 8006c3a:	b346      	cbz	r6, 8006c8e <f_write+0x204>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006c3c:	69a1      	ldr	r1, [r4, #24]
 8006c3e:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1d7      	bne.n	8006bf6 <f_write+0x16c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	895f      	ldrh	r7, [r3, #10]
 8006c4a:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8006c4c:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8006c50:	f47f af58 	bne.w	8006b04 <f_write+0x7a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006c54:	2900      	cmp	r1, #0
 8006c56:	f47f af43 	bne.w	8006ae0 <f_write+0x56>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006c5a:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f47f af45 	bne.w	8006aec <f_write+0x62>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7fe ffed 	bl	8005c42 <create_chain>
 8006c68:	e740      	b.n	8006aec <f_write+0x62>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006c72:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006c76:	f7fe fa37 	bl	80050e8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d0b9      	beq.n	8006bf2 <f_write+0x168>
					ABORT(fs, FR_DISK_ERR);
 8006c7e:	2501      	movs	r5, #1
 8006c80:	7565      	strb	r5, [r4, #21]
 8006c82:	4629      	mov	r1, r5
 8006c84:	9803      	ldr	r0, [sp, #12]
 8006c86:	f7ff f92d 	bl	8005ee4 <unlock_fs>
 8006c8a:	9501      	str	r5, [sp, #4]
 8006c8c:	e71d      	b.n	8006aca <f_write+0x40>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006c8e:	7d23      	ldrb	r3, [r4, #20]
 8006c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c94:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8006c96:	2100      	movs	r1, #0
 8006c98:	9803      	ldr	r0, [sp, #12]
 8006c9a:	f7ff f923 	bl	8005ee4 <unlock_fs>
 8006c9e:	e714      	b.n	8006aca <f_write+0x40>

08006ca0 <putc_bfd>:
{
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	460d      	mov	r5, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006ca8:	290a      	cmp	r1, #10
 8006caa:	d00d      	beq.n	8006cc8 <putc_bfd+0x28>
	i = pb->idx;		/* Write index of pb->buf[] */
 8006cac:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	db08      	blt.n	8006cc4 <putc_bfd+0x24>
	pb->buf[i++] = (BYTE)c;
 8006cb2:	1c5e      	adds	r6, r3, #1
 8006cb4:	4423      	add	r3, r4
 8006cb6:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006cb8:	2e3c      	cmp	r6, #60	; 0x3c
 8006cba:	dc09      	bgt.n	8006cd0 <putc_bfd+0x30>
	pb->idx = i;
 8006cbc:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	60a3      	str	r3, [r4, #8]
}
 8006cc4:	b002      	add	sp, #8
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 8006cc8:	210d      	movs	r1, #13
 8006cca:	f7ff ffe9 	bl	8006ca0 <putc_bfd>
 8006cce:	e7ed      	b.n	8006cac <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	f851 0b0c 	ldr.w	r0, [r1], #12
 8006cd6:	ab01      	add	r3, sp, #4
 8006cd8:	4632      	mov	r2, r6
 8006cda:	f7ff fed6 	bl	8006a8a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	429e      	cmp	r6, r3
 8006ce2:	d002      	beq.n	8006cea <putc_bfd+0x4a>
 8006ce4:	f04f 36ff 	mov.w	r6, #4294967295
 8006ce8:	e7e8      	b.n	8006cbc <putc_bfd+0x1c>
 8006cea:	2600      	movs	r6, #0
 8006cec:	e7e6      	b.n	8006cbc <putc_bfd+0x1c>

08006cee <putc_flush>:
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006cee:	6842      	ldr	r2, [r0, #4]
 8006cf0:	2a00      	cmp	r2, #0
 8006cf2:	db10      	blt.n	8006d16 <putc_flush+0x28>
{
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	f851 0b0c 	ldr.w	r0, [r1], #12
 8006d00:	ab01      	add	r3, sp, #4
 8006d02:	f7ff fec2 	bl	8006a8a <f_write>
 8006d06:	b948      	cbnz	r0, 8006d1c <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006d08:	6862      	ldr	r2, [r4, #4]
 8006d0a:	9b01      	ldr	r3, [sp, #4]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d108      	bne.n	8006d22 <putc_flush+0x34>
 8006d10:	68a0      	ldr	r0, [r4, #8]
}
 8006d12:	b002      	add	sp, #8
 8006d14:	bd10      	pop	{r4, pc}
	return EOF;
 8006d16:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006d1a:	4770      	bx	lr
	return EOF;
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	e7f7      	b.n	8006d12 <putc_flush+0x24>
 8006d22:	f04f 30ff 	mov.w	r0, #4294967295
 8006d26:	e7f4      	b.n	8006d12 <putc_flush+0x24>

08006d28 <f_sync>:
{
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006d2e:	a901      	add	r1, sp, #4
 8006d30:	f7ff f8e6 	bl	8005f00 <validate>
	if (res == FR_OK) {
 8006d34:	4605      	mov	r5, r0
 8006d36:	b978      	cbnz	r0, 8006d58 <f_sync+0x30>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006d38:	7d23      	ldrb	r3, [r4, #20]
 8006d3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d3e:	d00b      	beq.n	8006d58 <f_sync+0x30>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006d40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d44:	d10f      	bne.n	8006d66 <f_sync+0x3e>
			tm = GET_FATTIME();				/* Modified time */
 8006d46:	f002 ff4d 	bl	8009be4 <get_fattime>
 8006d4a:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 8006d4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d4e:	9801      	ldr	r0, [sp, #4]
 8006d50:	f7fe fc52 	bl	80055f8 <move_window>
				if (res == FR_OK) {
 8006d54:	4605      	mov	r5, r0
 8006d56:	b1d0      	cbz	r0, 8006d8e <f_sync+0x66>
	LEAVE_FF(fs, res);
 8006d58:	4629      	mov	r1, r5
 8006d5a:	9801      	ldr	r0, [sp, #4]
 8006d5c:	f7ff f8c2 	bl	8005ee4 <unlock_fs>
}
 8006d60:	4628      	mov	r0, r5
 8006d62:	b002      	add	sp, #8
 8006d64:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d66:	2301      	movs	r3, #1
 8006d68:	6a22      	ldr	r2, [r4, #32]
 8006d6a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006d6e:	9801      	ldr	r0, [sp, #4]
 8006d70:	7840      	ldrb	r0, [r0, #1]
 8006d72:	f7fe f9c5 	bl	8005100 <disk_write>
 8006d76:	b920      	cbnz	r0, 8006d82 <f_sync+0x5a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006d78:	7d23      	ldrb	r3, [r4, #20]
 8006d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7e:	7523      	strb	r3, [r4, #20]
 8006d80:	e7e1      	b.n	8006d46 <f_sync+0x1e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d82:	2101      	movs	r1, #1
 8006d84:	9801      	ldr	r0, [sp, #4]
 8006d86:	f7ff f8ad 	bl	8005ee4 <unlock_fs>
 8006d8a:	2501      	movs	r5, #1
 8006d8c:	e7e8      	b.n	8006d60 <f_sync+0x38>
					dir = fp->dir_ptr;
 8006d8e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006d90:	7aeb      	ldrb	r3, [r5, #11]
 8006d92:	f043 0320 	orr.w	r3, r3, #32
 8006d96:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006d98:	68a2      	ldr	r2, [r4, #8]
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	f7fe fb13 	bl	80053c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006da2:	68e1      	ldr	r1, [r4, #12]
 8006da4:	f105 001c 	add.w	r0, r5, #28
 8006da8:	f7fe f9d6 	bl	8005158 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006dac:	4631      	mov	r1, r6
 8006dae:	f105 0016 	add.w	r0, r5, #22
 8006db2:	f7fe f9d1 	bl	8005158 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006db6:	2100      	movs	r1, #0
 8006db8:	f105 0012 	add.w	r0, r5, #18
 8006dbc:	f7fe f9c8 	bl	8005150 <st_word>
					fs->wflag = 1;
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006dc6:	9801      	ldr	r0, [sp, #4]
 8006dc8:	f7ff fbce 	bl	8006568 <sync_fs>
 8006dcc:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006dce:	7d23      	ldrb	r3, [r4, #20]
 8006dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd4:	7523      	strb	r3, [r4, #20]
 8006dd6:	e7bf      	b.n	8006d58 <f_sync+0x30>

08006dd8 <f_close>:
{
 8006dd8:	b530      	push	{r4, r5, lr}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8006dde:	f7ff ffa3 	bl	8006d28 <f_sync>
	if (res == FR_OK)
 8006de2:	4605      	mov	r5, r0
 8006de4:	b110      	cbz	r0, 8006dec <f_close+0x14>
}
 8006de6:	4628      	mov	r0, r5
 8006de8:	b003      	add	sp, #12
 8006dea:	bd30      	pop	{r4, r5, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006dec:	a901      	add	r1, sp, #4
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7ff f886 	bl	8005f00 <validate>
		if (res == FR_OK) {
 8006df4:	4605      	mov	r5, r0
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d1f5      	bne.n	8006de6 <f_close+0xe>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006dfa:	6920      	ldr	r0, [r4, #16]
 8006dfc:	f7fe fa76 	bl	80052ec <dec_lock>
			if (res == FR_OK)
 8006e00:	4605      	mov	r5, r0
 8006e02:	b908      	cbnz	r0, 8006e08 <f_close+0x30>
				fp->obj.fs = 0;			/* Invalidate file object */
 8006e04:	2300      	movs	r3, #0
 8006e06:	6023      	str	r3, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006e08:	2100      	movs	r1, #0
 8006e0a:	9801      	ldr	r0, [sp, #4]
 8006e0c:	f7ff f86a 	bl	8005ee4 <unlock_fs>
 8006e10:	e7e9      	b.n	8006de6 <f_close+0xe>

08006e12 <f_chdir>:
{
 8006e12:	b530      	push	{r4, r5, lr}
 8006e14:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006e18:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, 0);
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	a983      	add	r1, sp, #524	; 0x20c
 8006e1e:	a801      	add	r0, sp, #4
 8006e20:	f7fe fc42 	bl	80056a8 <find_volume>
	if (res == FR_OK) {
 8006e24:	4604      	mov	r4, r0
 8006e26:	b138      	cbz	r0, 8006e38 <f_chdir+0x26>
	LEAVE_FF(fs, res);
 8006e28:	4621      	mov	r1, r4
 8006e2a:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8006e2c:	f7ff f85a 	bl	8005ee4 <unlock_fs>
}
 8006e30:	4620      	mov	r0, r4
 8006e32:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8006e36:	bd30      	pop	{r4, r5, pc}
		dj.obj.fs = fs;
 8006e38:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006e3a:	9384      	str	r3, [sp, #528]	; 0x210
		INIT_NAMBUF(fs);
 8006e3c:	aa03      	add	r2, sp, #12
 8006e3e:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the path */
 8006e40:	9901      	ldr	r1, [sp, #4]
 8006e42:	a884      	add	r0, sp, #528	; 0x210
 8006e44:	f7ff fa93 	bl	800636e <follow_path>
		if (res == FR_OK) {					/* Follow completed */
 8006e48:	4604      	mov	r4, r0
 8006e4a:	b990      	cbnz	r0, 8006e72 <f_chdir+0x60>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8006e4c:	f99d 323f 	ldrsb.w	r3, [sp, #575]	; 0x23f
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	db0b      	blt.n	8006e6c <f_chdir+0x5a>
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8006e54:	f89d 3216 	ldrb.w	r3, [sp, #534]	; 0x216
 8006e58:	f013 0f10 	tst.w	r3, #16
 8006e5c:	d00d      	beq.n	8006e7a <f_chdir+0x68>
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8006e5e:	9d83      	ldr	r5, [sp, #524]	; 0x20c
 8006e60:	998c      	ldr	r1, [sp, #560]	; 0x230
 8006e62:	4628      	mov	r0, r5
 8006e64:	f7fe fa9d 	bl	80053a2 <ld_clust>
 8006e68:	61e8      	str	r0, [r5, #28]
 8006e6a:	e002      	b.n	8006e72 <f_chdir+0x60>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8006e6c:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006e6e:	9a86      	ldr	r2, [sp, #536]	; 0x218
 8006e70:	61da      	str	r2, [r3, #28]
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006e72:	2c04      	cmp	r4, #4
 8006e74:	d1d8      	bne.n	8006e28 <f_chdir+0x16>
 8006e76:	2405      	movs	r4, #5
 8006e78:	e7d6      	b.n	8006e28 <f_chdir+0x16>
					res = FR_NO_PATH;		/* Reached but a file */
 8006e7a:	2405      	movs	r4, #5
 8006e7c:	e7d4      	b.n	8006e28 <f_chdir+0x16>

08006e7e <f_lseek>:
{
 8006e7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e82:	b083      	sub	sp, #12
 8006e84:	4604      	mov	r4, r0
 8006e86:	460e      	mov	r6, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006e88:	a901      	add	r1, sp, #4
 8006e8a:	f7ff f839 	bl	8005f00 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006e8e:	4605      	mov	r5, r0
 8006e90:	b900      	cbnz	r0, 8006e94 <f_lseek+0x16>
 8006e92:	7d65      	ldrb	r5, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006e94:	b9ad      	cbnz	r5, 8006ec2 <f_lseek+0x44>
	if (fp->cltbl) {	/* Fast seek */
 8006e96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80a7 	beq.w	8006fec <f_lseek+0x16e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006e9e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006ea2:	d013      	beq.n	8006ecc <f_lseek+0x4e>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006ea4:	68e7      	ldr	r7, [r4, #12]
 8006ea6:	42b7      	cmp	r7, r6
 8006ea8:	d300      	bcc.n	8006eac <f_lseek+0x2e>
 8006eaa:	4637      	mov	r7, r6
			fp->fptr = ofs;				/* Set file pointer */
 8006eac:	61a7      	str	r7, [r4, #24]
			if (ofs) {
 8006eae:	2f00      	cmp	r7, #0
 8006eb0:	d150      	bne.n	8006f54 <f_lseek+0xd6>
	LEAVE_FF(fs, res);
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	9801      	ldr	r0, [sp, #4]
 8006eb6:	f7ff f815 	bl	8005ee4 <unlock_fs>
}
 8006eba:	4628      	mov	r0, r5
 8006ebc:	b003      	add	sp, #12
 8006ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	9801      	ldr	r0, [sp, #4]
 8006ec6:	f7ff f80d 	bl	8005ee4 <unlock_fs>
 8006eca:	e7f6      	b.n	8006eba <f_lseek+0x3c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006ecc:	4698      	mov	r8, r3
 8006ece:	f858 bb04 	ldr.w	fp, [r8], #4
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006ed2:	f8d4 a008 	ldr.w	sl, [r4, #8]
			if (cl) {
 8006ed6:	f1ba 0f00 	cmp.w	sl, #0
 8006eda:	d02f      	beq.n	8006f3c <f_lseek+0xbe>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006edc:	f04f 0902 	mov.w	r9, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006ee0:	f109 0902 	add.w	r9, r9, #2
 8006ee4:	4651      	mov	r1, sl
 8006ee6:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 8006ee8:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 8006eea:	460e      	mov	r6, r1
 8006eec:	4620      	mov	r0, r4
 8006eee:	f7fe fdea 	bl	8005ac6 <get_fat>
 8006ef2:	4601      	mov	r1, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006ef4:	2801      	cmp	r0, #1
 8006ef6:	d913      	bls.n	8006f20 <f_lseek+0xa2>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ef8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006efc:	d017      	beq.n	8006f2e <f_lseek+0xb0>
					} while (cl == pcl + 1);
 8006efe:	3601      	adds	r6, #1
 8006f00:	4286      	cmp	r6, r0
 8006f02:	d0f1      	beq.n	8006ee8 <f_lseek+0x6a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006f04:	45cb      	cmp	fp, r9
 8006f06:	d305      	bcc.n	8006f14 <f_lseek+0x96>
						*tbl++ = ncl; *tbl++ = tcl;
 8006f08:	4643      	mov	r3, r8
 8006f0a:	f843 7b08 	str.w	r7, [r3], #8
 8006f0e:	f8c8 a004 	str.w	sl, [r8, #4]
 8006f12:	4698      	mov	r8, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006f14:	9b01      	ldr	r3, [sp, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	428b      	cmp	r3, r1
 8006f1a:	d911      	bls.n	8006f40 <f_lseek+0xc2>
						cl = get_fat(&fp->obj, cl);
 8006f1c:	468a      	mov	sl, r1
 8006f1e:	e7df      	b.n	8006ee0 <f_lseek+0x62>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006f20:	2502      	movs	r5, #2
 8006f22:	7565      	strb	r5, [r4, #21]
 8006f24:	4629      	mov	r1, r5
 8006f26:	9801      	ldr	r0, [sp, #4]
 8006f28:	f7fe ffdc 	bl	8005ee4 <unlock_fs>
 8006f2c:	e7c5      	b.n	8006eba <f_lseek+0x3c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f2e:	2501      	movs	r5, #1
 8006f30:	7565      	strb	r5, [r4, #21]
 8006f32:	4629      	mov	r1, r5
 8006f34:	9801      	ldr	r0, [sp, #4]
 8006f36:	f7fe ffd5 	bl	8005ee4 <unlock_fs>
 8006f3a:	e7be      	b.n	8006eba <f_lseek+0x3c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006f3c:	f04f 0902 	mov.w	r9, #2
			*fp->cltbl = ulen;	/* Number of items used */
 8006f40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f42:	f8c3 9000 	str.w	r9, [r3]
			if (ulen <= tlen) {
 8006f46:	45d9      	cmp	r9, fp
 8006f48:	f200 8117 	bhi.w	800717a <f_lseek+0x2fc>
				*tbl = 0;		/* Terminate table */
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f8c8 3000 	str.w	r3, [r8]
 8006f52:	e7ae      	b.n	8006eb2 <f_lseek+0x34>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006f54:	f107 39ff 	add.w	r9, r7, #4294967295
 8006f58:	4649      	mov	r1, r9
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f7fe fa10 	bl	8005380 <clmt_clust>
 8006f60:	4601      	mov	r1, r0
 8006f62:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
 8006f64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f68:	4640      	mov	r0, r8
 8006f6a:	f7fe f9fd 	bl	8005368 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006f6e:	b1d8      	cbz	r0, 8006fa8 <f_lseek+0x12a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006f70:	f8b8 600a 	ldrh.w	r6, [r8, #10]
 8006f74:	3e01      	subs	r6, #1
 8006f76:	ea06 2659 	and.w	r6, r6, r9, lsr #9
 8006f7a:	4406      	add	r6, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006f7c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006f80:	2f00      	cmp	r7, #0
 8006f82:	d096      	beq.n	8006eb2 <f_lseek+0x34>
 8006f84:	6a22      	ldr	r2, [r4, #32]
 8006f86:	42b2      	cmp	r2, r6
 8006f88:	d093      	beq.n	8006eb2 <f_lseek+0x34>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006f8a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	db11      	blt.n	8006fb6 <f_lseek+0x138>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006f92:	2301      	movs	r3, #1
 8006f94:	4632      	mov	r2, r6
 8006f96:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006f9a:	9801      	ldr	r0, [sp, #4]
 8006f9c:	7840      	ldrb	r0, [r0, #1]
 8006f9e:	f7fe f8a3 	bl	80050e8 <disk_read>
 8006fa2:	b9e0      	cbnz	r0, 8006fde <f_lseek+0x160>
					fp->sect = dsc;
 8006fa4:	6226      	str	r6, [r4, #32]
 8006fa6:	e784      	b.n	8006eb2 <f_lseek+0x34>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006fa8:	2502      	movs	r5, #2
 8006faa:	7565      	strb	r5, [r4, #21]
 8006fac:	4629      	mov	r1, r5
 8006fae:	4640      	mov	r0, r8
 8006fb0:	f7fe ff98 	bl	8005ee4 <unlock_fs>
 8006fb4:	e781      	b.n	8006eba <f_lseek+0x3c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006fbc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006fc0:	f7fe f89e 	bl	8005100 <disk_write>
 8006fc4:	b920      	cbnz	r0, 8006fd0 <f_lseek+0x152>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006fc6:	7d23      	ldrb	r3, [r4, #20]
 8006fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fcc:	7523      	strb	r3, [r4, #20]
 8006fce:	e7e0      	b.n	8006f92 <f_lseek+0x114>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006fd0:	2501      	movs	r5, #1
 8006fd2:	7565      	strb	r5, [r4, #21]
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	9801      	ldr	r0, [sp, #4]
 8006fd8:	f7fe ff84 	bl	8005ee4 <unlock_fs>
 8006fdc:	e76d      	b.n	8006eba <f_lseek+0x3c>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006fde:	2501      	movs	r5, #1
 8006fe0:	7565      	strb	r5, [r4, #21]
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	9801      	ldr	r0, [sp, #4]
 8006fe6:	f7fe ff7d 	bl	8005ee4 <unlock_fs>
 8006fea:	e766      	b.n	8006eba <f_lseek+0x3c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006fec:	68e3      	ldr	r3, [r4, #12]
 8006fee:	42b3      	cmp	r3, r6
 8006ff0:	d204      	bcs.n	8006ffc <f_lseek+0x17e>
 8006ff2:	7d22      	ldrb	r2, [r4, #20]
 8006ff4:	f012 0f02 	tst.w	r2, #2
 8006ff8:	d100      	bne.n	8006ffc <f_lseek+0x17e>
			ofs = fp->obj.objsize;
 8006ffa:	461e      	mov	r6, r3
		ifptr = fp->fptr;
 8006ffc:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 8006ffe:	2200      	movs	r2, #0
 8007000:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 8007002:	b1de      	cbz	r6, 800703c <f_lseek+0x1be>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007004:	9a01      	ldr	r2, [sp, #4]
 8007006:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 800700a:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 800700e:	b173      	cbz	r3, 800702e <f_lseek+0x1b0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007010:	1e72      	subs	r2, r6, #1
 8007012:	fbb2 f2f8 	udiv	r2, r2, r8
 8007016:	3b01      	subs	r3, #1
 8007018:	fbb3 f1f8 	udiv	r1, r3, r8
			if (ifptr > 0 &&
 800701c:	428a      	cmp	r2, r1
 800701e:	d306      	bcc.n	800702e <f_lseek+0x1b0>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007020:	f1c8 0700 	rsb	r7, r8, #0
 8007024:	401f      	ands	r7, r3
 8007026:	61a7      	str	r7, [r4, #24]
				ofs -= fp->fptr;
 8007028:	1bf7      	subs	r7, r6, r7
				clst = fp->clust;
 800702a:	69e6      	ldr	r6, [r4, #28]
 800702c:	e004      	b.n	8007038 <f_lseek+0x1ba>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800702e:	68a0      	ldr	r0, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007030:	b330      	cbz	r0, 8007080 <f_lseek+0x202>
				fp->clust = clst;
 8007032:	61e0      	str	r0, [r4, #28]
 8007034:	4637      	mov	r7, r6
 8007036:	4606      	mov	r6, r0
			if (clst != 0) {
 8007038:	2e00      	cmp	r6, #0
 800703a:	d149      	bne.n	80070d0 <f_lseek+0x252>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800703c:	69a3      	ldr	r3, [r4, #24]
 800703e:	68e2      	ldr	r2, [r4, #12]
 8007040:	4293      	cmp	r3, r2
 8007042:	d904      	bls.n	800704e <f_lseek+0x1d0>
			fp->obj.objsize = fp->fptr;
 8007044:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8007046:	7d22      	ldrb	r2, [r4, #20]
 8007048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800704c:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800704e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007052:	2b00      	cmp	r3, #0
 8007054:	f43f af2d 	beq.w	8006eb2 <f_lseek+0x34>
 8007058:	6a22      	ldr	r2, [r4, #32]
 800705a:	42b2      	cmp	r2, r6
 800705c:	f43f af29 	beq.w	8006eb2 <f_lseek+0x34>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007060:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	db6d      	blt.n	8007144 <f_lseek+0x2c6>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007068:	2301      	movs	r3, #1
 800706a:	4632      	mov	r2, r6
 800706c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8007070:	9801      	ldr	r0, [sp, #4]
 8007072:	7840      	ldrb	r0, [r0, #1]
 8007074:	f7fe f838 	bl	80050e8 <disk_read>
 8007078:	2800      	cmp	r0, #0
 800707a:	d177      	bne.n	800716c <f_lseek+0x2ee>
			fp->sect = nsect;
 800707c:	6226      	str	r6, [r4, #32]
 800707e:	e718      	b.n	8006eb2 <f_lseek+0x34>
					clst = create_chain(&fp->obj, 0);
 8007080:	2100      	movs	r1, #0
 8007082:	4620      	mov	r0, r4
 8007084:	f7fe fddd 	bl	8005c42 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007088:	2801      	cmp	r0, #1
 800708a:	d004      	beq.n	8007096 <f_lseek+0x218>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800708c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007090:	d008      	beq.n	80070a4 <f_lseek+0x226>
					fp->obj.sclust = clst;
 8007092:	60a0      	str	r0, [r4, #8]
 8007094:	e7cd      	b.n	8007032 <f_lseek+0x1b4>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007096:	2502      	movs	r5, #2
 8007098:	7565      	strb	r5, [r4, #21]
 800709a:	4629      	mov	r1, r5
 800709c:	9801      	ldr	r0, [sp, #4]
 800709e:	f7fe ff21 	bl	8005ee4 <unlock_fs>
 80070a2:	e70a      	b.n	8006eba <f_lseek+0x3c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80070a4:	2501      	movs	r5, #1
 80070a6:	7565      	strb	r5, [r4, #21]
 80070a8:	4629      	mov	r1, r5
 80070aa:	9801      	ldr	r0, [sp, #4]
 80070ac:	f7fe ff1a 	bl	8005ee4 <unlock_fs>
 80070b0:	e703      	b.n	8006eba <f_lseek+0x3c>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80070b2:	4631      	mov	r1, r6
 80070b4:	4620      	mov	r0, r4
 80070b6:	f7fe fd06 	bl	8005ac6 <get_fat>
 80070ba:	4606      	mov	r6, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80070bc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80070c0:	d029      	beq.n	8007116 <f_lseek+0x298>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80070c2:	2e01      	cmp	r6, #1
 80070c4:	d92e      	bls.n	8007124 <f_lseek+0x2a6>
 80070c6:	9b01      	ldr	r3, [sp, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	42b3      	cmp	r3, r6
 80070cc:	d92a      	bls.n	8007124 <f_lseek+0x2a6>
					fp->clust = clst;
 80070ce:	61e6      	str	r6, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80070d0:	4547      	cmp	r7, r8
 80070d2:	d910      	bls.n	80070f6 <f_lseek+0x278>
					ofs -= bcs; fp->fptr += bcs;
 80070d4:	eba7 0708 	sub.w	r7, r7, r8
 80070d8:	69a3      	ldr	r3, [r4, #24]
 80070da:	4443      	add	r3, r8
 80070dc:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80070de:	7d23      	ldrb	r3, [r4, #20]
 80070e0:	f013 0f02 	tst.w	r3, #2
 80070e4:	d0e5      	beq.n	80070b2 <f_lseek+0x234>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80070e6:	4631      	mov	r1, r6
 80070e8:	4620      	mov	r0, r4
 80070ea:	f7fe fdaa 	bl	8005c42 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80070ee:	4606      	mov	r6, r0
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d1e3      	bne.n	80070bc <f_lseek+0x23e>
							ofs = 0; break;
 80070f4:	4607      	mov	r7, r0
				fp->fptr += ofs;
 80070f6:	69a3      	ldr	r3, [r4, #24]
 80070f8:	443b      	add	r3, r7
 80070fa:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 80070fc:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8007100:	b1f3      	cbz	r3, 8007140 <f_lseek+0x2c2>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007102:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007106:	4631      	mov	r1, r6
 8007108:	4640      	mov	r0, r8
 800710a:	f7fe f92d 	bl	8005368 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800710e:	b180      	cbz	r0, 8007132 <f_lseek+0x2b4>
					nsect += (DWORD)(ofs / SS(fs));
 8007110:	eb00 2657 	add.w	r6, r0, r7, lsr #9
 8007114:	e792      	b.n	800703c <f_lseek+0x1be>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007116:	2501      	movs	r5, #1
 8007118:	7565      	strb	r5, [r4, #21]
 800711a:	4629      	mov	r1, r5
 800711c:	9801      	ldr	r0, [sp, #4]
 800711e:	f7fe fee1 	bl	8005ee4 <unlock_fs>
 8007122:	e6ca      	b.n	8006eba <f_lseek+0x3c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007124:	2502      	movs	r5, #2
 8007126:	7565      	strb	r5, [r4, #21]
 8007128:	4629      	mov	r1, r5
 800712a:	9801      	ldr	r0, [sp, #4]
 800712c:	f7fe feda 	bl	8005ee4 <unlock_fs>
 8007130:	e6c3      	b.n	8006eba <f_lseek+0x3c>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007132:	2502      	movs	r5, #2
 8007134:	7565      	strb	r5, [r4, #21]
 8007136:	4629      	mov	r1, r5
 8007138:	4640      	mov	r0, r8
 800713a:	f7fe fed3 	bl	8005ee4 <unlock_fs>
 800713e:	e6bc      	b.n	8006eba <f_lseek+0x3c>
		fp->fptr = nsect = 0;
 8007140:	461e      	mov	r6, r3
 8007142:	e77b      	b.n	800703c <f_lseek+0x1be>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007144:	2301      	movs	r3, #1
 8007146:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800714a:	9801      	ldr	r0, [sp, #4]
 800714c:	7840      	ldrb	r0, [r0, #1]
 800714e:	f7fd ffd7 	bl	8005100 <disk_write>
 8007152:	b920      	cbnz	r0, 800715e <f_lseek+0x2e0>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007154:	7d23      	ldrb	r3, [r4, #20]
 8007156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800715a:	7523      	strb	r3, [r4, #20]
 800715c:	e784      	b.n	8007068 <f_lseek+0x1ea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800715e:	2501      	movs	r5, #1
 8007160:	7565      	strb	r5, [r4, #21]
 8007162:	4629      	mov	r1, r5
 8007164:	9801      	ldr	r0, [sp, #4]
 8007166:	f7fe febd 	bl	8005ee4 <unlock_fs>
 800716a:	e6a6      	b.n	8006eba <f_lseek+0x3c>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800716c:	2501      	movs	r5, #1
 800716e:	7565      	strb	r5, [r4, #21]
 8007170:	4629      	mov	r1, r5
 8007172:	9801      	ldr	r0, [sp, #4]
 8007174:	f7fe feb6 	bl	8005ee4 <unlock_fs>
 8007178:	e69f      	b.n	8006eba <f_lseek+0x3c>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800717a:	2511      	movs	r5, #17
 800717c:	e699      	b.n	8006eb2 <f_lseek+0x34>

0800717e <f_mkdir>:
{
 800717e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007182:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8007186:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8007188:	2202      	movs	r2, #2
 800718a:	a983      	add	r1, sp, #524	; 0x20c
 800718c:	a801      	add	r0, sp, #4
 800718e:	f7fe fa8b 	bl	80056a8 <find_volume>
	dj.obj.fs = fs;
 8007192:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8007194:	9384      	str	r3, [sp, #528]	; 0x210
	if (res == FR_OK) {
 8007196:	4604      	mov	r4, r0
 8007198:	b140      	cbz	r0, 80071ac <f_mkdir+0x2e>
	LEAVE_FF(fs, res);
 800719a:	4621      	mov	r1, r4
 800719c:	9883      	ldr	r0, [sp, #524]	; 0x20c
 800719e:	f7fe fea1 	bl	8005ee4 <unlock_fs>
}
 80071a2:	4620      	mov	r0, r4
 80071a4:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80071a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 80071ac:	aa03      	add	r2, sp, #12
 80071ae:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 80071b0:	9901      	ldr	r1, [sp, #4]
 80071b2:	a884      	add	r0, sp, #528	; 0x210
 80071b4:	f7ff f8db 	bl	800636e <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80071b8:	4603      	mov	r3, r0
 80071ba:	b140      	cbz	r0, 80071ce <f_mkdir+0x50>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80071bc:	2804      	cmp	r0, #4
 80071be:	d107      	bne.n	80071d0 <f_mkdir+0x52>
 80071c0:	f89d 223f 	ldrb.w	r2, [sp, #575]	; 0x23f
 80071c4:	f012 0f20 	tst.w	r2, #32
 80071c8:	d002      	beq.n	80071d0 <f_mkdir+0x52>
			res = FR_INVALID_NAME;
 80071ca:	2406      	movs	r4, #6
 80071cc:	e7e5      	b.n	800719a <f_mkdir+0x1c>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80071ce:	2308      	movs	r3, #8
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d001      	beq.n	80071d8 <f_mkdir+0x5a>
 80071d4:	461c      	mov	r4, r3
 80071d6:	e7e0      	b.n	800719a <f_mkdir+0x1c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80071d8:	2100      	movs	r1, #0
 80071da:	a884      	add	r0, sp, #528	; 0x210
 80071dc:	f7fe fd31 	bl	8005c42 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80071e0:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 80071e2:	8953      	ldrh	r3, [r2, #10]
 80071e4:	025b      	lsls	r3, r3, #9
 80071e6:	9387      	str	r3, [sp, #540]	; 0x21c
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80071e8:	4680      	mov	r8, r0
 80071ea:	b900      	cbnz	r0, 80071ee <f_mkdir+0x70>
 80071ec:	2407      	movs	r4, #7
			if (dcl == 1) res = FR_INT_ERR;
 80071ee:	f1b8 0f01 	cmp.w	r8, #1
 80071f2:	d020      	beq.n	8007236 <f_mkdir+0xb8>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80071f4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80071f8:	d024      	beq.n	8007244 <f_mkdir+0xc6>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80071fa:	b1f4      	cbz	r4, 800723a <f_mkdir+0xbc>
			tm = GET_FATTIME();
 80071fc:	f002 fcf2 	bl	8009be4 <get_fattime>
 8007200:	4682      	mov	sl, r0
			if (res == FR_OK) {					/* Initialize the new directory table */
 8007202:	b30c      	cbz	r4, 8007248 <f_mkdir+0xca>
			if (res == FR_OK) {
 8007204:	2c00      	cmp	r4, #0
 8007206:	d071      	beq.n	80072ec <f_mkdir+0x16e>
			if (res == FR_OK) {
 8007208:	2c00      	cmp	r4, #0
 800720a:	d174      	bne.n	80072f6 <f_mkdir+0x178>
					dir = dj.dir;
 800720c:	9c8c      	ldr	r4, [sp, #560]	; 0x230
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800720e:	4651      	mov	r1, sl
 8007210:	f104 0016 	add.w	r0, r4, #22
 8007214:	f7fd ffa0 	bl	8005158 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8007218:	4642      	mov	r2, r8
 800721a:	4621      	mov	r1, r4
 800721c:	9883      	ldr	r0, [sp, #524]	; 0x20c
 800721e:	f7fe f8d3 	bl	80053c8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8007222:	2310      	movs	r3, #16
 8007224:	72e3      	strb	r3, [r4, #11]
					fs->wflag = 1;
 8007226:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8007228:	2201      	movs	r2, #1
 800722a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);
 800722c:	9883      	ldr	r0, [sp, #524]	; 0x20c
 800722e:	f7ff f99b 	bl	8006568 <sync_fs>
 8007232:	4604      	mov	r4, r0
 8007234:	e7b1      	b.n	800719a <f_mkdir+0x1c>
			if (dcl == 1) res = FR_INT_ERR;
 8007236:	2402      	movs	r4, #2
 8007238:	e7dc      	b.n	80071f4 <f_mkdir+0x76>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800723a:	4610      	mov	r0, r2
 800723c:	f7fe f9b2 	bl	80055a4 <sync_window>
 8007240:	4604      	mov	r4, r0
 8007242:	e7db      	b.n	80071fc <f_mkdir+0x7e>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007244:	2401      	movs	r4, #1
 8007246:	e7d9      	b.n	80071fc <f_mkdir+0x7e>
				dsc = clust2sect(fs, dcl);
 8007248:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 800724a:	4641      	mov	r1, r8
 800724c:	4630      	mov	r0, r6
 800724e:	f7fe f88b 	bl	8005368 <clust2sect>
 8007252:	4605      	mov	r5, r0
				dir = fs->win;
 8007254:	f106 093c 	add.w	r9, r6, #60	; 0x3c
				mem_set(dir, 0, SS(fs));
 8007258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800725c:	2100      	movs	r1, #0
 800725e:	4648      	mov	r0, r9
 8007260:	f7fd ff8e 	bl	8005180 <mem_set>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8007264:	220b      	movs	r2, #11
 8007266:	2120      	movs	r1, #32
 8007268:	4648      	mov	r0, r9
 800726a:	f7fd ff89 	bl	8005180 <mem_set>
					dir[DIR_Name] = '.';
 800726e:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
 8007272:	f886 b03c 	strb.w	fp, [r6, #60]	; 0x3c
					dir[DIR_Attr] = AM_DIR;
 8007276:	2310      	movs	r3, #16
 8007278:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
					st_dword(dir + DIR_ModTime, tm);
 800727c:	4651      	mov	r1, sl
 800727e:	f106 0052 	add.w	r0, r6, #82	; 0x52
 8007282:	f7fd ff69 	bl	8005158 <st_dword>
					st_clust(fs, dir, dcl);
 8007286:	4642      	mov	r2, r8
 8007288:	4649      	mov	r1, r9
 800728a:	9883      	ldr	r0, [sp, #524]	; 0x20c
 800728c:	f7fe f89c 	bl	80053c8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8007290:	f106 075c 	add.w	r7, r6, #92	; 0x5c
 8007294:	2220      	movs	r2, #32
 8007296:	4649      	mov	r1, r9
 8007298:	4638      	mov	r0, r7
 800729a:	f7fd ff67 	bl	800516c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800729e:	f886 b05d 	strb.w	fp, [r6, #93]	; 0x5d
 80072a2:	9a86      	ldr	r2, [sp, #536]	; 0x218
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80072a4:	9883      	ldr	r0, [sp, #524]	; 0x20c
 80072a6:	7803      	ldrb	r3, [r0, #0]
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d01a      	beq.n	80072e2 <f_mkdir+0x164>
					st_clust(fs, dir + SZDIRE, pcl);
 80072ac:	4639      	mov	r1, r7
 80072ae:	f7fe f88b 	bl	80053c8 <st_clust>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80072b2:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 80072b4:	895e      	ldrh	r6, [r3, #10]
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	d0a4      	beq.n	8007204 <f_mkdir+0x86>
					fs->winsect = dsc++;
 80072ba:	1c6f      	adds	r7, r5, #1
 80072bc:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 80072be:	639d      	str	r5, [r3, #56]	; 0x38
					fs->wflag = 1;
 80072c0:	2201      	movs	r2, #1
 80072c2:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80072c4:	9883      	ldr	r0, [sp, #524]	; 0x20c
 80072c6:	f7fe f96d 	bl	80055a4 <sync_window>
					if (res != FR_OK) break;
 80072ca:	4604      	mov	r4, r0
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d199      	bne.n	8007204 <f_mkdir+0x86>
					mem_set(dir, 0, SS(fs));
 80072d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072d4:	2100      	movs	r1, #0
 80072d6:	4648      	mov	r0, r9
 80072d8:	f7fd ff52 	bl	8005180 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80072dc:	3e01      	subs	r6, #1
					fs->winsect = dsc++;
 80072de:	463d      	mov	r5, r7
 80072e0:	e7e9      	b.n	80072b6 <f_mkdir+0x138>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80072e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d1e1      	bne.n	80072ac <f_mkdir+0x12e>
 80072e8:	2200      	movs	r2, #0
 80072ea:	e7df      	b.n	80072ac <f_mkdir+0x12e>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80072ec:	a884      	add	r0, sp, #528	; 0x210
 80072ee:	f7ff f89b 	bl	8006428 <dir_register>
 80072f2:	4604      	mov	r4, r0
 80072f4:	e788      	b.n	8007208 <f_mkdir+0x8a>
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80072f6:	2200      	movs	r2, #0
 80072f8:	4641      	mov	r1, r8
 80072fa:	a884      	add	r0, sp, #528	; 0x210
 80072fc:	f7fe fd07 	bl	8005d0e <remove_chain>
 8007300:	e74b      	b.n	800719a <f_mkdir+0x1c>

08007302 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007302:	b510      	push	{r4, lr}
 8007304:	b094      	sub	sp, #80	; 0x50
 8007306:	4604      	mov	r4, r0
	putbuff pb;


	putc_init(&pb, fp);
 8007308:	a801      	add	r0, sp, #4
 800730a:	f7fe f93c 	bl	8005586 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800730e:	e003      	b.n	8007318 <f_puts+0x16>
 8007310:	3401      	adds	r4, #1
 8007312:	a801      	add	r0, sp, #4
 8007314:	f7ff fcc4 	bl	8006ca0 <putc_bfd>
 8007318:	7821      	ldrb	r1, [r4, #0]
 800731a:	2900      	cmp	r1, #0
 800731c:	d1f8      	bne.n	8007310 <f_puts+0xe>
	return putc_flush(&pb);
 800731e:	a801      	add	r0, sp, #4
 8007320:	f7ff fce5 	bl	8006cee <putc_flush>
}
 8007324:	b014      	add	sp, #80	; 0x50
 8007326:	bd10      	pop	{r4, pc}

08007328 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007328:	4b13      	ldr	r3, [pc, #76]	; (8007378 <FATFS_LinkDriverEx+0x50>)
 800732a:	7a5b      	ldrb	r3, [r3, #9]
 800732c:	bb13      	cbnz	r3, 8007374 <FATFS_LinkDriverEx+0x4c>
{
 800732e:	b510      	push	{r4, lr}
 8007330:	4604      	mov	r4, r0
 8007332:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8007336:	4b10      	ldr	r3, [pc, #64]	; (8007378 <FATFS_LinkDriverEx+0x50>)
 8007338:	f893 c009 	ldrb.w	ip, [r3, #9]
 800733c:	fa5f fc8c 	uxtb.w	ip, ip
 8007340:	f04f 0e00 	mov.w	lr, #0
 8007344:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8007348:	f893 c009 	ldrb.w	ip, [r3, #9]
 800734c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007350:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8007354:	7a5c      	ldrb	r4, [r3, #9]
 8007356:	441c      	add	r4, r3
 8007358:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800735a:	7a5a      	ldrb	r2, [r3, #9]
 800735c:	1c54      	adds	r4, r2, #1
 800735e:	b2e4      	uxtb	r4, r4
 8007360:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8007362:	3230      	adds	r2, #48	; 0x30
 8007364:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8007366:	233a      	movs	r3, #58	; 0x3a
 8007368:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800736a:	232f      	movs	r3, #47	; 0x2f
 800736c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800736e:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8007372:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8007374:	2001      	movs	r0, #1
}
 8007376:	4770      	bx	lr
 8007378:	20000240 	.word	0x20000240

0800737c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800737c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800737e:	2200      	movs	r2, #0
 8007380:	f7ff ffd2 	bl	8007328 <FATFS_LinkDriverEx>
}
 8007384:	bd08      	pop	{r3, pc}
	...

08007388 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007388:	287f      	cmp	r0, #127	; 0x7f
 800738a:	d917      	bls.n	80073bc <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800738c:	b131      	cbz	r1, 800739c <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800738e:	28ff      	cmp	r0, #255	; 0xff
 8007390:	d813      	bhi.n	80073ba <ff_convert+0x32>
 8007392:	3880      	subs	r0, #128	; 0x80
 8007394:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <ff_convert+0x38>)
 8007396:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800739a:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800739c:	2300      	movs	r3, #0
 800739e:	2b7f      	cmp	r3, #127	; 0x7f
 80073a0:	d807      	bhi.n	80073b2 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 80073a2:	4a07      	ldr	r2, [pc, #28]	; (80073c0 <ff_convert+0x38>)
 80073a4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80073a8:	4282      	cmp	r2, r0
 80073aa:	d002      	beq.n	80073b2 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 80073ac:	3301      	adds	r3, #1
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	e7f5      	b.n	800739e <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 80073b2:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80073b6:	b2c0      	uxtb	r0, r0
 80073b8:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80073ba:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	0800f6b8 	.word	0x0800f6b8

080073c4 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80073c4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80073c8:	d207      	bcs.n	80073da <ff_wtoupper+0x16>
 80073ca:	4b23      	ldr	r3, [pc, #140]	; (8007458 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 80073cc:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 80073ce:	2a00      	cmp	r2, #0
 80073d0:	d041      	beq.n	8007456 <ff_wtoupper+0x92>
 80073d2:	4290      	cmp	r0, r2
 80073d4:	d33f      	bcc.n	8007456 <ff_wtoupper+0x92>
{
 80073d6:	b510      	push	{r4, lr}
 80073d8:	e006      	b.n	80073e8 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 80073da:	4b20      	ldr	r3, [pc, #128]	; (800745c <ff_wtoupper+0x98>)
 80073dc:	e7f6      	b.n	80073cc <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80073de:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 80073e0:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 80073e2:	b1da      	cbz	r2, 800741c <ff_wtoupper+0x58>
 80073e4:	4290      	cmp	r0, r2
 80073e6:	d319      	bcc.n	800741c <ff_wtoupper+0x58>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80073e8:	f103 0e04 	add.w	lr, r3, #4
 80073ec:	885b      	ldrh	r3, [r3, #2]
 80073ee:	0a19      	lsrs	r1, r3, #8
 80073f0:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 80073f2:	eb03 0c02 	add.w	ip, r3, r2
 80073f6:	4560      	cmp	r0, ip
 80073f8:	db04      	blt.n	8007404 <ff_wtoupper+0x40>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80073fa:	2900      	cmp	r1, #0
 80073fc:	d1ef      	bne.n	80073de <ff_wtoupper+0x1a>
 80073fe:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007402:	e7ed      	b.n	80073e0 <ff_wtoupper+0x1c>
			switch (cmd) {
 8007404:	2908      	cmp	r1, #8
 8007406:	d809      	bhi.n	800741c <ff_wtoupper+0x58>
 8007408:	e8df f001 	tbb	[pc, r1]
 800740c:	120f0905 	.word	0x120f0905
 8007410:	1e1b1815 	.word	0x1e1b1815
 8007414:	21          	.byte	0x21
 8007415:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007416:	1a82      	subs	r2, r0, r2
 8007418:	f83e 0012 	ldrh.w	r0, [lr, r2, lsl #1]
	}

	return chr;
}
 800741c:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800741e:	1a83      	subs	r3, r0, r2
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	1ac0      	subs	r0, r0, r3
 8007426:	b280      	uxth	r0, r0
 8007428:	e7f8      	b.n	800741c <ff_wtoupper+0x58>
			case 2: chr -= 16; break;				/* Shift -16 */
 800742a:	3810      	subs	r0, #16
 800742c:	b280      	uxth	r0, r0
 800742e:	e7f5      	b.n	800741c <ff_wtoupper+0x58>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007430:	3820      	subs	r0, #32
 8007432:	b280      	uxth	r0, r0
 8007434:	e7f2      	b.n	800741c <ff_wtoupper+0x58>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007436:	3830      	subs	r0, #48	; 0x30
 8007438:	b280      	uxth	r0, r0
 800743a:	e7ef      	b.n	800741c <ff_wtoupper+0x58>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800743c:	381a      	subs	r0, #26
 800743e:	b280      	uxth	r0, r0
 8007440:	e7ec      	b.n	800741c <ff_wtoupper+0x58>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007442:	3008      	adds	r0, #8
 8007444:	b280      	uxth	r0, r0
 8007446:	e7e9      	b.n	800741c <ff_wtoupper+0x58>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007448:	3850      	subs	r0, #80	; 0x50
 800744a:	b280      	uxth	r0, r0
 800744c:	e7e6      	b.n	800741c <ff_wtoupper+0x58>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800744e:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8007452:	b280      	uxth	r0, r0
 8007454:	e7e2      	b.n	800741c <ff_wtoupper+0x58>
}
 8007456:	4770      	bx	lr
 8007458:	0800f874 	.word	0x0800f874
 800745c:	0800f7b8 	.word	0x0800f7b8

08007460 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8007460:	b510      	push	{r4, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	460c      	mov	r4, r1
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8007466:	2300      	movs	r3, #0
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	9301      	str	r3, [sp, #4]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800746c:	2101      	movs	r1, #1
 800746e:	4668      	mov	r0, sp
 8007470:	f000 f879 	bl	8007566 <osSemaphoreCreate>
 8007474:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 8007476:	3800      	subs	r0, #0
 8007478:	bf18      	it	ne
 800747a:	2001      	movne	r0, #1
 800747c:	b002      	add	sp, #8
 800747e:	bd10      	pop	{r4, pc}

08007480 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007480:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8007482:	f000 f8f0 	bl	8007666 <osSemaphoreDelete>
#endif
    return 1;
}
 8007486:	2001      	movs	r0, #1
 8007488:	bd08      	pop	{r3, pc}

0800748a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800748a:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800748c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007490:	f000 f88d 	bl	80075ae <osSemaphoreWait>
 8007494:	b108      	cbz	r0, 800749a <ff_req_grant+0x10>
  int ret = 0;
 8007496:	2000      	movs	r0, #0
  {
    ret = 1;
  }

  return ret;
}
 8007498:	bd08      	pop	{r3, pc}
    ret = 1;
 800749a:	2001      	movs	r0, #1
  return ret;
 800749c:	e7fc      	b.n	8007498 <ff_req_grant+0xe>

0800749e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800749e:	b508      	push	{r3, lr}
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80074a0:	f000 f8b4 	bl	800760c <osSemaphoreRelease>
#endif
}
 80074a4:	bd08      	pop	{r3, pc}

080074a6 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80074a6:	2884      	cmp	r0, #132	; 0x84
 80074a8:	d001      	beq.n	80074ae <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80074aa:	3003      	adds	r0, #3
 80074ac:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80074ae:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80074b0:	4770      	bx	lr

080074b2 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b2:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80074b6:	3800      	subs	r0, #0
 80074b8:	bf18      	it	ne
 80074ba:	2001      	movne	r0, #1
 80074bc:	4770      	bx	lr

080074be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80074be:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80074c0:	f001 f8b2 	bl	8008628 <vTaskStartScheduler>
  
  return osOK;
}
 80074c4:	2000      	movs	r0, #0
 80074c6:	bd08      	pop	{r3, pc}

080074c8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80074c8:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80074ca:	f001 fbb1 	bl	8008c30 <xTaskGetSchedulerState>
 80074ce:	2801      	cmp	r0, #1
 80074d0:	d001      	beq.n	80074d6 <osKernelRunning+0xe>
    return 0;
  else
    return 1;
 80074d2:	2001      	movs	r0, #1
#else
	return (-1);
#endif	
}
 80074d4:	bd08      	pop	{r3, pc}
    return 0;
 80074d6:	2000      	movs	r0, #0
 80074d8:	e7fc      	b.n	80074d4 <osKernelRunning+0xc>

080074da <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80074da:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 80074dc:	f7ff ffe9 	bl	80074b2 <inHandlerMode>
 80074e0:	b110      	cbz	r0, 80074e8 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
 80074e2:	f001 f8ef 	bl	80086c4 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
  }
}
 80074e6:	bd08      	pop	{r3, pc}
    return xTaskGetTickCount();
 80074e8:	f001 f8e6 	bl	80086b8 <xTaskGetTickCount>
 80074ec:	e7fb      	b.n	80074e6 <osKernelSysTick+0xc>

080074ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80074ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074f2:	b087      	sub	sp, #28
 80074f4:	4604      	mov	r4, r0
 80074f6:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80074f8:	6945      	ldr	r5, [r0, #20]
 80074fa:	b1bd      	cbz	r5, 800752c <osThreadCreate+0x3e>
 80074fc:	6986      	ldr	r6, [r0, #24]
 80074fe:	b1ae      	cbz	r6, 800752c <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007500:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8007504:	f8d0 9000 	ldr.w	r9, [r0]
 8007508:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800750c:	f7ff ffcb 	bl	80074a6 <makeFreeRtosPriority>
 8007510:	9602      	str	r6, [sp, #8]
 8007512:	9501      	str	r5, [sp, #4]
 8007514:	9000      	str	r0, [sp, #0]
 8007516:	463b      	mov	r3, r7
 8007518:	6922      	ldr	r2, [r4, #16]
 800751a:	4649      	mov	r1, r9
 800751c:	4640      	mov	r0, r8
 800751e:	f001 f813 	bl	8008548 <xTaskCreateStatic>
 8007522:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007524:	9805      	ldr	r0, [sp, #20]
}
 8007526:	b007      	add	sp, #28
 8007528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800752c:	6865      	ldr	r5, [r4, #4]
 800752e:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007530:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007534:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8007538:	f7ff ffb5 	bl	80074a6 <makeFreeRtosPriority>
 800753c:	ab05      	add	r3, sp, #20
 800753e:	9301      	str	r3, [sp, #4]
 8007540:	9000      	str	r0, [sp, #0]
 8007542:	463b      	mov	r3, r7
 8007544:	fa1f f288 	uxth.w	r2, r8
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	f001 f837 	bl	80085be <xTaskCreate>
 8007550:	2801      	cmp	r0, #1
 8007552:	d0e7      	beq.n	8007524 <osThreadCreate+0x36>
      return NULL;
 8007554:	2000      	movs	r0, #0
 8007556:	e7e6      	b.n	8007526 <osThreadCreate+0x38>

08007558 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007558:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800755a:	b900      	cbnz	r0, 800755e <osDelay+0x6>
 800755c:	2001      	movs	r0, #1
 800755e:	f001 f9bf 	bl	80088e0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007562:	2000      	movs	r0, #0
 8007564:	bd08      	pop	{r3, pc}

08007566 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007566:	b510      	push	{r4, lr}
 8007568:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800756a:	6844      	ldr	r4, [r0, #4]
 800756c:	b17c      	cbz	r4, 800758e <osSemaphoreCreate+0x28>
    if (count == 1) {
 800756e:	2901      	cmp	r1, #1
 8007570:	d003      	beq.n	800757a <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007572:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007574:	4620      	mov	r0, r4
 8007576:	b002      	add	sp, #8
 8007578:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800757a:	2303      	movs	r3, #3
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	4623      	mov	r3, r4
 8007580:	2200      	movs	r2, #0
 8007582:	4611      	mov	r1, r2
 8007584:	2001      	movs	r0, #1
 8007586:	f000 fa43 	bl	8007a10 <xQueueGenericCreateStatic>
 800758a:	4604      	mov	r4, r0
 800758c:	e7f2      	b.n	8007574 <osSemaphoreCreate+0xe>
    if (count == 1) {
 800758e:	2901      	cmp	r1, #1
 8007590:	d1f0      	bne.n	8007574 <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 8007592:	2203      	movs	r2, #3
 8007594:	2100      	movs	r1, #0
 8007596:	2001      	movs	r0, #1
 8007598:	f000 fa84 	bl	8007aa4 <xQueueGenericCreate>
 800759c:	4604      	mov	r4, r0
 800759e:	2800      	cmp	r0, #0
 80075a0:	d0e8      	beq.n	8007574 <osSemaphoreCreate+0xe>
 80075a2:	2300      	movs	r3, #0
 80075a4:	461a      	mov	r2, r3
 80075a6:	4619      	mov	r1, r3
 80075a8:	f000 faa0 	bl	8007aec <xQueueGenericSend>
      return sema;
 80075ac:	e7e2      	b.n	8007574 <osSemaphoreCreate+0xe>

080075ae <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80075ae:	b570      	push	{r4, r5, r6, lr}
 80075b0:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80075b2:	2300      	movs	r3, #0
 80075b4:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80075b6:	b318      	cbz	r0, 8007600 <osSemaphoreWait+0x52>
 80075b8:	460c      	mov	r4, r1
 80075ba:	4606      	mov	r6, r0
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80075bc:	f7ff ff79 	bl	80074b2 <inHandlerMode>
 80075c0:	4605      	mov	r5, r0
 80075c2:	b1a0      	cbz	r0, 80075ee <osSemaphoreWait+0x40>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80075c4:	aa01      	add	r2, sp, #4
 80075c6:	2100      	movs	r1, #0
 80075c8:	4630      	mov	r0, r6
 80075ca:	f000 fd95 	bl	80080f8 <xQueueReceiveFromISR>
 80075ce:	2801      	cmp	r0, #1
 80075d0:	d118      	bne.n	8007604 <osSemaphoreWait+0x56>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80075d2:	9d01      	ldr	r5, [sp, #4]
 80075d4:	b18d      	cbz	r5, 80075fa <osSemaphoreWait+0x4c>
 80075d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80075da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80075ea:	2500      	movs	r5, #0
 80075ec:	e005      	b.n	80075fa <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80075ee:	4621      	mov	r1, r4
 80075f0:	4630      	mov	r0, r6
 80075f2:	f000 fcae 	bl	8007f52 <xQueueSemaphoreTake>
 80075f6:	2801      	cmp	r0, #1
 80075f8:	d106      	bne.n	8007608 <osSemaphoreWait+0x5a>
}
 80075fa:	4628      	mov	r0, r5
 80075fc:	b002      	add	sp, #8
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
    return osErrorParameter;
 8007600:	2580      	movs	r5, #128	; 0x80
 8007602:	e7fa      	b.n	80075fa <osSemaphoreWait+0x4c>
      return osErrorOS;
 8007604:	25ff      	movs	r5, #255	; 0xff
 8007606:	e7f8      	b.n	80075fa <osSemaphoreWait+0x4c>
    return osErrorOS;
 8007608:	25ff      	movs	r5, #255	; 0xff
 800760a:	e7f6      	b.n	80075fa <osSemaphoreWait+0x4c>

0800760c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800760c:	b510      	push	{r4, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8007612:	2300      	movs	r3, #0
 8007614:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8007616:	f7ff ff4c 	bl	80074b2 <inHandlerMode>
 800761a:	b198      	cbz	r0, 8007644 <osSemaphoreRelease+0x38>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800761c:	a901      	add	r1, sp, #4
 800761e:	4620      	mov	r0, r4
 8007620:	f000 fb8f 	bl	8007d42 <xQueueGiveFromISR>
 8007624:	2801      	cmp	r0, #1
 8007626:	d11a      	bne.n	800765e <osSemaphoreRelease+0x52>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007628:	9b01      	ldr	r3, [sp, #4]
 800762a:	b1d3      	cbz	r3, 8007662 <osSemaphoreRelease+0x56>
 800762c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007634:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8007640:	2000      	movs	r0, #0
 8007642:	e008      	b.n	8007656 <osSemaphoreRelease+0x4a>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007644:	2300      	movs	r3, #0
 8007646:	461a      	mov	r2, r3
 8007648:	4619      	mov	r1, r3
 800764a:	4620      	mov	r0, r4
 800764c:	f000 fa4e 	bl	8007aec <xQueueGenericSend>
 8007650:	2801      	cmp	r0, #1
 8007652:	d002      	beq.n	800765a <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8007654:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 8007656:	b002      	add	sp, #8
 8007658:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 800765a:	2000      	movs	r0, #0
 800765c:	e7fb      	b.n	8007656 <osSemaphoreRelease+0x4a>
      return osErrorOS;
 800765e:	20ff      	movs	r0, #255	; 0xff
 8007660:	e7f9      	b.n	8007656 <osSemaphoreRelease+0x4a>
  osStatus result = osOK;
 8007662:	2000      	movs	r0, #0
 8007664:	e7f7      	b.n	8007656 <osSemaphoreRelease+0x4a>

08007666 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007666:	b510      	push	{r4, lr}
 8007668:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 800766a:	f7ff ff22 	bl	80074b2 <inHandlerMode>
 800766e:	b920      	cbnz	r0, 800767a <osSemaphoreDelete+0x14>
    return osErrorISR;
  }

  vSemaphoreDelete(semaphore_id);
 8007670:	4620      	mov	r0, r4
 8007672:	f000 fdbf 	bl	80081f4 <vQueueDelete>

  return osOK; 
 8007676:	2000      	movs	r0, #0
}
 8007678:	bd10      	pop	{r4, pc}
    return osErrorISR;
 800767a:	2082      	movs	r0, #130	; 0x82
 800767c:	e7fc      	b.n	8007678 <osSemaphoreDelete+0x12>

0800767e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800767e:	b500      	push	{lr}
 8007680:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007682:	6882      	ldr	r2, [r0, #8]
 8007684:	b142      	cbz	r2, 8007698 <osMessageCreate+0x1a>
 8007686:	68c3      	ldr	r3, [r0, #12]
 8007688:	b133      	cbz	r3, 8007698 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800768a:	2100      	movs	r1, #0
 800768c:	9100      	str	r1, [sp, #0]
 800768e:	6841      	ldr	r1, [r0, #4]
 8007690:	6800      	ldr	r0, [r0, #0]
 8007692:	f000 f9bd 	bl	8007a10 <xQueueGenericCreateStatic>
 8007696:	e004      	b.n	80076a2 <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007698:	2200      	movs	r2, #0
 800769a:	6841      	ldr	r1, [r0, #4]
 800769c:	6800      	ldr	r0, [r0, #0]
 800769e:	f000 fa01 	bl	8007aa4 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80076a2:	b003      	add	sp, #12
 80076a4:	f85d fb04 	ldr.w	pc, [sp], #4

080076a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80076a8:	b530      	push	{r4, r5, lr}
 80076aa:	b085      	sub	sp, #20
 80076ac:	4604      	mov	r4, r0
 80076ae:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80076b0:	2300      	movs	r3, #0
 80076b2:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 80076b4:	4615      	mov	r5, r2
 80076b6:	b902      	cbnz	r2, 80076ba <osMessagePut+0x12>
    ticks = 1;
 80076b8:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 80076ba:	f7ff fefa 	bl	80074b2 <inHandlerMode>
 80076be:	b1a8      	cbz	r0, 80076ec <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80076c0:	2300      	movs	r3, #0
 80076c2:	aa03      	add	r2, sp, #12
 80076c4:	a901      	add	r1, sp, #4
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 fad4 	bl	8007c74 <xQueueGenericSendFromISR>
 80076cc:	2801      	cmp	r0, #1
 80076ce:	d118      	bne.n	8007702 <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80076d0:	9b03      	ldr	r3, [sp, #12]
 80076d2:	b1c3      	cbz	r3, 8007706 <osMessagePut+0x5e>
 80076d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80076e8:	2000      	movs	r0, #0
 80076ea:	e008      	b.n	80076fe <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80076ec:	2300      	movs	r3, #0
 80076ee:	462a      	mov	r2, r5
 80076f0:	a901      	add	r1, sp, #4
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 f9fa 	bl	8007aec <xQueueGenericSend>
 80076f8:	2801      	cmp	r0, #1
 80076fa:	d106      	bne.n	800770a <osMessagePut+0x62>
  return osOK;
 80076fc:	2000      	movs	r0, #0
}
 80076fe:	b005      	add	sp, #20
 8007700:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8007702:	20ff      	movs	r0, #255	; 0xff
 8007704:	e7fb      	b.n	80076fe <osMessagePut+0x56>
  return osOK;
 8007706:	2000      	movs	r0, #0
 8007708:	e7f9      	b.n	80076fe <osMessagePut+0x56>
      return osErrorOS;
 800770a:	20ff      	movs	r0, #255	; 0xff
 800770c:	e7f7      	b.n	80076fe <osMessagePut+0x56>

0800770e <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800770e:	b570      	push	{r4, r5, r6, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007714:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 800771a:	b1e1      	cbz	r1, 8007756 <osMessageGet+0x48>
 800771c:	460d      	mov	r5, r1
 800771e:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8007720:	2300      	movs	r3, #0
 8007722:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8007724:	f7ff fec5 	bl	80074b2 <inHandlerMode>
 8007728:	b300      	cbz	r0, 800776c <osMessageGet+0x5e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800772a:	aa03      	add	r2, sp, #12
 800772c:	a901      	add	r1, sp, #4
 800772e:	4628      	mov	r0, r5
 8007730:	f000 fce2 	bl	80080f8 <xQueueReceiveFromISR>
 8007734:	2801      	cmp	r0, #1
 8007736:	d016      	beq.n	8007766 <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8007738:	2300      	movs	r3, #0
 800773a:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800773c:	9b03      	ldr	r3, [sp, #12]
 800773e:	b1fb      	cbz	r3, 8007780 <osMessageGet+0x72>
 8007740:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007748:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	e014      	b.n	8007780 <osMessageGet+0x72>
    event.status = osErrorParameter;
 8007756:	2380      	movs	r3, #128	; 0x80
 8007758:	9300      	str	r3, [sp, #0]
    return event;
 800775a:	466b      	mov	r3, sp
 800775c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007764:	e011      	b.n	800778a <osMessageGet+0x7c>
      event.status = osEventMessage;
 8007766:	2310      	movs	r3, #16
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	e7e7      	b.n	800773c <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800776c:	4632      	mov	r2, r6
 800776e:	a901      	add	r1, sp, #4
 8007770:	4628      	mov	r0, r5
 8007772:	f000 fb3f 	bl	8007df4 <xQueueReceive>
 8007776:	2801      	cmp	r0, #1
 8007778:	d00a      	beq.n	8007790 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800777a:	b106      	cbz	r6, 800777e <osMessageGet+0x70>
 800777c:	2640      	movs	r6, #64	; 0x40
 800777e:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8007780:	466b      	mov	r3, sp
 8007782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800778a:	4620      	mov	r0, r4
 800778c:	b004      	add	sp, #16
 800778e:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8007790:	2310      	movs	r3, #16
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	e7f4      	b.n	8007780 <osMessageGet+0x72>

08007796 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007796:	f100 0308 	add.w	r3, r0, #8
 800779a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800779c:	f04f 32ff 	mov.w	r2, #4294967295
 80077a0:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077a2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077a4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077aa:	4770      	bx	lr

080077ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077ac:	2300      	movs	r3, #0
 80077ae:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077b0:	4770      	bx	lr

080077b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80077b2:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077b4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077ba:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077bc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077be:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80077c0:	6803      	ldr	r3, [r0, #0]
 80077c2:	3301      	adds	r3, #1
 80077c4:	6003      	str	r3, [r0, #0]
}
 80077c6:	4770      	bx	lr

080077c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077c8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077ca:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077cc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80077d0:	d011      	beq.n	80077f6 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077d2:	f100 0308 	add.w	r3, r0, #8
 80077d6:	461c      	mov	r4, r3
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	42aa      	cmp	r2, r5
 80077de:	d9fa      	bls.n	80077d6 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077e0:	6863      	ldr	r3, [r4, #4]
 80077e2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077e4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077e6:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80077e8:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077ea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80077ec:	6803      	ldr	r3, [r0, #0]
 80077ee:	3301      	adds	r3, #1
 80077f0:	6003      	str	r3, [r0, #0]
}
 80077f2:	bc30      	pop	{r4, r5}
 80077f4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80077f6:	6904      	ldr	r4, [r0, #16]
 80077f8:	e7f2      	b.n	80077e0 <vListInsert+0x18>

080077fa <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077fa:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077fc:	6841      	ldr	r1, [r0, #4]
 80077fe:	6882      	ldr	r2, [r0, #8]
 8007800:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007802:	6841      	ldr	r1, [r0, #4]
 8007804:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	4282      	cmp	r2, r0
 800780a:	d006      	beq.n	800781a <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800780c:	2200      	movs	r2, #0
 800780e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	3a01      	subs	r2, #1
 8007814:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007816:	6818      	ldr	r0, [r3, #0]
}
 8007818:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800781a:	6882      	ldr	r2, [r0, #8]
 800781c:	605a      	str	r2, [r3, #4]
 800781e:	e7f5      	b.n	800780c <uxListRemove+0x12>

08007820 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007820:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007822:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007824:	b118      	cbz	r0, 800782e <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800782e:	4770      	bx	lr

08007830 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007830:	b510      	push	{r4, lr}
 8007832:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007834:	f001 fc66 	bl	8009104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007838:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800783a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800783c:	429a      	cmp	r2, r3
 800783e:	d004      	beq.n	800784a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8007840:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8007842:	f001 fc81 	bl	8009148 <vPortExitCritical>

	return xReturn;
}
 8007846:	4620      	mov	r0, r4
 8007848:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800784a:	2401      	movs	r4, #1
 800784c:	e7f9      	b.n	8007842 <prvIsQueueFull+0x12>

0800784e <prvIsQueueEmpty>:
{
 800784e:	b510      	push	{r4, lr}
 8007850:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007852:	f001 fc57 	bl	8009104 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007858:	b923      	cbnz	r3, 8007864 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800785a:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800785c:	f001 fc74 	bl	8009148 <vPortExitCritical>
}
 8007860:	4620      	mov	r0, r4
 8007862:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8007864:	2400      	movs	r4, #0
 8007866:	e7f9      	b.n	800785c <prvIsQueueEmpty+0xe>

08007868 <prvCopyDataToQueue>:
{
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	4604      	mov	r4, r0
 800786c:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800786e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007870:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007872:	b95a      	cbnz	r2, 800788c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007874:	6803      	ldr	r3, [r0, #0]
 8007876:	b11b      	cbz	r3, 8007880 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8007878:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800787a:	3601      	adds	r6, #1
 800787c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800787e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007880:	6880      	ldr	r0, [r0, #8]
 8007882:	f001 fa41 	bl	8008d08 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	60a3      	str	r3, [r4, #8]
 800788a:	e7f6      	b.n	800787a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800788c:	b96d      	cbnz	r5, 80078aa <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800788e:	6840      	ldr	r0, [r0, #4]
 8007890:	f003 fec9 	bl	800b626 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007894:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007896:	6863      	ldr	r3, [r4, #4]
 8007898:	4413      	add	r3, r2
 800789a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800789c:	68a2      	ldr	r2, [r4, #8]
 800789e:	4293      	cmp	r3, r2
 80078a0:	d319      	bcc.n	80078d6 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80078a6:	4628      	mov	r0, r5
 80078a8:	e7e7      	b.n	800787a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078aa:	68c0      	ldr	r0, [r0, #12]
 80078ac:	f003 febb 	bl	800b626 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80078b2:	4251      	negs	r1, r2
 80078b4:	68e3      	ldr	r3, [r4, #12]
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078ba:	6822      	ldr	r2, [r4, #0]
 80078bc:	4293      	cmp	r3, r2
 80078be:	d202      	bcs.n	80078c6 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078c0:	68a3      	ldr	r3, [r4, #8]
 80078c2:	440b      	add	r3, r1
 80078c4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80078c6:	2d02      	cmp	r5, #2
 80078c8:	d001      	beq.n	80078ce <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80078ca:	2000      	movs	r0, #0
 80078cc:	e7d5      	b.n	800787a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078ce:	b126      	cbz	r6, 80078da <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80078d0:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80078d2:	2000      	movs	r0, #0
 80078d4:	e7d1      	b.n	800787a <prvCopyDataToQueue+0x12>
 80078d6:	4628      	mov	r0, r5
 80078d8:	e7cf      	b.n	800787a <prvCopyDataToQueue+0x12>
 80078da:	2000      	movs	r0, #0
 80078dc:	e7cd      	b.n	800787a <prvCopyDataToQueue+0x12>

080078de <prvCopyDataFromQueue>:
{
 80078de:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80078e2:	b16a      	cbz	r2, 8007900 <prvCopyDataFromQueue+0x22>
{
 80078e4:	b510      	push	{r4, lr}
 80078e6:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078e8:	68d9      	ldr	r1, [r3, #12]
 80078ea:	4411      	add	r1, r2
 80078ec:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078ee:	689c      	ldr	r4, [r3, #8]
 80078f0:	42a1      	cmp	r1, r4
 80078f2:	d301      	bcc.n	80078f8 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078f4:	6819      	ldr	r1, [r3, #0]
 80078f6:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078f8:	68d9      	ldr	r1, [r3, #12]
 80078fa:	f003 fe94 	bl	800b626 <memcpy>
}
 80078fe:	bd10      	pop	{r4, pc}
 8007900:	4770      	bx	lr

08007902 <prvUnlockQueue>:
{
 8007902:	b538      	push	{r3, r4, r5, lr}
 8007904:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007906:	f001 fbfd 	bl	8009104 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800790a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800790e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007910:	e001      	b.n	8007916 <prvUnlockQueue+0x14>
			--cTxLock;
 8007912:	3c01      	subs	r4, #1
 8007914:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007916:	2c00      	cmp	r4, #0
 8007918:	dd0a      	ble.n	8007930 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800791a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800791c:	b143      	cbz	r3, 8007930 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800791e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007922:	f001 f8ef 	bl	8008b04 <xTaskRemoveFromEventList>
 8007926:	2800      	cmp	r0, #0
 8007928:	d0f3      	beq.n	8007912 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800792a:	f001 f979 	bl	8008c20 <vTaskMissedYield>
 800792e:	e7f0      	b.n	8007912 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8007930:	23ff      	movs	r3, #255	; 0xff
 8007932:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007936:	f001 fc07 	bl	8009148 <vPortExitCritical>
	taskENTER_CRITICAL();
 800793a:	f001 fbe3 	bl	8009104 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800793e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8007942:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007944:	e001      	b.n	800794a <prvUnlockQueue+0x48>
				--cRxLock;
 8007946:	3c01      	subs	r4, #1
 8007948:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800794a:	2c00      	cmp	r4, #0
 800794c:	dd0a      	ble.n	8007964 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800794e:	692b      	ldr	r3, [r5, #16]
 8007950:	b143      	cbz	r3, 8007964 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007952:	f105 0010 	add.w	r0, r5, #16
 8007956:	f001 f8d5 	bl	8008b04 <xTaskRemoveFromEventList>
 800795a:	2800      	cmp	r0, #0
 800795c:	d0f3      	beq.n	8007946 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800795e:	f001 f95f 	bl	8008c20 <vTaskMissedYield>
 8007962:	e7f0      	b.n	8007946 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8007964:	23ff      	movs	r3, #255	; 0xff
 8007966:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800796a:	f001 fbed 	bl	8009148 <vPortExitCritical>
}
 800796e:	bd38      	pop	{r3, r4, r5, pc}

08007970 <xQueueGenericReset>:
{
 8007970:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8007972:	b1e0      	cbz	r0, 80079ae <xQueueGenericReset+0x3e>
 8007974:	460d      	mov	r5, r1
 8007976:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007978:	f001 fbc4 	bl	8009104 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007980:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007982:	fb01 3002 	mla	r0, r1, r2, r3
 8007986:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007988:	2000      	movs	r0, #0
 800798a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800798c:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800798e:	3a01      	subs	r2, #1
 8007990:	fb02 3301 	mla	r3, r2, r1, r3
 8007994:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007996:	23ff      	movs	r3, #255	; 0xff
 8007998:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800799c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80079a0:	b9fd      	cbnz	r5, 80079e2 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079a2:	6923      	ldr	r3, [r4, #16]
 80079a4:	b963      	cbnz	r3, 80079c0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80079a6:	f001 fbcf 	bl	8009148 <vPortExitCritical>
}
 80079aa:	2001      	movs	r0, #1
 80079ac:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80079be:	e7fe      	b.n	80079be <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079c0:	f104 0010 	add.w	r0, r4, #16
 80079c4:	f001 f89e 	bl	8008b04 <xTaskRemoveFromEventList>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d0ec      	beq.n	80079a6 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80079cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80079d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	e7e1      	b.n	80079a6 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079e2:	f104 0010 	add.w	r0, r4, #16
 80079e6:	f7ff fed6 	bl	8007796 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079ee:	f7ff fed2 	bl	8007796 <vListInitialise>
 80079f2:	e7d8      	b.n	80079a6 <xQueueGenericReset+0x36>

080079f4 <prvInitialiseNewQueue>:
{
 80079f4:	b510      	push	{r4, lr}
 80079f6:	4603      	mov	r3, r0
 80079f8:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80079fa:	460c      	mov	r4, r1
 80079fc:	b931      	cbnz	r1, 8007a0c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079fe:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8007a00:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a02:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a04:	2101      	movs	r1, #1
 8007a06:	f7ff ffb3 	bl	8007970 <xQueueGenericReset>
}
 8007a0a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a0c:	6002      	str	r2, [r0, #0]
 8007a0e:	e7f7      	b.n	8007a00 <prvInitialiseNewQueue+0xc>

08007a10 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a10:	b940      	cbnz	r0, 8007a24 <xQueueGenericCreateStatic+0x14>
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	e7fe      	b.n	8007a22 <xQueueGenericCreateStatic+0x12>
	{
 8007a24:	b510      	push	{r4, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	461c      	mov	r4, r3
 8007a2a:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8007a2c:	b153      	cbz	r3, 8007a44 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a2e:	b192      	cbz	r2, 8007a56 <xQueueGenericCreateStatic+0x46>
 8007a30:	b989      	cbnz	r1, 8007a56 <xQueueGenericCreateStatic+0x46>
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	e7fe      	b.n	8007a42 <xQueueGenericCreateStatic+0x32>
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a56:	b16a      	cbz	r2, 8007a74 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a58:	2348      	movs	r3, #72	; 0x48
 8007a5a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a5c:	9b03      	ldr	r3, [sp, #12]
 8007a5e:	2b48      	cmp	r3, #72	; 0x48
 8007a60:	d013      	beq.n	8007a8a <xQueueGenericCreateStatic+0x7a>
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	e7fe      	b.n	8007a72 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a74:	2900      	cmp	r1, #0
 8007a76:	d0ef      	beq.n	8007a58 <xQueueGenericCreateStatic+0x48>
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	e7fe      	b.n	8007a88 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a8a:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a92:	9400      	str	r4, [sp, #0]
 8007a94:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007a98:	4660      	mov	r0, ip
 8007a9a:	f7ff ffab 	bl	80079f4 <prvInitialiseNewQueue>
	}
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	b004      	add	sp, #16
 8007aa2:	bd10      	pop	{r4, pc}

08007aa4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007aa4:	b940      	cbnz	r0, 8007ab8 <xQueueGenericCreate+0x14>
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	e7fe      	b.n	8007ab6 <xQueueGenericCreate+0x12>
	{
 8007ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aba:	b083      	sub	sp, #12
 8007abc:	460d      	mov	r5, r1
 8007abe:	4614      	mov	r4, r2
 8007ac0:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac2:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ac6:	3048      	adds	r0, #72	; 0x48
 8007ac8:	f001 fcc2 	bl	8009450 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007acc:	4607      	mov	r7, r0
 8007ace:	b150      	cbz	r0, 8007ae6 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ad6:	9000      	str	r0, [sp, #0]
 8007ad8:	4623      	mov	r3, r4
 8007ada:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8007ade:	4629      	mov	r1, r5
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f7ff ff87 	bl	80079f4 <prvInitialiseNewQueue>
	}
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	b003      	add	sp, #12
 8007aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007aec <xQueueGenericSend>:
{
 8007aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aee:	b085      	sub	sp, #20
 8007af0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007af2:	b188      	cbz	r0, 8007b18 <xQueueGenericSend+0x2c>
 8007af4:	460f      	mov	r7, r1
 8007af6:	461d      	mov	r5, r3
 8007af8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007afa:	b1b1      	cbz	r1, 8007b2a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007afc:	2d02      	cmp	r5, #2
 8007afe:	d120      	bne.n	8007b42 <xQueueGenericSend+0x56>
 8007b00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d01d      	beq.n	8007b42 <xQueueGenericSend+0x56>
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	e7fe      	b.n	8007b16 <xQueueGenericSend+0x2a>
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007b28:	e7fe      	b.n	8007b28 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0e5      	beq.n	8007afc <xQueueGenericSend+0x10>
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	e7fe      	b.n	8007b40 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b42:	f001 f875 	bl	8008c30 <xTaskGetSchedulerState>
 8007b46:	4606      	mov	r6, r0
 8007b48:	b958      	cbnz	r0, 8007b62 <xQueueGenericSend+0x76>
 8007b4a:	9b01      	ldr	r3, [sp, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d048      	beq.n	8007be2 <xQueueGenericSend+0xf6>
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	e7fe      	b.n	8007b60 <xQueueGenericSend+0x74>
 8007b62:	2600      	movs	r6, #0
 8007b64:	e03d      	b.n	8007be2 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b66:	462a      	mov	r2, r5
 8007b68:	4639      	mov	r1, r7
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f7ff fe7c 	bl	8007868 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b72:	b97b      	cbnz	r3, 8007b94 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8007b74:	b148      	cbz	r0, 8007b8a <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8007b76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007b8a:	f001 fadd 	bl	8009148 <vPortExitCritical>
				return pdPASS;
 8007b8e:	2001      	movs	r0, #1
}
 8007b90:	b005      	add	sp, #20
 8007b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b98:	f000 ffb4 	bl	8008b04 <xTaskRemoveFromEventList>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d0f4      	beq.n	8007b8a <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8007ba0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	e7e9      	b.n	8007b8a <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8007bb6:	f001 fac7 	bl	8009148 <vPortExitCritical>
					return errQUEUE_FULL;
 8007bba:	2000      	movs	r0, #0
 8007bbc:	e7e8      	b.n	8007b90 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bbe:	a802      	add	r0, sp, #8
 8007bc0:	f000 ffe2 	bl	8008b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bc4:	2601      	movs	r6, #1
 8007bc6:	e019      	b.n	8007bfc <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007bce:	e021      	b.n	8007c14 <xQueueGenericSend+0x128>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bd6:	e023      	b.n	8007c20 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f7ff fe92 	bl	8007902 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bde:	f000 fe07 	bl	80087f0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007be2:	f001 fa8f 	bl	8009104 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007be6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007be8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d3bb      	bcc.n	8007b66 <xQueueGenericSend+0x7a>
 8007bee:	2d02      	cmp	r5, #2
 8007bf0:	d0b9      	beq.n	8007b66 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bf2:	9b01      	ldr	r3, [sp, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0de      	beq.n	8007bb6 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8007bf8:	2e00      	cmp	r6, #0
 8007bfa:	d0e0      	beq.n	8007bbe <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8007bfc:	f001 faa4 	bl	8009148 <vPortExitCritical>
		vTaskSuspendAll();
 8007c00:	f000 fd50 	bl	80086a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c04:	f001 fa7e 	bl	8009104 <vPortEnterCritical>
 8007c08:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8007c0c:	b252      	sxtb	r2, r2
 8007c0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c12:	d0d9      	beq.n	8007bc8 <xQueueGenericSend+0xdc>
 8007c14:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8007c18:	b252      	sxtb	r2, r2
 8007c1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c1e:	d0d7      	beq.n	8007bd0 <xQueueGenericSend+0xe4>
 8007c20:	f001 fa92 	bl	8009148 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c24:	a901      	add	r1, sp, #4
 8007c26:	a802      	add	r0, sp, #8
 8007c28:	f000 ffb8 	bl	8008b9c <xTaskCheckForTimeOut>
 8007c2c:	b9d8      	cbnz	r0, 8007c66 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f7ff fdfe 	bl	8007830 <prvIsQueueFull>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d0cf      	beq.n	8007bd8 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c38:	9901      	ldr	r1, [sp, #4]
 8007c3a:	f104 0010 	add.w	r0, r4, #16
 8007c3e:	f000 ff47 	bl	8008ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7ff fe5d 	bl	8007902 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c48:	f000 fdd2 	bl	80087f0 <xTaskResumeAll>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d1c8      	bne.n	8007be2 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8007c50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c58:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	e7bd      	b.n	8007be2 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8007c66:	4620      	mov	r0, r4
 8007c68:	f7ff fe4b 	bl	8007902 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c6c:	f000 fdc0 	bl	80087f0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007c70:	2000      	movs	r0, #0
 8007c72:	e78d      	b.n	8007b90 <xQueueGenericSend+0xa4>

08007c74 <xQueueGenericSendFromISR>:
{
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007c78:	b190      	cbz	r0, 8007ca0 <xQueueGenericSendFromISR+0x2c>
 8007c7a:	460f      	mov	r7, r1
 8007c7c:	4616      	mov	r6, r2
 8007c7e:	461c      	mov	r4, r3
 8007c80:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c82:	b1b1      	cbz	r1, 8007cb2 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c84:	2c02      	cmp	r4, #2
 8007c86:	d120      	bne.n	8007cca <xQueueGenericSendFromISR+0x56>
 8007c88:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d01d      	beq.n	8007cca <xQueueGenericSendFromISR+0x56>
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	e7fe      	b.n	8007c9e <xQueueGenericSendFromISR+0x2a>
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007cb0:	e7fe      	b.n	8007cb0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0e5      	beq.n	8007c84 <xQueueGenericSendFromISR+0x10>
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cca:	f001 fb3f 	bl	800934c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007cce:	f3ef 8911 	mrs	r9, BASEPRI
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ce2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8007ce4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d306      	bcc.n	8007cf8 <xQueueGenericSendFromISR+0x84>
 8007cea:	2c02      	cmp	r4, #2
 8007cec:	d004      	beq.n	8007cf8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8007cee:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cf0:	f389 8811 	msr	BASEPRI, r9
}
 8007cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cf8:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8007cfc:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d00:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d02:	4622      	mov	r2, r4
 8007d04:	4639      	mov	r1, r7
 8007d06:	4628      	mov	r0, r5
 8007d08:	f7ff fdae 	bl	8007868 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007d0c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007d10:	d006      	beq.n	8007d20 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d12:	f108 0301 	add.w	r3, r8, #1
 8007d16:	b25b      	sxtb	r3, r3
 8007d18:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	e7e7      	b.n	8007cf0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d22:	b90b      	cbnz	r3, 8007d28 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8007d24:	2001      	movs	r0, #1
 8007d26:	e7e3      	b.n	8007cf0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d28:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007d2c:	f000 feea 	bl	8008b04 <xTaskRemoveFromEventList>
 8007d30:	b118      	cbz	r0, 8007d3a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8007d32:	b126      	cbz	r6, 8007d3e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d34:	2001      	movs	r0, #1
 8007d36:	6030      	str	r0, [r6, #0]
 8007d38:	e7da      	b.n	8007cf0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	e7d8      	b.n	8007cf0 <xQueueGenericSendFromISR+0x7c>
 8007d3e:	2001      	movs	r0, #1
 8007d40:	e7d6      	b.n	8007cf0 <xQueueGenericSendFromISR+0x7c>

08007d42 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8007d42:	b168      	cbz	r0, 8007d60 <xQueueGiveFromISR+0x1e>
{
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	460c      	mov	r4, r1
 8007d48:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007d4c:	b18b      	cbz	r3, 8007d72 <xQueueGiveFromISR+0x30>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	e7fe      	b.n	8007d5e <xQueueGiveFromISR+0x1c>
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007d70:	e7fe      	b.n	8007d70 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007d72:	6803      	ldr	r3, [r0, #0]
 8007d74:	b1eb      	cbz	r3, 8007db2 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d76:	f001 fae9 	bl	800934c <vPortValidateInterruptPriority>
	__asm volatile
 8007d7a:	f3ef 8611 	mrs	r6, BASEPRI
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d8e:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007d90:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d926      	bls.n	8007de4 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d96:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8007d9a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d9c:	3201      	adds	r2, #1
 8007d9e:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d011      	beq.n	8007dca <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007da6:	3301      	adds	r3, #1
 8007da8:	b25b      	sxtb	r3, r3
 8007daa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8007dae:	2001      	movs	r0, #1
 8007db0:	e019      	b.n	8007de6 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007db2:	6883      	ldr	r3, [r0, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0de      	beq.n	8007d76 <xQueueGiveFromISR+0x34>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007dcc:	b90b      	cbnz	r3, 8007dd2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8007dce:	2001      	movs	r0, #1
 8007dd0:	e009      	b.n	8007de6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dd2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007dd6:	f000 fe95 	bl	8008b04 <xTaskRemoveFromEventList>
 8007dda:	b138      	cbz	r0, 8007dec <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8007ddc:	b144      	cbz	r4, 8007df0 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dde:	2001      	movs	r0, #1
 8007de0:	6020      	str	r0, [r4, #0]
 8007de2:	e000      	b.n	8007de6 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 8007de4:	2000      	movs	r0, #0
	__asm volatile
 8007de6:	f386 8811 	msr	BASEPRI, r6
}
 8007dea:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8007dec:	2001      	movs	r0, #1
 8007dee:	e7fa      	b.n	8007de6 <xQueueGiveFromISR+0xa4>
 8007df0:	2001      	movs	r0, #1
 8007df2:	e7f8      	b.n	8007de6 <xQueueGiveFromISR+0xa4>

08007df4 <xQueueReceive>:
{
 8007df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df6:	b085      	sub	sp, #20
 8007df8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007dfa:	b190      	cbz	r0, 8007e22 <xQueueReceive+0x2e>
 8007dfc:	460f      	mov	r7, r1
 8007dfe:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e00:	b1c1      	cbz	r1, 8007e34 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e02:	f000 ff15 	bl	8008c30 <xTaskGetSchedulerState>
 8007e06:	4606      	mov	r6, r0
 8007e08:	bb00      	cbnz	r0, 8007e4c <xQueueReceive+0x58>
 8007e0a:	9b01      	ldr	r3, [sp, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d05e      	beq.n	8007ece <xQueueReceive+0xda>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	e7fe      	b.n	8007e20 <xQueueReceive+0x2c>
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8007e32:	e7fe      	b.n	8007e32 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e34:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0e3      	beq.n	8007e02 <xQueueReceive+0xe>
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	e7fe      	b.n	8007e4a <xQueueReceive+0x56>
 8007e4c:	2600      	movs	r6, #0
 8007e4e:	e03e      	b.n	8007ece <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e50:	4639      	mov	r1, r7
 8007e52:	4620      	mov	r0, r4
 8007e54:	f7ff fd43 	bl	80078de <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e58:	3d01      	subs	r5, #1
 8007e5a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	b923      	cbnz	r3, 8007e6a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8007e60:	f001 f972 	bl	8009148 <vPortExitCritical>
				return pdPASS;
 8007e64:	2001      	movs	r0, #1
}
 8007e66:	b005      	add	sp, #20
 8007e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e6a:	f104 0010 	add.w	r0, r4, #16
 8007e6e:	f000 fe49 	bl	8008b04 <xTaskRemoveFromEventList>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d0f4      	beq.n	8007e60 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8007e76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	e7e9      	b.n	8007e60 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8007e8c:	f001 f95c 	bl	8009148 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007e90:	2000      	movs	r0, #0
 8007e92:	e7e8      	b.n	8007e66 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e94:	a802      	add	r0, sp, #8
 8007e96:	f000 fe77 	bl	8008b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e9a:	2601      	movs	r6, #1
 8007e9c:	e021      	b.n	8007ee2 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007ea4:	e029      	b.n	8007efa <xQueueReceive+0x106>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eac:	e02b      	b.n	8007f06 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f7ff fd27 	bl	8007902 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eb4:	f000 fc9c 	bl	80087f0 <xTaskResumeAll>
 8007eb8:	e009      	b.n	8007ece <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f7ff fd21 	bl	8007902 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ec0:	f000 fc96 	bl	80087f0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f7ff fcc2 	bl	800784e <prvIsQueueEmpty>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d13f      	bne.n	8007f4e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8007ece:	f001 f919 	bl	8009104 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ed2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ed4:	2d00      	cmp	r5, #0
 8007ed6:	d1bb      	bne.n	8007e50 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ed8:	9b01      	ldr	r3, [sp, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0d6      	beq.n	8007e8c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8007ede:	2e00      	cmp	r6, #0
 8007ee0:	d0d8      	beq.n	8007e94 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8007ee2:	f001 f931 	bl	8009148 <vPortExitCritical>
		vTaskSuspendAll();
 8007ee6:	f000 fbdd 	bl	80086a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eea:	f001 f90b 	bl	8009104 <vPortEnterCritical>
 8007eee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007ef2:	b25b      	sxtb	r3, r3
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d0d1      	beq.n	8007e9e <xQueueReceive+0xaa>
 8007efa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007efe:	b25b      	sxtb	r3, r3
 8007f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f04:	d0cf      	beq.n	8007ea6 <xQueueReceive+0xb2>
 8007f06:	f001 f91f 	bl	8009148 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f0a:	a901      	add	r1, sp, #4
 8007f0c:	a802      	add	r0, sp, #8
 8007f0e:	f000 fe45 	bl	8008b9c <xTaskCheckForTimeOut>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d1d1      	bne.n	8007eba <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f16:	4620      	mov	r0, r4
 8007f18:	f7ff fc99 	bl	800784e <prvIsQueueEmpty>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d0c6      	beq.n	8007eae <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f20:	9901      	ldr	r1, [sp, #4]
 8007f22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f26:	f000 fdd3 	bl	8008ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f7ff fce9 	bl	8007902 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f30:	f000 fc5e 	bl	80087f0 <xTaskResumeAll>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d1ca      	bne.n	8007ece <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8007f38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f40:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	e7bf      	b.n	8007ece <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8007f4e:	2000      	movs	r0, #0
 8007f50:	e789      	b.n	8007e66 <xQueueReceive+0x72>

08007f52 <xQueueSemaphoreTake>:
{
 8007f52:	b570      	push	{r4, r5, r6, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007f58:	b158      	cbz	r0, 8007f72 <xQueueSemaphoreTake+0x20>
 8007f5a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007f5e:	b18b      	cbz	r3, 8007f84 <xQueueSemaphoreTake+0x32>
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	e7fe      	b.n	8007f70 <xQueueSemaphoreTake+0x1e>
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8007f82:	e7fe      	b.n	8007f82 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f84:	f000 fe54 	bl	8008c30 <xTaskGetSchedulerState>
 8007f88:	4605      	mov	r5, r0
 8007f8a:	b950      	cbnz	r0, 8007fa2 <xQueueSemaphoreTake+0x50>
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	b15b      	cbz	r3, 8007fa8 <xQueueSemaphoreTake+0x56>
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	e7fe      	b.n	8007fa0 <xQueueSemaphoreTake+0x4e>
 8007fa2:	2600      	movs	r6, #0
 8007fa4:	4635      	mov	r5, r6
 8007fa6:	e055      	b.n	8008054 <xQueueSemaphoreTake+0x102>
 8007fa8:	4606      	mov	r6, r0
 8007faa:	e053      	b.n	8008054 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007fac:	3b01      	subs	r3, #1
 8007fae:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	b13b      	cbz	r3, 8007fc4 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	b94b      	cbnz	r3, 8007fcc <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8007fb8:	f001 f8c6 	bl	8009148 <vPortExitCritical>
				return pdPASS;
 8007fbc:	2601      	movs	r6, #1
}
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	b004      	add	sp, #16
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007fc4:	f000 ff5a 	bl	8008e7c <pvTaskIncrementMutexHeldCount>
 8007fc8:	60a0      	str	r0, [r4, #8]
 8007fca:	e7f3      	b.n	8007fb4 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fcc:	f104 0010 	add.w	r0, r4, #16
 8007fd0:	f000 fd98 	bl	8008b04 <xTaskRemoveFromEventList>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d0ef      	beq.n	8007fb8 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8007fd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	e7e4      	b.n	8007fb8 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007fee:	b146      	cbz	r6, 8008002 <xQueueSemaphoreTake+0xb0>
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	e7fe      	b.n	8008000 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8008002:	f001 f8a1 	bl	8009148 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008006:	e7da      	b.n	8007fbe <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008008:	a802      	add	r0, sp, #8
 800800a:	f000 fdbd 	bl	8008b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800800e:	2501      	movs	r5, #1
 8008010:	e02a      	b.n	8008068 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8008012:	2300      	movs	r3, #0
 8008014:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008018:	e032      	b.n	8008080 <xQueueSemaphoreTake+0x12e>
 800801a:	2300      	movs	r3, #0
 800801c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008020:	e034      	b.n	800808c <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8008022:	f001 f86f 	bl	8009104 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008026:	68a0      	ldr	r0, [r4, #8]
 8008028:	f000 fe12 	bl	8008c50 <xTaskPriorityInherit>
 800802c:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800802e:	f001 f88b 	bl	8009148 <vPortExitCritical>
 8008032:	e03b      	b.n	80080ac <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 8008034:	4620      	mov	r0, r4
 8008036:	f7ff fc64 	bl	8007902 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800803a:	f000 fbd9 	bl	80087f0 <xTaskResumeAll>
 800803e:	e009      	b.n	8008054 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8008040:	4620      	mov	r0, r4
 8008042:	f7ff fc5e 	bl	8007902 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008046:	f000 fbd3 	bl	80087f0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800804a:	4620      	mov	r0, r4
 800804c:	f7ff fbff 	bl	800784e <prvIsQueueEmpty>
 8008050:	2800      	cmp	r0, #0
 8008052:	d142      	bne.n	80080da <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 8008054:	f001 f856 	bl	8009104 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1a6      	bne.n	8007fac <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0c4      	beq.n	8007fee <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8008064:	2d00      	cmp	r5, #0
 8008066:	d0cf      	beq.n	8008008 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8008068:	f001 f86e 	bl	8009148 <vPortExitCritical>
		vTaskSuspendAll();
 800806c:	f000 fb1a 	bl	80086a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008070:	f001 f848 	bl	8009104 <vPortEnterCritical>
 8008074:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008078:	b25b      	sxtb	r3, r3
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807e:	d0c8      	beq.n	8008012 <xQueueSemaphoreTake+0xc0>
 8008080:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008084:	b25b      	sxtb	r3, r3
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808a:	d0c6      	beq.n	800801a <xQueueSemaphoreTake+0xc8>
 800808c:	f001 f85c 	bl	8009148 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008090:	a901      	add	r1, sp, #4
 8008092:	a802      	add	r0, sp, #8
 8008094:	f000 fd82 	bl	8008b9c <xTaskCheckForTimeOut>
 8008098:	2800      	cmp	r0, #0
 800809a:	d1d1      	bne.n	8008040 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800809c:	4620      	mov	r0, r4
 800809e:	f7ff fbd6 	bl	800784e <prvIsQueueEmpty>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0c6      	beq.n	8008034 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0ba      	beq.n	8008022 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080ac:	9901      	ldr	r1, [sp, #4]
 80080ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080b2:	f000 fd0d 	bl	8008ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff fc23 	bl	8007902 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080bc:	f000 fb98 	bl	80087f0 <xTaskResumeAll>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d1c7      	bne.n	8008054 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 80080c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80080c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	e7bc      	b.n	8008054 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 80080da:	b90e      	cbnz	r6, 80080e0 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 80080dc:	2600      	movs	r6, #0
 80080de:	e76e      	b.n	8007fbe <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 80080e0:	f001 f810 	bl	8009104 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80080e4:	4620      	mov	r0, r4
 80080e6:	f7ff fb9b 	bl	8007820 <prvGetDisinheritPriorityAfterTimeout>
 80080ea:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80080ec:	68a0      	ldr	r0, [r4, #8]
 80080ee:	f000 fe67 	bl	8008dc0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80080f2:	f001 f829 	bl	8009148 <vPortExitCritical>
 80080f6:	e7f1      	b.n	80080dc <xQueueSemaphoreTake+0x18a>

080080f8 <xQueueReceiveFromISR>:
{
 80080f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80080fc:	b1b0      	cbz	r0, 800812c <xQueueReceiveFromISR+0x34>
 80080fe:	460d      	mov	r5, r1
 8008100:	4616      	mov	r6, r2
 8008102:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008104:	b1d9      	cbz	r1, 800813e <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008106:	f001 f921 	bl	800934c <vPortValidateInterruptPriority>
	__asm volatile
 800810a:	f3ef 8811 	mrs	r8, BASEPRI
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800811e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008120:	b9cf      	cbnz	r7, 8008156 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8008122:	2000      	movs	r0, #0
	__asm volatile
 8008124:	f388 8811 	msr	BASEPRI, r8
}
 8008128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800813c:	e7fe      	b.n	800813c <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800813e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0e0      	beq.n	8008106 <xQueueReceiveFromISR+0xe>
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	e7fe      	b.n	8008154 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008156:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800815a:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800815e:	4629      	mov	r1, r5
 8008160:	4620      	mov	r0, r4
 8008162:	f7ff fbbc 	bl	80078de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008166:	3f01      	subs	r7, #1
 8008168:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800816a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800816e:	d006      	beq.n	800817e <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008170:	f109 0301 	add.w	r3, r9, #1
 8008174:	b25b      	sxtb	r3, r3
 8008176:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800817a:	2001      	movs	r0, #1
 800817c:	e7d2      	b.n	8008124 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	b90b      	cbnz	r3, 8008186 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8008182:	2001      	movs	r0, #1
 8008184:	e7ce      	b.n	8008124 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008186:	f104 0010 	add.w	r0, r4, #16
 800818a:	f000 fcbb 	bl	8008b04 <xTaskRemoveFromEventList>
 800818e:	b118      	cbz	r0, 8008198 <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 8008190:	b126      	cbz	r6, 800819c <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008192:	2001      	movs	r0, #1
 8008194:	6030      	str	r0, [r6, #0]
 8008196:	e7c5      	b.n	8008124 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8008198:	2001      	movs	r0, #1
 800819a:	e7c3      	b.n	8008124 <xQueueReceiveFromISR+0x2c>
 800819c:	2001      	movs	r0, #1
 800819e:	e7c1      	b.n	8008124 <xQueueReceiveFromISR+0x2c>

080081a0 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80081a0:	b140      	cbz	r0, 80081b4 <uxQueueMessagesWaiting+0x14>
{
 80081a2:	b510      	push	{r4, lr}
 80081a4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80081a6:	f000 ffad 	bl	8009104 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80081aa:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80081ac:	f000 ffcc 	bl	8009148 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80081b0:	4620      	mov	r0, r4
 80081b2:	bd10      	pop	{r4, pc}
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80081c4:	e7fe      	b.n	80081c4 <uxQueueMessagesWaiting+0x24>
	...

080081c8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081c8:	2300      	movs	r3, #0
 80081ca:	2b07      	cmp	r3, #7
 80081cc:	d80f      	bhi.n	80081ee <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80081ce:	4a08      	ldr	r2, [pc, #32]	; (80081f0 <vQueueUnregisterQueue+0x28>)
 80081d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80081d4:	6852      	ldr	r2, [r2, #4]
 80081d6:	4282      	cmp	r2, r0
 80081d8:	d001      	beq.n	80081de <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081da:	3301      	adds	r3, #1
 80081dc:	e7f5      	b.n	80081ca <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80081de:	4a04      	ldr	r2, [pc, #16]	; (80081f0 <vQueueUnregisterQueue+0x28>)
 80081e0:	2100      	movs	r1, #0
 80081e2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80081e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081ea:	6059      	str	r1, [r3, #4]
				break;
 80081ec:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80081ee:	4770      	bx	lr
 80081f0:	2000024c 	.word	0x2000024c

080081f4 <vQueueDelete>:
	configASSERT( pxQueue );
 80081f4:	b138      	cbz	r0, 8008206 <vQueueDelete+0x12>
{
 80081f6:	b510      	push	{r4, lr}
 80081f8:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 80081fa:	f7ff ffe5 	bl	80081c8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80081fe:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008202:	b14b      	cbz	r3, 8008218 <vQueueDelete+0x24>
}
 8008204:	bd10      	pop	{r4, pc}
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008216:	e7fe      	b.n	8008216 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8008218:	4620      	mov	r0, r4
 800821a:	f001 f98b 	bl	8009534 <vPortFree>
}
 800821e:	e7f1      	b.n	8008204 <vQueueDelete+0x10>

08008220 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <prvResetNextTaskUnblockTime+0x20>)
 8008222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	b923      	cbnz	r3, 8008232 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008228:	4b05      	ldr	r3, [pc, #20]	; (8008240 <prvResetNextTaskUnblockTime+0x20>)
 800822a:	f04f 32ff 	mov.w	r2, #4294967295
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008230:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008232:	4b03      	ldr	r3, [pc, #12]	; (8008240 <prvResetNextTaskUnblockTime+0x20>)
 8008234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008236:	68d2      	ldr	r2, [r2, #12]
 8008238:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800823a:	6852      	ldr	r2, [r2, #4]
 800823c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800823e:	4770      	bx	lr
 8008240:	2000028c 	.word	0x2000028c

08008244 <prvInitialiseNewTask>:
{
 8008244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008248:	4607      	mov	r7, r0
 800824a:	4698      	mov	r8, r3
 800824c:	9d08      	ldr	r5, [sp, #32]
 800824e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008252:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008254:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8008256:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800825a:	3a01      	subs	r2, #1
 800825c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008260:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8008264:	2900      	cmp	r1, #0
 8008266:	d048      	beq.n	80082fa <prvInitialiseNewTask+0xb6>
 8008268:	468e      	mov	lr, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800826a:	f04f 0c00 	mov.w	ip, #0
 800826e:	f1bc 0f0f 	cmp.w	ip, #15
 8008272:	d80b      	bhi.n	800828c <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008274:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8008278:	eb04 030c 	add.w	r3, r4, ip
 800827c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8008280:	f81e 300c 	ldrb.w	r3, [lr, ip]
 8008284:	b113      	cbz	r3, 800828c <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008286:	f10c 0c01 	add.w	ip, ip, #1
 800828a:	e7f0      	b.n	800826e <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800828c:	2300      	movs	r3, #0
 800828e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008292:	2d06      	cmp	r5, #6
 8008294:	d900      	bls.n	8008298 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008296:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8008298:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800829a:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800829c:	f04f 0a00 	mov.w	sl, #0
 80082a0:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082a4:	1d20      	adds	r0, r4, #4
 80082a6:	f7ff fa81 	bl	80077ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082aa:	f104 0018 	add.w	r0, r4, #24
 80082ae:	f7ff fa7d 	bl	80077ac <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082b2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b4:	f1c5 0507 	rsb	r5, r5, #7
 80082b8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082ba:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 80082bc:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 80082c0:	f8c4 a0b0 	str.w	sl, [r4, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082c4:	f884 a0b4 	strb.w	sl, [r4, #180]	; 0xb4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80082c8:	2260      	movs	r2, #96	; 0x60
 80082ca:	4651      	mov	r1, sl
 80082cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082d0:	f003 f9b7 	bl	800b642 <memset>
 80082d4:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <prvInitialiseNewTask+0xc0>)
 80082d6:	6563      	str	r3, [r4, #84]	; 0x54
 80082d8:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <prvInitialiseNewTask+0xc4>)
 80082da:	65a3      	str	r3, [r4, #88]	; 0x58
 80082dc:	4b0b      	ldr	r3, [pc, #44]	; (800830c <prvInitialiseNewTask+0xc8>)
 80082de:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082e0:	4642      	mov	r2, r8
 80082e2:	4639      	mov	r1, r7
 80082e4:	4630      	mov	r0, r6
 80082e6:	f000 fee5 	bl	80090b4 <pxPortInitialiseStack>
 80082ea:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80082ec:	f1b9 0f00 	cmp.w	r9, #0
 80082f0:	d001      	beq.n	80082f6 <prvInitialiseNewTask+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082f2:	f8c9 4000 	str.w	r4, [r9]
}
 80082f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082fa:	2300      	movs	r3, #0
 80082fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008300:	e7c7      	b.n	8008292 <prvInitialiseNewTask+0x4e>
 8008302:	bf00      	nop
 8008304:	0800fcc8 	.word	0x0800fcc8
 8008308:	0800fce8 	.word	0x0800fce8
 800830c:	0800fca8 	.word	0x0800fca8

08008310 <prvInitialiseTaskLists>:
{
 8008310:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008312:	2400      	movs	r4, #0
 8008314:	e007      	b.n	8008326 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008316:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800831a:	0093      	lsls	r3, r2, #2
 800831c:	4810      	ldr	r0, [pc, #64]	; (8008360 <prvInitialiseTaskLists+0x50>)
 800831e:	4418      	add	r0, r3
 8008320:	f7ff fa39 	bl	8007796 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008324:	3401      	adds	r4, #1
 8008326:	2c06      	cmp	r4, #6
 8008328:	d9f5      	bls.n	8008316 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800832a:	4c0e      	ldr	r4, [pc, #56]	; (8008364 <prvInitialiseTaskLists+0x54>)
 800832c:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 8008330:	4630      	mov	r0, r6
 8008332:	f7ff fa30 	bl	8007796 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008336:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 800833a:	4628      	mov	r0, r5
 800833c:	f7ff fa2b 	bl	8007796 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008340:	f104 0014 	add.w	r0, r4, #20
 8008344:	f7ff fa27 	bl	8007796 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008348:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 800834c:	f7ff fa23 	bl	8007796 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008350:	4620      	mov	r0, r4
 8008352:	f7ff fa20 	bl	8007796 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008356:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008358:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
 800835c:	bd70      	pop	{r4, r5, r6, pc}
 800835e:	bf00      	nop
 8008360:	200002bc 	.word	0x200002bc
 8008364:	2000028c 	.word	0x2000028c

08008368 <prvAddNewTaskToReadyList>:
{
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800836c:	f000 feca 	bl	8009104 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008370:	4b27      	ldr	r3, [pc, #156]	; (8008410 <prvAddNewTaskToReadyList+0xa8>)
 8008372:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8008376:	3201      	adds	r2, #1
 8008378:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 800837c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008380:	b173      	cbz	r3, 80083a0 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8008382:	4b23      	ldr	r3, [pc, #140]	; (8008410 <prvAddNewTaskToReadyList+0xa8>)
 8008384:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008388:	b98b      	cbnz	r3, 80083ae <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800838a:	4b21      	ldr	r3, [pc, #132]	; (8008410 <prvAddNewTaskToReadyList+0xa8>)
 800838c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008392:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008394:	429a      	cmp	r2, r3
 8008396:	d80a      	bhi.n	80083ae <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8008398:	4b1d      	ldr	r3, [pc, #116]	; (8008410 <prvAddNewTaskToReadyList+0xa8>)
 800839a:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 800839e:	e006      	b.n	80083ae <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 80083a0:	4b1b      	ldr	r3, [pc, #108]	; (8008410 <prvAddNewTaskToReadyList+0xa8>)
 80083a2:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80083a6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d02c      	beq.n	8008408 <prvAddNewTaskToReadyList+0xa0>
		uxTaskNumber++;
 80083ae:	4c18      	ldr	r4, [pc, #96]	; (8008410 <prvAddNewTaskToReadyList+0xa8>)
 80083b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80083b4:	3301      	adds	r3, #1
 80083b6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 80083ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80083bc:	2201      	movs	r2, #1
 80083be:	409a      	lsls	r2, r3
 80083c0:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 80083c4:	430a      	orrs	r2, r1
 80083c6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 80083ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80083ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80083d2:	1d29      	adds	r1, r5, #4
 80083d4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80083d8:	f7ff f9eb 	bl	80077b2 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80083dc:	f000 feb4 	bl	8009148 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80083e0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80083e4:	b17b      	cbz	r3, 8008406 <prvAddNewTaskToReadyList+0x9e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083e6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80083ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d209      	bcs.n	8008406 <prvAddNewTaskToReadyList+0x9e>
			taskYIELD_IF_USING_PREEMPTION();
 80083f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80083f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	f3bf 8f6f 	isb	sy
}
 8008406:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8008408:	f7ff ff82 	bl	8008310 <prvInitialiseTaskLists>
 800840c:	e7cf      	b.n	80083ae <prvAddNewTaskToReadyList+0x46>
 800840e:	bf00      	nop
 8008410:	2000028c 	.word	0x2000028c

08008414 <prvDeleteTCB>:
	{
 8008414:	b510      	push	{r4, lr}
 8008416:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008418:	3050      	adds	r0, #80	; 0x50
 800841a:	f003 fe27 	bl	800c06c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800841e:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8008422:	b163      	cbz	r3, 800843e <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008424:	2b01      	cmp	r3, #1
 8008426:	d011      	beq.n	800844c <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008428:	2b02      	cmp	r3, #2
 800842a:	d00e      	beq.n	800844a <prvDeleteTCB+0x36>
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	e7fe      	b.n	800843c <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800843e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008440:	f001 f878 	bl	8009534 <vPortFree>
				vPortFree( pxTCB );
 8008444:	4620      	mov	r0, r4
 8008446:	f001 f875 	bl	8009534 <vPortFree>
	}
 800844a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800844c:	4620      	mov	r0, r4
 800844e:	f001 f871 	bl	8009534 <vPortFree>
 8008452:	e7fa      	b.n	800844a <prvDeleteTCB+0x36>

08008454 <prvCheckTasksWaitingTermination>:
{
 8008454:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008456:	e017      	b.n	8008488 <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8008458:	f000 fe54 	bl	8009104 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800845c:	4c0d      	ldr	r4, [pc, #52]	; (8008494 <prvCheckTasksWaitingTermination+0x40>)
 800845e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8008462:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008464:	1d28      	adds	r0, r5, #4
 8008466:	f7ff f9c8 	bl	80077fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800846a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800846e:	3b01      	subs	r3, #1
 8008470:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				--uxDeletedTasksWaitingCleanUp;
 8008474:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8008478:	3b01      	subs	r3, #1
 800847a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
			taskEXIT_CRITICAL();
 800847e:	f000 fe63 	bl	8009148 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008482:	4628      	mov	r0, r5
 8008484:	f7ff ffc6 	bl	8008414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <prvCheckTasksWaitingTermination+0x40>)
 800848a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e2      	bne.n	8008458 <prvCheckTasksWaitingTermination+0x4>
}
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	2000028c 	.word	0x2000028c

08008498 <prvIdleTask>:
{
 8008498:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800849a:	f7ff ffdb 	bl	8008454 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800849e:	4b07      	ldr	r3, [pc, #28]	; (80084bc <prvIdleTask+0x24>)
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d9f9      	bls.n	800849a <prvIdleTask+0x2>
				taskYIELD();
 80084a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	e7ee      	b.n	800849a <prvIdleTask+0x2>
 80084bc:	2000028c 	.word	0x2000028c

080084c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	4604      	mov	r4, r0
 80084c4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084c6:	4b1f      	ldr	r3, [pc, #124]	; (8008544 <prvAddCurrentTaskToDelayedList+0x84>)
 80084c8:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084cc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 80084d0:	3004      	adds	r0, #4
 80084d2:	f7ff f992 	bl	80077fa <uxListRemove>
 80084d6:	b960      	cbnz	r0, 80084f2 <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80084d8:	4b1a      	ldr	r3, [pc, #104]	; (8008544 <prvAddCurrentTaskToDelayedList+0x84>)
 80084da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80084de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80084e0:	2201      	movs	r2, #1
 80084e2:	fa02 f101 	lsl.w	r1, r2, r1
 80084e6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80084ea:	ea22 0201 	bic.w	r2, r2, r1
 80084ee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084f2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80084f6:	d00f      	beq.n	8008518 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084f8:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084fa:	4b12      	ldr	r3, [pc, #72]	; (8008544 <prvAddCurrentTaskToDelayedList+0x84>)
 80084fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008500:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008502:	42a6      	cmp	r6, r4
 8008504:	d911      	bls.n	800852a <prvAddCurrentTaskToDelayedList+0x6a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008506:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <prvAddCurrentTaskToDelayedList+0x84>)
 8008508:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800850c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8008510:	3104      	adds	r1, #4
 8008512:	f7ff f959 	bl	80077c8 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008516:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008518:	2d00      	cmp	r5, #0
 800851a:	d0ed      	beq.n	80084f8 <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800851c:	4809      	ldr	r0, [pc, #36]	; (8008544 <prvAddCurrentTaskToDelayedList+0x84>)
 800851e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008522:	3104      	adds	r1, #4
 8008524:	f7ff f945 	bl	80077b2 <vListInsertEnd>
 8008528:	e7f5      	b.n	8008516 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800852a:	4d06      	ldr	r5, [pc, #24]	; (8008544 <prvAddCurrentTaskToDelayedList+0x84>)
 800852c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800852e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8008532:	3104      	adds	r1, #4
 8008534:	f7ff f948 	bl	80077c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008538:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800853a:	42a3      	cmp	r3, r4
 800853c:	d9eb      	bls.n	8008516 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800853e:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8008540:	e7e9      	b.n	8008516 <prvAddCurrentTaskToDelayedList+0x56>
 8008542:	bf00      	nop
 8008544:	2000028c 	.word	0x2000028c

08008548 <xTaskCreateStatic>:
	{
 8008548:	b530      	push	{r4, r5, lr}
 800854a:	b087      	sub	sp, #28
 800854c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800854e:	b17c      	cbz	r4, 8008570 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008550:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008552:	b1b5      	cbz	r5, 8008582 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008554:	25b8      	movs	r5, #184	; 0xb8
 8008556:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008558:	9d04      	ldr	r5, [sp, #16]
 800855a:	2db8      	cmp	r5, #184	; 0xb8
 800855c:	d01a      	beq.n	8008594 <xTaskCreateStatic+0x4c>
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	e7fe      	b.n	800856e <xTaskCreateStatic+0x26>
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8008580:	e7fe      	b.n	8008580 <xTaskCreateStatic+0x38>
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8008592:	e7fe      	b.n	8008592 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008594:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008598:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800859a:	2402      	movs	r4, #2
 800859c:	f885 40b5 	strb.w	r4, [r5, #181]	; 0xb5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085a0:	2400      	movs	r4, #0
 80085a2:	9403      	str	r4, [sp, #12]
 80085a4:	9502      	str	r5, [sp, #8]
 80085a6:	ac05      	add	r4, sp, #20
 80085a8:	9401      	str	r4, [sp, #4]
 80085aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085ac:	9400      	str	r4, [sp, #0]
 80085ae:	f7ff fe49 	bl	8008244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80085b4:	f7ff fed8 	bl	8008368 <prvAddNewTaskToReadyList>
	}
 80085b8:	9805      	ldr	r0, [sp, #20]
 80085ba:	b007      	add	sp, #28
 80085bc:	bd30      	pop	{r4, r5, pc}

080085be <xTaskCreate>:
	{
 80085be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085c2:	b085      	sub	sp, #20
 80085c4:	4607      	mov	r7, r0
 80085c6:	4688      	mov	r8, r1
 80085c8:	4614      	mov	r4, r2
 80085ca:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085cc:	0090      	lsls	r0, r2, #2
 80085ce:	f000 ff3f 	bl	8009450 <pvPortMalloc>
			if( pxStack != NULL )
 80085d2:	b300      	cbz	r0, 8008616 <xTaskCreate+0x58>
 80085d4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80085d6:	20b8      	movs	r0, #184	; 0xb8
 80085d8:	f000 ff3a 	bl	8009450 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80085dc:	4605      	mov	r5, r0
 80085de:	b1b0      	cbz	r0, 800860e <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80085e0:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80085e4:	b1e5      	cbz	r5, 8008620 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085e6:	2300      	movs	r3, #0
 80085e8:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085ec:	9303      	str	r3, [sp, #12]
 80085ee:	9502      	str	r5, [sp, #8]
 80085f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085f2:	9301      	str	r3, [sp, #4]
 80085f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	4633      	mov	r3, r6
 80085fa:	4622      	mov	r2, r4
 80085fc:	4641      	mov	r1, r8
 80085fe:	4638      	mov	r0, r7
 8008600:	f7ff fe20 	bl	8008244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008604:	4628      	mov	r0, r5
 8008606:	f7ff feaf 	bl	8008368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800860a:	2001      	movs	r0, #1
 800860c:	e005      	b.n	800861a <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800860e:	4648      	mov	r0, r9
 8008610:	f000 ff90 	bl	8009534 <vPortFree>
 8008614:	e7e6      	b.n	80085e4 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008616:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800861a:	b005      	add	sp, #20
 800861c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008624:	e7f9      	b.n	800861a <xTaskCreate+0x5c>
	...

08008628 <vTaskStartScheduler>:
{
 8008628:	b510      	push	{r4, lr}
 800862a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800862c:	2400      	movs	r4, #0
 800862e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008630:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008632:	aa07      	add	r2, sp, #28
 8008634:	a906      	add	r1, sp, #24
 8008636:	a805      	add	r0, sp, #20
 8008638:	f001 faec 	bl	8009c14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800863c:	9b05      	ldr	r3, [sp, #20]
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	9b06      	ldr	r3, [sp, #24]
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	9400      	str	r4, [sp, #0]
 8008646:	4623      	mov	r3, r4
 8008648:	9a07      	ldr	r2, [sp, #28]
 800864a:	4912      	ldr	r1, [pc, #72]	; (8008694 <vTaskStartScheduler+0x6c>)
 800864c:	4812      	ldr	r0, [pc, #72]	; (8008698 <vTaskStartScheduler+0x70>)
 800864e:	f7ff ff7b 	bl	8008548 <xTaskCreateStatic>
 8008652:	4b12      	ldr	r3, [pc, #72]	; (800869c <vTaskStartScheduler+0x74>)
 8008654:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
		if( xIdleTaskHandle != NULL )
 8008658:	b1c8      	cbz	r0, 800868e <vTaskStartScheduler+0x66>
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800866a:	4b0c      	ldr	r3, [pc, #48]	; (800869c <vTaskStartScheduler+0x74>)
 800866c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008670:	3250      	adds	r2, #80	; 0x50
 8008672:	490b      	ldr	r1, [pc, #44]	; (80086a0 <vTaskStartScheduler+0x78>)
 8008674:	600a      	str	r2, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 800867c:	2201      	movs	r2, #1
 800867e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008682:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008686:	f001 fac2 	bl	8009c0e <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800868a:	f000 fdd5 	bl	8009238 <xPortStartScheduler>
}
 800868e:	b008      	add	sp, #32
 8008690:	bd10      	pop	{r4, pc}
 8008692:	bf00      	nop
 8008694:	0800fb10 	.word	0x0800fb10
 8008698:	08008499 	.word	0x08008499
 800869c:	2000028c 	.word	0x2000028c
 80086a0:	20000024 	.word	0x20000024

080086a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80086a4:	4a03      	ldr	r2, [pc, #12]	; (80086b4 <vTaskSuspendAll+0x10>)
 80086a6:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 80086aa:	3301      	adds	r3, #1
 80086ac:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	2000028c 	.word	0x2000028c

080086b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80086b8:	4b01      	ldr	r3, [pc, #4]	; (80086c0 <xTaskGetTickCount+0x8>)
 80086ba:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 80086be:	4770      	bx	lr
 80086c0:	2000028c 	.word	0x2000028c

080086c4 <xTaskGetTickCountFromISR>:
{
 80086c4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086c6:	f000 fe41 	bl	800934c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80086ca:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <xTaskGetTickCountFromISR+0x10>)
 80086cc:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 80086d0:	bd08      	pop	{r3, pc}
 80086d2:	bf00      	nop
 80086d4:	2000028c 	.word	0x2000028c

080086d8 <xTaskIncrementTick>:
{
 80086d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086dc:	4b43      	ldr	r3, [pc, #268]	; (80087ec <xTaskIncrementTick+0x114>)
 80086de:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d176      	bne.n	80087d4 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086e6:	4b41      	ldr	r3, [pc, #260]	; (80087ec <xTaskIncrementTick+0x114>)
 80086e8:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
 80086ec:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80086ee:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086f2:	b9ce      	cbnz	r6, 8008728 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	b143      	cbz	r3, 800870c <xTaskIncrementTick+0x34>
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	e7fe      	b.n	800870a <xTaskIncrementTick+0x32>
 800870c:	4b37      	ldr	r3, [pc, #220]	; (80087ec <xTaskIncrementTick+0x114>)
 800870e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008710:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8008714:	6299      	str	r1, [r3, #40]	; 0x28
 8008716:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 800871a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800871e:	3201      	adds	r2, #1
 8008720:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8008724:	f7ff fd7c 	bl	8008220 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008728:	4b30      	ldr	r3, [pc, #192]	; (80087ec <xTaskIncrementTick+0x114>)
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	42b3      	cmp	r3, r6
 800872e:	d946      	bls.n	80087be <xTaskIncrementTick+0xe6>
BaseType_t xSwitchRequired = pdFALSE;
 8008730:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008734:	4a2d      	ldr	r2, [pc, #180]	; (80087ec <xTaskIncrementTick+0x114>)
 8008736:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008740:	0099      	lsls	r1, r3, #2
 8008742:	440a      	add	r2, r1
 8008744:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008746:	2b01      	cmp	r3, #1
 8008748:	d901      	bls.n	800874e <xTaskIncrementTick+0x76>
				xSwitchRequired = pdTRUE;
 800874a:	f04f 0801 	mov.w	r8, #1
			if( xYieldPending != pdFALSE )
 800874e:	4b27      	ldr	r3, [pc, #156]	; (80087ec <xTaskIncrementTick+0x114>)
 8008750:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008754:	2b00      	cmp	r3, #0
 8008756:	d045      	beq.n	80087e4 <xTaskIncrementTick+0x10c>
				xSwitchRequired = pdTRUE;
 8008758:	f04f 0801 	mov.w	r8, #1
	return xSwitchRequired;
 800875c:	e042      	b.n	80087e4 <xTaskIncrementTick+0x10c>
							xSwitchRequired = pdTRUE;
 800875e:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008762:	4b22      	ldr	r3, [pc, #136]	; (80087ec <xTaskIncrementTick+0x114>)
 8008764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	b363      	cbz	r3, 80087c4 <xTaskIncrementTick+0xec>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800876a:	4b20      	ldr	r3, [pc, #128]	; (80087ec <xTaskIncrementTick+0x114>)
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008772:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8008774:	429e      	cmp	r6, r3
 8008776:	d32a      	bcc.n	80087ce <xTaskIncrementTick+0xf6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008778:	1d27      	adds	r7, r4, #4
 800877a:	4638      	mov	r0, r7
 800877c:	f7ff f83d 	bl	80077fa <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008780:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008782:	b11b      	cbz	r3, 800878c <xTaskIncrementTick+0xb4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008784:	f104 0018 	add.w	r0, r4, #24
 8008788:	f7ff f837 	bl	80077fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800878c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800878e:	2201      	movs	r2, #1
 8008790:	409a      	lsls	r2, r3
 8008792:	4d16      	ldr	r5, [pc, #88]	; (80087ec <xTaskIncrementTick+0x114>)
 8008794:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 8008798:	430a      	orrs	r2, r1
 800879a:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 800879e:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80087a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80087a6:	009a      	lsls	r2, r3, #2
 80087a8:	4639      	mov	r1, r7
 80087aa:	4410      	add	r0, r2
 80087ac:	f7ff f801 	bl	80077b2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80087b2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d2d0      	bcs.n	800875e <xTaskIncrementTick+0x86>
 80087bc:	e7d1      	b.n	8008762 <xTaskIncrementTick+0x8a>
BaseType_t xSwitchRequired = pdFALSE;
 80087be:	f04f 0800 	mov.w	r8, #0
 80087c2:	e7ce      	b.n	8008762 <xTaskIncrementTick+0x8a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087c4:	4b09      	ldr	r3, [pc, #36]	; (80087ec <xTaskIncrementTick+0x114>)
 80087c6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ca:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 80087cc:	e7b2      	b.n	8008734 <xTaskIncrementTick+0x5c>
						xNextTaskUnblockTime = xItemValue;
 80087ce:	4a07      	ldr	r2, [pc, #28]	; (80087ec <xTaskIncrementTick+0x114>)
 80087d0:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087d2:	e7af      	b.n	8008734 <xTaskIncrementTick+0x5c>
		++xPendedTicks;
 80087d4:	4a05      	ldr	r2, [pc, #20]	; (80087ec <xTaskIncrementTick+0x114>)
 80087d6:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
 80087da:	3301      	adds	r3, #1
 80087dc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
BaseType_t xSwitchRequired = pdFALSE;
 80087e0:	f04f 0800 	mov.w	r8, #0
}
 80087e4:	4640      	mov	r0, r8
 80087e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ea:	bf00      	nop
 80087ec:	2000028c 	.word	0x2000028c

080087f0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80087f0:	4b3a      	ldr	r3, [pc, #232]	; (80088dc <xTaskResumeAll+0xec>)
 80087f2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80087f6:	b943      	cbnz	r3, 800880a <xTaskResumeAll+0x1a>
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	e7fe      	b.n	8008808 <xTaskResumeAll+0x18>
{
 800880a:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 800880c:	f000 fc7a 	bl	8009104 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008810:	4b32      	ldr	r3, [pc, #200]	; (80088dc <xTaskResumeAll+0xec>)
 8008812:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8008816:	3a01      	subs	r2, #1
 8008818:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800881c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008820:	2b00      	cmp	r3, #0
 8008822:	d156      	bne.n	80088d2 <xTaskResumeAll+0xe2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008824:	4b2d      	ldr	r3, [pc, #180]	; (80088dc <xTaskResumeAll+0xec>)
 8008826:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800882a:	b90b      	cbnz	r3, 8008830 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800882c:	2400      	movs	r4, #0
 800882e:	e051      	b.n	80088d4 <xTaskResumeAll+0xe4>
TCB_t *pxTCB = NULL;
 8008830:	2500      	movs	r5, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008832:	4b2a      	ldr	r3, [pc, #168]	; (80088dc <xTaskResumeAll+0xec>)
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	b32b      	cbz	r3, 8008884 <xTaskResumeAll+0x94>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008838:	4c28      	ldr	r4, [pc, #160]	; (80088dc <xTaskResumeAll+0xec>)
 800883a:	6a23      	ldr	r3, [r4, #32]
 800883c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800883e:	f105 0018 	add.w	r0, r5, #24
 8008842:	f7fe ffda 	bl	80077fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008846:	1d2e      	adds	r6, r5, #4
 8008848:	4630      	mov	r0, r6
 800884a:	f7fe ffd6 	bl	80077fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800884e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008850:	2201      	movs	r2, #1
 8008852:	409a      	lsls	r2, r3
 8008854:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8008858:	430a      	orrs	r2, r1
 800885a:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 800885e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008862:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008866:	4631      	mov	r1, r6
 8008868:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800886c:	f7fe ffa1 	bl	80077b2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008870:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008872:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	429a      	cmp	r2, r3
 800887a:	d3da      	bcc.n	8008832 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 800887c:	2201      	movs	r2, #1
 800887e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8008882:	e7d6      	b.n	8008832 <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 8008884:	b10d      	cbz	r5, 800888a <xTaskResumeAll+0x9a>
					prvResetNextTaskUnblockTime();
 8008886:	f7ff fccb 	bl	8008220 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800888a:	4b14      	ldr	r3, [pc, #80]	; (80088dc <xTaskResumeAll+0xec>)
 800888c:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
					if( xPendedCounts > ( TickType_t ) 0U )
 8008890:	b98c      	cbnz	r4, 80088b6 <xTaskResumeAll+0xc6>
				if( xYieldPending != pdFALSE )
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <xTaskResumeAll+0xec>)
 8008894:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 8008898:	b1e4      	cbz	r4, 80088d4 <xTaskResumeAll+0xe4>
					taskYIELD_IF_USING_PREEMPTION();
 800889a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800889e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80088ae:	2401      	movs	r4, #1
 80088b0:	e010      	b.n	80088d4 <xTaskResumeAll+0xe4>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80088b2:	3c01      	subs	r4, #1
 80088b4:	d008      	beq.n	80088c8 <xTaskResumeAll+0xd8>
							if( xTaskIncrementTick() != pdFALSE )
 80088b6:	f7ff ff0f 	bl	80086d8 <xTaskIncrementTick>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d0f9      	beq.n	80088b2 <xTaskResumeAll+0xc2>
								xYieldPending = pdTRUE;
 80088be:	4b07      	ldr	r3, [pc, #28]	; (80088dc <xTaskResumeAll+0xec>)
 80088c0:	2201      	movs	r2, #1
 80088c2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80088c6:	e7f4      	b.n	80088b2 <xTaskResumeAll+0xc2>
						xPendedTicks = 0;
 80088c8:	4b04      	ldr	r3, [pc, #16]	; (80088dc <xTaskResumeAll+0xec>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80088d0:	e7df      	b.n	8008892 <xTaskResumeAll+0xa2>
BaseType_t xAlreadyYielded = pdFALSE;
 80088d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80088d4:	f000 fc38 	bl	8009148 <vPortExitCritical>
}
 80088d8:	4620      	mov	r0, r4
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	2000028c 	.word	0x2000028c

080088e0 <vTaskDelay>:
	{
 80088e0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088e2:	b1b0      	cbz	r0, 8008912 <vTaskDelay+0x32>
 80088e4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80088e6:	4b10      	ldr	r3, [pc, #64]	; (8008928 <vTaskDelay+0x48>)
 80088e8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80088ec:	b143      	cbz	r3, 8008900 <vTaskDelay+0x20>
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	e7fe      	b.n	80088fe <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8008900:	f7ff fed0 	bl	80086a4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008904:	2100      	movs	r1, #0
 8008906:	4620      	mov	r0, r4
 8008908:	f7ff fdda 	bl	80084c0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800890c:	f7ff ff70 	bl	80087f0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008910:	b948      	cbnz	r0, 8008926 <vTaskDelay+0x46>
			portYIELD_WITHIN_API();
 8008912:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	f3bf 8f6f 	isb	sy
	}
 8008926:	bd10      	pop	{r4, pc}
 8008928:	2000028c 	.word	0x2000028c

0800892c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800892c:	4b2d      	ldr	r3, [pc, #180]	; (80089e4 <vTaskSwitchContext+0xb8>)
 800892e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008932:	b123      	cbz	r3, 800893e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8008934:	4b2b      	ldr	r3, [pc, #172]	; (80089e4 <vTaskSwitchContext+0xb8>)
 8008936:	2201      	movs	r2, #1
 8008938:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 800893c:	4770      	bx	lr
{
 800893e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8008940:	4c28      	ldr	r4, [pc, #160]	; (80089e4 <vTaskSwitchContext+0xb8>)
 8008942:	2300      	movs	r3, #0
 8008944:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008948:	f001 f962 	bl	8009c10 <getRunTimeCounterValue>
 800894c:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008950:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8008954:	4298      	cmp	r0, r3
 8008956:	d905      	bls.n	8008964 <vTaskSwitchContext+0x38>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008958:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800895c:	1ac3      	subs	r3, r0, r3
 800895e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008960:	4413      	add	r3, r2
 8008962:	64cb      	str	r3, [r1, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 8008964:	4a1f      	ldr	r2, [pc, #124]	; (80089e4 <vTaskSwitchContext+0xb8>)
 8008966:	f8c2 0130 	str.w	r0, [r2, #304]	; 0x130
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896a:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800896e:	fab3 f383 	clz	r3, r3
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f1c3 031f 	rsb	r3, r3, #31
 8008978:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800897c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008980:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008982:	b942      	cbnz	r2, 8008996 <vTaskSwitchContext+0x6a>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	e7fe      	b.n	8008994 <vTaskSwitchContext+0x68>
 8008996:	4a13      	ldr	r2, [pc, #76]	; (80089e4 <vTaskSwitchContext+0xb8>)
 8008998:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800899c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80089a0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80089a2:	6840      	ldr	r0, [r0, #4]
 80089a4:	6348      	str	r0, [r1, #52]	; 0x34
 80089a6:	3230      	adds	r2, #48	; 0x30
 80089a8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80089ac:	0089      	lsls	r1, r1, #2
 80089ae:	3108      	adds	r1, #8
 80089b0:	440a      	add	r2, r1
 80089b2:	4290      	cmp	r0, r2
 80089b4:	d00e      	beq.n	80089d4 <vTaskSwitchContext+0xa8>
 80089b6:	4a0b      	ldr	r2, [pc, #44]	; (80089e4 <vTaskSwitchContext+0xb8>)
 80089b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80089bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089c8:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 80089cc:	3350      	adds	r3, #80	; 0x50
 80089ce:	4a06      	ldr	r2, [pc, #24]	; (80089e8 <vTaskSwitchContext+0xbc>)
 80089d0:	6013      	str	r3, [r2, #0]
}
 80089d2:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d4:	6840      	ldr	r0, [r0, #4]
 80089d6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80089da:	4a02      	ldr	r2, [pc, #8]	; (80089e4 <vTaskSwitchContext+0xb8>)
 80089dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80089e0:	6350      	str	r0, [r2, #52]	; 0x34
 80089e2:	e7e8      	b.n	80089b6 <vTaskSwitchContext+0x8a>
 80089e4:	2000028c 	.word	0x2000028c
 80089e8:	20000024 	.word	0x20000024

080089ec <vTaskSuspend>:
	{
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 80089f0:	f000 fb88 	bl	8009104 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80089f4:	b384      	cbz	r4, 8008a58 <vTaskSuspend+0x6c>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f6:	1d25      	adds	r5, r4, #4
 80089f8:	4628      	mov	r0, r5
 80089fa:	f7fe fefe 	bl	80077fa <uxListRemove>
 80089fe:	b980      	cbnz	r0, 8008a22 <vTaskSuspend+0x36>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008a02:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008a06:	4b31      	ldr	r3, [pc, #196]	; (8008acc <vTaskSuspend+0xe0>)
 8008a08:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	b943      	cbnz	r3, 8008a22 <vTaskSuspend+0x36>
 8008a10:	2301      	movs	r3, #1
 8008a12:	4093      	lsls	r3, r2
 8008a14:	492d      	ldr	r1, [pc, #180]	; (8008acc <vTaskSuspend+0xe0>)
 8008a16:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 8008a1a:	ea22 0203 	bic.w	r2, r2, r3
 8008a1e:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a24:	b11b      	cbz	r3, 8008a2e <vTaskSuspend+0x42>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a26:	f104 0018 	add.w	r0, r4, #24
 8008a2a:	f7fe fee6 	bl	80077fa <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4826      	ldr	r0, [pc, #152]	; (8008acc <vTaskSuspend+0xe0>)
 8008a32:	f7fe febe 	bl	80077b2 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008a36:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d00f      	beq.n	8008a60 <vTaskSuspend+0x74>
		taskEXIT_CRITICAL();
 8008a40:	f000 fb82 	bl	8009148 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8008a44:	4b21      	ldr	r3, [pc, #132]	; (8008acc <vTaskSuspend+0xe0>)
 8008a46:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008a4a:	b96b      	cbnz	r3, 8008a68 <vTaskSuspend+0x7c>
		if( pxTCB == pxCurrentTCB )
 8008a4c:	4b1f      	ldr	r3, [pc, #124]	; (8008acc <vTaskSuspend+0xe0>)
 8008a4e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	d00f      	beq.n	8008a76 <vTaskSuspend+0x8a>
	}
 8008a56:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008a58:	4b1c      	ldr	r3, [pc, #112]	; (8008acc <vTaskSuspend+0xe0>)
 8008a5a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 8008a5e:	e7ca      	b.n	80089f6 <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a60:	2300      	movs	r3, #0
 8008a62:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8008a66:	e7eb      	b.n	8008a40 <vTaskSuspend+0x54>
			taskENTER_CRITICAL();
 8008a68:	f000 fb4c 	bl	8009104 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8008a6c:	f7ff fbd8 	bl	8008220 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8008a70:	f000 fb6a 	bl	8009148 <vPortExitCritical>
 8008a74:	e7ea      	b.n	8008a4c <vTaskSuspend+0x60>
			if( xSchedulerRunning != pdFALSE )
 8008a76:	4b15      	ldr	r3, [pc, #84]	; (8008acc <vTaskSuspend+0xe0>)
 8008a78:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008a7c:	b1bb      	cbz	r3, 8008aae <vTaskSuspend+0xc2>
				configASSERT( uxSchedulerSuspended == 0 );
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <vTaskSuspend+0xe0>)
 8008a80:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008a84:	b143      	cbz	r3, 8008a98 <vTaskSuspend+0xac>
 8008a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	e7fe      	b.n	8008a96 <vTaskSuspend+0xaa>
				portYIELD_WITHIN_API();
 8008a98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	e7d3      	b.n	8008a56 <vTaskSuspend+0x6a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008aae:	4b07      	ldr	r3, [pc, #28]	; (8008acc <vTaskSuspend+0xe0>)
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d104      	bne.n	8008ac4 <vTaskSuspend+0xd8>
					pxCurrentTCB = NULL;
 8008aba:	4b04      	ldr	r3, [pc, #16]	; (8008acc <vTaskSuspend+0xe0>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008ac2:	e7c8      	b.n	8008a56 <vTaskSuspend+0x6a>
					vTaskSwitchContext();
 8008ac4:	f7ff ff32 	bl	800892c <vTaskSwitchContext>
	}
 8008ac8:	e7c5      	b.n	8008a56 <vTaskSuspend+0x6a>
 8008aca:	bf00      	nop
 8008acc:	2000028c 	.word	0x2000028c

08008ad0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008ad0:	b160      	cbz	r0, 8008aec <vTaskPlaceOnEventList+0x1c>
{
 8008ad2:	b510      	push	{r4, lr}
 8008ad4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ad6:	4a0a      	ldr	r2, [pc, #40]	; (8008b00 <vTaskPlaceOnEventList+0x30>)
 8008ad8:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8008adc:	3118      	adds	r1, #24
 8008ade:	f7fe fe73 	bl	80077c8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f7ff fceb 	bl	80084c0 <prvAddCurrentTaskToDelayedList>
}
 8008aea:	bd10      	pop	{r4, pc}
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8008afc:	e7fe      	b.n	8008afc <vTaskPlaceOnEventList+0x2c>
 8008afe:	bf00      	nop
 8008b00:	2000028c 	.word	0x2000028c

08008b04 <xTaskRemoveFromEventList>:
{
 8008b04:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b06:	68c3      	ldr	r3, [r0, #12]
 8008b08:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008b0a:	b34c      	cbz	r4, 8008b60 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b0c:	f104 0518 	add.w	r5, r4, #24
 8008b10:	4628      	mov	r0, r5
 8008b12:	f7fe fe72 	bl	80077fa <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b16:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <xTaskRemoveFromEventList+0x7c>)
 8008b18:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008b1c:	bb4b      	cbnz	r3, 8008b72 <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b1e:	1d25      	adds	r5, r4, #4
 8008b20:	4628      	mov	r0, r5
 8008b22:	f7fe fe6a 	bl	80077fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b26:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008b28:	2201      	movs	r2, #1
 8008b2a:	4082      	lsls	r2, r0
 8008b2c:	4b14      	ldr	r3, [pc, #80]	; (8008b80 <xTaskRemoveFromEventList+0x7c>)
 8008b2e:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8008b32:	430a      	orrs	r2, r1
 8008b34:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8008b38:	3330      	adds	r3, #48	; 0x30
 8008b3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008b3e:	4629      	mov	r1, r5
 8008b40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b44:	f7fe fe35 	bl	80077b2 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008b4a:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <xTaskRemoveFromEventList+0x7c>)
 8008b4c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d912      	bls.n	8008b7c <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 8008b56:	2001      	movs	r0, #1
 8008b58:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <xTaskRemoveFromEventList+0x7c>)
 8008b5a:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
}
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8008b70:	e7fe      	b.n	8008b70 <xTaskRemoveFromEventList+0x6c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b72:	4629      	mov	r1, r5
 8008b74:	4803      	ldr	r0, [pc, #12]	; (8008b84 <xTaskRemoveFromEventList+0x80>)
 8008b76:	f7fe fe1c 	bl	80077b2 <vListInsertEnd>
 8008b7a:	e7e5      	b.n	8008b48 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8008b7c:	2000      	movs	r0, #0
	return xReturn;
 8008b7e:	e7ee      	b.n	8008b5e <xTaskRemoveFromEventList+0x5a>
 8008b80:	2000028c 	.word	0x2000028c
 8008b84:	200002a0 	.word	0x200002a0

08008b88 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b88:	4b03      	ldr	r3, [pc, #12]	; (8008b98 <vTaskInternalSetTimeOutState+0x10>)
 8008b8a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8008b8e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b90:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008b94:	6043      	str	r3, [r0, #4]
}
 8008b96:	4770      	bx	lr
 8008b98:	2000028c 	.word	0x2000028c

08008b9c <xTaskCheckForTimeOut>:
{
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8008b9e:	b1d8      	cbz	r0, 8008bd8 <xTaskCheckForTimeOut+0x3c>
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8008ba4:	b309      	cbz	r1, 8008bea <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 8008ba6:	f000 faad 	bl	8009104 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008baa:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <xTaskCheckForTimeOut+0x80>)
 8008bac:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bb0:	686b      	ldr	r3, [r5, #4]
 8008bb2:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8008bb4:	6822      	ldr	r2, [r4, #0]
 8008bb6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008bba:	d027      	beq.n	8008c0c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bbc:	4e17      	ldr	r6, [pc, #92]	; (8008c1c <xTaskCheckForTimeOut+0x80>)
 8008bbe:	f8d6 6120 	ldr.w	r6, [r6, #288]	; 0x120
 8008bc2:	682f      	ldr	r7, [r5, #0]
 8008bc4:	42b7      	cmp	r7, r6
 8008bc6:	d001      	beq.n	8008bcc <xTaskCheckForTimeOut+0x30>
 8008bc8:	428b      	cmp	r3, r1
 8008bca:	d924      	bls.n	8008c16 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bcc:	4282      	cmp	r2, r0
 8008bce:	d815      	bhi.n	8008bfc <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008bd4:	2401      	movs	r4, #1
 8008bd6:	e01a      	b.n	8008c0e <xTaskCheckForTimeOut+0x72>
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8008be8:	e7fe      	b.n	8008be8 <xTaskCheckForTimeOut+0x4c>
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8008bfa:	e7fe      	b.n	8008bfa <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 8008bfc:	1a5b      	subs	r3, r3, r1
 8008bfe:	4413      	add	r3, r2
 8008c00:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c02:	4628      	mov	r0, r5
 8008c04:	f7ff ffc0 	bl	8008b88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c08:	2400      	movs	r4, #0
 8008c0a:	e000      	b.n	8008c0e <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8008c0c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008c0e:	f000 fa9b 	bl	8009148 <vPortExitCritical>
}
 8008c12:	4620      	mov	r0, r4
 8008c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8008c16:	2401      	movs	r4, #1
 8008c18:	e7f9      	b.n	8008c0e <xTaskCheckForTimeOut+0x72>
 8008c1a:	bf00      	nop
 8008c1c:	2000028c 	.word	0x2000028c

08008c20 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008c20:	4b02      	ldr	r3, [pc, #8]	; (8008c2c <vTaskMissedYield+0xc>)
 8008c22:	2201      	movs	r2, #1
 8008c24:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	2000028c 	.word	0x2000028c

08008c30 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008c30:	4b06      	ldr	r3, [pc, #24]	; (8008c4c <xTaskGetSchedulerState+0x1c>)
 8008c32:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008c36:	b13b      	cbz	r3, 8008c48 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c38:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <xTaskGetSchedulerState+0x1c>)
 8008c3a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008c3e:	b10b      	cbz	r3, 8008c44 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c40:	2000      	movs	r0, #0
	}
 8008c42:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8008c44:	2002      	movs	r0, #2
 8008c46:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c48:	2001      	movs	r0, #1
 8008c4a:	4770      	bx	lr
 8008c4c:	2000028c 	.word	0x2000028c

08008c50 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d051      	beq.n	8008cf8 <xTaskPriorityInherit+0xa8>
	{
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008c5a:	4a29      	ldr	r2, [pc, #164]	; (8008d00 <xTaskPriorityInherit+0xb0>)
 8008c5c:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8008c60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d23f      	bcs.n	8008ce6 <xTaskPriorityInherit+0x96>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c66:	6982      	ldr	r2, [r0, #24]
 8008c68:	2a00      	cmp	r2, #0
 8008c6a:	db06      	blt.n	8008c7a <xTaskPriorityInherit+0x2a>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c6c:	4a24      	ldr	r2, [pc, #144]	; (8008d00 <xTaskPriorityInherit+0xb0>)
 8008c6e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8008c72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c74:	f1c2 0207 	rsb	r2, r2, #7
 8008c78:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c7a:	6961      	ldr	r1, [r4, #20]
 8008c7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008c80:	4a20      	ldr	r2, [pc, #128]	; (8008d04 <xTaskPriorityInherit+0xb4>)
 8008c82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c86:	4299      	cmp	r1, r3
 8008c88:	d006      	beq.n	8008c98 <xTaskPriorityInherit+0x48>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c8a:	4b1d      	ldr	r3, [pc, #116]	; (8008d00 <xTaskPriorityInherit+0xb0>)
 8008c8c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8008c94:	2001      	movs	r0, #1
	}
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c98:	1d25      	adds	r5, r4, #4
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f7fe fdad 	bl	80077fa <uxListRemove>
 8008ca0:	b950      	cbnz	r0, 8008cb8 <xTaskPriorityInherit+0x68>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008ca2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	fa03 f202 	lsl.w	r2, r3, r2
 8008caa:	4915      	ldr	r1, [pc, #84]	; (8008d00 <xTaskPriorityInherit+0xb0>)
 8008cac:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8008cb0:	ea23 0302 	bic.w	r3, r3, r2
 8008cb4:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cb8:	4811      	ldr	r0, [pc, #68]	; (8008d00 <xTaskPriorityInherit+0xb0>)
 8008cba:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008cc2:	2401      	movs	r4, #1
 8008cc4:	fa04 f203 	lsl.w	r2, r4, r3
 8008cc8:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8008cd2:	3030      	adds	r0, #48	; 0x30
 8008cd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008cd8:	4629      	mov	r1, r5
 8008cda:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008cde:	f7fe fd68 	bl	80077b2 <vListInsertEnd>
				xReturn = pdTRUE;
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	e7d7      	b.n	8008c96 <xTaskPriorityInherit+0x46>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ce6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ce8:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <xTaskPriorityInherit+0xb0>)
 8008cea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d303      	bcc.n	8008cfc <xTaskPriorityInherit+0xac>
	BaseType_t xReturn = pdFALSE;
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	e7ce      	b.n	8008c96 <xTaskPriorityInherit+0x46>
 8008cf8:	2000      	movs	r0, #0
	}
 8008cfa:	4770      	bx	lr
					xReturn = pdTRUE;
 8008cfc:	2001      	movs	r0, #1
		return xReturn;
 8008cfe:	e7ca      	b.n	8008c96 <xTaskPriorityInherit+0x46>
 8008d00:	2000028c 	.word	0x2000028c
 8008d04:	200002bc 	.word	0x200002bc

08008d08 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d052      	beq.n	8008db2 <xTaskPriorityDisinherit+0xaa>
	{
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008d10:	4b2a      	ldr	r3, [pc, #168]	; (8008dbc <xTaskPriorityDisinherit+0xb4>)
 8008d12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008d16:	4283      	cmp	r3, r0
 8008d18:	d008      	beq.n	8008d2c <xTaskPriorityDisinherit+0x24>
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	e7fe      	b.n	8008d2a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d2c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008d2e:	b943      	cbnz	r3, 8008d42 <xTaskPriorityDisinherit+0x3a>
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	e7fe      	b.n	8008d40 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;
 8008d42:	3b01      	subs	r3, #1
 8008d44:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d46:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008d48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d4a:	4291      	cmp	r1, r2
 8008d4c:	d033      	beq.n	8008db6 <xTaskPriorityDisinherit+0xae>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d4e:	b10b      	cbz	r3, 8008d54 <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 8008d50:	2000      	movs	r0, #0
	}
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d54:	1d05      	adds	r5, r0, #4
 8008d56:	4628      	mov	r0, r5
 8008d58:	f7fe fd4f 	bl	80077fa <uxListRemove>
 8008d5c:	b988      	cbnz	r0, 8008d82 <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008d5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008d60:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008d64:	4b15      	ldr	r3, [pc, #84]	; (8008dbc <xTaskPriorityDisinherit+0xb4>)
 8008d66:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	b94b      	cbnz	r3, 8008d82 <xTaskPriorityDisinherit+0x7a>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	fa03 f202 	lsl.w	r2, r3, r2
 8008d74:	4911      	ldr	r1, [pc, #68]	; (8008dbc <xTaskPriorityDisinherit+0xb4>)
 8008d76:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8008d7a:	ea23 0302 	bic.w	r3, r3, r2
 8008d7e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d84:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d86:	f1c3 0207 	rsb	r2, r3, #7
 8008d8a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d8c:	2401      	movs	r4, #1
 8008d8e:	fa04 f103 	lsl.w	r1, r4, r3
 8008d92:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <xTaskPriorityDisinherit+0xb4>)
 8008d94:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8008d98:	4301      	orrs	r1, r0
 8008d9a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
 8008d9e:	3230      	adds	r2, #48	; 0x30
 8008da0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008da4:	4629      	mov	r1, r5
 8008da6:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8008daa:	f7fe fd02 	bl	80077b2 <vListInsertEnd>
					xReturn = pdTRUE;
 8008dae:	4620      	mov	r0, r4
 8008db0:	e7cf      	b.n	8008d52 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8008db2:	2000      	movs	r0, #0
	}
 8008db4:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008db6:	2000      	movs	r0, #0
 8008db8:	e7cb      	b.n	8008d52 <xTaskPriorityDisinherit+0x4a>
 8008dba:	bf00      	nop
 8008dbc:	2000028c 	.word	0x2000028c

08008dc0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d055      	beq.n	8008e70 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8008dc8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008dca:	b943      	cbnz	r3, 8008dde <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	e7fe      	b.n	8008ddc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008dde:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008de0:	428a      	cmp	r2, r1
 8008de2:	d200      	bcs.n	8008de6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008de4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008de6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008de8:	4291      	cmp	r1, r2
 8008dea:	d001      	beq.n	8008df0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d000      	beq.n	8008df2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8008df0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8008df2:	4b20      	ldr	r3, [pc, #128]	; (8008e74 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8008df4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	d030      	beq.n	8008e5e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					pxTCB->uxPriority = uxPriorityToUse;
 8008dfc:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dfe:	69a3      	ldr	r3, [r4, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	db02      	blt.n	8008e0a <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e04:	f1c2 0207 	rsb	r2, r2, #7
 8008e08:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e0a:	6962      	ldr	r2, [r4, #20]
 8008e0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008e10:	4b19      	ldr	r3, [pc, #100]	; (8008e78 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008e12:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008e16:	428a      	cmp	r2, r1
 8008e18:	d1ea      	bne.n	8008df0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e1a:	1d25      	adds	r5, r4, #4
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f7fe fcec 	bl	80077fa <uxListRemove>
 8008e22:	b950      	cbnz	r0, 8008e3a <vTaskPriorityDisinheritAfterTimeout+0x7a>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008e24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008e26:	2301      	movs	r3, #1
 8008e28:	fa03 f202 	lsl.w	r2, r3, r2
 8008e2c:	4911      	ldr	r1, [pc, #68]	; (8008e74 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8008e2e:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8008e32:	ea23 0302 	bic.w	r3, r3, r2
 8008e36:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
						prvAddTaskToReadyList( pxTCB );
 8008e3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	4082      	lsls	r2, r0
 8008e40:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8008e42:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8008e46:	430a      	orrs	r2, r1
 8008e48:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8008e4c:	3330      	adds	r3, #48	; 0x30
 8008e4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008e52:	4629      	mov	r1, r5
 8008e54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e58:	f7fe fcab 	bl	80077b2 <vListInsertEnd>
	}
 8008e5c:	e7c8      	b.n	8008df0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8008e6e:	e7fe      	b.n	8008e6e <vTaskPriorityDisinheritAfterTimeout+0xae>
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	2000028c 	.word	0x2000028c
 8008e78:	200002bc 	.word	0x200002bc

08008e7c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <pvTaskIncrementMutexHeldCount+0x1c>)
 8008e7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008e82:	b12b      	cbz	r3, 8008e90 <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e84:	4b04      	ldr	r3, [pc, #16]	; (8008e98 <pvTaskIncrementMutexHeldCount+0x1c>)
 8008e86:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008e8a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8008e90:	4b01      	ldr	r3, [pc, #4]	; (8008e98 <pvTaskIncrementMutexHeldCount+0x1c>)
 8008e92:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	}
 8008e96:	4770      	bx	lr
 8008e98:	2000028c 	.word	0x2000028c

08008e9c <ulTaskNotifyTake>:
	{
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 8008ea2:	f000 f92f 	bl	8009104 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008ea6:	4b1f      	ldr	r3, [pc, #124]	; (8008f24 <ulTaskNotifyTake+0x88>)
 8008ea8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008eb0:	b933      	cbnz	r3, 8008ec0 <ulTaskNotifyTake+0x24>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008eb2:	4b1c      	ldr	r3, [pc, #112]	; (8008f24 <ulTaskNotifyTake+0x88>)
 8008eb4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				if( xTicksToWait > ( TickType_t ) 0 )
 8008ebe:	b9d4      	cbnz	r4, 8008ef6 <ulTaskNotifyTake+0x5a>
		taskEXIT_CRITICAL();
 8008ec0:	f000 f942 	bl	8009148 <vPortExitCritical>
		taskENTER_CRITICAL();
 8008ec4:	f000 f91e 	bl	8009104 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008ec8:	4b16      	ldr	r3, [pc, #88]	; (8008f24 <ulTaskNotifyTake+0x88>)
 8008eca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008ece:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
			if( ulReturn != 0UL )
 8008ed2:	b134      	cbz	r4, 8008ee2 <ulTaskNotifyTake+0x46>
				if( xClearCountOnExit != pdFALSE )
 8008ed4:	b1f5      	cbz	r5, 8008f14 <ulTaskNotifyTake+0x78>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008ed6:	4b13      	ldr	r3, [pc, #76]	; (8008f24 <ulTaskNotifyTake+0x88>)
 8008ed8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ee2:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <ulTaskNotifyTake+0x88>)
 8008ee4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		taskEXIT_CRITICAL();
 8008eee:	f000 f92b 	bl	8009148 <vPortExitCritical>
	}
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f7ff fae1 	bl	80084c0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8008efe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f06:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	e7d5      	b.n	8008ec0 <ulTaskNotifyTake+0x24>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008f14:	4b03      	ldr	r3, [pc, #12]	; (8008f24 <ulTaskNotifyTake+0x88>)
 8008f16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008f1a:	1e62      	subs	r2, r4, #1
 8008f1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008f20:	e7df      	b.n	8008ee2 <ulTaskNotifyTake+0x46>
 8008f22:	bf00      	nop
 8008f24:	2000028c 	.word	0x2000028c

08008f28 <xTaskGenericNotify>:
	{
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8008f2a:	b1b0      	cbz	r0, 8008f5a <xTaskGenericNotify+0x32>
 8008f2c:	460f      	mov	r7, r1
 8008f2e:	4614      	mov	r4, r2
 8008f30:	461d      	mov	r5, r3
 8008f32:	4606      	mov	r6, r0
		taskENTER_CRITICAL();
 8008f34:	f000 f8e6 	bl	8009104 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8008f38:	b115      	cbz	r5, 8008f40 <xTaskGenericNotify+0x18>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008f3a:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 8008f3e:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008f40:	f896 30b4 	ldrb.w	r3, [r6, #180]	; 0xb4
 8008f44:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008f46:	2202      	movs	r2, #2
 8008f48:	f886 20b4 	strb.w	r2, [r6, #180]	; 0xb4
			switch( eAction )
 8008f4c:	2c04      	cmp	r4, #4
 8008f4e:	d825      	bhi.n	8008f9c <xTaskGenericNotify+0x74>
 8008f50:	e8df f004 	tbb	[pc, r4]
 8008f54:	1a130c32 	.word	0x1a130c32
 8008f58:	1e          	.byte	0x1e
 8008f59:	00          	.byte	0x00
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 8008f6a:	e7fe      	b.n	8008f6a <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue |= ulValue;
 8008f6c:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 8008f70:	4317      	orrs	r7, r2
 8008f72:	f8c6 70b0 	str.w	r7, [r6, #176]	; 0xb0
	BaseType_t xReturn = pdPASS;
 8008f76:	2401      	movs	r4, #1
					break;
 8008f78:	e01f      	b.n	8008fba <xTaskGenericNotify+0x92>
					( pxTCB->ulNotifiedValue )++;
 8008f7a:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 8008f7e:	3201      	adds	r2, #1
 8008f80:	f8c6 20b0 	str.w	r2, [r6, #176]	; 0xb0
	BaseType_t xReturn = pdPASS;
 8008f84:	2401      	movs	r4, #1
					break;
 8008f86:	e018      	b.n	8008fba <xTaskGenericNotify+0x92>
					pxTCB->ulNotifiedValue = ulValue;
 8008f88:	f8c6 70b0 	str.w	r7, [r6, #176]	; 0xb0
	BaseType_t xReturn = pdPASS;
 8008f8c:	2401      	movs	r4, #1
					break;
 8008f8e:	e014      	b.n	8008fba <xTaskGenericNotify+0x92>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d018      	beq.n	8008fc6 <xTaskGenericNotify+0x9e>
						pxTCB->ulNotifiedValue = ulValue;
 8008f94:	f8c6 70b0 	str.w	r7, [r6, #176]	; 0xb0
	BaseType_t xReturn = pdPASS;
 8008f98:	2401      	movs	r4, #1
 8008f9a:	e00e      	b.n	8008fba <xTaskGenericNotify+0x92>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008f9c:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 8008fa0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fa4:	d011      	beq.n	8008fca <xTaskGenericNotify+0xa2>
 8008fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	e7fe      	b.n	8008fb6 <xTaskGenericNotify+0x8e>
			switch( eAction )
 8008fb8:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d007      	beq.n	8008fce <xTaskGenericNotify+0xa6>
		taskEXIT_CRITICAL();
 8008fbe:	f000 f8c3 	bl	8009148 <vPortExitCritical>
	}
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 8008fc6:	2400      	movs	r4, #0
 8008fc8:	e7f7      	b.n	8008fba <xTaskGenericNotify+0x92>
	BaseType_t xReturn = pdPASS;
 8008fca:	2401      	movs	r4, #1
 8008fcc:	e7f5      	b.n	8008fba <xTaskGenericNotify+0x92>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fce:	1d35      	adds	r5, r6, #4
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f7fe fc12 	bl	80077fa <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008fd6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8008fd8:	2201      	movs	r2, #1
 8008fda:	4082      	lsls	r2, r0
 8008fdc:	4b15      	ldr	r3, [pc, #84]	; (8009034 <xTaskGenericNotify+0x10c>)
 8008fde:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8008fe8:	3330      	adds	r3, #48	; 0x30
 8008fea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008fee:	4629      	mov	r1, r5
 8008ff0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ff4:	f7fe fbdd 	bl	80077b2 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008ff8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008ffa:	b143      	cbz	r3, 800900e <xTaskGenericNotify+0xe6>
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	e7fe      	b.n	800900c <xTaskGenericNotify+0xe4>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800900e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8009010:	4b08      	ldr	r3, [pc, #32]	; (8009034 <xTaskGenericNotify+0x10c>)
 8009012:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	429a      	cmp	r2, r3
 800901a:	d9d0      	bls.n	8008fbe <xTaskGenericNotify+0x96>
					taskYIELD_IF_USING_PREEMPTION();
 800901c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009024:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	e7c5      	b.n	8008fbe <xTaskGenericNotify+0x96>
 8009032:	bf00      	nop
 8009034:	2000028c 	.word	0x2000028c

08009038 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009038:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800903e:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <prvTaskExitError+0x3c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009046:	d008      	beq.n	800905a <prvTaskExitError+0x22>
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	e7fe      	b.n	8009058 <prvTaskExitError+0x20>
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800906a:	9b01      	ldr	r3, [sp, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0fc      	beq.n	800906a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009070:	b002      	add	sp, #8
 8009072:	4770      	bx	lr
 8009074:	20000008 	.word	0x20000008

08009078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009078:	4808      	ldr	r0, [pc, #32]	; (800909c <prvPortStartFirstTask+0x24>)
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	6800      	ldr	r0, [r0, #0]
 800907e:	f380 8808 	msr	MSP, r0
 8009082:	f04f 0000 	mov.w	r0, #0
 8009086:	f380 8814 	msr	CONTROL, r0
 800908a:	b662      	cpsie	i
 800908c:	b661      	cpsie	f
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	df00      	svc	0
 8009098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800909a:	0000      	.short	0x0000
 800909c:	e000ed08 	.word	0xe000ed08

080090a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090b0 <vPortEnableVFP+0x10>
 80090a4:	6801      	ldr	r1, [r0, #0]
 80090a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090aa:	6001      	str	r1, [r0, #0]
 80090ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090ae:	0000      	.short	0x0000
 80090b0:	e000ed88 	.word	0xe000ed88

080090b4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090b8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090bc:	f021 0101 	bic.w	r1, r1, #1
 80090c0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <pxPortInitialiseStack+0x28>)
 80090c6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090ca:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090ce:	f06f 0302 	mvn.w	r3, #2
 80090d2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80090d6:	3844      	subs	r0, #68	; 0x44
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	08009039 	.word	0x08009039

080090e0 <SVC_Handler>:
	__asm volatile (
 80090e0:	4b07      	ldr	r3, [pc, #28]	; (8009100 <pxCurrentTCBConst2>)
 80090e2:	6819      	ldr	r1, [r3, #0]
 80090e4:	6808      	ldr	r0, [r1, #0]
 80090e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ea:	f380 8809 	msr	PSP, r0
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f04f 0000 	mov.w	r0, #0
 80090f6:	f380 8811 	msr	BASEPRI, r0
 80090fa:	4770      	bx	lr
 80090fc:	f3af 8000 	nop.w

08009100 <pxCurrentTCBConst2>:
 8009100:	2000038c 	.word	0x2000038c

08009104 <vPortEnterCritical>:
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009114:	4a0b      	ldr	r2, [pc, #44]	; (8009144 <vPortEnterCritical+0x40>)
 8009116:	6813      	ldr	r3, [r2, #0]
 8009118:	3301      	adds	r3, #1
 800911a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800911c:	2b01      	cmp	r3, #1
 800911e:	d000      	beq.n	8009122 <vPortEnterCritical+0x1e>
}
 8009120:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009122:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009126:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800912a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800912e:	d0f7      	beq.n	8009120 <vPortEnterCritical+0x1c>
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	e7fe      	b.n	8009140 <vPortEnterCritical+0x3c>
 8009142:	bf00      	nop
 8009144:	20000008 	.word	0x20000008

08009148 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009148:	4b09      	ldr	r3, [pc, #36]	; (8009170 <vPortExitCritical+0x28>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	b943      	cbnz	r3, 8009160 <vPortExitCritical+0x18>
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	e7fe      	b.n	800915e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009160:	3b01      	subs	r3, #1
 8009162:	4a03      	ldr	r2, [pc, #12]	; (8009170 <vPortExitCritical+0x28>)
 8009164:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009166:	b90b      	cbnz	r3, 800916c <vPortExitCritical+0x24>
	__asm volatile
 8009168:	f383 8811 	msr	BASEPRI, r3
}
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	20000008 	.word	0x20000008
	...

08009180 <PendSV_Handler>:
	__asm volatile
 8009180:	f3ef 8009 	mrs	r0, PSP
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	4b15      	ldr	r3, [pc, #84]	; (80091e0 <pxCurrentTCBConst>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	f01e 0f10 	tst.w	lr, #16
 8009190:	bf08      	it	eq
 8009192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919a:	6010      	str	r0, [r2, #0]
 800919c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091a4:	f380 8811 	msr	BASEPRI, r0
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f7ff fbbc 	bl	800892c <vTaskSwitchContext>
 80091b4:	f04f 0000 	mov.w	r0, #0
 80091b8:	f380 8811 	msr	BASEPRI, r0
 80091bc:	bc09      	pop	{r0, r3}
 80091be:	6819      	ldr	r1, [r3, #0]
 80091c0:	6808      	ldr	r0, [r1, #0]
 80091c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c6:	f01e 0f10 	tst.w	lr, #16
 80091ca:	bf08      	it	eq
 80091cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091d0:	f380 8809 	msr	PSP, r0
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	f3af 8000 	nop.w

080091e0 <pxCurrentTCBConst>:
 80091e0:	2000038c 	.word	0x2000038c

080091e4 <SysTick_Handler>:
{
 80091e4:	b508      	push	{r3, lr}
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80091f6:	f7ff fa6f 	bl	80086d8 <xTaskIncrementTick>
 80091fa:	b128      	cbz	r0, 8009208 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009204:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8009208:	2300      	movs	r3, #0
 800920a:	f383 8811 	msr	BASEPRI, r3
}
 800920e:	bd08      	pop	{r3, pc}

08009210 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009210:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009214:	2300      	movs	r3, #0
 8009216:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009218:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800921a:	4b05      	ldr	r3, [pc, #20]	; (8009230 <vPortSetupTimerInterrupt+0x20>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4905      	ldr	r1, [pc, #20]	; (8009234 <vPortSetupTimerInterrupt+0x24>)
 8009220:	fba1 1303 	umull	r1, r3, r1, r3
 8009224:	099b      	lsrs	r3, r3, #6
 8009226:	3b01      	subs	r3, #1
 8009228:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800922a:	2307      	movs	r3, #7
 800922c:	6113      	str	r3, [r2, #16]
}
 800922e:	4770      	bx	lr
 8009230:	20000020 	.word	0x20000020
 8009234:	10624dd3 	.word	0x10624dd3

08009238 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009238:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800923c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8009240:	4b3d      	ldr	r3, [pc, #244]	; (8009338 <xPortStartScheduler+0x100>)
 8009242:	429a      	cmp	r2, r3
 8009244:	d01b      	beq.n	800927e <xPortStartScheduler+0x46>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009246:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800924a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800924e:	4b3b      	ldr	r3, [pc, #236]	; (800933c <xPortStartScheduler+0x104>)
 8009250:	429a      	cmp	r2, r3
 8009252:	d01d      	beq.n	8009290 <xPortStartScheduler+0x58>
{
 8009254:	b530      	push	{r4, r5, lr}
 8009256:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009258:	4b39      	ldr	r3, [pc, #228]	; (8009340 <xPortStartScheduler+0x108>)
 800925a:	781a      	ldrb	r2, [r3, #0]
 800925c:	b2d2      	uxtb	r2, r2
 800925e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009260:	22ff      	movs	r2, #255	; 0xff
 8009262:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	b2db      	uxtb	r3, r3
 8009268:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800926c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009270:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009274:	4a33      	ldr	r2, [pc, #204]	; (8009344 <xPortStartScheduler+0x10c>)
 8009276:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009278:	2307      	movs	r3, #7
 800927a:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800927c:	e01b      	b.n	80092b6 <xPortStartScheduler+0x7e>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800928e:	e7fe      	b.n	800928e <xPortStartScheduler+0x56>
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092a0:	e7fe      	b.n	80092a0 <xPortStartScheduler+0x68>
			ulMaxPRIGROUPValue--;
 80092a2:	4a28      	ldr	r2, [pc, #160]	; (8009344 <xPortStartScheduler+0x10c>)
 80092a4:	6853      	ldr	r3, [r2, #4]
 80092a6:	3b01      	subs	r3, #1
 80092a8:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80092ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092be:	d1f0      	bne.n	80092a2 <xPortStartScheduler+0x6a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092c0:	4b20      	ldr	r3, [pc, #128]	; (8009344 <xPortStartScheduler+0x10c>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d008      	beq.n	80092da <xPortStartScheduler+0xa2>
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	e7fe      	b.n	80092d8 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092da:	021b      	lsls	r3, r3, #8
 80092dc:	4a19      	ldr	r2, [pc, #100]	; (8009344 <xPortStartScheduler+0x10c>)
 80092de:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092e4:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092e6:	9b01      	ldr	r3, [sp, #4]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	4a15      	ldr	r2, [pc, #84]	; (8009340 <xPortStartScheduler+0x108>)
 80092ec:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092ee:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 80092f2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80092f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092fa:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092fe:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009302:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009306:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800930a:	f7ff ff81 	bl	8009210 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800930e:	2500      	movs	r5, #0
 8009310:	4b0d      	ldr	r3, [pc, #52]	; (8009348 <xPortStartScheduler+0x110>)
 8009312:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009314:	f7ff fec4 	bl	80090a0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009318:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800931c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009320:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8009324:	f7ff fea8 	bl	8009078 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009328:	f7ff fb00 	bl	800892c <vTaskSwitchContext>
	prvTaskExitError();
 800932c:	f7ff fe84 	bl	8009038 <prvTaskExitError>
}
 8009330:	4628      	mov	r0, r5
 8009332:	b003      	add	sp, #12
 8009334:	bd30      	pop	{r4, r5, pc}
 8009336:	bf00      	nop
 8009338:	410fc271 	.word	0x410fc271
 800933c:	410fc270 	.word	0x410fc270
 8009340:	e000e400 	.word	0xe000e400
 8009344:	200003c0 	.word	0x200003c0
 8009348:	20000008 	.word	0x20000008

0800934c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800934c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009350:	2b0f      	cmp	r3, #15
 8009352:	d90f      	bls.n	8009374 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009354:	4a11      	ldr	r2, [pc, #68]	; (800939c <vPortValidateInterruptPriority+0x50>)
 8009356:	5c9b      	ldrb	r3, [r3, r2]
 8009358:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800935a:	4a11      	ldr	r2, [pc, #68]	; (80093a0 <vPortValidateInterruptPriority+0x54>)
 800935c:	7812      	ldrb	r2, [r2, #0]
 800935e:	429a      	cmp	r2, r3
 8009360:	d908      	bls.n	8009374 <vPortValidateInterruptPriority+0x28>
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	e7fe      	b.n	8009372 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009374:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009378:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800937c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009380:	4a07      	ldr	r2, [pc, #28]	; (80093a0 <vPortValidateInterruptPriority+0x54>)
 8009382:	6852      	ldr	r2, [r2, #4]
 8009384:	4293      	cmp	r3, r2
 8009386:	d908      	bls.n	800939a <vPortValidateInterruptPriority+0x4e>
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	e7fe      	b.n	8009398 <vPortValidateInterruptPriority+0x4c>
	}
 800939a:	4770      	bx	lr
 800939c:	e000e3f0 	.word	0xe000e3f0
 80093a0:	200003c0 	.word	0x200003c0

080093a4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093a4:	4a10      	ldr	r2, [pc, #64]	; (80093e8 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093a6:	f012 0f07 	tst.w	r2, #7
 80093aa:	d01a      	beq.n	80093e2 <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ac:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093ae:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093b2:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80093b6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093b8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093ba:	490c      	ldr	r1, [pc, #48]	; (80093ec <prvHeapInit+0x48>)
 80093bc:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093be:	2000      	movs	r0, #0
 80093c0:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093c2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80093c4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093c6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80093ca:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 80093cc:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093ce:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093d0:	1a98      	subs	r0, r3, r2
 80093d2:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093d4:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093d6:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093d8:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093de:	614b      	str	r3, [r1, #20]
}
 80093e0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80093e6:	e7e8      	b.n	80093ba <prvHeapInit+0x16>
 80093e8:	200003e8 	.word	0x200003e8
 80093ec:	200003c8 	.word	0x200003c8

080093f0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093f0:	4b16      	ldr	r3, [pc, #88]	; (800944c <prvInsertBlockIntoFreeList+0x5c>)
 80093f2:	461a      	mov	r2, r3
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4283      	cmp	r3, r0
 80093f8:	d3fb      	bcc.n	80093f2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093fa:	6851      	ldr	r1, [r2, #4]
 80093fc:	eb02 0c01 	add.w	ip, r2, r1
 8009400:	4584      	cmp	ip, r0
 8009402:	d009      	beq.n	8009418 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009404:	6841      	ldr	r1, [r0, #4]
 8009406:	eb00 0c01 	add.w	ip, r0, r1
 800940a:	4563      	cmp	r3, ip
 800940c:	d009      	beq.n	8009422 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800940e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009410:	4290      	cmp	r0, r2
 8009412:	d019      	beq.n	8009448 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009414:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8009416:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009418:	6840      	ldr	r0, [r0, #4]
 800941a:	4401      	add	r1, r0
 800941c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800941e:	4610      	mov	r0, r2
 8009420:	e7f0      	b.n	8009404 <prvInsertBlockIntoFreeList+0x14>
{
 8009422:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009424:	4c09      	ldr	r4, [pc, #36]	; (800944c <prvInsertBlockIntoFreeList+0x5c>)
 8009426:	68a4      	ldr	r4, [r4, #8]
 8009428:	42a3      	cmp	r3, r4
 800942a:	d00b      	beq.n	8009444 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	4419      	add	r1, r3
 8009430:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009432:	6813      	ldr	r3, [r2, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8009438:	4290      	cmp	r0, r2
 800943a:	d000      	beq.n	800943e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800943c:	6010      	str	r0, [r2, #0]
	}
}
 800943e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009442:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009444:	6004      	str	r4, [r0, #0]
 8009446:	e7f7      	b.n	8009438 <prvInsertBlockIntoFreeList+0x48>
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	200003c8 	.word	0x200003c8

08009450 <pvPortMalloc>:
{
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8009454:	f7ff f926 	bl	80086a4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009458:	4b35      	ldr	r3, [pc, #212]	; (8009530 <pvPortMalloc+0xe0>)
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	b1a3      	cbz	r3, 8009488 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800945e:	4b34      	ldr	r3, [pc, #208]	; (8009530 <pvPortMalloc+0xe0>)
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	421d      	tst	r5, r3
 8009464:	d14c      	bne.n	8009500 <pvPortMalloc+0xb0>
			if( xWantedSize > 0 )
 8009466:	b135      	cbz	r5, 8009476 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8009468:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800946a:	f015 0f07 	tst.w	r5, #7
 800946e:	d002      	beq.n	8009476 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009470:	f025 0507 	bic.w	r5, r5, #7
 8009474:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009476:	2d00      	cmp	r5, #0
 8009478:	d044      	beq.n	8009504 <pvPortMalloc+0xb4>
 800947a:	4b2d      	ldr	r3, [pc, #180]	; (8009530 <pvPortMalloc+0xe0>)
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	42ab      	cmp	r3, r5
 8009480:	d34f      	bcc.n	8009522 <pvPortMalloc+0xd2>
				pxBlock = xStart.pxNextFreeBlock;
 8009482:	4a2b      	ldr	r2, [pc, #172]	; (8009530 <pvPortMalloc+0xe0>)
 8009484:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009486:	e004      	b.n	8009492 <pvPortMalloc+0x42>
			prvHeapInit();
 8009488:	f7ff ff8c 	bl	80093a4 <prvHeapInit>
 800948c:	e7e7      	b.n	800945e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800948e:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8009490:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009492:	6863      	ldr	r3, [r4, #4]
 8009494:	42ab      	cmp	r3, r5
 8009496:	d202      	bcs.n	800949e <pvPortMalloc+0x4e>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1f7      	bne.n	800948e <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800949e:	4b24      	ldr	r3, [pc, #144]	; (8009530 <pvPortMalloc+0xe0>)
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	42a3      	cmp	r3, r4
 80094a4:	d03f      	beq.n	8009526 <pvPortMalloc+0xd6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094a6:	6816      	ldr	r6, [r2, #0]
 80094a8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094ae:	6863      	ldr	r3, [r4, #4]
 80094b0:	1b5b      	subs	r3, r3, r5
 80094b2:	2b10      	cmp	r3, #16
 80094b4:	d910      	bls.n	80094d8 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094b6:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094b8:	f010 0f07 	tst.w	r0, #7
 80094bc:	d008      	beq.n	80094d0 <pvPortMalloc+0x80>
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	e7fe      	b.n	80094ce <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094d0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094d2:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094d4:	f7ff ff8c 	bl	80093f0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094d8:	6861      	ldr	r1, [r4, #4]
 80094da:	4a15      	ldr	r2, [pc, #84]	; (8009530 <pvPortMalloc+0xe0>)
 80094dc:	6913      	ldr	r3, [r2, #16]
 80094de:	1a5b      	subs	r3, r3, r1
 80094e0:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094e2:	68d2      	ldr	r2, [r2, #12]
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d201      	bcs.n	80094ec <pvPortMalloc+0x9c>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094e8:	4a11      	ldr	r2, [pc, #68]	; (8009530 <pvPortMalloc+0xe0>)
 80094ea:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094ec:	4b10      	ldr	r3, [pc, #64]	; (8009530 <pvPortMalloc+0xe0>)
 80094ee:	695a      	ldr	r2, [r3, #20]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	6062      	str	r2, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094f4:	2200      	movs	r2, #0
 80094f6:	6022      	str	r2, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80094f8:	699a      	ldr	r2, [r3, #24]
 80094fa:	3201      	adds	r2, #1
 80094fc:	619a      	str	r2, [r3, #24]
 80094fe:	e002      	b.n	8009506 <pvPortMalloc+0xb6>
void *pvReturn = NULL;
 8009500:	2600      	movs	r6, #0
 8009502:	e000      	b.n	8009506 <pvPortMalloc+0xb6>
 8009504:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8009506:	f7ff f973 	bl	80087f0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800950a:	f016 0f07 	tst.w	r6, #7
 800950e:	d00c      	beq.n	800952a <pvPortMalloc+0xda>
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	e7fe      	b.n	8009520 <pvPortMalloc+0xd0>
void *pvReturn = NULL;
 8009522:	2600      	movs	r6, #0
 8009524:	e7ef      	b.n	8009506 <pvPortMalloc+0xb6>
 8009526:	2600      	movs	r6, #0
 8009528:	e7ed      	b.n	8009506 <pvPortMalloc+0xb6>
}
 800952a:	4630      	mov	r0, r6
 800952c:	bd70      	pop	{r4, r5, r6, pc}
 800952e:	bf00      	nop
 8009530:	200003c8 	.word	0x200003c8

08009534 <vPortFree>:
	if( pv != NULL )
 8009534:	b398      	cbz	r0, 800959e <vPortFree+0x6a>
{
 8009536:	b538      	push	{r3, r4, r5, lr}
 8009538:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800953a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800953e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009542:	4a17      	ldr	r2, [pc, #92]	; (80095a0 <vPortFree+0x6c>)
 8009544:	6952      	ldr	r2, [r2, #20]
 8009546:	4213      	tst	r3, r2
 8009548:	d108      	bne.n	800955c <vPortFree+0x28>
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	e7fe      	b.n	800955a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800955c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009560:	b141      	cbz	r1, 8009574 <vPortFree+0x40>
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	e7fe      	b.n	8009572 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009574:	ea23 0302 	bic.w	r3, r3, r2
 8009578:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800957c:	f7ff f892 	bl	80086a4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009580:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8009584:	4c06      	ldr	r4, [pc, #24]	; (80095a0 <vPortFree+0x6c>)
 8009586:	6923      	ldr	r3, [r4, #16]
 8009588:	4413      	add	r3, r2
 800958a:	6123      	str	r3, [r4, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800958c:	4628      	mov	r0, r5
 800958e:	f7ff ff2f 	bl	80093f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009592:	69e3      	ldr	r3, [r4, #28]
 8009594:	3301      	adds	r3, #1
 8009596:	61e3      	str	r3, [r4, #28]
				( void ) xTaskResumeAll();
 8009598:	f7ff f92a 	bl	80087f0 <xTaskResumeAll>
}
 800959c:	bd38      	pop	{r3, r4, r5, pc}
 800959e:	4770      	bx	lr
 80095a0:	200003c8 	.word	0x200003c8

080095a4 <imuPostStateTask>:
	state.x_acceleration = (r_xAcceleration / 100) - 320;
	state.y_acceleration = (r_yAcceleration / 100) - 320;
	state.z_acceleration = (r_zAcceleration / 100) - 320;
}

void imuPostStateTask(){
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	b0d7      	sub	sp, #348	; 0x15c
	for(;;){
		vTaskDelay(pdMS_TO_TICKS(1/imuPostRate));
 80095aa:	4b36      	ldr	r3, [pc, #216]	; (8009684 <imuPostStateTask+0xe0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2001      	movs	r0, #1
 80095b0:	fb90 f0f3 	sdiv	r0, r0, r3
 80095b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095b8:	fb03 f000 	mul.w	r0, r3, r0
 80095bc:	4b32      	ldr	r3, [pc, #200]	; (8009688 <imuPostStateTask+0xe4>)
 80095be:	fba3 3000 	umull	r3, r0, r3, r0
 80095c2:	0980      	lsrs	r0, r0, #6
 80095c4:	f7ff f98c 	bl	80088e0 <vTaskDelay>
		char msg[256] =  {0};
 80095c8:	2100      	movs	r1, #0
 80095ca:	9116      	str	r1, [sp, #88]	; 0x58
 80095cc:	22fc      	movs	r2, #252	; 0xfc
 80095ce:	a817      	add	r0, sp, #92	; 0x5c
 80095d0:	f002 f837 	bl	800b642 <memset>
		time_delta td;
		float timedelt;

		td = getTime();
 80095d4:	a812      	add	r0, sp, #72	; 0x48
 80095d6:	f001 fd01 	bl	800afdc <getTime>
		timedelt = (float)td.seconds + td.subseconds;
 80095da:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80095de:	f7f7 fc1b 	bl	8000e18 <__aeabi_ul2f>
 80095e2:	ee07 0a10 	vmov	s14, r0
 80095e6:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
		sprintf(msg, "Delta: %f, Pit: %f, Roll: %f, xAcc: %f, yAcc: %f, zAcc: %f, xAngR: %f, yAngR: %f, zAngR: %f\n",
						timedelt, state.pitch, state.roll, state.x_acceleration, state.y_acceleration, state.z_acceleration,
 80095ea:	4b28      	ldr	r3, [pc, #160]	; (800968c <imuPostStateTask+0xe8>)
 80095ec:	699e      	ldr	r6, [r3, #24]
 80095ee:	69df      	ldr	r7, [r3, #28]
 80095f0:	f8d3 8000 	ldr.w	r8, [r3]
 80095f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80095f8:	f8d3 a008 	ldr.w	sl, [r3, #8]
						state.x_angular_rate, state.y_angular_rate, state.z_angular_rate);
 80095fc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8009600:	691c      	ldr	r4, [r3, #16]
 8009602:	695d      	ldr	r5, [r3, #20]
		sprintf(msg, "Delta: %f, Pit: %f, Roll: %f, xAcc: %f, yAcc: %f, zAcc: %f, xAngR: %f, yAngR: %f, zAngR: %f\n",
 8009604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009608:	ee17 0a90 	vmov	r0, s15
 800960c:	f7f6 ffbc 	bl	8000588 <__aeabi_f2d>
 8009610:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009614:	4628      	mov	r0, r5
 8009616:	f7f6 ffb7 	bl	8000588 <__aeabi_f2d>
 800961a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800961e:	4620      	mov	r0, r4
 8009620:	f7f6 ffb2 	bl	8000588 <__aeabi_f2d>
 8009624:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009628:	4658      	mov	r0, fp
 800962a:	f7f6 ffad 	bl	8000588 <__aeabi_f2d>
 800962e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009632:	4650      	mov	r0, sl
 8009634:	f7f6 ffa8 	bl	8000588 <__aeabi_f2d>
 8009638:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800963c:	4648      	mov	r0, r9
 800963e:	f7f6 ffa3 	bl	8000588 <__aeabi_f2d>
 8009642:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009646:	4640      	mov	r0, r8
 8009648:	f7f6 ff9e 	bl	8000588 <__aeabi_f2d>
 800964c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009650:	4638      	mov	r0, r7
 8009652:	f7f6 ff99 	bl	8000588 <__aeabi_f2d>
 8009656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800965a:	4630      	mov	r0, r6
 800965c:	f7f6 ff94 	bl	8000588 <__aeabi_f2d>
 8009660:	e9cd 0100 	strd	r0, r1, [sp]
 8009664:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009668:	4909      	ldr	r1, [pc, #36]	; (8009690 <imuPostStateTask+0xec>)
 800966a:	a816      	add	r0, sp, #88	; 0x58
 800966c:	f002 fd6a 	bl	800c144 <siprintf>

		SD_Log(msg, -1);
 8009670:	f04f 31ff 	mov.w	r1, #4294967295
 8009674:	a816      	add	r0, sp, #88	; 0x58
 8009676:	f000 fd63 	bl	800a140 <SD_Log>
		vTaskDelay(pdMS_TO_TICKS(100));
 800967a:	2064      	movs	r0, #100	; 0x64
 800967c:	f7ff f930 	bl	80088e0 <vTaskDelay>
	for(;;){
 8009680:	e793      	b.n	80095aa <imuPostStateTask+0x6>
 8009682:	bf00      	nop
 8009684:	2000000c 	.word	0x2000000c
 8009688:	10624dd3 	.word	0x10624dd3
 800968c:	20003fe8 	.word	0x20003fe8
 8009690:	0800fb18 	.word	0x0800fb18

08009694 <init_imu_post_task>:
	}
}

void init_imu_post_task(){
 8009694:	b500      	push	{lr}
 8009696:	b083      	sub	sp, #12
  //Init HAL CAN Task
  xTaskCreate(&imuPostStateTask, "imu_post_task", 512, ( void * ) 1, 3, NULL);
 8009698:	2300      	movs	r3, #0
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	2303      	movs	r3, #3
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	2301      	movs	r3, #1
 80096a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096a6:	4903      	ldr	r1, [pc, #12]	; (80096b4 <init_imu_post_task+0x20>)
 80096a8:	4803      	ldr	r0, [pc, #12]	; (80096b8 <init_imu_post_task+0x24>)
 80096aa:	f7fe ff88 	bl	80085be <xTaskCreate>
}
 80096ae:	b003      	add	sp, #12
 80096b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80096b4:	0800fb78 	.word	0x0800fb78
 80096b8:	080095a5 	.word	0x080095a5

080096bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80096bc:	b500      	push	{lr}
 80096be:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80096c0:	2300      	movs	r3, #0
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	9302      	str	r3, [sp, #8]
 80096c8:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80096ca:	4879      	ldr	r0, [pc, #484]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 80096cc:	4a79      	ldr	r2, [pc, #484]	; (80098b4 <MX_ADC1_Init+0x1f8>)
 80096ce:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80096d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80096d4:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80096d6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80096d8:	2201      	movs	r2, #1
 80096da:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80096dc:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80096de:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80096e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80096e4:	4974      	ldr	r1, [pc, #464]	; (80098b8 <MX_ADC1_Init+0x1fc>)
 80096e6:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80096e8:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 16;
 80096ea:	2110      	movs	r1, #16
 80096ec:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80096ee:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80096f2:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80096f4:	f7f7 fe32 	bl	800135c <HAL_ADC_Init>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	f040 80a6 	bne.w	800984a <MX_ADC1_Init+0x18e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80096fe:	2300      	movs	r3, #0
 8009700:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8009702:	2201      	movs	r2, #1
 8009704:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009706:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009708:	4669      	mov	r1, sp
 800970a:	4869      	ldr	r0, [pc, #420]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 800970c:	f7f7 ff6c 	bl	80015e8 <HAL_ADC_ConfigChannel>
 8009710:	2800      	cmp	r0, #0
 8009712:	f040 809d 	bne.w	8009850 <MX_ADC1_Init+0x194>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009716:	2301      	movs	r3, #1
 8009718:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800971a:	2302      	movs	r3, #2
 800971c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800971e:	4669      	mov	r1, sp
 8009720:	4863      	ldr	r0, [pc, #396]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 8009722:	f7f7 ff61 	bl	80015e8 <HAL_ADC_ConfigChannel>
 8009726:	2800      	cmp	r0, #0
 8009728:	f040 8095 	bne.w	8009856 <MX_ADC1_Init+0x19a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800972c:	2302      	movs	r3, #2
 800972e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8009730:	2303      	movs	r3, #3
 8009732:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009734:	4669      	mov	r1, sp
 8009736:	485e      	ldr	r0, [pc, #376]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 8009738:	f7f7 ff56 	bl	80015e8 <HAL_ADC_ConfigChannel>
 800973c:	2800      	cmp	r0, #0
 800973e:	f040 808d 	bne.w	800985c <MX_ADC1_Init+0x1a0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8009742:	2303      	movs	r3, #3
 8009744:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8009746:	2304      	movs	r3, #4
 8009748:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800974a:	4669      	mov	r1, sp
 800974c:	4858      	ldr	r0, [pc, #352]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 800974e:	f7f7 ff4b 	bl	80015e8 <HAL_ADC_ConfigChannel>
 8009752:	2800      	cmp	r0, #0
 8009754:	f040 8085 	bne.w	8009862 <MX_ADC1_Init+0x1a6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8009758:	2304      	movs	r3, #4
 800975a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 800975c:	2305      	movs	r3, #5
 800975e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009760:	4669      	mov	r1, sp
 8009762:	4853      	ldr	r0, [pc, #332]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 8009764:	f7f7 ff40 	bl	80015e8 <HAL_ADC_ConfigChannel>
 8009768:	2800      	cmp	r0, #0
 800976a:	d17d      	bne.n	8009868 <MX_ADC1_Init+0x1ac>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800976c:	2305      	movs	r3, #5
 800976e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 8009770:	2306      	movs	r3, #6
 8009772:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009774:	4669      	mov	r1, sp
 8009776:	484e      	ldr	r0, [pc, #312]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 8009778:	f7f7 ff36 	bl	80015e8 <HAL_ADC_ConfigChannel>
 800977c:	2800      	cmp	r0, #0
 800977e:	d176      	bne.n	800986e <MX_ADC1_Init+0x1b2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8009780:	2306      	movs	r3, #6
 8009782:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 8009784:	2307      	movs	r3, #7
 8009786:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009788:	4669      	mov	r1, sp
 800978a:	4849      	ldr	r0, [pc, #292]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 800978c:	f7f7 ff2c 	bl	80015e8 <HAL_ADC_ConfigChannel>
 8009790:	2800      	cmp	r0, #0
 8009792:	d16f      	bne.n	8009874 <MX_ADC1_Init+0x1b8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8009794:	2307      	movs	r3, #7
 8009796:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 8009798:	2308      	movs	r3, #8
 800979a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800979c:	4669      	mov	r1, sp
 800979e:	4844      	ldr	r0, [pc, #272]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 80097a0:	f7f7 ff22 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d168      	bne.n	800987a <MX_ADC1_Init+0x1be>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80097a8:	2308      	movs	r3, #8
 80097aa:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 80097ac:	2309      	movs	r3, #9
 80097ae:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80097b0:	4669      	mov	r1, sp
 80097b2:	483f      	ldr	r0, [pc, #252]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 80097b4:	f7f7 ff18 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d161      	bne.n	8009880 <MX_ADC1_Init+0x1c4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80097bc:	2309      	movs	r3, #9
 80097be:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 80097c0:	230a      	movs	r3, #10
 80097c2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80097c4:	4669      	mov	r1, sp
 80097c6:	483a      	ldr	r0, [pc, #232]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 80097c8:	f7f7 ff0e 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d15a      	bne.n	8009886 <MX_ADC1_Init+0x1ca>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80097d0:	230a      	movs	r3, #10
 80097d2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 80097d4:	230b      	movs	r3, #11
 80097d6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80097d8:	4669      	mov	r1, sp
 80097da:	4835      	ldr	r0, [pc, #212]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 80097dc:	f7f7 ff04 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d153      	bne.n	800988c <MX_ADC1_Init+0x1d0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80097e4:	230b      	movs	r3, #11
 80097e6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 80097e8:	230c      	movs	r3, #12
 80097ea:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80097ec:	4669      	mov	r1, sp
 80097ee:	4830      	ldr	r0, [pc, #192]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 80097f0:	f7f7 fefa 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d14c      	bne.n	8009892 <MX_ADC1_Init+0x1d6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80097f8:	230c      	movs	r3, #12
 80097fa:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 13;
 80097fc:	230d      	movs	r3, #13
 80097fe:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009800:	4669      	mov	r1, sp
 8009802:	482b      	ldr	r0, [pc, #172]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 8009804:	f7f7 fef0 	bl	80015e8 <HAL_ADC_ConfigChannel>
 8009808:	2800      	cmp	r0, #0
 800980a:	d145      	bne.n	8009898 <MX_ADC1_Init+0x1dc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800980c:	230d      	movs	r3, #13
 800980e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 14;
 8009810:	230e      	movs	r3, #14
 8009812:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009814:	4669      	mov	r1, sp
 8009816:	4826      	ldr	r0, [pc, #152]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 8009818:	f7f7 fee6 	bl	80015e8 <HAL_ADC_ConfigChannel>
 800981c:	2800      	cmp	r0, #0
 800981e:	d13e      	bne.n	800989e <MX_ADC1_Init+0x1e2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009820:	230e      	movs	r3, #14
 8009822:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 15;
 8009824:	230f      	movs	r3, #15
 8009826:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009828:	4669      	mov	r1, sp
 800982a:	4821      	ldr	r0, [pc, #132]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 800982c:	f7f7 fedc 	bl	80015e8 <HAL_ADC_ConfigChannel>
 8009830:	bbc0      	cbnz	r0, 80098a4 <MX_ADC1_Init+0x1e8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8009832:	230f      	movs	r3, #15
 8009834:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 16;
 8009836:	2310      	movs	r3, #16
 8009838:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800983a:	4669      	mov	r1, sp
 800983c:	481c      	ldr	r0, [pc, #112]	; (80098b0 <MX_ADC1_Init+0x1f4>)
 800983e:	f7f7 fed3 	bl	80015e8 <HAL_ADC_ConfigChannel>
 8009842:	bb90      	cbnz	r0, 80098aa <MX_ADC1_Init+0x1ee>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009844:	b005      	add	sp, #20
 8009846:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800984a:	f000 fb11 	bl	8009e70 <Error_Handler>
 800984e:	e756      	b.n	80096fe <MX_ADC1_Init+0x42>
    Error_Handler();
 8009850:	f000 fb0e 	bl	8009e70 <Error_Handler>
 8009854:	e75f      	b.n	8009716 <MX_ADC1_Init+0x5a>
    Error_Handler();
 8009856:	f000 fb0b 	bl	8009e70 <Error_Handler>
 800985a:	e767      	b.n	800972c <MX_ADC1_Init+0x70>
    Error_Handler();
 800985c:	f000 fb08 	bl	8009e70 <Error_Handler>
 8009860:	e76f      	b.n	8009742 <MX_ADC1_Init+0x86>
    Error_Handler();
 8009862:	f000 fb05 	bl	8009e70 <Error_Handler>
 8009866:	e777      	b.n	8009758 <MX_ADC1_Init+0x9c>
    Error_Handler();
 8009868:	f000 fb02 	bl	8009e70 <Error_Handler>
 800986c:	e77e      	b.n	800976c <MX_ADC1_Init+0xb0>
    Error_Handler();
 800986e:	f000 faff 	bl	8009e70 <Error_Handler>
 8009872:	e785      	b.n	8009780 <MX_ADC1_Init+0xc4>
    Error_Handler();
 8009874:	f000 fafc 	bl	8009e70 <Error_Handler>
 8009878:	e78c      	b.n	8009794 <MX_ADC1_Init+0xd8>
    Error_Handler();
 800987a:	f000 faf9 	bl	8009e70 <Error_Handler>
 800987e:	e793      	b.n	80097a8 <MX_ADC1_Init+0xec>
    Error_Handler();
 8009880:	f000 faf6 	bl	8009e70 <Error_Handler>
 8009884:	e79a      	b.n	80097bc <MX_ADC1_Init+0x100>
    Error_Handler();
 8009886:	f000 faf3 	bl	8009e70 <Error_Handler>
 800988a:	e7a1      	b.n	80097d0 <MX_ADC1_Init+0x114>
    Error_Handler();
 800988c:	f000 faf0 	bl	8009e70 <Error_Handler>
 8009890:	e7a8      	b.n	80097e4 <MX_ADC1_Init+0x128>
    Error_Handler();
 8009892:	f000 faed 	bl	8009e70 <Error_Handler>
 8009896:	e7af      	b.n	80097f8 <MX_ADC1_Init+0x13c>
    Error_Handler();
 8009898:	f000 faea 	bl	8009e70 <Error_Handler>
 800989c:	e7b6      	b.n	800980c <MX_ADC1_Init+0x150>
    Error_Handler();
 800989e:	f000 fae7 	bl	8009e70 <Error_Handler>
 80098a2:	e7bd      	b.n	8009820 <MX_ADC1_Init+0x164>
    Error_Handler();
 80098a4:	f000 fae4 	bl	8009e70 <Error_Handler>
 80098a8:	e7c3      	b.n	8009832 <MX_ADC1_Init+0x176>
    Error_Handler();
 80098aa:	f000 fae1 	bl	8009e70 <Error_Handler>
}
 80098ae:	e7c9      	b.n	8009844 <MX_ADC1_Init+0x188>
 80098b0:	20004008 	.word	0x20004008
 80098b4:	40012000 	.word	0x40012000
 80098b8:	0f000001 	.word	0x0f000001

080098bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098c0:	2300      	movs	r3, #0
 80098c2:	9305      	str	r3, [sp, #20]
 80098c4:	9306      	str	r3, [sp, #24]
 80098c6:	9307      	str	r3, [sp, #28]
 80098c8:	9308      	str	r3, [sp, #32]
 80098ca:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 80098cc:	6802      	ldr	r2, [r0, #0]
 80098ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098d2:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d001      	beq.n	80098de <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80098da:	b00a      	add	sp, #40	; 0x28
 80098dc:	bd70      	pop	{r4, r5, r6, pc}
 80098de:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80098e0:	2500      	movs	r5, #0
 80098e2:	9501      	str	r5, [sp, #4]
 80098e4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80098e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098ee:	645a      	str	r2, [r3, #68]	; 0x44
 80098f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098f2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80098f6:	9201      	str	r2, [sp, #4]
 80098f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098fa:	9502      	str	r5, [sp, #8]
 80098fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098fe:	f042 0204 	orr.w	r2, r2, #4
 8009902:	631a      	str	r2, [r3, #48]	; 0x30
 8009904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009906:	f002 0204 	and.w	r2, r2, #4
 800990a:	9202      	str	r2, [sp, #8]
 800990c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800990e:	9503      	str	r5, [sp, #12]
 8009910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009912:	f042 0201 	orr.w	r2, r2, #1
 8009916:	631a      	str	r2, [r3, #48]	; 0x30
 8009918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800991a:	f002 0201 	and.w	r2, r2, #1
 800991e:	9203      	str	r2, [sp, #12]
 8009920:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009922:	9504      	str	r5, [sp, #16]
 8009924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009926:	f042 0202 	orr.w	r2, r2, #2
 800992a:	631a      	str	r2, [r3, #48]	; 0x30
 800992c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	9304      	str	r3, [sp, #16]
 8009934:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009936:	233f      	movs	r3, #63	; 0x3f
 8009938:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800993a:	2603      	movs	r6, #3
 800993c:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800993e:	a905      	add	r1, sp, #20
 8009940:	4819      	ldr	r0, [pc, #100]	; (80099a8 <HAL_ADC_MspInit+0xec>)
 8009942:	f7f8 fafb 	bl	8001f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009946:	23ff      	movs	r3, #255	; 0xff
 8009948:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800994a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800994c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800994e:	a905      	add	r1, sp, #20
 8009950:	4816      	ldr	r0, [pc, #88]	; (80099ac <HAL_ADC_MspInit+0xf0>)
 8009952:	f7f8 faf3 	bl	8001f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009956:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009958:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800995a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800995c:	a905      	add	r1, sp, #20
 800995e:	4814      	ldr	r0, [pc, #80]	; (80099b0 <HAL_ADC_MspInit+0xf4>)
 8009960:	f7f8 faec 	bl	8001f3c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8009964:	4813      	ldr	r0, [pc, #76]	; (80099b4 <HAL_ADC_MspInit+0xf8>)
 8009966:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <HAL_ADC_MspInit+0xfc>)
 8009968:	6483      	str	r3, [r0, #72]	; 0x48
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800996a:	64c5      	str	r5, [r0, #76]	; 0x4c
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800996c:	6505      	str	r5, [r0, #80]	; 0x50
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800996e:	6545      	str	r5, [r0, #84]	; 0x54
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009974:	6583      	str	r3, [r0, #88]	; 0x58
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800997a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800997c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009980:	6603      	str	r3, [r0, #96]	; 0x60
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009986:	6643      	str	r3, [r0, #100]	; 0x64
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8009988:	6685      	str	r5, [r0, #104]	; 0x68
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800998a:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800998c:	3048      	adds	r0, #72	; 0x48
 800998e:	f7f8 f937 	bl	8001c00 <HAL_DMA_Init>
 8009992:	b930      	cbnz	r0, 80099a2 <HAL_ADC_MspInit+0xe6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8009994:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <HAL_ADC_MspInit+0xf8>)
 8009996:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800999a:	63a2      	str	r2, [r4, #56]	; 0x38
 800999c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
}
 80099a0:	e79b      	b.n	80098da <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 80099a2:	f000 fa65 	bl	8009e70 <Error_Handler>
 80099a6:	e7f5      	b.n	8009994 <HAL_ADC_MspInit+0xd8>
 80099a8:	40020800 	.word	0x40020800
 80099ac:	40020000 	.word	0x40020000
 80099b0:	40020400 	.word	0x40020400
 80099b4:	20004008 	.word	0x20004008
 80099b8:	40026410 	.word	0x40026410

080099bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80099bc:	b508      	push	{r3, lr}
 80099be:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80099c0:	460a      	mov	r2, r1
 80099c2:	4601      	mov	r1, r0
 80099c4:	4802      	ldr	r0, [pc, #8]	; (80099d0 <BSP_SD_ReadBlocks_DMA+0x14>)
 80099c6:	f7f9 fd05 	bl	80033d4 <HAL_SD_ReadBlocks_DMA>
 80099ca:	b100      	cbz	r0, 80099ce <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 80099cc:	2001      	movs	r0, #1
  }

  return sd_state;
}
 80099ce:	bd08      	pop	{r3, pc}
 80099d0:	20005e9c 	.word	0x20005e9c

080099d4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80099d4:	b508      	push	{r3, lr}
 80099d6:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80099d8:	460a      	mov	r2, r1
 80099da:	4601      	mov	r1, r0
 80099dc:	4802      	ldr	r0, [pc, #8]	; (80099e8 <BSP_SD_WriteBlocks_DMA+0x14>)
 80099de:	f7f9 fd93 	bl	8003508 <HAL_SD_WriteBlocks_DMA>
 80099e2:	b100      	cbz	r0, 80099e6 <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 80099e4:	2001      	movs	r0, #1
  }

  return sd_state;
}
 80099e6:	bd08      	pop	{r3, pc}
 80099e8:	20005e9c 	.word	0x20005e9c

080099ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80099ec:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80099ee:	4803      	ldr	r0, [pc, #12]	; (80099fc <BSP_SD_GetCardState+0x10>)
 80099f0:	f7fa f886 	bl	8003b00 <HAL_SD_GetCardState>
}
 80099f4:	3804      	subs	r0, #4
 80099f6:	bf18      	it	ne
 80099f8:	2001      	movne	r0, #1
 80099fa:	bd08      	pop	{r3, pc}
 80099fc:	20005e9c 	.word	0x20005e9c

08009a00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009a00:	b508      	push	{r3, lr}
 8009a02:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <BSP_SD_GetCardInfo+0xc>)
 8009a06:	f7fa f808 	bl	8003a1a <HAL_SD_GetCardInfo>
}
 8009a0a:	bd08      	pop	{r3, pc}
 8009a0c:	20005e9c 	.word	0x20005e9c

08009a10 <BSP_SD_AbortCallback>:
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8009a10:	4770      	bx	lr

08009a12 <HAL_SD_AbortCallback>:
{
 8009a12:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8009a14:	f7ff fffc 	bl	8009a10 <BSP_SD_AbortCallback>
}
 8009a18:	bd08      	pop	{r3, pc}

08009a1a <HAL_SD_TxCpltCallback>:
{
 8009a1a:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8009a1c:	f000 fdbe 	bl	800a59c <BSP_SD_WriteCpltCallback>
}
 8009a20:	bd08      	pop	{r3, pc}

08009a22 <HAL_SD_RxCpltCallback>:
{
 8009a22:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8009a24:	f000 fdc4 	bl	800a5b0 <BSP_SD_ReadCpltCallback>
}
 8009a28:	bd08      	pop	{r3, pc}

08009a2a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009a2a:	b500      	push	{lr}
 8009a2c:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009a34:	f000 f8d8 	bl	8009be8 <BSP_PlatformIsDetected>
 8009a38:	b910      	cbnz	r0, 8009a40 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8009a40:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009a44:	b003      	add	sp, #12
 8009a46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009a4c <BSP_SD_Init>:
{
 8009a4c:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009a4e:	f7ff ffec 	bl	8009a2a <BSP_SD_IsDetected>
 8009a52:	2801      	cmp	r0, #1
 8009a54:	d002      	beq.n	8009a5c <BSP_SD_Init+0x10>
    return MSD_ERROR;
 8009a56:	2501      	movs	r5, #1
}
 8009a58:	4628      	mov	r0, r5
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd);
 8009a5e:	4807      	ldr	r0, [pc, #28]	; (8009a7c <BSP_SD_Init+0x30>)
 8009a60:	f7f9 ffc0 	bl	80039e4 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8009a64:	4605      	mov	r5, r0
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d1f6      	bne.n	8009a58 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a6e:	4803      	ldr	r0, [pc, #12]	; (8009a7c <BSP_SD_Init+0x30>)
 8009a70:	f7f9 ffe6 	bl	8003a40 <HAL_SD_ConfigWideBusOperation>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d0ef      	beq.n	8009a58 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8009a78:	4625      	mov	r5, r4
 8009a7a:	e7ed      	b.n	8009a58 <BSP_SD_Init+0xc>
 8009a7c:	20005e9c 	.word	0x20005e9c

08009a80 <hcan1_rx_readPacketsTask>:

#include "can.h"
#include "stm32f4xx_hal_can.h"
#include "IMU_CAN.h"

void hcan1_rx_readPacketsTask(){
 8009a80:	b500      	push	{lr}
 8009a82:	b08b      	sub	sp, #44	; 0x2c
	for( ;; ){
        if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0){
 8009a84:	2100      	movs	r1, #0
 8009a86:	4807      	ldr	r0, [pc, #28]	; (8009aa4 <hcan1_rx_readPacketsTask+0x24>)
 8009a88:	f7f7 ffcf 	bl	8001a2a <HAL_CAN_GetRxFifoFillLevel>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d0f9      	beq.n	8009a84 <hcan1_rx_readPacketsTask+0x4>
        	uint8_t r_Data[8];
        	CAN_RxHeaderTypeDef r_Header;

        	//might be FIFO1?
        	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &r_Header, r_Data);
 8009a90:	ab01      	add	r3, sp, #4
 8009a92:	aa03      	add	r2, sp, #12
 8009a94:	2100      	movs	r1, #0
 8009a96:	4803      	ldr	r0, [pc, #12]	; (8009aa4 <hcan1_rx_readPacketsTask+0x24>)
 8009a98:	f7f7 ff22 	bl	80018e0 <HAL_CAN_GetRxMessage>

        	if(r_Header.IDE == CAN_ID_EXT){
 8009a9c:	9b05      	ldr	r3, [sp, #20]
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	e7f0      	b.n	8009a84 <hcan1_rx_readPacketsTask+0x4>
 8009aa2:	bf00      	nop
 8009aa4:	200040b0 	.word	0x200040b0

08009aa8 <init_hcan1_rx_task>:
			}
        }
    }
}

void init_hcan1_rx_task(){
 8009aa8:	b500      	push	{lr}
 8009aaa:	b083      	sub	sp, #12
  xTaskCreate(&hcan1_rx_readPacketsTask, "hcan1_rxTask", 200, ( void * ) 1, 3, NULL);
 8009aac:	2300      	movs	r3, #0
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	22c8      	movs	r2, #200	; 0xc8
 8009ab8:	4903      	ldr	r1, [pc, #12]	; (8009ac8 <init_hcan1_rx_task+0x20>)
 8009aba:	4804      	ldr	r0, [pc, #16]	; (8009acc <init_hcan1_rx_task+0x24>)
 8009abc:	f7fe fd7f 	bl	80085be <xTaskCreate>
}
 8009ac0:	b003      	add	sp, #12
 8009ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ac6:	bf00      	nop
 8009ac8:	0800fb88 	.word	0x0800fb88
 8009acc:	08009a81 	.word	0x08009a81

08009ad0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8009ad0:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8009ad2:	480b      	ldr	r0, [pc, #44]	; (8009b00 <MX_CAN1_Init+0x30>)
 8009ad4:	4b0b      	ldr	r3, [pc, #44]	; (8009b04 <MX_CAN1_Init+0x34>)
 8009ad6:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 8009ad8:	2310      	movs	r3, #16
 8009ada:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8009adc:	2300      	movs	r3, #0
 8009ade:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009ae0:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009ae2:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009ae4:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8009ae6:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8009ae8:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8009aea:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8009aec:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8009aee:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8009af0:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8009af2:	f7f7 fe4f 	bl	8001794 <HAL_CAN_Init>
 8009af6:	b900      	cbnz	r0, 8009afa <MX_CAN1_Init+0x2a>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8009af8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009afa:	f000 f9b9 	bl	8009e70 <Error_Handler>
}
 8009afe:	e7fb      	b.n	8009af8 <MX_CAN1_Init+0x28>
 8009b00:	200040b0 	.word	0x200040b0
 8009b04:	40006400 	.word	0x40006400

08009b08 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8009b08:	b500      	push	{lr}
 8009b0a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9303      	str	r3, [sp, #12]
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	9306      	str	r3, [sp, #24]
 8009b16:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 8009b18:	6802      	ldr	r2, [r0, #0]
 8009b1a:	4b15      	ldr	r3, [pc, #84]	; (8009b70 <HAL_CAN_MspInit+0x68>)
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d002      	beq.n	8009b26 <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8009b20:	b009      	add	sp, #36	; 0x24
 8009b22:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009b26:	2100      	movs	r1, #0
 8009b28:	9101      	str	r1, [sp, #4]
 8009b2a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8009b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b30:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009b34:	641a      	str	r2, [r3, #64]	; 0x40
 8009b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b38:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8009b3c:	9201      	str	r2, [sp, #4]
 8009b3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b40:	9102      	str	r1, [sp, #8]
 8009b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b44:	f042 0201 	orr.w	r2, r2, #1
 8009b48:	631a      	str	r2, [r3, #48]	; 0x30
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	9302      	str	r3, [sp, #8]
 8009b52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8009b62:	2309      	movs	r3, #9
 8009b64:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b66:	a903      	add	r1, sp, #12
 8009b68:	4802      	ldr	r0, [pc, #8]	; (8009b74 <HAL_CAN_MspInit+0x6c>)
 8009b6a:	f7f8 f9e7 	bl	8001f3c <HAL_GPIO_Init>
}
 8009b6e:	e7d7      	b.n	8009b20 <HAL_CAN_MspInit+0x18>
 8009b70:	40006400 	.word	0x40006400
 8009b74:	40020000 	.word	0x40020000

08009b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009b7c:	2400      	movs	r4, #0
 8009b7e:	9401      	str	r4, [sp, #4]
 8009b80:	4b11      	ldr	r3, [pc, #68]	; (8009bc8 <MX_DMA_Init+0x50>)
 8009b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b84:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009b88:	631a      	str	r2, [r3, #48]	; 0x30
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8009b94:	4622      	mov	r2, r4
 8009b96:	2105      	movs	r1, #5
 8009b98:	2038      	movs	r0, #56	; 0x38
 8009b9a:	f7f7 ff6b 	bl	8001a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8009b9e:	2038      	movs	r0, #56	; 0x38
 8009ba0:	f7f7 ffa0 	bl	8001ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	2105      	movs	r1, #5
 8009ba8:	203b      	movs	r0, #59	; 0x3b
 8009baa:	f7f7 ff63 	bl	8001a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8009bae:	203b      	movs	r0, #59	; 0x3b
 8009bb0:	f7f7 ff98 	bl	8001ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	2105      	movs	r1, #5
 8009bb8:	2045      	movs	r0, #69	; 0x45
 8009bba:	f7f7 ff5b 	bl	8001a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8009bbe:	2045      	movs	r0, #69	; 0x45
 8009bc0:	f7f7 ff90 	bl	8001ae4 <HAL_NVIC_EnableIRQ>

}
 8009bc4:	b002      	add	sp, #8
 8009bc6:	bd10      	pop	{r4, pc}
 8009bc8:	40023800 	.word	0x40023800

08009bcc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009bcc:	b510      	push	{r4, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009bce:	4c03      	ldr	r4, [pc, #12]	; (8009bdc <MX_FATFS_Init+0x10>)
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	4803      	ldr	r0, [pc, #12]	; (8009be0 <MX_FATFS_Init+0x14>)
 8009bd4:	f7fd fbd2 	bl	800737c <FATFS_LinkDriver>
 8009bd8:	7120      	strb	r0, [r4, #4]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009bda:	bd10      	pop	{r4, pc}
 8009bdc:	200040d8 	.word	0x200040d8
 8009be0:	0800fa9c 	.word	0x0800fa9c

08009be4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8009be4:	2000      	movs	r0, #0
 8009be6:	4770      	bx	lr

08009be8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009be8:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009bee:	4804      	ldr	r0, [pc, #16]	; (8009c00 <BSP_PlatformIsDetected+0x18>)
 8009bf0:	f7f8 fa90 	bl	8002114 <HAL_GPIO_ReadPin>
 8009bf4:	b908      	cbnz	r0, 8009bfa <BSP_PlatformIsDetected+0x12>
    uint8_t status = SD_PRESENT;
 8009bf6:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8009bf8:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	e7fc      	b.n	8009bf8 <BSP_PlatformIsDetected+0x10>
 8009bfe:	bf00      	nop
 8009c00:	40020800 	.word	0x40020800

08009c04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8009c04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8009c06:	2001      	movs	r0, #1
 8009c08:	f7fd fca6 	bl	8007558 <osDelay>
  for(;;)
 8009c0c:	e7fb      	b.n	8009c06 <StartDefaultTask+0x2>

08009c0e <configureTimerForRunTimeStats>:
}
 8009c0e:	4770      	bx	lr

08009c10 <getRunTimeCounterValue>:
}
 8009c10:	2000      	movs	r0, #0
 8009c12:	4770      	bx	lr

08009c14 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009c14:	4b03      	ldr	r3, [pc, #12]	; (8009c24 <vApplicationGetIdleTaskMemory+0x10>)
 8009c16:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009c18:	33b8      	adds	r3, #184	; 0xb8
 8009c1a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	6013      	str	r3, [r2, #0]
}
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	2000454c 	.word	0x2000454c

08009c28 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	b088      	sub	sp, #32
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8009c2c:	f10d 0c04 	add.w	ip, sp, #4
 8009c30:	4c08      	ldr	r4, [pc, #32]	; (8009c54 <MX_FREERTOS_Init+0x2c>)
 8009c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009c3c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8009c40:	2100      	movs	r1, #0
 8009c42:	a801      	add	r0, sp, #4
 8009c44:	f7fd fc53 	bl	80074ee <osThreadCreate>
 8009c48:	4b03      	ldr	r3, [pc, #12]	; (8009c58 <MX_FREERTOS_Init+0x30>)
 8009c4a:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
}
 8009c4e:	b008      	add	sp, #32
 8009c50:	bd10      	pop	{r4, pc}
 8009c52:	bf00      	nop
 8009c54:	0800fa68 	.word	0x0800fa68
 8009c58:	2000454c 	.word	0x2000454c

08009c5c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8009c5c:	b530      	push	{r4, r5, lr}
 8009c5e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c60:	2400      	movs	r4, #0
 8009c62:	9405      	str	r4, [sp, #20]
 8009c64:	9406      	str	r4, [sp, #24]
 8009c66:	9407      	str	r4, [sp, #28]
 8009c68:	9408      	str	r4, [sp, #32]
 8009c6a:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009c6c:	9401      	str	r4, [sp, #4]
 8009c6e:	4b1f      	ldr	r3, [pc, #124]	; (8009cec <MX_GPIO_Init+0x90>)
 8009c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c72:	f042 0204 	orr.w	r2, r2, #4
 8009c76:	631a      	str	r2, [r3, #48]	; 0x30
 8009c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c7a:	f002 0204 	and.w	r2, r2, #4
 8009c7e:	9201      	str	r2, [sp, #4]
 8009c80:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c82:	9402      	str	r4, [sp, #8]
 8009c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c86:	f042 0201 	orr.w	r2, r2, #1
 8009c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8009c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c8e:	f002 0201 	and.w	r2, r2, #1
 8009c92:	9202      	str	r2, [sp, #8]
 8009c94:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c96:	9403      	str	r4, [sp, #12]
 8009c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c9a:	f042 0202 	orr.w	r2, r2, #2
 8009c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8009ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ca2:	f002 0202 	and.w	r2, r2, #2
 8009ca6:	9203      	str	r2, [sp, #12]
 8009ca8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009caa:	9404      	str	r4, [sp, #16]
 8009cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cae:	f042 0208 	orr.w	r2, r2, #8
 8009cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	f003 0308 	and.w	r3, r3, #8
 8009cba:	9304      	str	r3, [sp, #16]
 8009cbc:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8009cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009cc2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009cc4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009cc8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009cca:	4d09      	ldr	r5, [pc, #36]	; (8009cf0 <MX_GPIO_Init+0x94>)
 8009ccc:	a905      	add	r1, sp, #20
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f7f8 f934 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_Card_Detect_Pin;
 8009cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cd8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009cda:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cdc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SD_Card_Detect_GPIO_Port, &GPIO_InitStruct);
 8009cde:	a905      	add	r1, sp, #20
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f7f8 f92b 	bl	8001f3c <HAL_GPIO_Init>

}
 8009ce6:	b00b      	add	sp, #44	; 0x2c
 8009ce8:	bd30      	pop	{r4, r5, pc}
 8009cea:	bf00      	nop
 8009cec:	40023800 	.word	0x40023800
 8009cf0:	40020800 	.word	0x40020800

08009cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009cf4:	b530      	push	{r4, r5, lr}
 8009cf6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009cf8:	2234      	movs	r2, #52	; 0x34
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	a807      	add	r0, sp, #28
 8009cfe:	f001 fca0 	bl	800b642 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d02:	2400      	movs	r4, #0
 8009d04:	9402      	str	r4, [sp, #8]
 8009d06:	9403      	str	r4, [sp, #12]
 8009d08:	9404      	str	r4, [sp, #16]
 8009d0a:	9405      	str	r4, [sp, #20]
 8009d0c:	9406      	str	r4, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d0e:	9400      	str	r4, [sp, #0]
 8009d10:	4b1d      	ldr	r3, [pc, #116]	; (8009d88 <SystemClock_Config+0x94>)
 8009d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009d18:	641a      	str	r2, [r3, #64]	; 0x40
 8009d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d24:	9401      	str	r4, [sp, #4]
 8009d26:	4b19      	ldr	r3, [pc, #100]	; (8009d8c <SystemClock_Config+0x98>)
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009d36:	9301      	str	r3, [sp, #4]
 8009d38:	9b01      	ldr	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8009d3a:	230a      	movs	r3, #10
 8009d3c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8009d3e:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009d40:	2301      	movs	r3, #1
 8009d42:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009d44:	2210      	movs	r2, #16
 8009d46:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009d48:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d4a:	2502      	movs	r5, #2
 8009d4c:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009d4e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009d50:	2308      	movs	r3, #8
 8009d52:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8009d54:	22b4      	movs	r2, #180	; 0xb4
 8009d56:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009d58:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8009d5a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009d5c:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d5e:	a807      	add	r0, sp, #28
 8009d60:	f7f8 fe0c 	bl	800297c <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009d64:	f7f8 f9de 	bl	8002124 <HAL_PWREx_EnableOverDrive>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d68:	230f      	movs	r3, #15
 8009d6a:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009d6c:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d6e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009d70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009d74:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d7a:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009d7c:	2105      	movs	r1, #5
 8009d7e:	a802      	add	r0, sp, #8
 8009d80:	f7f8 fa0e 	bl	80021a0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8009d84:	b015      	add	sp, #84	; 0x54
 8009d86:	bd30      	pop	{r4, r5, pc}
 8009d88:	40023800 	.word	0x40023800
 8009d8c:	40007000 	.word	0x40007000

08009d90 <main>:
{
 8009d90:	b508      	push	{r3, lr}
  HAL_Init();
 8009d92:	f7f7 fa09 	bl	80011a8 <HAL_Init>
  SystemClock_Config();
 8009d96:	f7ff ffad 	bl	8009cf4 <SystemClock_Config>
  MX_GPIO_Init();
 8009d9a:	f7ff ff5f 	bl	8009c5c <MX_GPIO_Init>
  MX_DMA_Init();
 8009d9e:	f7ff feeb 	bl	8009b78 <MX_DMA_Init>
  MX_ADC1_Init();
 8009da2:	f7ff fc8b 	bl	80096bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8009da6:	f001 f96b 	bl	800b080 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8009daa:	f7ff fe91 	bl	8009ad0 <MX_CAN1_Init>
  MX_SDIO_SD_Init();
 8009dae:	f000 fc09 	bl	800a5c4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8009db2:	f7ff ff0b 	bl	8009bcc <MX_FATFS_Init>
  MX_RTC_Init();
 8009db6:	f000 f85d 	bl	8009e74 <MX_RTC_Init>
  MX_TIM1_Init();
 8009dba:	f000 ff23 	bl	800ac04 <MX_TIM1_Init>
  MX_TIM2_Init();
 8009dbe:	f000 ff5b 	bl	800ac78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009dc2:	f000 ffad 	bl	800ad20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8009dc6:	f001 f805 	bl	800add4 <MX_TIM4_Init>
  Init_SD_Card();
 8009dca:	f000 f953 	bl	800a074 <Init_SD_Card>
  HAL_TIM_Base_Start_IT(&htim1);
 8009dce:	4812      	ldr	r0, [pc, #72]	; (8009e18 <main+0x88>)
 8009dd0:	f7fa f884 	bl	8003edc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8009dd4:	4d11      	ldr	r5, [pc, #68]	; (8009e1c <main+0x8c>)
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f7fa f880 	bl	8003edc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8009ddc:	4c10      	ldr	r4, [pc, #64]	; (8009e20 <main+0x90>)
 8009dde:	4620      	mov	r0, r4
 8009de0:	f7fa f87c 	bl	8003edc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); 		// Start input capture
 8009de4:	2100      	movs	r1, #0
 8009de6:	4628      	mov	r0, r5
 8009de8:	f7fa fb74 	bl	80044d4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); 		// Start input capture
 8009dec:	2100      	movs	r1, #0
 8009dee:	4620      	mov	r0, r4
 8009df0:	f7fa fb70 	bl	80044d4 <HAL_TIM_IC_Start_IT>
  MX_FREERTOS_Init();
 8009df4:	f7ff ff18 	bl	8009c28 <MX_FREERTOS_Init>
  Init_SD_RTOS_Tasks();
 8009df8:	f000 f95a 	bl	800a0b0 <Init_SD_RTOS_Tasks>
  Init_WheelSpeed_Logging_Task();					// Start the wheelspeed logging task
 8009dfc:	f001 f994 	bl	800b128 <Init_WheelSpeed_Logging_Task>
  init_hcan1_rx_task();								// Start Can rx task
 8009e00:	f7ff fe52 	bl	8009aa8 <init_hcan1_rx_task>
  init_imu_post_task();								// Start Imu Post Task
 8009e04:	f7ff fc46 	bl	8009694 <init_imu_post_task>
  init_readTemp_task();								// Start reading the temperatures from the thermistors
 8009e08:	f000 fee8 	bl	800abdc <init_readTemp_task>
  MX_FREERTOS_Init();
 8009e0c:	f7ff ff0c 	bl	8009c28 <MX_FREERTOS_Init>
  osKernelStart();
 8009e10:	f7fd fb55 	bl	80074be <osKernelStart>
  while (1)
 8009e14:	e7fe      	b.n	8009e14 <main+0x84>
 8009e16:	bf00      	nop
 8009e18:	20006108 	.word	0x20006108
 8009e1c:	20006150 	.word	0x20006150
 8009e20:	20006198 	.word	0x20006198

08009e24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e24:	b510      	push	{r4, lr}
 8009e26:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8009e28:	6802      	ldr	r2, [r0, #0]
 8009e2a:	4b0e      	ldr	r3, [pc, #56]	; (8009e64 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d00c      	beq.n	8009e4a <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM1)
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	4b0d      	ldr	r3, [pc, #52]	; (8009e68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d00b      	beq.n	8009e50 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  HAL_TimestampUpdate_Callback(htim);	//update the timestamp

  if(htim->Instance == TIM2)
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3e:	d00b      	beq.n	8009e58 <HAL_TIM_PeriodElapsedCallback+0x34>
	  HAL_FR_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens

  if(htim->Instance == TIM3)
 8009e40:	6822      	ldr	r2, [r4, #0]
 8009e42:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d00a      	beq.n	8009e5e <HAL_TIM_PeriodElapsedCallback+0x3a>
	  HAL_FL_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens


  /* USER CODE END Callback 1 */
}
 8009e48:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8009e4a:	f7f7 f9c7 	bl	80011dc <HAL_IncTick>
 8009e4e:	e7ef      	b.n	8009e30 <HAL_TIM_PeriodElapsedCallback+0xc>
	  HAL_TimestampUpdate_Callback(htim);	//update the timestamp
 8009e50:	4620      	mov	r0, r4
 8009e52:	f001 f901 	bl	800b058 <HAL_TimestampUpdate_Callback>
 8009e56:	e7ef      	b.n	8009e38 <HAL_TIM_PeriodElapsedCallback+0x14>
	  HAL_FR_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens
 8009e58:	f001 fa8a 	bl	800b370 <HAL_FR_Wheelspeed_Overflow_Callback>
 8009e5c:	e7f0      	b.n	8009e40 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  HAL_FL_Wheelspeed_Overflow_Callback();		// update the wheelspeed overfow when that happens
 8009e5e:	f001 fa91 	bl	800b384 <HAL_FL_Wheelspeed_Overflow_Callback>
}
 8009e62:	e7f1      	b.n	8009e48 <HAL_TIM_PeriodElapsedCallback+0x24>
 8009e64:	40014400 	.word	0x40014400
 8009e68:	40010000 	.word	0x40010000
 8009e6c:	40000400 	.word	0x40000400

08009e70 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009e70:	4770      	bx	lr
	...

08009e74 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8009e74:	b500      	push	{lr}
 8009e76:	b087      	sub	sp, #28

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009e78:	2300      	movs	r3, #0
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	9302      	str	r3, [sp, #8]
 8009e7e:	9303      	str	r3, [sp, #12]
 8009e80:	9304      	str	r3, [sp, #16]
 8009e82:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8009e84:	9300      	str	r3, [sp, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009e86:	481d      	ldr	r0, [pc, #116]	; (8009efc <MX_RTC_Init+0x88>)
 8009e88:	4a1d      	ldr	r2, [pc, #116]	; (8009f00 <MX_RTC_Init+0x8c>)
 8009e8a:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009e8c:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009e8e:	227f      	movs	r2, #127	; 0x7f
 8009e90:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8009e92:	22ff      	movs	r2, #255	; 0xff
 8009e94:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009e96:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009e98:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009e9a:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009e9c:	f7f8 ffe1 	bl	8002e62 <HAL_RTC_Init>
 8009ea0:	bb18      	cbnz	r0, 8009eea <MX_RTC_Init+0x76>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8009ea2:	2312      	movs	r3, #18
 8009ea4:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8009eae:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009eb2:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009eb4:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	a901      	add	r1, sp, #4
 8009eba:	4810      	ldr	r0, [pc, #64]	; (8009efc <MX_RTC_Init+0x88>)
 8009ebc:	f7f9 f823 	bl	8002f06 <HAL_RTC_SetTime>
 8009ec0:	b9b0      	cbnz	r0, 8009ef0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8009ec2:	2307      	movs	r3, #7
 8009ec4:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_AUGUST;
 8009ec8:	2208      	movs	r2, #8
 8009eca:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x7;
 8009ece:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 0x0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009ed8:	2201      	movs	r2, #1
 8009eda:	4669      	mov	r1, sp
 8009edc:	4807      	ldr	r0, [pc, #28]	; (8009efc <MX_RTC_Init+0x88>)
 8009ede:	f7f9 f871 	bl	8002fc4 <HAL_RTC_SetDate>
 8009ee2:	b940      	cbnz	r0, 8009ef6 <MX_RTC_Init+0x82>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009ee4:	b007      	add	sp, #28
 8009ee6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8009eea:	f7ff ffc1 	bl	8009e70 <Error_Handler>
 8009eee:	e7d8      	b.n	8009ea2 <MX_RTC_Init+0x2e>
    Error_Handler();
 8009ef0:	f7ff ffbe 	bl	8009e70 <Error_Handler>
 8009ef4:	e7e5      	b.n	8009ec2 <MX_RTC_Init+0x4e>
    Error_Handler();
 8009ef6:	f7ff ffbb 	bl	8009e70 <Error_Handler>
}
 8009efa:	e7f3      	b.n	8009ee4 <MX_RTC_Init+0x70>
 8009efc:	20004808 	.word	0x20004808
 8009f00:	40002800 	.word	0x40002800

08009f04 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009f04:	b510      	push	{r4, lr}
 8009f06:	b098      	sub	sp, #96	; 0x60
 8009f08:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f0a:	225c      	movs	r2, #92	; 0x5c
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	a801      	add	r0, sp, #4
 8009f10:	f001 fb97 	bl	800b642 <memset>
  if(rtcHandle->Instance==RTC)
 8009f14:	6822      	ldr	r2, [r4, #0]
 8009f16:	4b0b      	ldr	r3, [pc, #44]	; (8009f44 <HAL_RTC_MspInit+0x40>)
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d001      	beq.n	8009f20 <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009f1c:	b018      	add	sp, #96	; 0x60
 8009f1e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009f20:	2320      	movs	r3, #32
 8009f22:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f28:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009f2a:	a801      	add	r0, sp, #4
 8009f2c:	f7f8 fa2c 	bl	8002388 <HAL_RCCEx_PeriphCLKConfig>
 8009f30:	b920      	cbnz	r0, 8009f3c <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 8009f32:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <HAL_RTC_MspInit+0x44>)
 8009f34:	2201      	movs	r2, #1
 8009f36:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
}
 8009f3a:	e7ef      	b.n	8009f1c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8009f3c:	f7ff ff98 	bl	8009e70 <Error_Handler>
 8009f40:	e7f7      	b.n	8009f32 <HAL_RTC_MspInit+0x2e>
 8009f42:	bf00      	nop
 8009f44:	40002800 	.word	0x40002800
 8009f48:	42470000 	.word	0x42470000

08009f4c <xTest_Sender_Task>:
}
*/


//Test
void xTest_Sender_Task(void * pvParameters){
 8009f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f50:	b0a9      	sub	sp, #164	; 0xa4
	uint32_t MS_WAIT = pdMS_TO_TICKS(1000);
	RTC_TimeTypeDef timeStruct;

	char rtcTimeBuff[128];			// Buffer for a rtc time string

	int i = 0;
 8009f52:	2400      	movs	r4, #0
 8009f54:	e029      	b.n	8009faa <xTest_Sender_Task+0x5e>
		if(i> 1000){
			//gotQueued = SD_Eject();			// Read from the log file
		}
		else{

			HAL_RTC_GetTime(&hrtc, &timeStruct, RTC_FORMAT_BCD);			// Get the time of the recording
 8009f56:	2201      	movs	r2, #1
 8009f58:	a923      	add	r1, sp, #140	; 0x8c
 8009f5a:	4816      	ldr	r0, [pc, #88]	; (8009fb4 <xTest_Sender_Task+0x68>)
 8009f5c:	f7f9 f889 	bl	8003072 <HAL_RTC_GetTime>

			sprintf(rtcTimeBuff, "Time: %2d:%2d:%2.7lf	-> ", timeStruct.Hours, timeStruct.Minutes, timeStruct.Seconds+(double)1/timeStruct.SubSeconds);
 8009f60:	f89d 508c 	ldrb.w	r5, [sp, #140]	; 0x8c
 8009f64:	f89d 808d 	ldrb.w	r8, [sp, #141]	; 0x8d
 8009f68:	f89d 908e 	ldrb.w	r9, [sp, #142]	; 0x8e
 8009f6c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8009f6e:	f7f6 fae9 	bl	8000544 <__aeabi_ui2d>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	2000      	movs	r0, #0
 8009f78:	490f      	ldr	r1, [pc, #60]	; (8009fb8 <xTest_Sender_Task+0x6c>)
 8009f7a:	f7f6 fc87 	bl	800088c <__aeabi_ddiv>
 8009f7e:	4606      	mov	r6, r0
 8009f80:	460f      	mov	r7, r1
 8009f82:	4648      	mov	r0, r9
 8009f84:	f7f6 faee 	bl	8000564 <__aeabi_i2d>
 8009f88:	4632      	mov	r2, r6
 8009f8a:	463b      	mov	r3, r7
 8009f8c:	f7f6 f99e 	bl	80002cc <__adddf3>
 8009f90:	e9cd 0100 	strd	r0, r1, [sp]
 8009f94:	4643      	mov	r3, r8
 8009f96:	462a      	mov	r2, r5
 8009f98:	4908      	ldr	r1, [pc, #32]	; (8009fbc <xTest_Sender_Task+0x70>)
 8009f9a:	a803      	add	r0, sp, #12
 8009f9c:	f002 f8d2 	bl	800c144 <siprintf>

			//gotQueued = SD_Log(rtcTimeBuff, -1);
			i++;
 8009fa0:	3401      	adds	r4, #1
		}


		vTaskDelay(MS_WAIT);	// delay a second
 8009fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fa6:	f7fe fc9b 	bl	80088e0 <vTaskDelay>
		if(i> 1000){
 8009faa:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8009fae:	dcf8      	bgt.n	8009fa2 <xTest_Sender_Task+0x56>
 8009fb0:	e7d1      	b.n	8009f56 <xTest_Sender_Task+0xa>
 8009fb2:	bf00      	nop
 8009fb4:	20004808 	.word	0x20004808
 8009fb8:	3ff00000 	.word	0x3ff00000
 8009fbc:	0800fba4 	.word	0x0800fba4

08009fc0 <SD_Task_Read>:
static _Bool SD_Task_Read(int32_t btr, char * buff, FileEnum fileNum){
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	460f      	mov	r7, r1
	ofs = f_tell(&fil[fileNum]);		// Get file pointer of open file
 8009fc6:	4d17      	ldr	r5, [pc, #92]	; (800a024 <SD_Task_Read+0x64>)
 8009fc8:	f44f 740c 	mov.w	r4, #560	; 0x230
 8009fcc:	fb04 5402 	mla	r4, r4, r2, r5
 8009fd0:	69a3      	ldr	r3, [r4, #24]
 8009fd2:	f8c5 3690 	str.w	r3, [r5, #1680]	; 0x690
	f_res = f_lseek(&fil[fileNum], 0);	// point to beginning of file
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f7fc ff50 	bl	8006e7e <f_lseek>
 8009fde:	f885 0694 	strb.w	r0, [r5, #1684]	; 0x694
	f_res = f_read(&fil[fileNum], buff, btr, &br);		// Read the desired file
 8009fe2:	f505 63d3 	add.w	r3, r5, #1688	; 0x698
 8009fe6:	4632      	mov	r2, r6
 8009fe8:	4639      	mov	r1, r7
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7fc fc61 	bl	80068b2 <f_read>
 8009ff0:	f885 0694 	strb.w	r0, [r5, #1684]	; 0x694
	if(f_res != FR_OK){
 8009ff4:	b9a0      	cbnz	r0, 800a020 <SD_Task_Read+0x60>
	if(br < btr){
 8009ff6:	f8d5 3698 	ldr.w	r3, [r5, #1688]	; 0x698
 8009ffa:	429e      	cmp	r6, r3
 8009ffc:	d900      	bls.n	800a000 <SD_Task_Read+0x40>
		__NOP();
 8009ffe:	bf00      	nop
	f_res = f_lseek(&fil[fileNum], ofs);	// point back to where we were in the file
 800a000:	4d08      	ldr	r5, [pc, #32]	; (800a024 <SD_Task_Read+0x64>)
 800a002:	f8d5 1690 	ldr.w	r1, [r5, #1680]	; 0x690
 800a006:	4620      	mov	r0, r4
 800a008:	f7fc ff39 	bl	8006e7e <f_lseek>
 800a00c:	f885 0694 	strb.w	r0, [r5, #1684]	; 0x694
	f_res = f_puts("SD Logger - Read From SD Card\n\n", &fil[LogFile]);
 800a010:	4629      	mov	r1, r5
 800a012:	4805      	ldr	r0, [pc, #20]	; (800a028 <SD_Task_Read+0x68>)
 800a014:	f7fd f975 	bl	8007302 <f_puts>
 800a018:	f885 0694 	strb.w	r0, [r5, #1684]	; 0x694
	return 1;
 800a01c:	2001      	movs	r0, #1
}// SD Task Read
 800a01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 800a020:	2000      	movs	r0, #0
 800a022:	e7fc      	b.n	800a01e <SD_Task_Read+0x5e>
 800a024:	20004828 	.word	0x20004828
 800a028:	0800fbc0 	.word	0x0800fbc0

0800a02c <xSD_Sync>:
void xSD_Sync(void * pvparameters){
 800a02c:	b510      	push	{r4, lr}
	syncRequest.type = Sync;	// Sync
 800a02e:	4b10      	ldr	r3, [pc, #64]	; (800a070 <xSD_Sync+0x44>)
 800a030:	2202      	movs	r2, #2
 800a032:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 800a036:	e003      	b.n	800a040 <xSD_Sync+0x14>
			__NOP();
 800a038:	bf00      	nop
		vTaskDelay(MS_WAIT);	//Delay this much at least to sync again.
 800a03a:	2064      	movs	r0, #100	; 0x64
 800a03c:	f7fe fc50 	bl	80088e0 <vTaskDelay>
		ret = ulTaskNotifyTake(pdTRUE, MS_WAIT);		// enter blocked state and wait for a write
 800a040:	2164      	movs	r1, #100	; 0x64
 800a042:	2001      	movs	r0, #1
 800a044:	f7fe ff2a 	bl	8008e9c <ulTaskNotifyTake>
 800a048:	4b09      	ldr	r3, [pc, #36]	; (800a070 <xSD_Sync+0x44>)
 800a04a:	f8c3 06a8 	str.w	r0, [r3, #1704]	; 0x6a8
		if(ret == pdTRUE){
 800a04e:	2801      	cmp	r0, #1
 800a050:	d1f2      	bne.n	800a038 <xSD_Sync+0xc>
			ret = xQueueSendToBack(xSD_Card_Queue, &syncRequest, 0);	//Queue should never have more than one value in it thus wait = 0
 800a052:	461c      	mov	r4, r3
 800a054:	2300      	movs	r3, #0
 800a056:	461a      	mov	r2, r3
 800a058:	f204 619c 	addw	r1, r4, #1692	; 0x69c
 800a05c:	f8d4 06ac 	ldr.w	r0, [r4, #1708]	; 0x6ac
 800a060:	f7fd fd44 	bl	8007aec <xQueueGenericSend>
 800a064:	f8c4 06a8 	str.w	r0, [r4, #1704]	; 0x6a8
			if(ret != pdPASS){
 800a068:	2801      	cmp	r0, #1
 800a06a:	d0e6      	beq.n	800a03a <xSD_Sync+0xe>
				__NOP();
 800a06c:	bf00      	nop
 800a06e:	e7e4      	b.n	800a03a <xSD_Sync+0xe>
 800a070:	20004828 	.word	0x20004828

0800a074 <Init_SD_Card>:
void Init_SD_Card(){
 800a074:	b510      	push	{r4, lr}
 800a076:	b082      	sub	sp, #8
	xSD_Card_Queue = xQueueCreateStatic(SD_QUEUE_LEN,
 800a078:	4c0c      	ldr	r4, [pc, #48]	; (800a0ac <Init_SD_Card+0x38>)
 800a07a:	2300      	movs	r3, #0
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	f504 63d6 	add.w	r3, r4, #1712	; 0x6b0
 800a082:	f504 62df 	add.w	r2, r4, #1784	; 0x6f8
 800a086:	210c      	movs	r1, #12
 800a088:	2014      	movs	r0, #20
 800a08a:	f7fd fcc1 	bl	8007a10 <xQueueGenericCreateStatic>
 800a08e:	f8c4 06ac 	str.w	r0, [r4, #1708]	; 0x6ac
	configASSERT(xSD_Card_Queue);	// xSD_Card_Queue_Storage was not NULL so xQueue should not be NULL.
 800a092:	b108      	cbz	r0, 800a098 <Init_SD_Card+0x24>
}// Init_SD_Card
 800a094:	b002      	add	sp, #8
 800a096:	bd10      	pop	{r4, pc}
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
	configASSERT(xSD_Card_Queue);	// xSD_Card_Queue_Storage was not NULL so xQueue should not be NULL.
 800a0a8:	e7fe      	b.n	800a0a8 <Init_SD_Card+0x34>
 800a0aa:	bf00      	nop
 800a0ac:	20004828 	.word	0x20004828

0800a0b0 <Init_SD_RTOS_Tasks>:
void Init_SD_RTOS_Tasks(){
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	b084      	sub	sp, #16
	 xSD_Card_Gatekeeper_Handle = xTaskCreateStatic(	xSD_Card_Gatekeeper,
 800a0b4:	4c1a      	ldr	r4, [pc, #104]	; (800a120 <Init_SD_RTOS_Tasks+0x70>)
 800a0b6:	f504 63fd 	add.w	r3, r4, #2024	; 0x7e8
 800a0ba:	9302      	str	r3, [sp, #8]
 800a0bc:	f504 630a 	add.w	r3, r4, #2208	; 0x8a0
 800a0c0:	9301      	str	r3, [sp, #4]
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0cc:	4915      	ldr	r1, [pc, #84]	; (800a124 <Init_SD_RTOS_Tasks+0x74>)
 800a0ce:	4816      	ldr	r0, [pc, #88]	; (800a128 <Init_SD_RTOS_Tasks+0x78>)
 800a0d0:	f7fe fa3a 	bl	8008548 <xTaskCreateStatic>
 800a0d4:	f8c4 0ca0 	str.w	r0, [r4, #3232]	; 0xca0
	xSD_Card_Sync_Handle = xTaskCreateStatic(	xSD_Sync,
 800a0d8:	f604 43a4 	addw	r3, r4, #3236	; 0xca4
 800a0dc:	9302      	str	r3, [sp, #8]
 800a0de:	f604 535c 	addw	r3, r4, #3420	; 0xd5c
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	f06f 0301 	mvn.w	r3, #1
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	2280      	movs	r2, #128	; 0x80
 800a0ee:	490f      	ldr	r1, [pc, #60]	; (800a12c <Init_SD_RTOS_Tasks+0x7c>)
 800a0f0:	480f      	ldr	r0, [pc, #60]	; (800a130 <Init_SD_RTOS_Tasks+0x80>)
 800a0f2:	f7fe fa29 	bl	8008548 <xTaskCreateStatic>
 800a0f6:	f8c4 0f5c 	str.w	r0, [r4, #3932]	; 0xf5c
	xSD_Card_Test_Handle = xTaskCreateStatic(	xTest_Sender_Task,
 800a0fa:	f504 6476 	add.w	r4, r4, #3936	; 0xf60
 800a0fe:	9402      	str	r4, [sp, #8]
 800a100:	4c0c      	ldr	r4, [pc, #48]	; (800a134 <Init_SD_RTOS_Tasks+0x84>)
 800a102:	f1a4 03e0 	sub.w	r3, r4, #224	; 0xe0
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	2300      	movs	r3, #0
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a110:	4909      	ldr	r1, [pc, #36]	; (800a138 <Init_SD_RTOS_Tasks+0x88>)
 800a112:	480a      	ldr	r0, [pc, #40]	; (800a13c <Init_SD_RTOS_Tasks+0x8c>)
 800a114:	f7fe fa18 	bl	8008548 <xTaskCreateStatic>
 800a118:	f8c4 0320 	str.w	r0, [r4, #800]	; 0x320
}//init RTOS tasks
 800a11c:	b004      	add	sp, #16
 800a11e:	bd10      	pop	{r4, pc}
 800a120:	20004828 	.word	0x20004828
 800a124:	0800fbe0 	.word	0x0800fbe0
 800a128:	0800a251 	.word	0x0800a251
 800a12c:	0800fbf0 	.word	0x0800fbf0
 800a130:	0800a02d 	.word	0x0800a02d
 800a134:	20005920 	.word	0x20005920
 800a138:	0800fbf8 	.word	0x0800fbf8
 800a13c:	08009f4d 	.word	0x08009f4d

0800a140 <SD_Log>:
_Bool SD_Log(char * msg, int32_t bytesToWrite){
 800a140:	b500      	push	{lr}
 800a142:	b085      	sub	sp, #20
	request.type = Write;
 800a144:	2301      	movs	r3, #1
 800a146:	f88d 3004 	strb.w	r3, [sp, #4]
	request.buff = msg;
 800a14a:	9003      	str	r0, [sp, #12]
	request.fileName = LogFile;
 800a14c:	2200      	movs	r2, #0
 800a14e:	f88d 2005 	strb.w	r2, [sp, #5]
	request.size = bytesToWrite;
 800a152:	9102      	str	r1, [sp, #8]
	ret = xQueueSendToBack(xSD_Card_Queue, &request, 0);	//Queue should never have more than one value in it thus wait = 0
 800a154:	4613      	mov	r3, r2
 800a156:	a901      	add	r1, sp, #4
 800a158:	4805      	ldr	r0, [pc, #20]	; (800a170 <SD_Log+0x30>)
 800a15a:	f8d0 06ac 	ldr.w	r0, [r0, #1708]	; 0x6ac
 800a15e:	f7fd fcc5 	bl	8007aec <xQueueGenericSend>
	if(ret != pdPASS){
 800a162:	2801      	cmp	r0, #1
 800a164:	d000      	beq.n	800a168 <SD_Log+0x28>
		return 0;
 800a166:	2000      	movs	r0, #0
}//SD_ Log
 800a168:	b005      	add	sp, #20
 800a16a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a16e:	bf00      	nop
 800a170:	20004828 	.word	0x20004828

0800a174 <Time_Stamp>:
void Time_Stamp(char str){
 800a174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a178:	b0c9      	sub	sp, #292	; 0x124
 800a17a:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &timeStruct, RTC_FORMAT_BCD);			// Get the time of the recording
 800a17c:	2201      	movs	r2, #1
 800a17e:	a943      	add	r1, sp, #268	; 0x10c
 800a180:	4814      	ldr	r0, [pc, #80]	; (800a1d4 <Time_Stamp+0x60>)
 800a182:	f7f8 ff76 	bl	8003072 <HAL_RTC_GetTime>
	sprintf(rtcTimeBuff, "Time: (%2d:%2d:%2.7lf) \n", timeStruct.Hours, timeStruct.Minutes, timeStruct.Seconds+(double)1/timeStruct.SubSeconds);
 800a186:	f89d 510c 	ldrb.w	r5, [sp, #268]	; 0x10c
 800a18a:	f89d 810d 	ldrb.w	r8, [sp, #269]	; 0x10d
 800a18e:	f89d 910e 	ldrb.w	r9, [sp, #270]	; 0x10e
 800a192:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a194:	f7f6 f9d6 	bl	8000544 <__aeabi_ui2d>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	2000      	movs	r0, #0
 800a19e:	490e      	ldr	r1, [pc, #56]	; (800a1d8 <Time_Stamp+0x64>)
 800a1a0:	f7f6 fb74 	bl	800088c <__aeabi_ddiv>
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	460f      	mov	r7, r1
 800a1a8:	4648      	mov	r0, r9
 800a1aa:	f7f6 f9db 	bl	8000564 <__aeabi_i2d>
 800a1ae:	4632      	mov	r2, r6
 800a1b0:	463b      	mov	r3, r7
 800a1b2:	f7f6 f88b 	bl	80002cc <__adddf3>
 800a1b6:	e9cd 0100 	strd	r0, r1, [sp]
 800a1ba:	4643      	mov	r3, r8
 800a1bc:	462a      	mov	r2, r5
 800a1be:	4907      	ldr	r1, [pc, #28]	; (800a1dc <Time_Stamp+0x68>)
 800a1c0:	a803      	add	r0, sp, #12
 800a1c2:	f001 ffbf 	bl	800c144 <siprintf>
	strcat(str,rtcTimeBuff);
 800a1c6:	a903      	add	r1, sp, #12
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f002 f81e 	bl	800c20a <strcat>
}
 800a1ce:	b049      	add	sp, #292	; 0x124
 800a1d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1d4:	20004808 	.word	0x20004808
 800a1d8:	3ff00000 	.word	0x3ff00000
 800a1dc:	0800fc04 	.word	0x0800fc04

0800a1e0 <SD_Task_Write>:
static _Bool SD_Task_Write(int32_t btw, char * str, FileEnum fileNum){
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	460d      	mov	r5, r1
 800a1e4:	4614      	mov	r4, r2
	if(btw == -1)
 800a1e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1ea:	d008      	beq.n	800a1fe <SD_Task_Write+0x1e>
		len = btw;
 800a1ec:	4b16      	ldr	r3, [pc, #88]	; (800a248 <SD_Task_Write+0x68>)
 800a1ee:	f8c3 0324 	str.w	r0, [r3, #804]	; 0x324
	if(f_res != FR_OK){
 800a1f2:	4b16      	ldr	r3, [pc, #88]	; (800a24c <SD_Task_Write+0x6c>)
 800a1f4:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 800a1f8:	b143      	cbz	r3, 800a20c <SD_Task_Write+0x2c>
		return 0;
 800a1fa:	2000      	movs	r0, #0
}// SD_Task_Write
 800a1fc:	bd70      	pop	{r4, r5, r6, pc}
		len = strlen(str);			// Dont need this feature but eh
 800a1fe:	4608      	mov	r0, r1
 800a200:	f7f6 f806 	bl	8000210 <strlen>
 800a204:	4b10      	ldr	r3, [pc, #64]	; (800a248 <SD_Task_Write+0x68>)
 800a206:	f8c3 0324 	str.w	r0, [r3, #804]	; 0x324
 800a20a:	e7f2      	b.n	800a1f2 <SD_Task_Write+0x12>
	Time_Stamp(str);
 800a20c:	4628      	mov	r0, r5
 800a20e:	f7ff ffb1 	bl	800a174 <Time_Stamp>
	f_res = f_write(&fil[fileNum], str, len, &bw);							// Write to SD buffer
 800a212:	4e0e      	ldr	r6, [pc, #56]	; (800a24c <SD_Task_Write+0x6c>)
 800a214:	f44f 720c 	mov.w	r2, #560	; 0x230
 800a218:	fb02 6404 	mla	r4, r2, r4, r6
 800a21c:	4a0a      	ldr	r2, [pc, #40]	; (800a248 <SD_Task_Write+0x68>)
 800a21e:	f502 734a 	add.w	r3, r2, #808	; 0x328
 800a222:	f8d2 2324 	ldr.w	r2, [r2, #804]	; 0x324
 800a226:	4629      	mov	r1, r5
 800a228:	4620      	mov	r0, r4
 800a22a:	f7fc fc2e 	bl	8006a8a <f_write>
 800a22e:	f886 0694 	strb.w	r0, [r6, #1684]	; 0x694
	f_sync(&fil[fileNum]);
 800a232:	4620      	mov	r0, r4
 800a234:	f7fc fd78 	bl	8006d28 <f_sync>
	if(f_res != FR_OK){
 800a238:	f896 3694 	ldrb.w	r3, [r6, #1684]	; 0x694
 800a23c:	b90b      	cbnz	r3, 800a242 <SD_Task_Write+0x62>
	return 1;
 800a23e:	2001      	movs	r0, #1
 800a240:	e7dc      	b.n	800a1fc <SD_Task_Write+0x1c>
		return 0;
 800a242:	2000      	movs	r0, #0
 800a244:	e7da      	b.n	800a1fc <SD_Task_Write+0x1c>
 800a246:	bf00      	nop
 800a248:	20005920 	.word	0x20005920
 800a24c:	20004828 	.word	0x20004828

0800a250 <xSD_Card_Gatekeeper>:
void xSD_Card_Gatekeeper(void* pvParameters){
 800a250:	b538      	push	{r3, r4, r5, lr}
	f_res = f_mount(&fs, "", 1);		// mount the SD card's default drive immediately
 800a252:	2201      	movs	r2, #1
 800a254:	4949      	ldr	r1, [pc, #292]	; (800a37c <xSD_Card_Gatekeeper+0x12c>)
 800a256:	484a      	ldr	r0, [pc, #296]	; (800a380 <xSD_Card_Gatekeeper+0x130>)
 800a258:	f7fc f9cc 	bl	80065f4 <f_mount>
 800a25c:	4b49      	ldr	r3, [pc, #292]	; (800a384 <xSD_Card_Gatekeeper+0x134>)
 800a25e:	f883 0694 	strb.w	r0, [r3, #1684]	; 0x694
	if(f_res != FR_OK){
 800a262:	b100      	cbz	r0, 800a266 <xSD_Card_Gatekeeper+0x16>
		__NOP();	//debug
 800a264:	bf00      	nop
	f_res = f_mkdir(LOG_DIR_NAME);		// Make the directory if it hasn't been made
 800a266:	4d48      	ldr	r5, [pc, #288]	; (800a388 <xSD_Card_Gatekeeper+0x138>)
 800a268:	4628      	mov	r0, r5
 800a26a:	f7fc ff88 	bl	800717e <f_mkdir>
 800a26e:	4c45      	ldr	r4, [pc, #276]	; (800a384 <xSD_Card_Gatekeeper+0x134>)
 800a270:	f884 0694 	strb.w	r0, [r4, #1684]	; 0x694
	f_res = f_chdir(LOG_DIR_NAME);		// open the logs directory
 800a274:	4628      	mov	r0, r5
 800a276:	f7fc fdcc 	bl	8006e12 <f_chdir>
 800a27a:	f884 0694 	strb.w	r0, [r4, #1684]	; 0x694
	f_res = f_open(&fil[LogFile], LOG_FILE_NAME, FA_READ | FA_WRITE | FA_OPEN_APPEND);
 800a27e:	2233      	movs	r2, #51	; 0x33
 800a280:	4942      	ldr	r1, [pc, #264]	; (800a38c <xSD_Card_Gatekeeper+0x13c>)
 800a282:	4620      	mov	r0, r4
 800a284:	f7fc f9fa 	bl	800667c <f_open>
 800a288:	f884 0694 	strb.w	r0, [r4, #1684]	; 0x694
	f_res = f_sync(&fil[LogFile]);		// sync so we dont lose the opened file
 800a28c:	4620      	mov	r0, r4
 800a28e:	f7fc fd4b 	bl	8006d28 <f_sync>
 800a292:	f884 0694 	strb.w	r0, [r4, #1684]	; 0x694
 800a296:	e014      	b.n	800a2c2 <xSD_Card_Gatekeeper+0x72>
			vTaskDelay(pdMS_TO_TICKS(10)); //current has a delay when there is no request
 800a298:	200a      	movs	r0, #10
 800a29a:	f7fe fb21 	bl	80088e0 <vTaskDelay>
 800a29e:	e01b      	b.n	800a2d8 <xSD_Card_Gatekeeper+0x88>
					SD_Task_Read(sd_req.size, sd_req.buff, sd_req.fileName);
 800a2a0:	4b3b      	ldr	r3, [pc, #236]	; (800a390 <xSD_Card_Gatekeeper+0x140>)
 800a2a2:	f893 2569 	ldrb.w	r2, [r3, #1385]	; 0x569
 800a2a6:	f8d3 1570 	ldr.w	r1, [r3, #1392]	; 0x570
 800a2aa:	f8d3 056c 	ldr.w	r0, [r3, #1388]	; 0x56c
 800a2ae:	f7ff fe87 	bl	8009fc0 <SD_Task_Read>
					xTaskNotifyGive(xSD_Card_Sync_Handle);
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	4832      	ldr	r0, [pc, #200]	; (800a384 <xSD_Card_Gatekeeper+0x134>)
 800a2ba:	f8d0 0f5c 	ldr.w	r0, [r0, #3932]	; 0xf5c
 800a2be:	f7fe fe33 	bl	8008f28 <xTaskGenericNotify>
		if( uxQueueMessagesWaiting(xSD_Card_Queue) != 0 )
 800a2c2:	4c30      	ldr	r4, [pc, #192]	; (800a384 <xSD_Card_Gatekeeper+0x134>)
 800a2c4:	f8d4 06ac 	ldr.w	r0, [r4, #1708]	; 0x6ac
 800a2c8:	f7fd ff6a 	bl	80081a0 <uxQueueMessagesWaiting>
		if( uxQueueMessagesWaiting(xSD_Card_Queue) == 0 )
 800a2cc:	f8d4 06ac 	ldr.w	r0, [r4, #1708]	; 0x6ac
 800a2d0:	f7fd ff66 	bl	80081a0 <uxQueueMessagesWaiting>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d0df      	beq.n	800a298 <xSD_Card_Gatekeeper+0x48>
		xStatus = xQueueReceive(xSD_Card_Queue, &sd_req, 100);	//TODO: Make this timeout and check for errors (We should be constantly logging from BMS)
 800a2d8:	4c2d      	ldr	r4, [pc, #180]	; (800a390 <xSD_Card_Gatekeeper+0x140>)
 800a2da:	2264      	movs	r2, #100	; 0x64
 800a2dc:	f504 61ad 	add.w	r1, r4, #1384	; 0x568
 800a2e0:	4b28      	ldr	r3, [pc, #160]	; (800a384 <xSD_Card_Gatekeeper+0x134>)
 800a2e2:	f8d3 06ac 	ldr.w	r0, [r3, #1708]	; 0x6ac
 800a2e6:	f7fd fd85 	bl	8007df4 <xQueueReceive>
 800a2ea:	f8c4 0574 	str.w	r0, [r4, #1396]	; 0x574
		if(xStatus == pdTRUE){
 800a2ee:	2801      	cmp	r0, #1
 800a2f0:	d1e7      	bne.n	800a2c2 <xSD_Card_Gatekeeper+0x72>
			switch (sd_req.type) {
 800a2f2:	f894 3568 	ldrb.w	r3, [r4, #1384]	; 0x568
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d8e3      	bhi.n	800a2c2 <xSD_Card_Gatekeeper+0x72>
 800a2fa:	a201      	add	r2, pc, #4	; (adr r2, 800a300 <xSD_Card_Gatekeeper+0xb0>)
 800a2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a300:	0800a2a1 	.word	0x0800a2a1
 800a304:	0800a311 	.word	0x0800a311
 800a308:	0800a335 	.word	0x0800a335
 800a30c:	0800a34d 	.word	0x0800a34d
					SD_Task_Write(sd_req.size, sd_req.buff, sd_req.fileName);
 800a310:	4b1f      	ldr	r3, [pc, #124]	; (800a390 <xSD_Card_Gatekeeper+0x140>)
 800a312:	f893 2569 	ldrb.w	r2, [r3, #1385]	; 0x569
 800a316:	f8d3 1570 	ldr.w	r1, [r3, #1392]	; 0x570
 800a31a:	f8d3 056c 	ldr.w	r0, [r3, #1388]	; 0x56c
 800a31e:	f7ff ff5f 	bl	800a1e0 <SD_Task_Write>
					xTaskNotifyGive(xSD_Card_Sync_Handle);
 800a322:	2300      	movs	r3, #0
 800a324:	2202      	movs	r2, #2
 800a326:	4619      	mov	r1, r3
 800a328:	4816      	ldr	r0, [pc, #88]	; (800a384 <xSD_Card_Gatekeeper+0x134>)
 800a32a:	f8d0 0f5c 	ldr.w	r0, [r0, #3932]	; 0xf5c
 800a32e:	f7fe fdfb 	bl	8008f28 <xTaskGenericNotify>
					break;
 800a332:	e7c6      	b.n	800a2c2 <xSD_Card_Gatekeeper+0x72>
			switch (sd_req.type) {
 800a334:	2400      	movs	r4, #0
					for(int i=0; i<FS_MAX_CONCURRENT_FILES; i++){
 800a336:	2c02      	cmp	r4, #2
 800a338:	dcc3      	bgt.n	800a2c2 <xSD_Card_Gatekeeper+0x72>
						f_sync(&fil[i]);
 800a33a:	4b12      	ldr	r3, [pc, #72]	; (800a384 <xSD_Card_Gatekeeper+0x134>)
 800a33c:	f44f 700c 	mov.w	r0, #560	; 0x230
 800a340:	fb00 3004 	mla	r0, r0, r4, r3
 800a344:	f7fc fcf0 	bl	8006d28 <f_sync>
					for(int i=0; i<FS_MAX_CONCURRENT_FILES; i++){
 800a348:	3401      	adds	r4, #1
 800a34a:	e7f4      	b.n	800a336 <xSD_Card_Gatekeeper+0xe6>
			switch (sd_req.type) {
 800a34c:	2400      	movs	r4, #0
					for(int i=0; i<FS_MAX_CONCURRENT_FILES; i++){
 800a34e:	2c02      	cmp	r4, #2
 800a350:	dc08      	bgt.n	800a364 <xSD_Card_Gatekeeper+0x114>
						f_close(&fil[i]);
 800a352:	4b0c      	ldr	r3, [pc, #48]	; (800a384 <xSD_Card_Gatekeeper+0x134>)
 800a354:	f44f 700c 	mov.w	r0, #560	; 0x230
 800a358:	fb00 3004 	mla	r0, r0, r4, r3
 800a35c:	f7fc fd3c 	bl	8006dd8 <f_close>
					for(int i=0; i<FS_MAX_CONCURRENT_FILES; i++){
 800a360:	3401      	adds	r4, #1
 800a362:	e7f4      	b.n	800a34e <xSD_Card_Gatekeeper+0xfe>
					f_mount(0,"",0);	//unmount the fs
 800a364:	2200      	movs	r2, #0
 800a366:	4905      	ldr	r1, [pc, #20]	; (800a37c <xSD_Card_Gatekeeper+0x12c>)
 800a368:	4610      	mov	r0, r2
 800a36a:	f7fc f943 	bl	80065f4 <f_mount>
					vTaskSuspend(xSD_Card_Gatekeeper_Handle);	// Suspend this task
 800a36e:	4b05      	ldr	r3, [pc, #20]	; (800a384 <xSD_Card_Gatekeeper+0x134>)
 800a370:	f8d3 0ca0 	ldr.w	r0, [r3, #3232]	; 0xca0
 800a374:	f7fe fb3a 	bl	80089ec <vTaskSuspend>
					break;
 800a378:	e7a3      	b.n	800a2c2 <xSD_Card_Gatekeeper+0x72>
 800a37a:	bf00      	nop
 800a37c:	0800fc1c 	.word	0x0800fc1c
 800a380:	20005c4c 	.word	0x20005c4c
 800a384:	20004828 	.word	0x20004828
 800a388:	0800fa84 	.word	0x0800fa84
 800a38c:	20000010 	.word	0x20000010
 800a390:	20005920 	.word	0x20005920

0800a394 <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a394:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800a396:	4b07      	ldr	r3, [pc, #28]	; (800a3b4 <SD_CheckStatus+0x20>)
 800a398:	2201      	movs	r2, #1
 800a39a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a39c:	f7ff fb26 	bl	80099ec <BSP_SD_GetCardState>
 800a3a0:	b920      	cbnz	r0, 800a3ac <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800a3a2:	4a04      	ldr	r2, [pc, #16]	; (800a3b4 <SD_CheckStatus+0x20>)
 800a3a4:	7813      	ldrb	r3, [r2, #0]
 800a3a6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a3aa:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800a3ac:	4b01      	ldr	r3, [pc, #4]	; (800a3b4 <SD_CheckStatus+0x20>)
 800a3ae:	7818      	ldrb	r0, [r3, #0]
}
 800a3b0:	bd08      	pop	{r3, pc}
 800a3b2:	bf00      	nop
 800a3b4:	2000001d 	.word	0x2000001d

0800a3b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 800a3be:	4b18      	ldr	r3, [pc, #96]	; (800a420 <SD_initialize+0x68>)
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800a3c4:	f7fd f880 	bl	80074c8 <osKernelRunning>
 800a3c8:	b918      	cbnz	r0, 800a3d2 <SD_initialize+0x1a>
        Stat |= STA_NOINIT;
      }
    }
  }

  return Stat;
 800a3ca:	4b15      	ldr	r3, [pc, #84]	; (800a420 <SD_initialize+0x68>)
 800a3cc:	7818      	ldrb	r0, [r3, #0]
}
 800a3ce:	b004      	add	sp, #16
 800a3d0:	bd10      	pop	{r4, pc}
    if(BSP_SD_Init() == MSD_OK)
 800a3d2:	f7ff fb3b 	bl	8009a4c <BSP_SD_Init>
 800a3d6:	b188      	cbz	r0, 800a3fc <SD_initialize+0x44>
    if (Stat != STA_NOINIT)
 800a3d8:	4b11      	ldr	r3, [pc, #68]	; (800a420 <SD_initialize+0x68>)
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d0f3      	beq.n	800a3ca <SD_initialize+0x12>
      if (SDQueueID == NULL)
 800a3e2:	4b10      	ldr	r3, [pc, #64]	; (800a424 <SD_initialize+0x6c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	b17b      	cbz	r3, 800a408 <SD_initialize+0x50>
      if (SDQueueID == NULL)
 800a3e8:	4b0e      	ldr	r3, [pc, #56]	; (800a424 <SD_initialize+0x6c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1ec      	bne.n	800a3ca <SD_initialize+0x12>
        Stat |= STA_NOINIT;
 800a3f0:	4a0b      	ldr	r2, [pc, #44]	; (800a420 <SD_initialize+0x68>)
 800a3f2:	7813      	ldrb	r3, [r2, #0]
 800a3f4:	f043 0301 	orr.w	r3, r3, #1
 800a3f8:	7013      	strb	r3, [r2, #0]
 800a3fa:	e7e6      	b.n	800a3ca <SD_initialize+0x12>
      Stat = SD_CheckStatus(lun);
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f7ff ffc9 	bl	800a394 <SD_CheckStatus>
 800a402:	4b07      	ldr	r3, [pc, #28]	; (800a420 <SD_initialize+0x68>)
 800a404:	7018      	strb	r0, [r3, #0]
 800a406:	e7e7      	b.n	800a3d8 <SD_initialize+0x20>
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800a408:	4b07      	ldr	r3, [pc, #28]	; (800a428 <SD_initialize+0x70>)
 800a40a:	466c      	mov	r4, sp
 800a40c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a40e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800a412:	2100      	movs	r1, #0
 800a414:	4620      	mov	r0, r4
 800a416:	f7fd f932 	bl	800767e <osMessageCreate>
 800a41a:	4b02      	ldr	r3, [pc, #8]	; (800a424 <SD_initialize+0x6c>)
 800a41c:	6018      	str	r0, [r3, #0]
 800a41e:	e7e3      	b.n	800a3e8 <SD_initialize+0x30>
 800a420:	2000001d 	.word	0x2000001d
 800a424:	20005e98 	.word	0x20005e98
 800a428:	0800fa8c 	.word	0x0800fa8c

0800a42c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a42c:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800a42e:	f7ff ffb1 	bl	800a394 <SD_CheckStatus>
}
 800a432:	bd08      	pop	{r3, pc}

0800a434 <SD_CheckStatusWithTimeout>:
{
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	4605      	mov	r5, r0
  timer = osKernelSysTick();
 800a438:	f7fd f84f 	bl	80074da <osKernelSysTick>
 800a43c:	4604      	mov	r4, r0
  while( osKernelSysTick() - timer < timeout)
 800a43e:	f7fd f84c 	bl	80074da <osKernelSysTick>
 800a442:	1b00      	subs	r0, r0, r4
 800a444:	42a8      	cmp	r0, r5
 800a446:	d205      	bcs.n	800a454 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a448:	f7ff fad0 	bl	80099ec <BSP_SD_GetCardState>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d1f6      	bne.n	800a43e <SD_CheckStatusWithTimeout+0xa>
      return 0;
 800a450:	2000      	movs	r0, #0
 800a452:	e001      	b.n	800a458 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 800a454:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a458:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a45c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	460c      	mov	r4, r1
 800a462:	4615      	mov	r5, r2
 800a464:	461e      	mov	r6, r3
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a466:	f247 5030 	movw	r0, #30000	; 0x7530
 800a46a:	f7ff ffe3 	bl	800a434 <SD_CheckStatusWithTimeout>
 800a46e:	2800      	cmp	r0, #0
 800a470:	db29      	blt.n	800a4c6 <SD_read+0x6a>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a472:	4632      	mov	r2, r6
 800a474:	4629      	mov	r1, r5
 800a476:	4620      	mov	r0, r4
 800a478:	f7ff faa0 	bl	80099bc <BSP_SD_ReadBlocks_DMA>

    if (ret == MSD_OK) {
 800a47c:	b108      	cbz	r0, 800a482 <SD_read+0x26>
  DRESULT res = RES_ERROR;
 800a47e:	2001      	movs	r0, #1
 800a480:	e022      	b.n	800a4c8 <SD_read+0x6c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a482:	f247 5230 	movw	r2, #30000	; 0x7530
 800a486:	4b11      	ldr	r3, [pc, #68]	; (800a4cc <SD_read+0x70>)
 800a488:	6819      	ldr	r1, [r3, #0]
 800a48a:	a801      	add	r0, sp, #4
 800a48c:	f7fd f93f 	bl	800770e <osMessageGet>

    if (event.status == osEventMessage)
 800a490:	9b01      	ldr	r3, [sp, #4]
 800a492:	2b10      	cmp	r3, #16
 800a494:	d001      	beq.n	800a49a <SD_read+0x3e>
  DRESULT res = RES_ERROR;
 800a496:	2001      	movs	r0, #1
 800a498:	e016      	b.n	800a4c8 <SD_read+0x6c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800a49a:	9b02      	ldr	r3, [sp, #8]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d001      	beq.n	800a4a4 <SD_read+0x48>
  DRESULT res = RES_ERROR;
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	e011      	b.n	800a4c8 <SD_read+0x6c>
      {
        timer = osKernelSysTick();
 800a4a4:	f7fd f819 	bl	80074da <osKernelSysTick>
 800a4a8:	4604      	mov	r4, r0
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a4aa:	f7fd f816 	bl	80074da <osKernelSysTick>
 800a4ae:	1b00      	subs	r0, r0, r4
 800a4b0:	f247 532f 	movw	r3, #29999	; 0x752f
 800a4b4:	4298      	cmp	r0, r3
 800a4b6:	d804      	bhi.n	800a4c2 <SD_read+0x66>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a4b8:	f7ff fa98 	bl	80099ec <BSP_SD_GetCardState>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d1f4      	bne.n	800a4aa <SD_read+0x4e>
 800a4c0:	e002      	b.n	800a4c8 <SD_read+0x6c>
  DRESULT res = RES_ERROR;
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	e000      	b.n	800a4c8 <SD_read+0x6c>
    return res;
 800a4c6:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 800a4c8:	b004      	add	sp, #16
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	20005e98 	.word	0x20005e98

0800a4d0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a4d0:	b570      	push	{r4, r5, r6, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	4615      	mov	r5, r2
 800a4d8:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a4da:	f247 5030 	movw	r0, #30000	; 0x7530
 800a4de:	f7ff ffa9 	bl	800a434 <SD_CheckStatusWithTimeout>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	db29      	blt.n	800a53a <SD_write+0x6a>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a4e6:	4632      	mov	r2, r6
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f7ff fa72 	bl	80099d4 <BSP_SD_WriteBlocks_DMA>
 800a4f0:	b108      	cbz	r0, 800a4f6 <SD_write+0x26>
  DRESULT res = RES_ERROR;
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	e022      	b.n	800a53c <SD_write+0x6c>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a4f6:	f247 5230 	movw	r2, #30000	; 0x7530
 800a4fa:	4b11      	ldr	r3, [pc, #68]	; (800a540 <SD_write+0x70>)
 800a4fc:	6819      	ldr	r1, [r3, #0]
 800a4fe:	a801      	add	r0, sp, #4
 800a500:	f7fd f905 	bl	800770e <osMessageGet>

    if (event.status == osEventMessage)
 800a504:	9b01      	ldr	r3, [sp, #4]
 800a506:	2b10      	cmp	r3, #16
 800a508:	d001      	beq.n	800a50e <SD_write+0x3e>
  DRESULT res = RES_ERROR;
 800a50a:	2001      	movs	r0, #1
 800a50c:	e016      	b.n	800a53c <SD_write+0x6c>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800a50e:	9b02      	ldr	r3, [sp, #8]
 800a510:	2b02      	cmp	r3, #2
 800a512:	d001      	beq.n	800a518 <SD_write+0x48>
  DRESULT res = RES_ERROR;
 800a514:	2001      	movs	r0, #1
 800a516:	e011      	b.n	800a53c <SD_write+0x6c>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800a518:	f7fc ffdf 	bl	80074da <osKernelSysTick>
 800a51c:	4604      	mov	r4, r0
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800a51e:	f7fc ffdc 	bl	80074da <osKernelSysTick>
 800a522:	1b00      	subs	r0, r0, r4
 800a524:	f247 532f 	movw	r3, #29999	; 0x752f
 800a528:	4298      	cmp	r0, r3
 800a52a:	d804      	bhi.n	800a536 <SD_write+0x66>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a52c:	f7ff fa5e 	bl	80099ec <BSP_SD_GetCardState>
 800a530:	2800      	cmp	r0, #0
 800a532:	d1f4      	bne.n	800a51e <SD_write+0x4e>
 800a534:	e002      	b.n	800a53c <SD_write+0x6c>
  DRESULT res = RES_ERROR;
 800a536:	2001      	movs	r0, #1
 800a538:	e000      	b.n	800a53c <SD_write+0x6c>
    return res;
 800a53a:	2001      	movs	r0, #1

  }
#endif

  return res;
}
 800a53c:	b004      	add	sp, #16
 800a53e:	bd70      	pop	{r4, r5, r6, pc}
 800a540:	20005e98 	.word	0x20005e98

0800a544 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a544:	b530      	push	{r4, r5, lr}
 800a546:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a548:	4b13      	ldr	r3, [pc, #76]	; (800a598 <SD_ioctl+0x54>)
 800a54a:	7818      	ldrb	r0, [r3, #0]
 800a54c:	f010 0401 	ands.w	r4, r0, #1
 800a550:	d11b      	bne.n	800a58a <SD_ioctl+0x46>
 800a552:	4615      	mov	r5, r2

  switch (cmd)
 800a554:	2903      	cmp	r1, #3
 800a556:	d81c      	bhi.n	800a592 <SD_ioctl+0x4e>
 800a558:	e8df f001 	tbb	[pc, r1]
 800a55c:	100a0402 	.word	0x100a0402
 800a560:	460c      	mov	r4, r1
 800a562:	e013      	b.n	800a58c <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a564:	4668      	mov	r0, sp
 800a566:	f7ff fa4b 	bl	8009a00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a56a:	9b06      	ldr	r3, [sp, #24]
 800a56c:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800a56e:	e00d      	b.n	800a58c <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a570:	4668      	mov	r0, sp
 800a572:	f7ff fa45 	bl	8009a00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a576:	9b07      	ldr	r3, [sp, #28]
 800a578:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 800a57a:	e007      	b.n	800a58c <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a57c:	4668      	mov	r0, sp
 800a57e:	f7ff fa3f 	bl	8009a00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a582:	9b07      	ldr	r3, [sp, #28]
 800a584:	0a5b      	lsrs	r3, r3, #9
 800a586:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800a588:	e000      	b.n	800a58c <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a58a:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800a58c:	4620      	mov	r0, r4
 800a58e:	b009      	add	sp, #36	; 0x24
 800a590:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800a592:	2404      	movs	r4, #4
 800a594:	e7fa      	b.n	800a58c <SD_ioctl+0x48>
 800a596:	bf00      	nop
 800a598:	2000001d 	.word	0x2000001d

0800a59c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a59c:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800a59e:	2200      	movs	r2, #0
 800a5a0:	2102      	movs	r1, #2
 800a5a2:	4b02      	ldr	r3, [pc, #8]	; (800a5ac <BSP_SD_WriteCpltCallback+0x10>)
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	f7fd f87f 	bl	80076a8 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800a5aa:	bd08      	pop	{r3, pc}
 800a5ac:	20005e98 	.word	0x20005e98

0800a5b0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a5b0:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	4b02      	ldr	r3, [pc, #8]	; (800a5c0 <BSP_SD_ReadCpltCallback+0x10>)
 800a5b8:	6818      	ldr	r0, [r3, #0]
 800a5ba:	f7fd f875 	bl	80076a8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800a5be:	bd08      	pop	{r3, pc}
 800a5c0:	20005e98 	.word	0x20005e98

0800a5c4 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800a5c4:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <MX_SDIO_SD_Init+0x18>)
 800a5c6:	4a06      	ldr	r2, [pc, #24]	; (800a5e0 <MX_SDIO_SD_Init+0x1c>)
 800a5c8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a5ce:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a5d0:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a5d2:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a5d4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800a5d6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	20005e9c 	.word	0x20005e9c
 800a5e0:	40012c00 	.word	0x40012c00

0800a5e4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800a5e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5e8:	b0a1      	sub	sp, #132	; 0x84
 800a5ea:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	911b      	str	r1, [sp, #108]	; 0x6c
 800a5f0:	911c      	str	r1, [sp, #112]	; 0x70
 800a5f2:	911d      	str	r1, [sp, #116]	; 0x74
 800a5f4:	911e      	str	r1, [sp, #120]	; 0x78
 800a5f6:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a5f8:	225c      	movs	r2, #92	; 0x5c
 800a5fa:	a804      	add	r0, sp, #16
 800a5fc:	f001 f821 	bl	800b642 <memset>
  if(sdHandle->Instance==SDIO)
 800a600:	6822      	ldr	r2, [r4, #0]
 800a602:	4b6f      	ldr	r3, [pc, #444]	; (800a7c0 <HAL_SD_MspInit+0x1dc>)
 800a604:	429a      	cmp	r2, r3
 800a606:	d002      	beq.n	800a60e <HAL_SD_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800a608:	b021      	add	sp, #132	; 0x84
 800a60a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800a60e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a612:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a614:	a804      	add	r0, sp, #16
 800a616:	f7f7 feb7 	bl	8002388 <HAL_RCCEx_PeriphCLKConfig>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	f040 80c6 	bne.w	800a7ac <HAL_SD_MspInit+0x1c8>
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a620:	2500      	movs	r5, #0
 800a622:	9500      	str	r5, [sp, #0]
 800a624:	4b67      	ldr	r3, [pc, #412]	; (800a7c4 <HAL_SD_MspInit+0x1e0>)
 800a626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a62c:	645a      	str	r2, [r3, #68]	; 0x44
 800a62e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a630:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a634:	9200      	str	r2, [sp, #0]
 800a636:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a638:	9501      	str	r5, [sp, #4]
 800a63a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a63c:	f042 0202 	orr.w	r2, r2, #2
 800a640:	631a      	str	r2, [r3, #48]	; 0x30
 800a642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a644:	f002 0202 	and.w	r2, r2, #2
 800a648:	9201      	str	r2, [sp, #4]
 800a64a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a64c:	9502      	str	r5, [sp, #8]
 800a64e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a650:	f042 0204 	orr.w	r2, r2, #4
 800a654:	631a      	str	r2, [r3, #48]	; 0x30
 800a656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a658:	f002 0204 	and.w	r2, r2, #4
 800a65c:	9202      	str	r2, [sp, #8]
 800a65e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a660:	9503      	str	r5, [sp, #12]
 800a662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a664:	f042 0208 	orr.w	r2, r2, #8
 800a668:	631a      	str	r2, [r3, #48]	; 0x30
 800a66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66c:	f003 0308 	and.w	r3, r3, #8
 800a670:	9303      	str	r3, [sp, #12]
 800a672:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a674:	2704      	movs	r7, #4
 800a676:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a678:	f04f 0902 	mov.w	r9, #2
 800a67c:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a680:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a682:	2603      	movs	r6, #3
 800a684:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a686:	f04f 080c 	mov.w	r8, #12
 800a68a:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a68e:	a91b      	add	r1, sp, #108	; 0x6c
 800a690:	484d      	ldr	r0, [pc, #308]	; (800a7c8 <HAL_SD_MspInit+0x1e4>)
 800a692:	f7f7 fc53 	bl	8001f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800a696:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800a69a:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a69c:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6a0:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6a2:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a6a4:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6a8:	a91b      	add	r1, sp, #108	; 0x6c
 800a6aa:	4848      	ldr	r0, [pc, #288]	; (800a7cc <HAL_SD_MspInit+0x1e8>)
 800a6ac:	f7f7 fc46 	bl	8001f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a6b0:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b2:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b6:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6b8:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a6ba:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a6be:	a91b      	add	r1, sp, #108	; 0x6c
 800a6c0:	4843      	ldr	r0, [pc, #268]	; (800a7d0 <HAL_SD_MspInit+0x1ec>)
 800a6c2:	f7f7 fc3b 	bl	8001f3c <HAL_GPIO_Init>
    hdma_sdio_tx.Instance = DMA2_Stream3;
 800a6c6:	4843      	ldr	r0, [pc, #268]	; (800a7d4 <HAL_SD_MspInit+0x1f0>)
 800a6c8:	4b43      	ldr	r3, [pc, #268]	; (800a7d8 <HAL_SD_MspInit+0x1f4>)
 800a6ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800a6ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6d2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a6d6:	2340      	movs	r3, #64	; 0x40
 800a6d8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a6dc:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a6e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6e4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a6e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6ec:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a6f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a6f4:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800a6f8:	2320      	movs	r3, #32
 800a6fa:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a6fe:	f8c0 50a4 	str.w	r5, [r0, #164]	; 0xa4
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a702:	f8c0 70a8 	str.w	r7, [r0, #168]	; 0xa8
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a706:	f8c0 60ac 	str.w	r6, [r0, #172]	; 0xac
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800a70a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a70e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a712:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a716:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800a71a:	3084      	adds	r0, #132	; 0x84
 800a71c:	f7f7 fa70 	bl	8001c00 <HAL_DMA_Init>
 800a720:	2800      	cmp	r0, #0
 800a722:	d146      	bne.n	800a7b2 <HAL_SD_MspInit+0x1ce>
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800a724:	482b      	ldr	r0, [pc, #172]	; (800a7d4 <HAL_SD_MspInit+0x1f0>)
 800a726:	f100 0384 	add.w	r3, r0, #132	; 0x84
 800a72a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a72c:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
    hdma_sdio_rx.Instance = DMA2_Stream6;
 800a730:	4b2a      	ldr	r3, [pc, #168]	; (800a7dc <HAL_SD_MspInit+0x1f8>)
 800a732:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800a736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a73a:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a73e:	2300      	movs	r3, #0
 800a740:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a744:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a74c:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a750:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a754:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a75c:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800a760:	2220      	movs	r2, #32
 800a762:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a766:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a76a:	2304      	movs	r3, #4
 800a76c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a770:	2303      	movs	r3, #3
 800a772:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800a776:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a77a:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a77e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a782:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800a786:	30e4      	adds	r0, #228	; 0xe4
 800a788:	f7f7 fa3a 	bl	8001c00 <HAL_DMA_Init>
 800a78c:	b9a0      	cbnz	r0, 800a7b8 <HAL_SD_MspInit+0x1d4>
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800a78e:	4b11      	ldr	r3, [pc, #68]	; (800a7d4 <HAL_SD_MspInit+0x1f0>)
 800a790:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 800a794:	6422      	str	r2, [r4, #64]	; 0x40
 800a796:	f8c3 411c 	str.w	r4, [r3, #284]	; 0x11c
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800a79a:	2200      	movs	r2, #0
 800a79c:	2105      	movs	r1, #5
 800a79e:	2031      	movs	r0, #49	; 0x31
 800a7a0:	f7f7 f968 	bl	8001a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800a7a4:	2031      	movs	r0, #49	; 0x31
 800a7a6:	f7f7 f99d 	bl	8001ae4 <HAL_NVIC_EnableIRQ>
}
 800a7aa:	e72d      	b.n	800a608 <HAL_SD_MspInit+0x24>
      Error_Handler();
 800a7ac:	f7ff fb60 	bl	8009e70 <Error_Handler>
 800a7b0:	e736      	b.n	800a620 <HAL_SD_MspInit+0x3c>
      Error_Handler();
 800a7b2:	f7ff fb5d 	bl	8009e70 <Error_Handler>
 800a7b6:	e7b5      	b.n	800a724 <HAL_SD_MspInit+0x140>
      Error_Handler();
 800a7b8:	f7ff fb5a 	bl	8009e70 <Error_Handler>
 800a7bc:	e7e7      	b.n	800a78e <HAL_SD_MspInit+0x1aa>
 800a7be:	bf00      	nop
 800a7c0:	40012c00 	.word	0x40012c00
 800a7c4:	40023800 	.word	0x40023800
 800a7c8:	40020400 	.word	0x40020400
 800a7cc:	40020800 	.word	0x40020800
 800a7d0:	40020c00 	.word	0x40020c00
 800a7d4:	20005e9c 	.word	0x20005e9c
 800a7d8:	40026458 	.word	0x40026458
 800a7dc:	400264a0 	.word	0x400264a0

0800a7e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a7e0:	b500      	push	{lr}
 800a7e2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	9200      	str	r2, [sp, #0]
 800a7e8:	4b0d      	ldr	r3, [pc, #52]	; (800a820 <HAL_MspInit+0x40>)
 800a7ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a7ec:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800a7f0:	6459      	str	r1, [r3, #68]	; 0x44
 800a7f2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a7f4:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800a7f8:	9100      	str	r1, [sp, #0]
 800a7fa:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a7fc:	9201      	str	r2, [sp, #4]
 800a7fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a800:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800a804:	6419      	str	r1, [r3, #64]	; 0x40
 800a806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a810:	210f      	movs	r1, #15
 800a812:	f06f 0001 	mvn.w	r0, #1
 800a816:	f7f7 f92d 	bl	8001a74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a81a:	b003      	add	sp, #12
 800a81c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a820:	40023800 	.word	0x40023800

0800a824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a824:	b530      	push	{r4, r5, lr}
 800a826:	b089      	sub	sp, #36	; 0x24
 800a828:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800a82a:	2400      	movs	r4, #0
 800a82c:	9401      	str	r4, [sp, #4]
 800a82e:	4b1e      	ldr	r3, [pc, #120]	; (800a8a8 <HAL_InitTick+0x84>)
 800a830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a832:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a836:	645a      	str	r2, [r3, #68]	; 0x44
 800a838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a83a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a842:	a902      	add	r1, sp, #8
 800a844:	a803      	add	r0, sp, #12
 800a846:	f7f7 fd81 	bl	800234c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a84a:	f7f7 fd6f 	bl	800232c <HAL_RCC_GetPCLK2Freq>
 800a84e:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a850:	4816      	ldr	r0, [pc, #88]	; (800a8ac <HAL_InitTick+0x88>)
 800a852:	fba0 2303 	umull	r2, r3, r0, r3
 800a856:	0c9b      	lsrs	r3, r3, #18
 800a858:	3b01      	subs	r3, #1

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800a85a:	4815      	ldr	r0, [pc, #84]	; (800a8b0 <HAL_InitTick+0x8c>)
 800a85c:	4a15      	ldr	r2, [pc, #84]	; (800a8b4 <HAL_InitTick+0x90>)
 800a85e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800a860:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a864:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800a866:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 800a868:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a86a:	6084      	str	r4, [r0, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a86c:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800a86e:	f7f9 fc9d 	bl	80041ac <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800a872:	4604      	mov	r4, r0
 800a874:	b110      	cbz	r0, 800a87c <HAL_InitTick+0x58>
    }
  }

 /* Return function status */
  return status;
}
 800a876:	4620      	mov	r0, r4
 800a878:	b009      	add	sp, #36	; 0x24
 800a87a:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim10);
 800a87c:	480c      	ldr	r0, [pc, #48]	; (800a8b0 <HAL_InitTick+0x8c>)
 800a87e:	f7f9 fb2d 	bl	8003edc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800a882:	4604      	mov	r4, r0
 800a884:	2800      	cmp	r0, #0
 800a886:	d1f6      	bne.n	800a876 <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a888:	2019      	movs	r0, #25
 800a88a:	f7f7 f92b 	bl	8001ae4 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a88e:	2d0f      	cmp	r5, #15
 800a890:	d901      	bls.n	800a896 <HAL_InitTick+0x72>
        status = HAL_ERROR;
 800a892:	2401      	movs	r4, #1
 800a894:	e7ef      	b.n	800a876 <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800a896:	2200      	movs	r2, #0
 800a898:	4629      	mov	r1, r5
 800a89a:	2019      	movs	r0, #25
 800a89c:	f7f7 f8ea 	bl	8001a74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a8a0:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <HAL_InitTick+0x94>)
 800a8a2:	601d      	str	r5, [r3, #0]
 800a8a4:	e7e7      	b.n	800a876 <HAL_InitTick+0x52>
 800a8a6:	bf00      	nop
 800a8a8:	40023800 	.word	0x40023800
 800a8ac:	431bde83 	.word	0x431bde83
 800a8b0:	20005fe0 	.word	0x20005fe0
 800a8b4:	40014400 	.word	0x40014400
 800a8b8:	20000004 	.word	0x20000004

0800a8bc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a8bc:	4770      	bx	lr

0800a8be <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a8be:	e7fe      	b.n	800a8be <HardFault_Handler>

0800a8c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a8c0:	e7fe      	b.n	800a8c0 <MemManage_Handler>

0800a8c2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a8c2:	e7fe      	b.n	800a8c2 <BusFault_Handler>

0800a8c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a8c4:	e7fe      	b.n	800a8c4 <UsageFault_Handler>

0800a8c6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a8c6:	4770      	bx	lr

0800a8c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a8c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a8ca:	4803      	ldr	r0, [pc, #12]	; (800a8d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a8cc:	f7f9 fb4d 	bl	8003f6a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800a8d0:	4802      	ldr	r0, [pc, #8]	; (800a8dc <TIM1_UP_TIM10_IRQHandler+0x14>)
 800a8d2:	f7f9 fb4a 	bl	8003f6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a8d6:	bd08      	pop	{r3, pc}
 800a8d8:	20006108 	.word	0x20006108
 800a8dc:	20005fe0 	.word	0x20005fe0

0800a8e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a8e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a8e2:	4802      	ldr	r0, [pc, #8]	; (800a8ec <TIM2_IRQHandler+0xc>)
 800a8e4:	f7f9 fb41 	bl	8003f6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a8e8:	bd08      	pop	{r3, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20006150 	.word	0x20006150

0800a8f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a8f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a8f2:	4802      	ldr	r0, [pc, #8]	; (800a8fc <TIM3_IRQHandler+0xc>)
 800a8f4:	f7f9 fb39 	bl	8003f6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a8f8:	bd08      	pop	{r3, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20006198 	.word	0x20006198

0800a900 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a900:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a902:	4802      	ldr	r0, [pc, #8]	; (800a90c <TIM4_IRQHandler+0xc>)
 800a904:	f7f9 fb31 	bl	8003f6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a908:	bd08      	pop	{r3, pc}
 800a90a:	bf00      	nop
 800a90c:	200061e0 	.word	0x200061e0

0800a910 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800a910:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800a912:	4802      	ldr	r0, [pc, #8]	; (800a91c <SDIO_IRQHandler+0xc>)
 800a914:	f7f9 f97e 	bl	8003c14 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800a918:	bd08      	pop	{r3, pc}
 800a91a:	bf00      	nop
 800a91c:	20005e9c 	.word	0x20005e9c

0800a920 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a920:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a922:	4802      	ldr	r0, [pc, #8]	; (800a92c <DMA2_Stream0_IRQHandler+0xc>)
 800a924:	f7f7 fa1a 	bl	8001d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a928:	bd08      	pop	{r3, pc}
 800a92a:	bf00      	nop
 800a92c:	20004050 	.word	0x20004050

0800a930 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800a930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800a932:	4802      	ldr	r0, [pc, #8]	; (800a93c <DMA2_Stream3_IRQHandler+0xc>)
 800a934:	f7f7 fa12 	bl	8001d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800a938:	bd08      	pop	{r3, pc}
 800a93a:	bf00      	nop
 800a93c:	20005f20 	.word	0x20005f20

0800a940 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800a940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800a942:	4802      	ldr	r0, [pc, #8]	; (800a94c <DMA2_Stream6_IRQHandler+0xc>)
 800a944:	f7f7 fa0a 	bl	8001d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a948:	bd08      	pop	{r3, pc}
 800a94a:	bf00      	nop
 800a94c:	20005f80 	.word	0x20005f80

0800a950 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a950:	490f      	ldr	r1, [pc, #60]	; (800a990 <SystemInit+0x40>)
 800a952:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a95a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a95e:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <SystemInit+0x44>)
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	f042 0201 	orr.w	r2, r2, #1
 800a966:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a968:	2000      	movs	r0, #0
 800a96a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800a972:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a976:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a978:	4a07      	ldr	r2, [pc, #28]	; (800a998 <SystemInit+0x48>)
 800a97a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a982:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a984:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a986:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a98a:	608b      	str	r3, [r1, #8]
#endif
}
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	e000ed00 	.word	0xe000ed00
 800a994:	40023800 	.word	0x40023800
 800a998:	24003010 	.word	0x24003010
 800a99c:	00000000 	.word	0x00000000

0800a9a0 <get_NTC_Resistance>:
double volatile naturalLogR;
double volatile temperature;
double volatile R_NTC;
volatile int newData = 0;

void get_NTC_Resistance(double voltageReading){
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	ec55 4b10 	vmov	r4, r5, d0
	if (voltageReading >= (vDD-0.1) || voltageReading <= 0){R_NTC = 0;}
 800a9a6:	a317      	add	r3, pc, #92	; (adr r3, 800aa04 <get_NTC_Resistance+0x64>)
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	ee10 0a10 	vmov	r0, s0
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	f7f6 f8c7 	bl	8000b44 <__aeabi_dcmpge>
 800a9b6:	b9c8      	cbnz	r0, 800a9ec <get_NTC_Resistance+0x4c>
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	4620      	mov	r0, r4
 800a9be:	4629      	mov	r1, r5
 800a9c0:	f7f6 f8b6 	bl	8000b30 <__aeabi_dcmple>
 800a9c4:	b990      	cbnz	r0, 800a9ec <get_NTC_Resistance+0x4c>
	else {R_NTC = (vDD/voltageReading - 1) * constResistance;}
 800a9c6:	4622      	mov	r2, r4
 800a9c8:	462b      	mov	r3, r5
 800a9ca:	a110      	add	r1, pc, #64	; (adr r1, 800aa0c <get_NTC_Resistance+0x6c>)
 800a9cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9d0:	f7f5 ff5c 	bl	800088c <__aeabi_ddiv>
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	4b08      	ldr	r3, [pc, #32]	; (800a9f8 <get_NTC_Resistance+0x58>)
 800a9d8:	f7f5 fc76 	bl	80002c8 <__aeabi_dsub>
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <get_NTC_Resistance+0x5c>)
 800a9e0:	f7f5 fe2a 	bl	8000638 <__aeabi_dmul>
 800a9e4:	4b06      	ldr	r3, [pc, #24]	; (800aa00 <get_NTC_Resistance+0x60>)
 800a9e6:	e9c3 0100 	strd	r0, r1, [r3]
}
 800a9ea:	e004      	b.n	800a9f6 <get_NTC_Resistance+0x56>
	if (voltageReading >= (vDD-0.1) || voltageReading <= 0){R_NTC = 0;}
 800a9ec:	4b04      	ldr	r3, [pc, #16]	; (800aa00 <get_NTC_Resistance+0x60>)
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	e9c3 0100 	strd	r0, r1, [r3]
}
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	3ff00000 	.word	0x3ff00000
 800a9fc:	408f4000 	.word	0x408f4000
 800aa00:	20006028 	.word	0x20006028
 800aa04:	93333333 	.word	0x93333333
 800aa08:	40099999 	.word	0x40099999
 800aa0c:	60000000 	.word	0x60000000
 800aa10:	400a6666 	.word	0x400a6666
 800aa14:	00000000 	.word	0x00000000

0800aa18 <getTemperature>:

double getTemperature(double voltageReading){		// USING STEINHART & HART EQUATION
 800aa18:	b5d0      	push	{r4, r6, r7, lr}
	get_NTC_Resistance(voltageReading);
 800aa1a:	f7ff ffc1 	bl	800a9a0 <get_NTC_Resistance>
	if (R_NTC < 1){temperature = -1;}
 800aa1e:	2200      	movs	r2, #0
 800aa20:	4b2d      	ldr	r3, [pc, #180]	; (800aad8 <getTemperature+0xc0>)
 800aa22:	492e      	ldr	r1, [pc, #184]	; (800aadc <getTemperature+0xc4>)
 800aa24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa28:	f7f6 f878 	bl	8000b1c <__aeabi_dcmplt>
 800aa2c:	b140      	cbz	r0, 800aa40 <getTemperature+0x28>
 800aa2e:	4b2b      	ldr	r3, [pc, #172]	; (800aadc <getTemperature+0xc4>)
 800aa30:	2000      	movs	r0, #0
 800aa32:	492b      	ldr	r1, [pc, #172]	; (800aae0 <getTemperature+0xc8>)
 800aa34:	e9c3 0102 	strd	r0, r1, [r3, #8]
	else{
		naturalLogR = log(R_NTC);
		temperature = -273.15 + (1 / (A + B * naturalLogR + C * pow(naturalLogR, 3)));
	}
	return temperature;
}
 800aa38:	4b28      	ldr	r3, [pc, #160]	; (800aadc <getTemperature+0xc4>)
 800aa3a:	ed93 0b02 	vldr	d0, [r3, #8]
 800aa3e:	bdd0      	pop	{r4, r6, r7, pc}
		naturalLogR = log(R_NTC);
 800aa40:	4c26      	ldr	r4, [pc, #152]	; (800aadc <getTemperature+0xc4>)
 800aa42:	ed94 0b00 	vldr	d0, [r4]
 800aa46:	f003 fc5b 	bl	800e300 <log>
 800aa4a:	ed84 0b04 	vstr	d0, [r4, #16]
		temperature = -273.15 + (1 / (A + B * naturalLogR + C * pow(naturalLogR, 3)));
 800aa4e:	a318      	add	r3, pc, #96	; (adr r3, 800aab0 <getTemperature+0x98>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800aa58:	f7f5 fdee 	bl	8000638 <__aeabi_dmul>
 800aa5c:	a316      	add	r3, pc, #88	; (adr r3, 800aab8 <getTemperature+0xa0>)
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	f7f5 fc33 	bl	80002cc <__adddf3>
 800aa66:	4606      	mov	r6, r0
 800aa68:	460f      	mov	r7, r1
 800aa6a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 800aac0 <getTemperature+0xa8>
 800aa6e:	ed94 0b04 	vldr	d0, [r4, #16]
 800aa72:	f003 fc83 	bl	800e37c <pow>
 800aa76:	ec51 0b10 	vmov	r0, r1, d0
 800aa7a:	a313      	add	r3, pc, #76	; (adr r3, 800aac8 <getTemperature+0xb0>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f7f5 fdda 	bl	8000638 <__aeabi_dmul>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	f7f5 fc1e 	bl	80002cc <__adddf3>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	2000      	movs	r0, #0
 800aa96:	4910      	ldr	r1, [pc, #64]	; (800aad8 <getTemperature+0xc0>)
 800aa98:	f7f5 fef8 	bl	800088c <__aeabi_ddiv>
 800aa9c:	a30c      	add	r3, pc, #48	; (adr r3, 800aad0 <getTemperature+0xb8>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	f7f5 fc11 	bl	80002c8 <__aeabi_dsub>
 800aaa6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aaaa:	e7c5      	b.n	800aa38 <getTemperature+0x20>
 800aaac:	f3af 8000 	nop.w
 800aab0:	ac3ea183 	.word	0xac3ea183
 800aab4:	3f314eaa 	.word	0x3f314eaa
 800aab8:	f0bcee5a 	.word	0xf0bcee5a
 800aabc:	3f54f675 	.word	0x3f54f675
 800aac0:	00000000 	.word	0x00000000
 800aac4:	40080000 	.word	0x40080000
 800aac8:	61e3fc4e 	.word	0x61e3fc4e
 800aacc:	3e825c55 	.word	0x3e825c55
 800aad0:	66666666 	.word	0x66666666
 800aad4:	40711266 	.word	0x40711266
 800aad8:	3ff00000 	.word	0x3ff00000
 800aadc:	20006028 	.word	0x20006028
 800aae0:	bff00000 	.word	0xbff00000
 800aae4:	00000000 	.word	0x00000000

0800aae8 <readTemp_task>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	newData = 1;
}

void readTemp_task(){
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	ed2d 8b02 	vpush	{d8}
 800aaee:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800aaf2:	e04e      	b.n	800ab92 <readTemp_task+0xaa>
		HAL_ADC_Start_DMA(&hadc1, res, 16);
		while(!newData) {}
		newData = 0;

		for(int i = 0; i < 16; i++) {
			  voltages[i] = ADC_TO_Voltage * res[i];
 800aaf4:	4d30      	ldr	r5, [pc, #192]	; (800abb8 <readTemp_task+0xd0>)
 800aaf6:	00a6      	lsls	r6, r4, #2
 800aaf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aafc:	6998      	ldr	r0, [r3, #24]
 800aafe:	f7f5 fd21 	bl	8000544 <__aeabi_ui2d>
 800ab02:	a32b      	add	r3, pc, #172	; (adr r3, 800abb0 <readTemp_task+0xc8>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	f7f5 fd96 	bl	8000638 <__aeabi_dmul>
 800ab0c:	f7f6 f86c 	bl	8000be8 <__aeabi_d2f>
 800ab10:	ab0f      	add	r3, sp, #60	; 0x3c
 800ab12:	4433      	add	r3, r6
 800ab14:	6018      	str	r0, [r3, #0]
			  temperatures[i] = getTemperature(voltages[i]);
 800ab16:	f7f5 fd37 	bl	8000588 <__aeabi_f2d>
 800ab1a:	ec41 0b18 	vmov	d8, r0, r1
 800ab1e:	ec41 0b10 	vmov	d0, r0, r1
 800ab22:	f7ff ff79 	bl	800aa18 <getTemperature>
 800ab26:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ab2a:	ed85 0b18 	vstr	d0, [r5, #96]	; 0x60
			  sprintf(msgTemp, "ADC %d %.5f \n", i, voltages[i]); //always include \n after an entry
 800ab2e:	ed8d 8b00 	vstr	d8, [sp]
 800ab32:	4622      	mov	r2, r4
 800ab34:	4921      	ldr	r1, [pc, #132]	; (800abbc <readTemp_task+0xd4>)
 800ab36:	a81f      	add	r0, sp, #124	; 0x7c
 800ab38:	f001 fb04 	bl	800c144 <siprintf>
			  strcat(msg,msgTemp);
 800ab3c:	a91f      	add	r1, sp, #124	; 0x7c
 800ab3e:	a824      	add	r0, sp, #144	; 0x90
 800ab40:	f001 fb63 	bl	800c20a <strcat>
		for(int i = 0; i < 16; i++) {
 800ab44:	3401      	adds	r4, #1
 800ab46:	2c0f      	cmp	r4, #15
 800ab48:	ddd4      	ble.n	800aaf4 <readTemp_task+0xc>
		}
		sprintf(tempMsg, "Temperature: %f\r\n", temperatures[0]); //always include \n after an entry
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <readTemp_task+0xd0>)
 800ab4c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800ab50:	491b      	ldr	r1, [pc, #108]	; (800abc0 <readTemp_task+0xd8>)
 800ab52:	a802      	add	r0, sp, #8
 800ab54:	f001 faf6 	bl	800c144 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 800ab58:	a802      	add	r0, sp, #8
 800ab5a:	f7f5 fb59 	bl	8000210 <strlen>
 800ab5e:	230a      	movs	r3, #10
 800ab60:	b282      	uxth	r2, r0
 800ab62:	a902      	add	r1, sp, #8
 800ab64:	4817      	ldr	r0, [pc, #92]	; (800abc4 <readTemp_task+0xdc>)
 800ab66:	f7f9 feb2 	bl	80048ce <HAL_UART_Transmit>

		//log temperature
		SD_Log(tempMsg, -1); //works best when there is only a single log call per task
 800ab6a:	f04f 31ff 	mov.w	r1, #4294967295
 800ab6e:	a802      	add	r0, sp, #8
 800ab70:	f7ff fae6 	bl	800a140 <SD_Log>
		memset(msg, 0, sizeof msg);
 800ab74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab78:	2100      	movs	r1, #0
 800ab7a:	a824      	add	r0, sp, #144	; 0x90
 800ab7c:	f000 fd61 	bl	800b642 <memset>
		memset(msgTemp, 0, sizeof msgTemp);
 800ab80:	2300      	movs	r3, #0
 800ab82:	931f      	str	r3, [sp, #124]	; 0x7c
 800ab84:	9320      	str	r3, [sp, #128]	; 0x80
 800ab86:	9321      	str	r3, [sp, #132]	; 0x84
 800ab88:	9322      	str	r3, [sp, #136]	; 0x88
 800ab8a:	9323      	str	r3, [sp, #140]	; 0x8c
		vTaskDelay(pdMS_TO_TICKS(10)); //reads every 10ms
 800ab8c:	200a      	movs	r0, #10
 800ab8e:	f7fd fea7 	bl	80088e0 <vTaskDelay>
		HAL_ADC_Start_DMA(&hadc1, res, 16);
 800ab92:	2210      	movs	r2, #16
 800ab94:	490c      	ldr	r1, [pc, #48]	; (800abc8 <readTemp_task+0xe0>)
 800ab96:	480d      	ldr	r0, [pc, #52]	; (800abcc <readTemp_task+0xe4>)
 800ab98:	f7f6 fc0c 	bl	80013b4 <HAL_ADC_Start_DMA>
		while(!newData) {}
 800ab9c:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <readTemp_task+0xd0>)
 800ab9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d0fb      	beq.n	800ab9c <readTemp_task+0xb4>
		newData = 0;
 800aba4:	2400      	movs	r4, #0
 800aba6:	4b04      	ldr	r3, [pc, #16]	; (800abb8 <readTemp_task+0xd0>)
 800aba8:	659c      	str	r4, [r3, #88]	; 0x58
		for(int i = 0; i < 16; i++) {
 800abaa:	e7cc      	b.n	800ab46 <readTemp_task+0x5e>
 800abac:	f3af 8000 	nop.w
 800abb0:	032601a6 	.word	0x032601a6
 800abb4:	3f4a631a 	.word	0x3f4a631a
 800abb8:	20006028 	.word	0x20006028
 800abbc:	0800fc20 	.word	0x0800fc20
 800abc0:	0800fc30 	.word	0x0800fc30
 800abc4:	20006248 	.word	0x20006248
 800abc8:	20006040 	.word	0x20006040
 800abcc:	20004008 	.word	0x20004008

0800abd0 <HAL_ADC_ConvCpltCallback>:
	newData = 1;
 800abd0:	4b01      	ldr	r3, [pc, #4]	; (800abd8 <HAL_ADC_ConvCpltCallback+0x8>)
 800abd2:	2201      	movs	r2, #1
 800abd4:	659a      	str	r2, [r3, #88]	; 0x58
}
 800abd6:	4770      	bx	lr
 800abd8:	20006028 	.word	0x20006028

0800abdc <init_readTemp_task>:
	}
}

void init_readTemp_task(){
 800abdc:	b500      	push	{lr}
 800abde:	b083      	sub	sp, #12
	xTaskCreate(&readTemp_task, "readTemp_task", 512, ( void * ) 1, 3, NULL);
 800abe0:	2300      	movs	r3, #0
 800abe2:	9301      	str	r3, [sp, #4]
 800abe4:	2303      	movs	r3, #3
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	2301      	movs	r3, #1
 800abea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abee:	4903      	ldr	r1, [pc, #12]	; (800abfc <init_readTemp_task+0x20>)
 800abf0:	4803      	ldr	r0, [pc, #12]	; (800ac00 <init_readTemp_task+0x24>)
 800abf2:	f7fd fce4 	bl	80085be <xTaskCreate>
}
 800abf6:	b003      	add	sp, #12
 800abf8:	f85d fb04 	ldr.w	pc, [sp], #4
 800abfc:	0800fc44 	.word	0x0800fc44
 800ac00:	0800aae9 	.word	0x0800aae9

0800ac04 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800ac04:	b500      	push	{lr}
 800ac06:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9302      	str	r3, [sp, #8]
 800ac0c:	9303      	str	r3, [sp, #12]
 800ac0e:	9304      	str	r3, [sp, #16]
 800ac10:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800ac16:	4816      	ldr	r0, [pc, #88]	; (800ac70 <MX_TIM1_Init+0x6c>)
 800ac18:	4a16      	ldr	r2, [pc, #88]	; (800ac74 <MX_TIM1_Init+0x70>)
 800ac1a:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 1500;
 800ac1c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ac20:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac22:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 800ac24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac28:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac2a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800ac2c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ac2e:	2380      	movs	r3, #128	; 0x80
 800ac30:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ac32:	f7f9 fabb 	bl	80041ac <HAL_TIM_Base_Init>
 800ac36:	b990      	cbnz	r0, 800ac5e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac3c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ac3e:	a902      	add	r1, sp, #8
 800ac40:	480b      	ldr	r0, [pc, #44]	; (800ac70 <MX_TIM1_Init+0x6c>)
 800ac42:	f7f9 fbb8 	bl	80043b6 <HAL_TIM_ConfigClockSource>
 800ac46:	b968      	cbnz	r0, 800ac64 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac4c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ac4e:	4669      	mov	r1, sp
 800ac50:	4807      	ldr	r0, [pc, #28]	; (800ac70 <MX_TIM1_Init+0x6c>)
 800ac52:	f7f9 fcf9 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 800ac56:	b940      	cbnz	r0, 800ac6a <MX_TIM1_Init+0x66>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ac58:	b007      	add	sp, #28
 800ac5a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800ac5e:	f7ff f907 	bl	8009e70 <Error_Handler>
 800ac62:	e7e9      	b.n	800ac38 <MX_TIM1_Init+0x34>
    Error_Handler();
 800ac64:	f7ff f904 	bl	8009e70 <Error_Handler>
 800ac68:	e7ee      	b.n	800ac48 <MX_TIM1_Init+0x44>
    Error_Handler();
 800ac6a:	f7ff f901 	bl	8009e70 <Error_Handler>
}
 800ac6e:	e7f3      	b.n	800ac58 <MX_TIM1_Init+0x54>
 800ac70:	20006108 	.word	0x20006108
 800ac74:	40010000 	.word	0x40010000

0800ac78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800ac78:	b500      	push	{lr}
 800ac7a:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9306      	str	r3, [sp, #24]
 800ac80:	9307      	str	r3, [sp, #28]
 800ac82:	9308      	str	r3, [sp, #32]
 800ac84:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac86:	9304      	str	r3, [sp, #16]
 800ac88:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	9302      	str	r3, [sp, #8]
 800ac90:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ac92:	4821      	ldr	r0, [pc, #132]	; (800ad18 <MX_TIM2_Init+0xa0>)
 800ac94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ac98:	6482      	str	r2, [r0, #72]	; 0x48
  htim2.Init.Prescaler = 55;
 800ac9a:	2237      	movs	r2, #55	; 0x37
 800ac9c:	64c2      	str	r2, [r0, #76]	; 0x4c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac9e:	6503      	str	r3, [r0, #80]	; 0x50
  htim2.Init.Period = 65535;
 800aca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aca4:	6542      	str	r2, [r0, #84]	; 0x54
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aca6:	6583      	str	r3, [r0, #88]	; 0x58
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800aca8:	2380      	movs	r3, #128	; 0x80
 800acaa:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800acac:	3048      	adds	r0, #72	; 0x48
 800acae:	f7f9 fa7d 	bl	80041ac <HAL_TIM_Base_Init>
 800acb2:	bb08      	cbnz	r0, 800acf8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800acb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acb8:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800acba:	a906      	add	r1, sp, #24
 800acbc:	4817      	ldr	r0, [pc, #92]	; (800ad1c <MX_TIM2_Init+0xa4>)
 800acbe:	f7f9 fb7a 	bl	80043b6 <HAL_TIM_ConfigClockSource>
 800acc2:	b9e0      	cbnz	r0, 800acfe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800acc4:	4815      	ldr	r0, [pc, #84]	; (800ad1c <MX_TIM2_Init+0xa4>)
 800acc6:	f7f9 fa9d 	bl	8004204 <HAL_TIM_IC_Init>
 800acca:	b9d8      	cbnz	r0, 800ad04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800accc:	2300      	movs	r3, #0
 800acce:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800acd0:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800acd2:	a904      	add	r1, sp, #16
 800acd4:	4811      	ldr	r0, [pc, #68]	; (800ad1c <MX_TIM2_Init+0xa4>)
 800acd6:	f7f9 fcb7 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 800acda:	b9b0      	cbnz	r0, 800ad0a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800acdc:	2200      	movs	r2, #0
 800acde:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ace0:	2301      	movs	r3, #1
 800ace2:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ace4:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800ace6:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ace8:	4669      	mov	r1, sp
 800acea:	480c      	ldr	r0, [pc, #48]	; (800ad1c <MX_TIM2_Init+0xa4>)
 800acec:	f7f9 faf4 	bl	80042d8 <HAL_TIM_IC_ConfigChannel>
 800acf0:	b970      	cbnz	r0, 800ad10 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800acf2:	b00b      	add	sp, #44	; 0x2c
 800acf4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800acf8:	f7ff f8ba 	bl	8009e70 <Error_Handler>
 800acfc:	e7da      	b.n	800acb4 <MX_TIM2_Init+0x3c>
    Error_Handler();
 800acfe:	f7ff f8b7 	bl	8009e70 <Error_Handler>
 800ad02:	e7df      	b.n	800acc4 <MX_TIM2_Init+0x4c>
    Error_Handler();
 800ad04:	f7ff f8b4 	bl	8009e70 <Error_Handler>
 800ad08:	e7e0      	b.n	800accc <MX_TIM2_Init+0x54>
    Error_Handler();
 800ad0a:	f7ff f8b1 	bl	8009e70 <Error_Handler>
 800ad0e:	e7e5      	b.n	800acdc <MX_TIM2_Init+0x64>
    Error_Handler();
 800ad10:	f7ff f8ae 	bl	8009e70 <Error_Handler>
}
 800ad14:	e7ed      	b.n	800acf2 <MX_TIM2_Init+0x7a>
 800ad16:	bf00      	nop
 800ad18:	20006108 	.word	0x20006108
 800ad1c:	20006150 	.word	0x20006150

0800ad20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ad20:	b500      	push	{lr}
 800ad22:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ad24:	2300      	movs	r3, #0
 800ad26:	9306      	str	r3, [sp, #24]
 800ad28:	9307      	str	r3, [sp, #28]
 800ad2a:	9308      	str	r3, [sp, #32]
 800ad2c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad2e:	9304      	str	r3, [sp, #16]
 800ad30:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	9301      	str	r3, [sp, #4]
 800ad36:	9302      	str	r3, [sp, #8]
 800ad38:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ad3a:	4823      	ldr	r0, [pc, #140]	; (800adc8 <MX_TIM3_Init+0xa8>)
 800ad3c:	4a23      	ldr	r2, [pc, #140]	; (800adcc <MX_TIM3_Init+0xac>)
 800ad3e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  htim3.Init.Prescaler = 55;
 800ad42:	2237      	movs	r2, #55	; 0x37
 800ad44:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad48:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  htim3.Init.Period = 65535;
 800ad4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad50:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad54:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad58:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ad5c:	3090      	adds	r0, #144	; 0x90
 800ad5e:	f7f9 fa25 	bl	80041ac <HAL_TIM_Base_Init>
 800ad62:	bb08      	cbnz	r0, 800ada8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ad64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad68:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ad6a:	a906      	add	r1, sp, #24
 800ad6c:	4818      	ldr	r0, [pc, #96]	; (800add0 <MX_TIM3_Init+0xb0>)
 800ad6e:	f7f9 fb22 	bl	80043b6 <HAL_TIM_ConfigClockSource>
 800ad72:	b9e0      	cbnz	r0, 800adae <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800ad74:	4816      	ldr	r0, [pc, #88]	; (800add0 <MX_TIM3_Init+0xb0>)
 800ad76:	f7f9 fa45 	bl	8004204 <HAL_TIM_IC_Init>
 800ad7a:	b9d8      	cbnz	r0, 800adb4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad80:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ad82:	a904      	add	r1, sp, #16
 800ad84:	4812      	ldr	r0, [pc, #72]	; (800add0 <MX_TIM3_Init+0xb0>)
 800ad86:	f7f9 fc5f 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 800ad8a:	b9b0      	cbnz	r0, 800adba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ad90:	2301      	movs	r3, #1
 800ad92:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ad94:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800ad96:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ad98:	4669      	mov	r1, sp
 800ad9a:	480d      	ldr	r0, [pc, #52]	; (800add0 <MX_TIM3_Init+0xb0>)
 800ad9c:	f7f9 fa9c 	bl	80042d8 <HAL_TIM_IC_ConfigChannel>
 800ada0:	b970      	cbnz	r0, 800adc0 <MX_TIM3_Init+0xa0>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800ada2:	b00b      	add	sp, #44	; 0x2c
 800ada4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800ada8:	f7ff f862 	bl	8009e70 <Error_Handler>
 800adac:	e7da      	b.n	800ad64 <MX_TIM3_Init+0x44>
    Error_Handler();
 800adae:	f7ff f85f 	bl	8009e70 <Error_Handler>
 800adb2:	e7df      	b.n	800ad74 <MX_TIM3_Init+0x54>
    Error_Handler();
 800adb4:	f7ff f85c 	bl	8009e70 <Error_Handler>
 800adb8:	e7e0      	b.n	800ad7c <MX_TIM3_Init+0x5c>
    Error_Handler();
 800adba:	f7ff f859 	bl	8009e70 <Error_Handler>
 800adbe:	e7e5      	b.n	800ad8c <MX_TIM3_Init+0x6c>
    Error_Handler();
 800adc0:	f7ff f856 	bl	8009e70 <Error_Handler>
}
 800adc4:	e7ed      	b.n	800ada2 <MX_TIM3_Init+0x82>
 800adc6:	bf00      	nop
 800adc8:	20006108 	.word	0x20006108
 800adcc:	40000400 	.word	0x40000400
 800add0:	20006198 	.word	0x20006198

0800add4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800add4:	b500      	push	{lr}
 800add6:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800add8:	2300      	movs	r3, #0
 800adda:	9304      	str	r3, [sp, #16]
 800addc:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	9302      	str	r3, [sp, #8]
 800ade4:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ade6:	4819      	ldr	r0, [pc, #100]	; (800ae4c <MX_TIM4_Init+0x78>)
 800ade8:	4a19      	ldr	r2, [pc, #100]	; (800ae50 <MX_TIM4_Init+0x7c>)
 800adea:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
  htim4.Init.Prescaler = 0;
 800adee:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800adf2:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
  htim4.Init.Period = 65535;
 800adf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adfa:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800adfe:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ae02:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800ae06:	30d8      	adds	r0, #216	; 0xd8
 800ae08:	f7f9 f9fc 	bl	8004204 <HAL_TIM_IC_Init>
 800ae0c:	b9a8      	cbnz	r0, 800ae3a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ae12:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800ae14:	a904      	add	r1, sp, #16
 800ae16:	480f      	ldr	r0, [pc, #60]	; (800ae54 <MX_TIM4_Init+0x80>)
 800ae18:	f7f9 fc16 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 800ae1c:	b980      	cbnz	r0, 800ae40 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ae1e:	2200      	movs	r2, #0
 800ae20:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ae22:	2301      	movs	r3, #1
 800ae24:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ae26:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800ae28:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ae2a:	4669      	mov	r1, sp
 800ae2c:	4809      	ldr	r0, [pc, #36]	; (800ae54 <MX_TIM4_Init+0x80>)
 800ae2e:	f7f9 fa53 	bl	80042d8 <HAL_TIM_IC_ConfigChannel>
 800ae32:	b940      	cbnz	r0, 800ae46 <MX_TIM4_Init+0x72>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800ae34:	b007      	add	sp, #28
 800ae36:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800ae3a:	f7ff f819 	bl	8009e70 <Error_Handler>
 800ae3e:	e7e6      	b.n	800ae0e <MX_TIM4_Init+0x3a>
    Error_Handler();
 800ae40:	f7ff f816 	bl	8009e70 <Error_Handler>
 800ae44:	e7eb      	b.n	800ae1e <MX_TIM4_Init+0x4a>
    Error_Handler();
 800ae46:	f7ff f813 	bl	8009e70 <Error_Handler>
}
 800ae4a:	e7f3      	b.n	800ae34 <MX_TIM4_Init+0x60>
 800ae4c:	20006108 	.word	0x20006108
 800ae50:	40000800 	.word	0x40000800
 800ae54:	200061e0 	.word	0x200061e0

0800ae58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	9305      	str	r3, [sp, #20]
 800ae60:	9306      	str	r3, [sp, #24]
 800ae62:	9307      	str	r3, [sp, #28]
 800ae64:	9308      	str	r3, [sp, #32]
 800ae66:	9309      	str	r3, [sp, #36]	; 0x24
  if(tim_baseHandle->Instance==TIM1)
 800ae68:	6803      	ldr	r3, [r0, #0]
 800ae6a:	4a39      	ldr	r2, [pc, #228]	; (800af50 <HAL_TIM_Base_MspInit+0xf8>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d007      	beq.n	800ae80 <HAL_TIM_Base_MspInit+0x28>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 800ae70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae74:	d018      	beq.n	800aea8 <HAL_TIM_Base_MspInit+0x50>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 800ae76:	4a37      	ldr	r2, [pc, #220]	; (800af54 <HAL_TIM_Base_MspInit+0xfc>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d040      	beq.n	800aefe <HAL_TIM_Base_MspInit+0xa6>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800ae7c:	b00a      	add	sp, #40	; 0x28
 800ae7e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ae80:	2200      	movs	r2, #0
 800ae82:	9200      	str	r2, [sp, #0]
 800ae84:	4b34      	ldr	r3, [pc, #208]	; (800af58 <HAL_TIM_Base_MspInit+0x100>)
 800ae86:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800ae88:	f041 0101 	orr.w	r1, r1, #1
 800ae8c:	6459      	str	r1, [r3, #68]	; 0x44
 800ae8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800ae98:	2105      	movs	r1, #5
 800ae9a:	2019      	movs	r0, #25
 800ae9c:	f7f6 fdea 	bl	8001a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800aea0:	2019      	movs	r0, #25
 800aea2:	f7f6 fe1f 	bl	8001ae4 <HAL_NVIC_EnableIRQ>
 800aea6:	e7e9      	b.n	800ae7c <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800aea8:	2400      	movs	r4, #0
 800aeaa:	9401      	str	r4, [sp, #4]
 800aeac:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800aeb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeb2:	f042 0201 	orr.w	r2, r2, #1
 800aeb6:	641a      	str	r2, [r3, #64]	; 0x40
 800aeb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeba:	f002 0201 	and.w	r2, r2, #1
 800aebe:	9201      	str	r2, [sp, #4]
 800aec0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aec2:	9402      	str	r4, [sp, #8]
 800aec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aec6:	f042 0201 	orr.w	r2, r2, #1
 800aeca:	631a      	str	r2, [r3, #48]	; 0x30
 800aecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	9302      	str	r3, [sp, #8]
 800aed4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800aed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeda:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aedc:	2302      	movs	r3, #2
 800aede:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800aee0:	2301      	movs	r3, #1
 800aee2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aee4:	a905      	add	r1, sp, #20
 800aee6:	481d      	ldr	r0, [pc, #116]	; (800af5c <HAL_TIM_Base_MspInit+0x104>)
 800aee8:	f7f7 f828 	bl	8001f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800aeec:	4622      	mov	r2, r4
 800aeee:	2105      	movs	r1, #5
 800aef0:	201c      	movs	r0, #28
 800aef2:	f7f6 fdbf 	bl	8001a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800aef6:	201c      	movs	r0, #28
 800aef8:	f7f6 fdf4 	bl	8001ae4 <HAL_NVIC_EnableIRQ>
 800aefc:	e7be      	b.n	800ae7c <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800aefe:	2400      	movs	r4, #0
 800af00:	9403      	str	r4, [sp, #12]
 800af02:	4b15      	ldr	r3, [pc, #84]	; (800af58 <HAL_TIM_Base_MspInit+0x100>)
 800af04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af06:	f042 0202 	orr.w	r2, r2, #2
 800af0a:	641a      	str	r2, [r3, #64]	; 0x40
 800af0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af0e:	f002 0202 	and.w	r2, r2, #2
 800af12:	9203      	str	r2, [sp, #12]
 800af14:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af16:	9404      	str	r4, [sp, #16]
 800af18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af1a:	f042 0204 	orr.w	r2, r2, #4
 800af1e:	631a      	str	r2, [r3, #48]	; 0x30
 800af20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af22:	f003 0304 	and.w	r3, r3, #4
 800af26:	9304      	str	r3, [sp, #16]
 800af28:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800af2a:	2340      	movs	r3, #64	; 0x40
 800af2c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af2e:	2302      	movs	r3, #2
 800af30:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800af32:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af34:	a905      	add	r1, sp, #20
 800af36:	480a      	ldr	r0, [pc, #40]	; (800af60 <HAL_TIM_Base_MspInit+0x108>)
 800af38:	f7f7 f800 	bl	8001f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800af3c:	4622      	mov	r2, r4
 800af3e:	2105      	movs	r1, #5
 800af40:	201d      	movs	r0, #29
 800af42:	f7f6 fd97 	bl	8001a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800af46:	201d      	movs	r0, #29
 800af48:	f7f6 fdcc 	bl	8001ae4 <HAL_NVIC_EnableIRQ>
}
 800af4c:	e796      	b.n	800ae7c <HAL_TIM_Base_MspInit+0x24>
 800af4e:	bf00      	nop
 800af50:	40010000 	.word	0x40010000
 800af54:	40000400 	.word	0x40000400
 800af58:	40023800 	.word	0x40023800
 800af5c:	40020000 	.word	0x40020000
 800af60:	40020800 	.word	0x40020800

0800af64 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800af64:	b510      	push	{r4, lr}
 800af66:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af68:	2300      	movs	r3, #0
 800af6a:	9303      	str	r3, [sp, #12]
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	9305      	str	r3, [sp, #20]
 800af70:	9306      	str	r3, [sp, #24]
 800af72:	9307      	str	r3, [sp, #28]
  if(tim_icHandle->Instance==TIM4)
 800af74:	6802      	ldr	r2, [r0, #0]
 800af76:	4b17      	ldr	r3, [pc, #92]	; (800afd4 <HAL_TIM_IC_MspInit+0x70>)
 800af78:	429a      	cmp	r2, r3
 800af7a:	d001      	beq.n	800af80 <HAL_TIM_IC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800af7c:	b008      	add	sp, #32
 800af7e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800af80:	2400      	movs	r4, #0
 800af82:	9401      	str	r4, [sp, #4]
 800af84:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800af88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af8a:	f042 0204 	orr.w	r2, r2, #4
 800af8e:	641a      	str	r2, [r3, #64]	; 0x40
 800af90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af92:	f002 0204 	and.w	r2, r2, #4
 800af96:	9201      	str	r2, [sp, #4]
 800af98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af9a:	9402      	str	r4, [sp, #8]
 800af9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af9e:	f042 0202 	orr.w	r2, r2, #2
 800afa2:	631a      	str	r2, [r3, #48]	; 0x30
 800afa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa6:	f003 0302 	and.w	r3, r3, #2
 800afaa:	9302      	str	r3, [sp, #8]
 800afac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800afae:	2340      	movs	r3, #64	; 0x40
 800afb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afb2:	2302      	movs	r3, #2
 800afb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800afb6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800afb8:	a903      	add	r1, sp, #12
 800afba:	4807      	ldr	r0, [pc, #28]	; (800afd8 <HAL_TIM_IC_MspInit+0x74>)
 800afbc:	f7f6 ffbe 	bl	8001f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800afc0:	4622      	mov	r2, r4
 800afc2:	2105      	movs	r1, #5
 800afc4:	201e      	movs	r0, #30
 800afc6:	f7f6 fd55 	bl	8001a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800afca:	201e      	movs	r0, #30
 800afcc:	f7f6 fd8a 	bl	8001ae4 <HAL_NVIC_EnableIRQ>
}
 800afd0:	e7d4      	b.n	800af7c <HAL_TIM_IC_MspInit+0x18>
 800afd2:	bf00      	nop
 800afd4:	40000800 	.word	0x40000800
 800afd8:	40020400 	.word	0x40020400

0800afdc <getTime>:
static time_delta prev_time_delta;			// Save the previous time to error check
											// a case where the time just rolls over when getting the time


// Return the time delta at the moment the function is called
time_delta getTime(){
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	ed2d 8b02 	vpush	{d8}
 800afe2:	4604      	mov	r4, r0

	time_delta time_delta_var_local;

	//Ensure we don't get pre-empted here
	portENTER_CRITICAL();
 800afe4:	f7fe f88e 	bl	8009104 <vPortEnterCritical>

	time_delta_var_local = time_delta_var;		// Copy the seconds value
 800afe8:	4d18      	ldr	r5, [pc, #96]	; (800b04c <getTime+0x70>)
 800afea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800afee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	time_delta_var_local.subseconds = (float) TIM1->CNT/TIM1->ARR;  // CNT divided by the auto reload would be the
 800aff2:	4b17      	ldr	r3, [pc, #92]	; (800b050 <getTime+0x74>)
 800aff4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800aff8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800affc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b004:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800b008:	ed84 8a02 	vstr	s16, [r4, #8]

	portEXIT_CRITICAL();
 800b00c:	f7fe f89c 	bl	8009148 <vPortExitCritical>

	//assert(time_delta_var_local.seconds>-1);
	//assert(time_delta_var_local.subseconds<1);

	// Error! Timer CNT rollover during reading
	if(	prev_time_delta.seconds == time_delta_var_local.seconds
 800b010:	6928      	ldr	r0, [r5, #16]
 800b012:	6969      	ldr	r1, [r5, #20]
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	6862      	ldr	r2, [r4, #4]
 800b018:	4291      	cmp	r1, r2
 800b01a:	bf08      	it	eq
 800b01c:	4298      	cmpeq	r0, r3
 800b01e:	d008      	beq.n	800b032 <getTime+0x56>
		&& prev_time_delta.subseconds > time_delta_var_local.subseconds){
		time_delta_var_local.seconds++;
	}

	prev_time_delta = time_delta_var_local;
 800b020:	4d0c      	ldr	r5, [pc, #48]	; (800b054 <getTime+0x78>)
 800b022:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b026:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	return time_delta_var_local;				// Return the copied value

}
 800b02a:	4620      	mov	r0, r4
 800b02c:	ecbd 8b02 	vpop	{d8}
 800b030:	bd38      	pop	{r3, r4, r5, pc}
		&& prev_time_delta.subseconds > time_delta_var_local.subseconds){
 800b032:	edd5 7a06 	vldr	s15, [r5, #24]
 800b036:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b03e:	d5ef      	bpl.n	800b020 <getTime+0x44>
		time_delta_var_local.seconds++;
 800b040:	3301      	adds	r3, #1
 800b042:	f142 0200 	adc.w	r2, r2, #0
 800b046:	6023      	str	r3, [r4, #0]
 800b048:	6062      	str	r2, [r4, #4]
 800b04a:	e7e9      	b.n	800b020 <getTime+0x44>
 800b04c:	20006228 	.word	0x20006228
 800b050:	40010000 	.word	0x40010000
 800b054:	20006238 	.word	0x20006238

0800b058 <HAL_TimestampUpdate_Callback>:

// Update the seconds
// We Elapse a Period at a frequency of 1Hz
void HAL_TimestampUpdate_Callback(TIM_HandleTypeDef *htim){

	if(htim == &htim1){
 800b058:	4b07      	ldr	r3, [pc, #28]	; (800b078 <HAL_TimestampUpdate_Callback+0x20>)
 800b05a:	4283      	cmp	r3, r0
 800b05c:	d000      	beq.n	800b060 <HAL_TimestampUpdate_Callback+0x8>
 800b05e:	4770      	bx	lr
void HAL_TimestampUpdate_Callback(TIM_HandleTypeDef *htim){
 800b060:	b410      	push	{r4}
		time_delta_var.seconds++;
 800b062:	4c06      	ldr	r4, [pc, #24]	; (800b07c <HAL_TimestampUpdate_Callback+0x24>)
 800b064:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b068:	1c50      	adds	r0, r2, #1
 800b06a:	f143 0100 	adc.w	r1, r3, #0
 800b06e:	e9c4 0100 	strd	r0, r1, [r4]
	}

}
 800b072:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	20006108 	.word	0x20006108
 800b07c:	20006228 	.word	0x20006228

0800b080 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b080:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b082:	480a      	ldr	r0, [pc, #40]	; (800b0ac <MX_USART1_UART_Init+0x2c>)
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <MX_USART1_UART_Init+0x30>)
 800b086:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800b088:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800b08c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b08e:	2300      	movs	r3, #0
 800b090:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b092:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b094:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b096:	220c      	movs	r2, #12
 800b098:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b09a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b09c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b09e:	f7f9 fbe7 	bl	8004870 <HAL_UART_Init>
 800b0a2:	b900      	cbnz	r0, 800b0a6 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b0a4:	bd08      	pop	{r3, pc}
    Error_Handler();
 800b0a6:	f7fe fee3 	bl	8009e70 <Error_Handler>
}
 800b0aa:	e7fb      	b.n	800b0a4 <MX_USART1_UART_Init+0x24>
 800b0ac:	20006248 	.word	0x20006248
 800b0b0:	40011000 	.word	0x40011000

0800b0b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b0b4:	b500      	push	{lr}
 800b0b6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	9303      	str	r3, [sp, #12]
 800b0bc:	9304      	str	r3, [sp, #16]
 800b0be:	9305      	str	r3, [sp, #20]
 800b0c0:	9306      	str	r3, [sp, #24]
 800b0c2:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 800b0c4:	6802      	ldr	r2, [r0, #0]
 800b0c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0ca:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d002      	beq.n	800b0d8 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800b0d2:	b009      	add	sp, #36	; 0x24
 800b0d4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800b0d8:	2100      	movs	r1, #0
 800b0da:	9101      	str	r1, [sp, #4]
 800b0dc:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800b0e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0e2:	f042 0210 	orr.w	r2, r2, #16
 800b0e6:	645a      	str	r2, [r3, #68]	; 0x44
 800b0e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0ea:	f002 0210 	and.w	r2, r2, #16
 800b0ee:	9201      	str	r2, [sp, #4]
 800b0f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0f2:	9102      	str	r1, [sp, #8]
 800b0f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0f6:	f042 0201 	orr.w	r2, r2, #1
 800b0fa:	631a      	str	r2, [r3, #48]	; 0x30
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	9302      	str	r3, [sp, #8]
 800b104:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b106:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b10a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b10c:	2302      	movs	r3, #2
 800b10e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b110:	2303      	movs	r3, #3
 800b112:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b114:	2307      	movs	r3, #7
 800b116:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b118:	a903      	add	r1, sp, #12
 800b11a:	4802      	ldr	r0, [pc, #8]	; (800b124 <HAL_UART_MspInit+0x70>)
 800b11c:	f7f6 ff0e 	bl	8001f3c <HAL_GPIO_Init>
}
 800b120:	e7d7      	b.n	800b0d2 <HAL_UART_MspInit+0x1e>
 800b122:	bf00      	nop
 800b124:	40020000 	.word	0x40020000

0800b128 <Init_WheelSpeed_Logging_Task>:

/* Private functions ---------------------------------------------------------*/



void Init_WheelSpeed_Logging_Task(){
 800b128:	b510      	push	{r4, lr}
 800b12a:	b084      	sub	sp, #16

	//Gatekeeper
	xWheelSpeed_Logger_Handle = xTaskCreateStatic(	xWheelSpeed_Logger,
 800b12c:	4c08      	ldr	r4, [pc, #32]	; (800b150 <Init_WheelSpeed_Logging_Task+0x28>)
 800b12e:	9402      	str	r4, [sp, #8]
 800b130:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	2303      	movs	r3, #3
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	2300      	movs	r3, #0
 800b13c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b140:	4904      	ldr	r1, [pc, #16]	; (800b154 <Init_WheelSpeed_Logging_Task+0x2c>)
 800b142:	4805      	ldr	r0, [pc, #20]	; (800b158 <Init_WheelSpeed_Logging_Task+0x30>)
 800b144:	f7fd fa00 	bl	8008548 <xTaskCreateStatic>
 800b148:	f8c4 04b8 	str.w	r0, [r4, #1208]	; 0x4b8
														WHEELSPEED_LOG_TASK_PRIORITY,
														xWheelSpeed_Logger_Stack,
														&xWheelSpeed_Logger_Buffer);	// Create static task for logging the wheelspeed sensor to the sdcard

int i =3;
}
 800b14c:	b004      	add	sp, #16
 800b14e:	bd10      	pop	{r4, pc}
 800b150:	2000628c 	.word	0x2000628c
 800b154:	0800fc54 	.word	0x0800fc54
 800b158:	0800b215 	.word	0x0800b215

0800b15c <get_wheel_ang_vel>:
/*get_wheel_ang_vel
 *
 * 		@Brief returns the param wheel's speed in revolutions per second
 *
 */
float get_wheel_ang_vel(enum wheelPosition wheel) {
 800b15c:	b570      	push	{r4, r5, r6, lr}
	uint32_t overflow = 0;

	uint32_t sys_clk = 0;

	//get wheel specific data buffer
	switch (wheel) {
 800b15e:	2803      	cmp	r0, #3
 800b160:	d845      	bhi.n	800b1ee <get_wheel_ang_vel+0x92>
 800b162:	e8df f000 	tbb	[pc, r0]
 800b166:	2c02      	.short	0x2c02
 800b168:	3c34      	.short	0x3c34

	case frontLeftWheel:
		overflow = periodOF_FL;
 800b16a:	4b27      	ldr	r3, [pc, #156]	; (800b208 <get_wheel_ang_vel+0xac>)
 800b16c:	f8d3 44bc 	ldr.w	r4, [r3, #1212]	; 0x4bc
		periodcurr = periodFLcurr;
 800b170:	f8d3 54c0 	ldr.w	r5, [r3, #1216]	; 0x4c0
		periodprev = periodFLprev;
 800b174:	f8d3 64c4 	ldr.w	r6, [r3, #1220]	; 0x4c4
		periodprev = periodBRprev;
		break;
	}

	//get clock frequency
	sys_clk = HAL_RCC_GetSysClockFreq();
 800b178:	f7f7 fb40 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 800b17c:	ee07 0a90 	vmov	s15, r0

	//get wheel speed
	clkFrq =  (float)sys_clk/55;						// Timer peripheral frequency
 800b180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b184:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b20c <get_wheel_ang_vel+0xb0>
 800b188:	eec7 6a87 	vdiv.f32	s13, s15, s14

	if(periodcurr != 0 && periodprev !=0 && overflow != 0){
 800b18c:	b39d      	cbz	r5, 800b1f6 <get_wheel_ang_vel+0x9a>
 800b18e:	b3ae      	cbz	r6, 800b1fc <get_wheel_ang_vel+0xa0>
 800b190:	b3bc      	cbz	r4, 800b202 <get_wheel_ang_vel+0xa6>

		if(overflow > 0){
			speed = ((float)clkFrq) / (NUM_TEETH * (float)(periodcurr + (65535 - periodprev) + ((overflow-1) * 65535)));			// calculate speed
 800b192:	1bad      	subs	r5, r5, r6
 800b194:	ebc4 4404 	rsb	r4, r4, r4, lsl #16
 800b198:	442c      	add	r4, r5
 800b19a:	ee07 4a90 	vmov	s15, r4
 800b19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800b1a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b1aa:	ee86 0aa7 	vdiv.f32	s0, s13, s15
			assert_param(periodcurr - periodprev >= 0);					// ensure that this assumption holds. (If we're getting negative values, we're not counting overflows)
			speed = ((float)clkFrq) / (NUM_TEETH * (float)(periodcurr - periodprev));			// calculate speed
		}

		//check that the division didnt give nan
		if (isnan(speed))
 800b1ae:	eeb4 0a40 	vcmp.f32	s0, s0
 800b1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b6:	d720      	bvc.n	800b1fa <get_wheel_ang_vel+0x9e>
			speed = 0;
 800b1b8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800b210 <get_wheel_ang_vel+0xb4>

	}

	return speed;
 800b1bc:	e01d      	b.n	800b1fa <get_wheel_ang_vel+0x9e>
		overflow = periodOF_FR;
 800b1be:	4b12      	ldr	r3, [pc, #72]	; (800b208 <get_wheel_ang_vel+0xac>)
 800b1c0:	f8d3 44c8 	ldr.w	r4, [r3, #1224]	; 0x4c8
		periodcurr = periodFRcurr;
 800b1c4:	f8d3 54cc 	ldr.w	r5, [r3, #1228]	; 0x4cc
		periodprev = periodFRprev;
 800b1c8:	f8d3 64d0 	ldr.w	r6, [r3, #1232]	; 0x4d0
		break;
 800b1cc:	e7d4      	b.n	800b178 <get_wheel_ang_vel+0x1c>
		overflow = periodOF_BL;
 800b1ce:	4b0e      	ldr	r3, [pc, #56]	; (800b208 <get_wheel_ang_vel+0xac>)
 800b1d0:	f8d3 44d4 	ldr.w	r4, [r3, #1236]	; 0x4d4
		periodcurr = periodBLcurr;
 800b1d4:	f8d3 54d8 	ldr.w	r5, [r3, #1240]	; 0x4d8
		periodprev = periodBLprev;
 800b1d8:	f8d3 64dc 	ldr.w	r6, [r3, #1244]	; 0x4dc
		break;
 800b1dc:	e7cc      	b.n	800b178 <get_wheel_ang_vel+0x1c>
		overflow = periodOF_BR;
 800b1de:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <get_wheel_ang_vel+0xac>)
 800b1e0:	f8d3 44e0 	ldr.w	r4, [r3, #1248]	; 0x4e0
		periodcurr = periodBRcurr;
 800b1e4:	f8d3 54e4 	ldr.w	r5, [r3, #1252]	; 0x4e4
		periodprev = periodBRprev;
 800b1e8:	f8d3 64e8 	ldr.w	r6, [r3, #1256]	; 0x4e8
		break;
 800b1ec:	e7c4      	b.n	800b178 <get_wheel_ang_vel+0x1c>
	switch (wheel) {
 800b1ee:	2400      	movs	r4, #0
 800b1f0:	4626      	mov	r6, r4
 800b1f2:	4625      	mov	r5, r4
 800b1f4:	e7c0      	b.n	800b178 <get_wheel_ang_vel+0x1c>
	float speed = 0;												//the wheel speed
 800b1f6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800b210 <get_wheel_ang_vel+0xb4>
}
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
	float speed = 0;												//the wheel speed
 800b1fc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800b210 <get_wheel_ang_vel+0xb4>
 800b200:	e7fb      	b.n	800b1fa <get_wheel_ang_vel+0x9e>
 800b202:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800b210 <get_wheel_ang_vel+0xb4>
 800b206:	e7f8      	b.n	800b1fa <get_wheel_ang_vel+0x9e>
 800b208:	2000628c 	.word	0x2000628c
 800b20c:	425c0000 	.word	0x425c0000
 800b210:	00000000 	.word	0x00000000

0800b214 <xWheelSpeed_Logger>:



void xWheelSpeed_Logger(void* pvParameters){
 800b214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b216:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
	char logged_msgFR[256] =  {0};
 800b21a:	2400      	movs	r4, #0
 800b21c:	94ca      	str	r4, [sp, #808]	; 0x328
 800b21e:	25fc      	movs	r5, #252	; 0xfc
 800b220:	462a      	mov	r2, r5
 800b222:	4621      	mov	r1, r4
 800b224:	a8cb      	add	r0, sp, #812	; 0x32c
 800b226:	f000 fa0c 	bl	800b642 <memset>
	char logged_msgFL[256] =  {0};
 800b22a:	948a      	str	r4, [sp, #552]	; 0x228
 800b22c:	462a      	mov	r2, r5
 800b22e:	4621      	mov	r1, r4
 800b230:	a88b      	add	r0, sp, #556	; 0x22c
 800b232:	f000 fa06 	bl	800b642 <memset>
	char logged_msgCOMB[512] = {0};
 800b236:	940a      	str	r4, [sp, #40]	; 0x28
 800b238:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800b23c:	4621      	mov	r1, r4
 800b23e:	a80b      	add	r0, sp, #44	; 0x2c
 800b240:	f000 f9ff 	bl	800b642 <memset>
	time_delta td;
	float timedelt;
	float wheelsped_bufferFL, wheelsped_bufferFR;

	for(;;){
		wheelsped_bufferFL = get_wheel_ang_vel(frontLeftWheel);
 800b244:	2000      	movs	r0, #0
 800b246:	f7ff ff89 	bl	800b15c <get_wheel_ang_vel>
 800b24a:	ee10 5a10 	vmov	r5, s0
		td = getTime();
 800b24e:	ac06      	add	r4, sp, #24
 800b250:	4620      	mov	r0, r4
 800b252:	f7ff fec3 	bl	800afdc <getTime>
		timedelt = (float)td.seconds + td.subseconds;
 800b256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b25a:	f7f5 fddd 	bl	8000e18 <__aeabi_ul2f>
 800b25e:	ee07 0a10 	vmov	s14, r0
 800b262:	eddd 7a08 	vldr	s15, [sp, #32]

		sprintf(logged_msgFL, "Delta: %f, WSPD(FL): %f\n", timedelt, wheelsped_bufferFL); //always include \n after an entry
 800b266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b26a:	ee17 0a90 	vmov	r0, s15
 800b26e:	f7f5 f98b 	bl	8000588 <__aeabi_f2d>
 800b272:	4606      	mov	r6, r0
 800b274:	460f      	mov	r7, r1
 800b276:	4628      	mov	r0, r5
 800b278:	f7f5 f986 	bl	8000588 <__aeabi_f2d>
 800b27c:	e9cd 0100 	strd	r0, r1, [sp]
 800b280:	4632      	mov	r2, r6
 800b282:	463b      	mov	r3, r7
 800b284:	491d      	ldr	r1, [pc, #116]	; (800b2fc <xWheelSpeed_Logger+0xe8>)
 800b286:	a88a      	add	r0, sp, #552	; 0x228
 800b288:	f000 ff5c 	bl	800c144 <siprintf>

		wheelsped_bufferFR = get_wheel_ang_vel(frontRightWheel);
 800b28c:	2001      	movs	r0, #1
 800b28e:	f7ff ff65 	bl	800b15c <get_wheel_ang_vel>
 800b292:	ee10 6a10 	vmov	r6, s0
		td = getTime();
 800b296:	ad02      	add	r5, sp, #8
 800b298:	4628      	mov	r0, r5
 800b29a:	f7ff fe9f 	bl	800afdc <getTime>
 800b29e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b2a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		timedelt = (float)td.seconds + td.subseconds;
 800b2a6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b2aa:	f7f5 fdb5 	bl	8000e18 <__aeabi_ul2f>
 800b2ae:	ee07 0a10 	vmov	s14, r0
 800b2b2:	edd4 7a02 	vldr	s15, [r4, #8]

		sprintf(logged_msgFR, "Delta: %f, WSPD(FR): %f\n", timedelt, wheelsped_bufferFR);//always include \n after an entry
 800b2b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2ba:	ee17 0a90 	vmov	r0, s15
 800b2be:	f7f5 f963 	bl	8000588 <__aeabi_f2d>
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	460d      	mov	r5, r1
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f7f5 f95e 	bl	8000588 <__aeabi_f2d>
 800b2cc:	e9cd 0100 	strd	r0, r1, [sp]
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	462b      	mov	r3, r5
 800b2d4:	490a      	ldr	r1, [pc, #40]	; (800b300 <xWheelSpeed_Logger+0xec>)
 800b2d6:	a8ca      	add	r0, sp, #808	; 0x328
 800b2d8:	f000 ff34 	bl	800c144 <siprintf>

		sprintf(logged_msgCOMB, "%s%s",logged_msgFR, logged_msgFL); //ALWAYS make sure final output to queue is a single item
 800b2dc:	ab8a      	add	r3, sp, #552	; 0x228
 800b2de:	aaca      	add	r2, sp, #808	; 0x328
 800b2e0:	4908      	ldr	r1, [pc, #32]	; (800b304 <xWheelSpeed_Logger+0xf0>)
 800b2e2:	a80a      	add	r0, sp, #40	; 0x28
 800b2e4:	f000 ff2e 	bl	800c144 <siprintf>

		//Log the left and right wheels
		SD_Log(logged_msgCOMB,-1);
 800b2e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b2ec:	a80a      	add	r0, sp, #40	; 0x28
 800b2ee:	f7fe ff27 	bl	800a140 <SD_Log>

		vTaskDelay(pdMS_TO_TICKS(5));	// Log the wheel speeds every 5ms
 800b2f2:	2005      	movs	r0, #5
 800b2f4:	f7fd faf4 	bl	80088e0 <vTaskDelay>
	for(;;){
 800b2f8:	e7a4      	b.n	800b244 <xWheelSpeed_Logger+0x30>
 800b2fa:	bf00      	nop
 800b2fc:	0800fc68 	.word	0x0800fc68
 800b300:	0800fc84 	.word	0x0800fc84
 800b304:	0800fca0 	.word	0x0800fca0

0800b308 <HAL_TIM_IC_CaptureCallback>:
 * @brief interrupt on rising edge of wheel speed pins. Puts most recently captred value in circular buffer
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
	// Timer Channel 1, PA8 -> Rear Right Wheel

	if(htim->Instance == TIM2){
 800b308:	6803      	ldr	r3, [r0, #0]
 800b30a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b30e:	d003      	beq.n	800b318 <HAL_TIM_IC_CaptureCallback+0x10>
		periodFRprev = periodFRcurr;						// Save the old value
		periodFRcurr = htim2.Instance->CCR1;				// Get capture compare register 1's value, CC1 flag is cleared from reading this
		periodOF_FR = overflow_cnt_FR;						// Save the period of the overflow counter
		overflow_cnt_FR = 0;								// Reset the overflow counter.
	}
	if(htim->Instance == TIM3){
 800b310:	4a13      	ldr	r2, [pc, #76]	; (800b360 <HAL_TIM_IC_CaptureCallback+0x58>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d012      	beq.n	800b33c <HAL_TIM_IC_CaptureCallback+0x34>
		periodFLcurr = htim3.Instance->CCR1;					// Get capture compare register 2's value
		periodOF_FL = overflow_cnt_FL;						// Save the period of the overflow counter
		overflow_cnt_FL = 0;								// Reset the overflow counter.
	}

}
 800b316:	4770      	bx	lr
		periodFRprev = periodFRcurr;						// Save the old value
 800b318:	4a12      	ldr	r2, [pc, #72]	; (800b364 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800b31a:	f8d2 14cc 	ldr.w	r1, [r2, #1228]	; 0x4cc
 800b31e:	f8c2 14d0 	str.w	r1, [r2, #1232]	; 0x4d0
		periodFRcurr = htim2.Instance->CCR1;				// Get capture compare register 1's value, CC1 flag is cleared from reading this
 800b322:	4911      	ldr	r1, [pc, #68]	; (800b368 <HAL_TIM_IC_CaptureCallback+0x60>)
 800b324:	6809      	ldr	r1, [r1, #0]
 800b326:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b328:	f8c2 14cc 	str.w	r1, [r2, #1228]	; 0x4cc
		periodOF_FR = overflow_cnt_FR;						// Save the period of the overflow counter
 800b32c:	f8d2 14ec 	ldr.w	r1, [r2, #1260]	; 0x4ec
 800b330:	f8c2 14c8 	str.w	r1, [r2, #1224]	; 0x4c8
		overflow_cnt_FR = 0;								// Reset the overflow counter.
 800b334:	2100      	movs	r1, #0
 800b336:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 800b33a:	e7e9      	b.n	800b310 <HAL_TIM_IC_CaptureCallback+0x8>
		periodFLprev = periodFLcurr;						// Save the old value
 800b33c:	4b09      	ldr	r3, [pc, #36]	; (800b364 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800b33e:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	; 0x4c0
 800b342:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
		periodFLcurr = htim3.Instance->CCR1;					// Get capture compare register 2's value
 800b346:	4a09      	ldr	r2, [pc, #36]	; (800b36c <HAL_TIM_IC_CaptureCallback+0x64>)
 800b348:	6812      	ldr	r2, [r2, #0]
 800b34a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b34c:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
		periodOF_FL = overflow_cnt_FL;						// Save the period of the overflow counter
 800b350:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800b354:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
		overflow_cnt_FL = 0;								// Reset the overflow counter.
 800b358:	2200      	movs	r2, #0
 800b35a:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
}
 800b35e:	e7da      	b.n	800b316 <HAL_TIM_IC_CaptureCallback+0xe>
 800b360:	40000400 	.word	0x40000400
 800b364:	2000628c 	.word	0x2000628c
 800b368:	20006150 	.word	0x20006150
 800b36c:	20006198 	.word	0x20006198

0800b370 <HAL_FR_Wheelspeed_Overflow_Callback>:


//timer 2 interrupt handler
void HAL_FR_Wheelspeed_Overflow_Callback(void) {

	overflow_cnt_FR++;
 800b370:	4a03      	ldr	r2, [pc, #12]	; (800b380 <HAL_FR_Wheelspeed_Overflow_Callback+0x10>)
 800b372:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 800b376:	3301      	adds	r3, #1
 800b378:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	2000628c 	.word	0x2000628c

0800b384 <HAL_FL_Wheelspeed_Overflow_Callback>:

// Timer 3 interrupt handler
void HAL_FL_Wheelspeed_Overflow_Callback(void) {

	overflow_cnt_FL++;										// increment the overflow
 800b384:	4a03      	ldr	r2, [pc, #12]	; (800b394 <HAL_FL_Wheelspeed_Overflow_Callback+0x10>)
 800b386:	f8d2 34f0 	ldr.w	r3, [r2, #1264]	; 0x4f0
 800b38a:	3301      	adds	r3, #1
 800b38c:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
}
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	2000628c 	.word	0x2000628c

0800b398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b398:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b3d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b39c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b39e:	e003      	b.n	800b3a8 <LoopCopyDataInit>

0800b3a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b3a0:	4b0c      	ldr	r3, [pc, #48]	; (800b3d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b3a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b3a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b3a6:	3104      	adds	r1, #4

0800b3a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b3a8:	480b      	ldr	r0, [pc, #44]	; (800b3d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b3aa:	4b0c      	ldr	r3, [pc, #48]	; (800b3dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b3ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b3ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b3b0:	d3f6      	bcc.n	800b3a0 <CopyDataInit>
  ldr  r2, =_sbss
 800b3b2:	4a0b      	ldr	r2, [pc, #44]	; (800b3e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b3b4:	e002      	b.n	800b3bc <LoopFillZerobss>

0800b3b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b3b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b3b8:	f842 3b04 	str.w	r3, [r2], #4

0800b3bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b3bc:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b3be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b3c0:	d3f9      	bcc.n	800b3b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b3c2:	f7ff fac5 	bl	800a950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b3c6:	f000 f907 	bl	800b5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b3ca:	f7fe fce1 	bl	8009d90 <main>
  bx  lr    
 800b3ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b3d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b3d4:	080100c8 	.word	0x080100c8
  ldr  r0, =_sdata
 800b3d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b3dc:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 800b3e0:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 800b3e4:	200067a4 	.word	0x200067a4

0800b3e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b3e8:	e7fe      	b.n	800b3e8 <ADC_IRQHandler>
	...

0800b3ec <std>:
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	e9c0 3300 	strd	r3, r3, [r0]
 800b3f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3fa:	6083      	str	r3, [r0, #8]
 800b3fc:	8181      	strh	r1, [r0, #12]
 800b3fe:	6643      	str	r3, [r0, #100]	; 0x64
 800b400:	81c2      	strh	r2, [r0, #14]
 800b402:	6183      	str	r3, [r0, #24]
 800b404:	4619      	mov	r1, r3
 800b406:	2208      	movs	r2, #8
 800b408:	305c      	adds	r0, #92	; 0x5c
 800b40a:	f000 f91a 	bl	800b642 <memset>
 800b40e:	4b05      	ldr	r3, [pc, #20]	; (800b424 <std+0x38>)
 800b410:	6263      	str	r3, [r4, #36]	; 0x24
 800b412:	4b05      	ldr	r3, [pc, #20]	; (800b428 <std+0x3c>)
 800b414:	62a3      	str	r3, [r4, #40]	; 0x28
 800b416:	4b05      	ldr	r3, [pc, #20]	; (800b42c <std+0x40>)
 800b418:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b41a:	4b05      	ldr	r3, [pc, #20]	; (800b430 <std+0x44>)
 800b41c:	6224      	str	r4, [r4, #32]
 800b41e:	6323      	str	r3, [r4, #48]	; 0x30
 800b420:	bd10      	pop	{r4, pc}
 800b422:	bf00      	nop
 800b424:	0800c185 	.word	0x0800c185
 800b428:	0800c1a7 	.word	0x0800c1a7
 800b42c:	0800c1df 	.word	0x0800c1df
 800b430:	0800c203 	.word	0x0800c203

0800b434 <_cleanup_r>:
 800b434:	4901      	ldr	r1, [pc, #4]	; (800b43c <_cleanup_r+0x8>)
 800b436:	f000 b8af 	b.w	800b598 <_fwalk_reent>
 800b43a:	bf00      	nop
 800b43c:	0800d071 	.word	0x0800d071

0800b440 <__sfmoreglue>:
 800b440:	b570      	push	{r4, r5, r6, lr}
 800b442:	2268      	movs	r2, #104	; 0x68
 800b444:	1e4d      	subs	r5, r1, #1
 800b446:	4355      	muls	r5, r2
 800b448:	460e      	mov	r6, r1
 800b44a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b44e:	f000 f921 	bl	800b694 <_malloc_r>
 800b452:	4604      	mov	r4, r0
 800b454:	b140      	cbz	r0, 800b468 <__sfmoreglue+0x28>
 800b456:	2100      	movs	r1, #0
 800b458:	e9c0 1600 	strd	r1, r6, [r0]
 800b45c:	300c      	adds	r0, #12
 800b45e:	60a0      	str	r0, [r4, #8]
 800b460:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b464:	f000 f8ed 	bl	800b642 <memset>
 800b468:	4620      	mov	r0, r4
 800b46a:	bd70      	pop	{r4, r5, r6, pc}

0800b46c <__sfp_lock_acquire>:
 800b46c:	4801      	ldr	r0, [pc, #4]	; (800b474 <__sfp_lock_acquire+0x8>)
 800b46e:	f000 b8d8 	b.w	800b622 <__retarget_lock_acquire_recursive>
 800b472:	bf00      	nop
 800b474:	20006791 	.word	0x20006791

0800b478 <__sfp_lock_release>:
 800b478:	4801      	ldr	r0, [pc, #4]	; (800b480 <__sfp_lock_release+0x8>)
 800b47a:	f000 b8d3 	b.w	800b624 <__retarget_lock_release_recursive>
 800b47e:	bf00      	nop
 800b480:	20006791 	.word	0x20006791

0800b484 <__sinit_lock_acquire>:
 800b484:	4801      	ldr	r0, [pc, #4]	; (800b48c <__sinit_lock_acquire+0x8>)
 800b486:	f000 b8cc 	b.w	800b622 <__retarget_lock_acquire_recursive>
 800b48a:	bf00      	nop
 800b48c:	20006792 	.word	0x20006792

0800b490 <__sinit_lock_release>:
 800b490:	4801      	ldr	r0, [pc, #4]	; (800b498 <__sinit_lock_release+0x8>)
 800b492:	f000 b8c7 	b.w	800b624 <__retarget_lock_release_recursive>
 800b496:	bf00      	nop
 800b498:	20006792 	.word	0x20006792

0800b49c <__sinit>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	4604      	mov	r4, r0
 800b4a0:	f7ff fff0 	bl	800b484 <__sinit_lock_acquire>
 800b4a4:	69a3      	ldr	r3, [r4, #24]
 800b4a6:	b11b      	cbz	r3, 800b4b0 <__sinit+0x14>
 800b4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ac:	f7ff bff0 	b.w	800b490 <__sinit_lock_release>
 800b4b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4b4:	6523      	str	r3, [r4, #80]	; 0x50
 800b4b6:	4b13      	ldr	r3, [pc, #76]	; (800b504 <__sinit+0x68>)
 800b4b8:	4a13      	ldr	r2, [pc, #76]	; (800b508 <__sinit+0x6c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4be:	42a3      	cmp	r3, r4
 800b4c0:	bf04      	itt	eq
 800b4c2:	2301      	moveq	r3, #1
 800b4c4:	61a3      	streq	r3, [r4, #24]
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f000 f820 	bl	800b50c <__sfp>
 800b4cc:	6060      	str	r0, [r4, #4]
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f000 f81c 	bl	800b50c <__sfp>
 800b4d4:	60a0      	str	r0, [r4, #8]
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f000 f818 	bl	800b50c <__sfp>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	60e0      	str	r0, [r4, #12]
 800b4e0:	2104      	movs	r1, #4
 800b4e2:	6860      	ldr	r0, [r4, #4]
 800b4e4:	f7ff ff82 	bl	800b3ec <std>
 800b4e8:	68a0      	ldr	r0, [r4, #8]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	2109      	movs	r1, #9
 800b4ee:	f7ff ff7d 	bl	800b3ec <std>
 800b4f2:	68e0      	ldr	r0, [r4, #12]
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	2112      	movs	r1, #18
 800b4f8:	f7ff ff78 	bl	800b3ec <std>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	61a3      	str	r3, [r4, #24]
 800b500:	e7d2      	b.n	800b4a8 <__sinit+0xc>
 800b502:	bf00      	nop
 800b504:	0800fd08 	.word	0x0800fd08
 800b508:	0800b435 	.word	0x0800b435

0800b50c <__sfp>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	4607      	mov	r7, r0
 800b510:	f7ff ffac 	bl	800b46c <__sfp_lock_acquire>
 800b514:	4b1e      	ldr	r3, [pc, #120]	; (800b590 <__sfp+0x84>)
 800b516:	681e      	ldr	r6, [r3, #0]
 800b518:	69b3      	ldr	r3, [r6, #24]
 800b51a:	b913      	cbnz	r3, 800b522 <__sfp+0x16>
 800b51c:	4630      	mov	r0, r6
 800b51e:	f7ff ffbd 	bl	800b49c <__sinit>
 800b522:	3648      	adds	r6, #72	; 0x48
 800b524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b528:	3b01      	subs	r3, #1
 800b52a:	d503      	bpl.n	800b534 <__sfp+0x28>
 800b52c:	6833      	ldr	r3, [r6, #0]
 800b52e:	b30b      	cbz	r3, 800b574 <__sfp+0x68>
 800b530:	6836      	ldr	r6, [r6, #0]
 800b532:	e7f7      	b.n	800b524 <__sfp+0x18>
 800b534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b538:	b9d5      	cbnz	r5, 800b570 <__sfp+0x64>
 800b53a:	4b16      	ldr	r3, [pc, #88]	; (800b594 <__sfp+0x88>)
 800b53c:	60e3      	str	r3, [r4, #12]
 800b53e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b542:	6665      	str	r5, [r4, #100]	; 0x64
 800b544:	f000 f86c 	bl	800b620 <__retarget_lock_init_recursive>
 800b548:	f7ff ff96 	bl	800b478 <__sfp_lock_release>
 800b54c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b550:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b554:	6025      	str	r5, [r4, #0]
 800b556:	61a5      	str	r5, [r4, #24]
 800b558:	2208      	movs	r2, #8
 800b55a:	4629      	mov	r1, r5
 800b55c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b560:	f000 f86f 	bl	800b642 <memset>
 800b564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b56c:	4620      	mov	r0, r4
 800b56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b570:	3468      	adds	r4, #104	; 0x68
 800b572:	e7d9      	b.n	800b528 <__sfp+0x1c>
 800b574:	2104      	movs	r1, #4
 800b576:	4638      	mov	r0, r7
 800b578:	f7ff ff62 	bl	800b440 <__sfmoreglue>
 800b57c:	4604      	mov	r4, r0
 800b57e:	6030      	str	r0, [r6, #0]
 800b580:	2800      	cmp	r0, #0
 800b582:	d1d5      	bne.n	800b530 <__sfp+0x24>
 800b584:	f7ff ff78 	bl	800b478 <__sfp_lock_release>
 800b588:	230c      	movs	r3, #12
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	e7ee      	b.n	800b56c <__sfp+0x60>
 800b58e:	bf00      	nop
 800b590:	0800fd08 	.word	0x0800fd08
 800b594:	ffff0001 	.word	0xffff0001

0800b598 <_fwalk_reent>:
 800b598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b59c:	4606      	mov	r6, r0
 800b59e:	4688      	mov	r8, r1
 800b5a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5a4:	2700      	movs	r7, #0
 800b5a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5aa:	f1b9 0901 	subs.w	r9, r9, #1
 800b5ae:	d505      	bpl.n	800b5bc <_fwalk_reent+0x24>
 800b5b0:	6824      	ldr	r4, [r4, #0]
 800b5b2:	2c00      	cmp	r4, #0
 800b5b4:	d1f7      	bne.n	800b5a6 <_fwalk_reent+0xe>
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5bc:	89ab      	ldrh	r3, [r5, #12]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d907      	bls.n	800b5d2 <_fwalk_reent+0x3a>
 800b5c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	d003      	beq.n	800b5d2 <_fwalk_reent+0x3a>
 800b5ca:	4629      	mov	r1, r5
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	47c0      	blx	r8
 800b5d0:	4307      	orrs	r7, r0
 800b5d2:	3568      	adds	r5, #104	; 0x68
 800b5d4:	e7e9      	b.n	800b5aa <_fwalk_reent+0x12>
	...

0800b5d8 <__libc_init_array>:
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	4d0d      	ldr	r5, [pc, #52]	; (800b610 <__libc_init_array+0x38>)
 800b5dc:	4c0d      	ldr	r4, [pc, #52]	; (800b614 <__libc_init_array+0x3c>)
 800b5de:	1b64      	subs	r4, r4, r5
 800b5e0:	10a4      	asrs	r4, r4, #2
 800b5e2:	2600      	movs	r6, #0
 800b5e4:	42a6      	cmp	r6, r4
 800b5e6:	d109      	bne.n	800b5fc <__libc_init_array+0x24>
 800b5e8:	4d0b      	ldr	r5, [pc, #44]	; (800b618 <__libc_init_array+0x40>)
 800b5ea:	4c0c      	ldr	r4, [pc, #48]	; (800b61c <__libc_init_array+0x44>)
 800b5ec:	f003 fffc 	bl	800f5e8 <_init>
 800b5f0:	1b64      	subs	r4, r4, r5
 800b5f2:	10a4      	asrs	r4, r4, #2
 800b5f4:	2600      	movs	r6, #0
 800b5f6:	42a6      	cmp	r6, r4
 800b5f8:	d105      	bne.n	800b606 <__libc_init_array+0x2e>
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b600:	4798      	blx	r3
 800b602:	3601      	adds	r6, #1
 800b604:	e7ee      	b.n	800b5e4 <__libc_init_array+0xc>
 800b606:	f855 3b04 	ldr.w	r3, [r5], #4
 800b60a:	4798      	blx	r3
 800b60c:	3601      	adds	r6, #1
 800b60e:	e7f2      	b.n	800b5f6 <__libc_init_array+0x1e>
 800b610:	080100c0 	.word	0x080100c0
 800b614:	080100c0 	.word	0x080100c0
 800b618:	080100c0 	.word	0x080100c0
 800b61c:	080100c4 	.word	0x080100c4

0800b620 <__retarget_lock_init_recursive>:
 800b620:	4770      	bx	lr

0800b622 <__retarget_lock_acquire_recursive>:
 800b622:	4770      	bx	lr

0800b624 <__retarget_lock_release_recursive>:
 800b624:	4770      	bx	lr

0800b626 <memcpy>:
 800b626:	440a      	add	r2, r1
 800b628:	4291      	cmp	r1, r2
 800b62a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b62e:	d100      	bne.n	800b632 <memcpy+0xc>
 800b630:	4770      	bx	lr
 800b632:	b510      	push	{r4, lr}
 800b634:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b638:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b63c:	4291      	cmp	r1, r2
 800b63e:	d1f9      	bne.n	800b634 <memcpy+0xe>
 800b640:	bd10      	pop	{r4, pc}

0800b642 <memset>:
 800b642:	4402      	add	r2, r0
 800b644:	4603      	mov	r3, r0
 800b646:	4293      	cmp	r3, r2
 800b648:	d100      	bne.n	800b64c <memset+0xa>
 800b64a:	4770      	bx	lr
 800b64c:	f803 1b01 	strb.w	r1, [r3], #1
 800b650:	e7f9      	b.n	800b646 <memset+0x4>
	...

0800b654 <sbrk_aligned>:
 800b654:	b570      	push	{r4, r5, r6, lr}
 800b656:	4e0e      	ldr	r6, [pc, #56]	; (800b690 <sbrk_aligned+0x3c>)
 800b658:	460c      	mov	r4, r1
 800b65a:	6831      	ldr	r1, [r6, #0]
 800b65c:	4605      	mov	r5, r0
 800b65e:	b911      	cbnz	r1, 800b666 <sbrk_aligned+0x12>
 800b660:	f000 fd60 	bl	800c124 <_sbrk_r>
 800b664:	6030      	str	r0, [r6, #0]
 800b666:	4621      	mov	r1, r4
 800b668:	4628      	mov	r0, r5
 800b66a:	f000 fd5b 	bl	800c124 <_sbrk_r>
 800b66e:	1c43      	adds	r3, r0, #1
 800b670:	d00a      	beq.n	800b688 <sbrk_aligned+0x34>
 800b672:	1cc4      	adds	r4, r0, #3
 800b674:	f024 0403 	bic.w	r4, r4, #3
 800b678:	42a0      	cmp	r0, r4
 800b67a:	d007      	beq.n	800b68c <sbrk_aligned+0x38>
 800b67c:	1a21      	subs	r1, r4, r0
 800b67e:	4628      	mov	r0, r5
 800b680:	f000 fd50 	bl	800c124 <_sbrk_r>
 800b684:	3001      	adds	r0, #1
 800b686:	d101      	bne.n	800b68c <sbrk_aligned+0x38>
 800b688:	f04f 34ff 	mov.w	r4, #4294967295
 800b68c:	4620      	mov	r0, r4
 800b68e:	bd70      	pop	{r4, r5, r6, pc}
 800b690:	20006798 	.word	0x20006798

0800b694 <_malloc_r>:
 800b694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b698:	1ccd      	adds	r5, r1, #3
 800b69a:	f025 0503 	bic.w	r5, r5, #3
 800b69e:	3508      	adds	r5, #8
 800b6a0:	2d0c      	cmp	r5, #12
 800b6a2:	bf38      	it	cc
 800b6a4:	250c      	movcc	r5, #12
 800b6a6:	2d00      	cmp	r5, #0
 800b6a8:	4607      	mov	r7, r0
 800b6aa:	db01      	blt.n	800b6b0 <_malloc_r+0x1c>
 800b6ac:	42a9      	cmp	r1, r5
 800b6ae:	d905      	bls.n	800b6bc <_malloc_r+0x28>
 800b6b0:	230c      	movs	r3, #12
 800b6b2:	603b      	str	r3, [r7, #0]
 800b6b4:	2600      	movs	r6, #0
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6bc:	4e2e      	ldr	r6, [pc, #184]	; (800b778 <_malloc_r+0xe4>)
 800b6be:	f001 fd31 	bl	800d124 <__malloc_lock>
 800b6c2:	6833      	ldr	r3, [r6, #0]
 800b6c4:	461c      	mov	r4, r3
 800b6c6:	bb34      	cbnz	r4, 800b716 <_malloc_r+0x82>
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	f7ff ffc2 	bl	800b654 <sbrk_aligned>
 800b6d0:	1c43      	adds	r3, r0, #1
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	d14d      	bne.n	800b772 <_malloc_r+0xde>
 800b6d6:	6834      	ldr	r4, [r6, #0]
 800b6d8:	4626      	mov	r6, r4
 800b6da:	2e00      	cmp	r6, #0
 800b6dc:	d140      	bne.n	800b760 <_malloc_r+0xcc>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	4631      	mov	r1, r6
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	eb04 0803 	add.w	r8, r4, r3
 800b6e8:	f000 fd1c 	bl	800c124 <_sbrk_r>
 800b6ec:	4580      	cmp	r8, r0
 800b6ee:	d13a      	bne.n	800b766 <_malloc_r+0xd2>
 800b6f0:	6821      	ldr	r1, [r4, #0]
 800b6f2:	3503      	adds	r5, #3
 800b6f4:	1a6d      	subs	r5, r5, r1
 800b6f6:	f025 0503 	bic.w	r5, r5, #3
 800b6fa:	3508      	adds	r5, #8
 800b6fc:	2d0c      	cmp	r5, #12
 800b6fe:	bf38      	it	cc
 800b700:	250c      	movcc	r5, #12
 800b702:	4629      	mov	r1, r5
 800b704:	4638      	mov	r0, r7
 800b706:	f7ff ffa5 	bl	800b654 <sbrk_aligned>
 800b70a:	3001      	adds	r0, #1
 800b70c:	d02b      	beq.n	800b766 <_malloc_r+0xd2>
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	442b      	add	r3, r5
 800b712:	6023      	str	r3, [r4, #0]
 800b714:	e00e      	b.n	800b734 <_malloc_r+0xa0>
 800b716:	6822      	ldr	r2, [r4, #0]
 800b718:	1b52      	subs	r2, r2, r5
 800b71a:	d41e      	bmi.n	800b75a <_malloc_r+0xc6>
 800b71c:	2a0b      	cmp	r2, #11
 800b71e:	d916      	bls.n	800b74e <_malloc_r+0xba>
 800b720:	1961      	adds	r1, r4, r5
 800b722:	42a3      	cmp	r3, r4
 800b724:	6025      	str	r5, [r4, #0]
 800b726:	bf18      	it	ne
 800b728:	6059      	strne	r1, [r3, #4]
 800b72a:	6863      	ldr	r3, [r4, #4]
 800b72c:	bf08      	it	eq
 800b72e:	6031      	streq	r1, [r6, #0]
 800b730:	5162      	str	r2, [r4, r5]
 800b732:	604b      	str	r3, [r1, #4]
 800b734:	4638      	mov	r0, r7
 800b736:	f104 060b 	add.w	r6, r4, #11
 800b73a:	f001 fcf9 	bl	800d130 <__malloc_unlock>
 800b73e:	f026 0607 	bic.w	r6, r6, #7
 800b742:	1d23      	adds	r3, r4, #4
 800b744:	1af2      	subs	r2, r6, r3
 800b746:	d0b6      	beq.n	800b6b6 <_malloc_r+0x22>
 800b748:	1b9b      	subs	r3, r3, r6
 800b74a:	50a3      	str	r3, [r4, r2]
 800b74c:	e7b3      	b.n	800b6b6 <_malloc_r+0x22>
 800b74e:	6862      	ldr	r2, [r4, #4]
 800b750:	42a3      	cmp	r3, r4
 800b752:	bf0c      	ite	eq
 800b754:	6032      	streq	r2, [r6, #0]
 800b756:	605a      	strne	r2, [r3, #4]
 800b758:	e7ec      	b.n	800b734 <_malloc_r+0xa0>
 800b75a:	4623      	mov	r3, r4
 800b75c:	6864      	ldr	r4, [r4, #4]
 800b75e:	e7b2      	b.n	800b6c6 <_malloc_r+0x32>
 800b760:	4634      	mov	r4, r6
 800b762:	6876      	ldr	r6, [r6, #4]
 800b764:	e7b9      	b.n	800b6da <_malloc_r+0x46>
 800b766:	230c      	movs	r3, #12
 800b768:	603b      	str	r3, [r7, #0]
 800b76a:	4638      	mov	r0, r7
 800b76c:	f001 fce0 	bl	800d130 <__malloc_unlock>
 800b770:	e7a1      	b.n	800b6b6 <_malloc_r+0x22>
 800b772:	6025      	str	r5, [r4, #0]
 800b774:	e7de      	b.n	800b734 <_malloc_r+0xa0>
 800b776:	bf00      	nop
 800b778:	20006794 	.word	0x20006794

0800b77c <__cvt>:
 800b77c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	ec55 4b10 	vmov	r4, r5, d0
 800b784:	2d00      	cmp	r5, #0
 800b786:	460e      	mov	r6, r1
 800b788:	4619      	mov	r1, r3
 800b78a:	462b      	mov	r3, r5
 800b78c:	bfbb      	ittet	lt
 800b78e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b792:	461d      	movlt	r5, r3
 800b794:	2300      	movge	r3, #0
 800b796:	232d      	movlt	r3, #45	; 0x2d
 800b798:	700b      	strb	r3, [r1, #0]
 800b79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b79c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b7a0:	4691      	mov	r9, r2
 800b7a2:	f023 0820 	bic.w	r8, r3, #32
 800b7a6:	bfbc      	itt	lt
 800b7a8:	4622      	movlt	r2, r4
 800b7aa:	4614      	movlt	r4, r2
 800b7ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7b0:	d005      	beq.n	800b7be <__cvt+0x42>
 800b7b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b7b6:	d100      	bne.n	800b7ba <__cvt+0x3e>
 800b7b8:	3601      	adds	r6, #1
 800b7ba:	2102      	movs	r1, #2
 800b7bc:	e000      	b.n	800b7c0 <__cvt+0x44>
 800b7be:	2103      	movs	r1, #3
 800b7c0:	ab03      	add	r3, sp, #12
 800b7c2:	9301      	str	r3, [sp, #4]
 800b7c4:	ab02      	add	r3, sp, #8
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	ec45 4b10 	vmov	d0, r4, r5
 800b7cc:	4653      	mov	r3, sl
 800b7ce:	4632      	mov	r2, r6
 800b7d0:	f000 fdda 	bl	800c388 <_dtoa_r>
 800b7d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7d8:	4607      	mov	r7, r0
 800b7da:	d102      	bne.n	800b7e2 <__cvt+0x66>
 800b7dc:	f019 0f01 	tst.w	r9, #1
 800b7e0:	d022      	beq.n	800b828 <__cvt+0xac>
 800b7e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7e6:	eb07 0906 	add.w	r9, r7, r6
 800b7ea:	d110      	bne.n	800b80e <__cvt+0x92>
 800b7ec:	783b      	ldrb	r3, [r7, #0]
 800b7ee:	2b30      	cmp	r3, #48	; 0x30
 800b7f0:	d10a      	bne.n	800b808 <__cvt+0x8c>
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	f7f5 f985 	bl	8000b08 <__aeabi_dcmpeq>
 800b7fe:	b918      	cbnz	r0, 800b808 <__cvt+0x8c>
 800b800:	f1c6 0601 	rsb	r6, r6, #1
 800b804:	f8ca 6000 	str.w	r6, [sl]
 800b808:	f8da 3000 	ldr.w	r3, [sl]
 800b80c:	4499      	add	r9, r3
 800b80e:	2200      	movs	r2, #0
 800b810:	2300      	movs	r3, #0
 800b812:	4620      	mov	r0, r4
 800b814:	4629      	mov	r1, r5
 800b816:	f7f5 f977 	bl	8000b08 <__aeabi_dcmpeq>
 800b81a:	b108      	cbz	r0, 800b820 <__cvt+0xa4>
 800b81c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b820:	2230      	movs	r2, #48	; 0x30
 800b822:	9b03      	ldr	r3, [sp, #12]
 800b824:	454b      	cmp	r3, r9
 800b826:	d307      	bcc.n	800b838 <__cvt+0xbc>
 800b828:	9b03      	ldr	r3, [sp, #12]
 800b82a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b82c:	1bdb      	subs	r3, r3, r7
 800b82e:	4638      	mov	r0, r7
 800b830:	6013      	str	r3, [r2, #0]
 800b832:	b004      	add	sp, #16
 800b834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b838:	1c59      	adds	r1, r3, #1
 800b83a:	9103      	str	r1, [sp, #12]
 800b83c:	701a      	strb	r2, [r3, #0]
 800b83e:	e7f0      	b.n	800b822 <__cvt+0xa6>

0800b840 <__exponent>:
 800b840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b842:	4603      	mov	r3, r0
 800b844:	2900      	cmp	r1, #0
 800b846:	bfb8      	it	lt
 800b848:	4249      	neglt	r1, r1
 800b84a:	f803 2b02 	strb.w	r2, [r3], #2
 800b84e:	bfb4      	ite	lt
 800b850:	222d      	movlt	r2, #45	; 0x2d
 800b852:	222b      	movge	r2, #43	; 0x2b
 800b854:	2909      	cmp	r1, #9
 800b856:	7042      	strb	r2, [r0, #1]
 800b858:	dd2a      	ble.n	800b8b0 <__exponent+0x70>
 800b85a:	f10d 0407 	add.w	r4, sp, #7
 800b85e:	46a4      	mov	ip, r4
 800b860:	270a      	movs	r7, #10
 800b862:	46a6      	mov	lr, r4
 800b864:	460a      	mov	r2, r1
 800b866:	fb91 f6f7 	sdiv	r6, r1, r7
 800b86a:	fb07 1516 	mls	r5, r7, r6, r1
 800b86e:	3530      	adds	r5, #48	; 0x30
 800b870:	2a63      	cmp	r2, #99	; 0x63
 800b872:	f104 34ff 	add.w	r4, r4, #4294967295
 800b876:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b87a:	4631      	mov	r1, r6
 800b87c:	dcf1      	bgt.n	800b862 <__exponent+0x22>
 800b87e:	3130      	adds	r1, #48	; 0x30
 800b880:	f1ae 0502 	sub.w	r5, lr, #2
 800b884:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b888:	1c44      	adds	r4, r0, #1
 800b88a:	4629      	mov	r1, r5
 800b88c:	4561      	cmp	r1, ip
 800b88e:	d30a      	bcc.n	800b8a6 <__exponent+0x66>
 800b890:	f10d 0209 	add.w	r2, sp, #9
 800b894:	eba2 020e 	sub.w	r2, r2, lr
 800b898:	4565      	cmp	r5, ip
 800b89a:	bf88      	it	hi
 800b89c:	2200      	movhi	r2, #0
 800b89e:	4413      	add	r3, r2
 800b8a0:	1a18      	subs	r0, r3, r0
 800b8a2:	b003      	add	sp, #12
 800b8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b8ae:	e7ed      	b.n	800b88c <__exponent+0x4c>
 800b8b0:	2330      	movs	r3, #48	; 0x30
 800b8b2:	3130      	adds	r1, #48	; 0x30
 800b8b4:	7083      	strb	r3, [r0, #2]
 800b8b6:	70c1      	strb	r1, [r0, #3]
 800b8b8:	1d03      	adds	r3, r0, #4
 800b8ba:	e7f1      	b.n	800b8a0 <__exponent+0x60>

0800b8bc <_printf_float>:
 800b8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c0:	ed2d 8b02 	vpush	{d8}
 800b8c4:	b08d      	sub	sp, #52	; 0x34
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8cc:	4616      	mov	r6, r2
 800b8ce:	461f      	mov	r7, r3
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	f001 fc09 	bl	800d0e8 <_localeconv_r>
 800b8d6:	f8d0 a000 	ldr.w	sl, [r0]
 800b8da:	4650      	mov	r0, sl
 800b8dc:	f7f4 fc98 	bl	8000210 <strlen>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	930a      	str	r3, [sp, #40]	; 0x28
 800b8e4:	6823      	ldr	r3, [r4, #0]
 800b8e6:	9305      	str	r3, [sp, #20]
 800b8e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b8f0:	3307      	adds	r3, #7
 800b8f2:	f023 0307 	bic.w	r3, r3, #7
 800b8f6:	f103 0208 	add.w	r2, r3, #8
 800b8fa:	f8c8 2000 	str.w	r2, [r8]
 800b8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b902:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b906:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b90a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b90e:	9307      	str	r3, [sp, #28]
 800b910:	f8cd 8018 	str.w	r8, [sp, #24]
 800b914:	ee08 0a10 	vmov	s16, r0
 800b918:	4b9f      	ldr	r3, [pc, #636]	; (800bb98 <_printf_float+0x2dc>)
 800b91a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b91e:	f04f 32ff 	mov.w	r2, #4294967295
 800b922:	f7f5 f923 	bl	8000b6c <__aeabi_dcmpun>
 800b926:	bb88      	cbnz	r0, 800b98c <_printf_float+0xd0>
 800b928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b92c:	4b9a      	ldr	r3, [pc, #616]	; (800bb98 <_printf_float+0x2dc>)
 800b92e:	f04f 32ff 	mov.w	r2, #4294967295
 800b932:	f7f5 f8fd 	bl	8000b30 <__aeabi_dcmple>
 800b936:	bb48      	cbnz	r0, 800b98c <_printf_float+0xd0>
 800b938:	2200      	movs	r2, #0
 800b93a:	2300      	movs	r3, #0
 800b93c:	4640      	mov	r0, r8
 800b93e:	4649      	mov	r1, r9
 800b940:	f7f5 f8ec 	bl	8000b1c <__aeabi_dcmplt>
 800b944:	b110      	cbz	r0, 800b94c <_printf_float+0x90>
 800b946:	232d      	movs	r3, #45	; 0x2d
 800b948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b94c:	4b93      	ldr	r3, [pc, #588]	; (800bb9c <_printf_float+0x2e0>)
 800b94e:	4894      	ldr	r0, [pc, #592]	; (800bba0 <_printf_float+0x2e4>)
 800b950:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b954:	bf94      	ite	ls
 800b956:	4698      	movls	r8, r3
 800b958:	4680      	movhi	r8, r0
 800b95a:	2303      	movs	r3, #3
 800b95c:	6123      	str	r3, [r4, #16]
 800b95e:	9b05      	ldr	r3, [sp, #20]
 800b960:	f023 0204 	bic.w	r2, r3, #4
 800b964:	6022      	str	r2, [r4, #0]
 800b966:	f04f 0900 	mov.w	r9, #0
 800b96a:	9700      	str	r7, [sp, #0]
 800b96c:	4633      	mov	r3, r6
 800b96e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b970:	4621      	mov	r1, r4
 800b972:	4628      	mov	r0, r5
 800b974:	f000 f9d8 	bl	800bd28 <_printf_common>
 800b978:	3001      	adds	r0, #1
 800b97a:	f040 8090 	bne.w	800ba9e <_printf_float+0x1e2>
 800b97e:	f04f 30ff 	mov.w	r0, #4294967295
 800b982:	b00d      	add	sp, #52	; 0x34
 800b984:	ecbd 8b02 	vpop	{d8}
 800b988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98c:	4642      	mov	r2, r8
 800b98e:	464b      	mov	r3, r9
 800b990:	4640      	mov	r0, r8
 800b992:	4649      	mov	r1, r9
 800b994:	f7f5 f8ea 	bl	8000b6c <__aeabi_dcmpun>
 800b998:	b140      	cbz	r0, 800b9ac <_printf_float+0xf0>
 800b99a:	464b      	mov	r3, r9
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	bfbc      	itt	lt
 800b9a0:	232d      	movlt	r3, #45	; 0x2d
 800b9a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b9a6:	487f      	ldr	r0, [pc, #508]	; (800bba4 <_printf_float+0x2e8>)
 800b9a8:	4b7f      	ldr	r3, [pc, #508]	; (800bba8 <_printf_float+0x2ec>)
 800b9aa:	e7d1      	b.n	800b950 <_printf_float+0x94>
 800b9ac:	6863      	ldr	r3, [r4, #4]
 800b9ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b9b2:	9206      	str	r2, [sp, #24]
 800b9b4:	1c5a      	adds	r2, r3, #1
 800b9b6:	d13f      	bne.n	800ba38 <_printf_float+0x17c>
 800b9b8:	2306      	movs	r3, #6
 800b9ba:	6063      	str	r3, [r4, #4]
 800b9bc:	9b05      	ldr	r3, [sp, #20]
 800b9be:	6861      	ldr	r1, [r4, #4]
 800b9c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	9303      	str	r3, [sp, #12]
 800b9c8:	ab0a      	add	r3, sp, #40	; 0x28
 800b9ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b9ce:	ab09      	add	r3, sp, #36	; 0x24
 800b9d0:	ec49 8b10 	vmov	d0, r8, r9
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	6022      	str	r2, [r4, #0]
 800b9d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9dc:	4628      	mov	r0, r5
 800b9de:	f7ff fecd 	bl	800b77c <__cvt>
 800b9e2:	9b06      	ldr	r3, [sp, #24]
 800b9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9e6:	2b47      	cmp	r3, #71	; 0x47
 800b9e8:	4680      	mov	r8, r0
 800b9ea:	d108      	bne.n	800b9fe <_printf_float+0x142>
 800b9ec:	1cc8      	adds	r0, r1, #3
 800b9ee:	db02      	blt.n	800b9f6 <_printf_float+0x13a>
 800b9f0:	6863      	ldr	r3, [r4, #4]
 800b9f2:	4299      	cmp	r1, r3
 800b9f4:	dd41      	ble.n	800ba7a <_printf_float+0x1be>
 800b9f6:	f1ab 0b02 	sub.w	fp, fp, #2
 800b9fa:	fa5f fb8b 	uxtb.w	fp, fp
 800b9fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba02:	d820      	bhi.n	800ba46 <_printf_float+0x18a>
 800ba04:	3901      	subs	r1, #1
 800ba06:	465a      	mov	r2, fp
 800ba08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba0c:	9109      	str	r1, [sp, #36]	; 0x24
 800ba0e:	f7ff ff17 	bl	800b840 <__exponent>
 800ba12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba14:	1813      	adds	r3, r2, r0
 800ba16:	2a01      	cmp	r2, #1
 800ba18:	4681      	mov	r9, r0
 800ba1a:	6123      	str	r3, [r4, #16]
 800ba1c:	dc02      	bgt.n	800ba24 <_printf_float+0x168>
 800ba1e:	6822      	ldr	r2, [r4, #0]
 800ba20:	07d2      	lsls	r2, r2, #31
 800ba22:	d501      	bpl.n	800ba28 <_printf_float+0x16c>
 800ba24:	3301      	adds	r3, #1
 800ba26:	6123      	str	r3, [r4, #16]
 800ba28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d09c      	beq.n	800b96a <_printf_float+0xae>
 800ba30:	232d      	movs	r3, #45	; 0x2d
 800ba32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba36:	e798      	b.n	800b96a <_printf_float+0xae>
 800ba38:	9a06      	ldr	r2, [sp, #24]
 800ba3a:	2a47      	cmp	r2, #71	; 0x47
 800ba3c:	d1be      	bne.n	800b9bc <_printf_float+0x100>
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1bc      	bne.n	800b9bc <_printf_float+0x100>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e7b9      	b.n	800b9ba <_printf_float+0xfe>
 800ba46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba4a:	d118      	bne.n	800ba7e <_printf_float+0x1c2>
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	6863      	ldr	r3, [r4, #4]
 800ba50:	dd0b      	ble.n	800ba6a <_printf_float+0x1ae>
 800ba52:	6121      	str	r1, [r4, #16]
 800ba54:	b913      	cbnz	r3, 800ba5c <_printf_float+0x1a0>
 800ba56:	6822      	ldr	r2, [r4, #0]
 800ba58:	07d0      	lsls	r0, r2, #31
 800ba5a:	d502      	bpl.n	800ba62 <_printf_float+0x1a6>
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	440b      	add	r3, r1
 800ba60:	6123      	str	r3, [r4, #16]
 800ba62:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba64:	f04f 0900 	mov.w	r9, #0
 800ba68:	e7de      	b.n	800ba28 <_printf_float+0x16c>
 800ba6a:	b913      	cbnz	r3, 800ba72 <_printf_float+0x1b6>
 800ba6c:	6822      	ldr	r2, [r4, #0]
 800ba6e:	07d2      	lsls	r2, r2, #31
 800ba70:	d501      	bpl.n	800ba76 <_printf_float+0x1ba>
 800ba72:	3302      	adds	r3, #2
 800ba74:	e7f4      	b.n	800ba60 <_printf_float+0x1a4>
 800ba76:	2301      	movs	r3, #1
 800ba78:	e7f2      	b.n	800ba60 <_printf_float+0x1a4>
 800ba7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba80:	4299      	cmp	r1, r3
 800ba82:	db05      	blt.n	800ba90 <_printf_float+0x1d4>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	6121      	str	r1, [r4, #16]
 800ba88:	07d8      	lsls	r0, r3, #31
 800ba8a:	d5ea      	bpl.n	800ba62 <_printf_float+0x1a6>
 800ba8c:	1c4b      	adds	r3, r1, #1
 800ba8e:	e7e7      	b.n	800ba60 <_printf_float+0x1a4>
 800ba90:	2900      	cmp	r1, #0
 800ba92:	bfd4      	ite	le
 800ba94:	f1c1 0202 	rsble	r2, r1, #2
 800ba98:	2201      	movgt	r2, #1
 800ba9a:	4413      	add	r3, r2
 800ba9c:	e7e0      	b.n	800ba60 <_printf_float+0x1a4>
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	055a      	lsls	r2, r3, #21
 800baa2:	d407      	bmi.n	800bab4 <_printf_float+0x1f8>
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	4642      	mov	r2, r8
 800baa8:	4631      	mov	r1, r6
 800baaa:	4628      	mov	r0, r5
 800baac:	47b8      	blx	r7
 800baae:	3001      	adds	r0, #1
 800bab0:	d12c      	bne.n	800bb0c <_printf_float+0x250>
 800bab2:	e764      	b.n	800b97e <_printf_float+0xc2>
 800bab4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bab8:	f240 80e0 	bls.w	800bc7c <_printf_float+0x3c0>
 800babc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bac0:	2200      	movs	r2, #0
 800bac2:	2300      	movs	r3, #0
 800bac4:	f7f5 f820 	bl	8000b08 <__aeabi_dcmpeq>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d034      	beq.n	800bb36 <_printf_float+0x27a>
 800bacc:	4a37      	ldr	r2, [pc, #220]	; (800bbac <_printf_float+0x2f0>)
 800bace:	2301      	movs	r3, #1
 800bad0:	4631      	mov	r1, r6
 800bad2:	4628      	mov	r0, r5
 800bad4:	47b8      	blx	r7
 800bad6:	3001      	adds	r0, #1
 800bad8:	f43f af51 	beq.w	800b97e <_printf_float+0xc2>
 800badc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bae0:	429a      	cmp	r2, r3
 800bae2:	db02      	blt.n	800baea <_printf_float+0x22e>
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	07d8      	lsls	r0, r3, #31
 800bae8:	d510      	bpl.n	800bb0c <_printf_float+0x250>
 800baea:	ee18 3a10 	vmov	r3, s16
 800baee:	4652      	mov	r2, sl
 800baf0:	4631      	mov	r1, r6
 800baf2:	4628      	mov	r0, r5
 800baf4:	47b8      	blx	r7
 800baf6:	3001      	adds	r0, #1
 800baf8:	f43f af41 	beq.w	800b97e <_printf_float+0xc2>
 800bafc:	f04f 0800 	mov.w	r8, #0
 800bb00:	f104 091a 	add.w	r9, r4, #26
 800bb04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb06:	3b01      	subs	r3, #1
 800bb08:	4543      	cmp	r3, r8
 800bb0a:	dc09      	bgt.n	800bb20 <_printf_float+0x264>
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	079b      	lsls	r3, r3, #30
 800bb10:	f100 8105 	bmi.w	800bd1e <_printf_float+0x462>
 800bb14:	68e0      	ldr	r0, [r4, #12]
 800bb16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb18:	4298      	cmp	r0, r3
 800bb1a:	bfb8      	it	lt
 800bb1c:	4618      	movlt	r0, r3
 800bb1e:	e730      	b.n	800b982 <_printf_float+0xc6>
 800bb20:	2301      	movs	r3, #1
 800bb22:	464a      	mov	r2, r9
 800bb24:	4631      	mov	r1, r6
 800bb26:	4628      	mov	r0, r5
 800bb28:	47b8      	blx	r7
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	f43f af27 	beq.w	800b97e <_printf_float+0xc2>
 800bb30:	f108 0801 	add.w	r8, r8, #1
 800bb34:	e7e6      	b.n	800bb04 <_printf_float+0x248>
 800bb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	dc39      	bgt.n	800bbb0 <_printf_float+0x2f4>
 800bb3c:	4a1b      	ldr	r2, [pc, #108]	; (800bbac <_printf_float+0x2f0>)
 800bb3e:	2301      	movs	r3, #1
 800bb40:	4631      	mov	r1, r6
 800bb42:	4628      	mov	r0, r5
 800bb44:	47b8      	blx	r7
 800bb46:	3001      	adds	r0, #1
 800bb48:	f43f af19 	beq.w	800b97e <_printf_float+0xc2>
 800bb4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb50:	4313      	orrs	r3, r2
 800bb52:	d102      	bne.n	800bb5a <_printf_float+0x29e>
 800bb54:	6823      	ldr	r3, [r4, #0]
 800bb56:	07d9      	lsls	r1, r3, #31
 800bb58:	d5d8      	bpl.n	800bb0c <_printf_float+0x250>
 800bb5a:	ee18 3a10 	vmov	r3, s16
 800bb5e:	4652      	mov	r2, sl
 800bb60:	4631      	mov	r1, r6
 800bb62:	4628      	mov	r0, r5
 800bb64:	47b8      	blx	r7
 800bb66:	3001      	adds	r0, #1
 800bb68:	f43f af09 	beq.w	800b97e <_printf_float+0xc2>
 800bb6c:	f04f 0900 	mov.w	r9, #0
 800bb70:	f104 0a1a 	add.w	sl, r4, #26
 800bb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb76:	425b      	negs	r3, r3
 800bb78:	454b      	cmp	r3, r9
 800bb7a:	dc01      	bgt.n	800bb80 <_printf_float+0x2c4>
 800bb7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb7e:	e792      	b.n	800baa6 <_printf_float+0x1ea>
 800bb80:	2301      	movs	r3, #1
 800bb82:	4652      	mov	r2, sl
 800bb84:	4631      	mov	r1, r6
 800bb86:	4628      	mov	r0, r5
 800bb88:	47b8      	blx	r7
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	f43f aef7 	beq.w	800b97e <_printf_float+0xc2>
 800bb90:	f109 0901 	add.w	r9, r9, #1
 800bb94:	e7ee      	b.n	800bb74 <_printf_float+0x2b8>
 800bb96:	bf00      	nop
 800bb98:	7fefffff 	.word	0x7fefffff
 800bb9c:	0800fd0c 	.word	0x0800fd0c
 800bba0:	0800fd10 	.word	0x0800fd10
 800bba4:	0800fd18 	.word	0x0800fd18
 800bba8:	0800fd14 	.word	0x0800fd14
 800bbac:	0800fd1c 	.word	0x0800fd1c
 800bbb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	bfa8      	it	ge
 800bbb8:	461a      	movge	r2, r3
 800bbba:	2a00      	cmp	r2, #0
 800bbbc:	4691      	mov	r9, r2
 800bbbe:	dc37      	bgt.n	800bc30 <_printf_float+0x374>
 800bbc0:	f04f 0b00 	mov.w	fp, #0
 800bbc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbc8:	f104 021a 	add.w	r2, r4, #26
 800bbcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbce:	9305      	str	r3, [sp, #20]
 800bbd0:	eba3 0309 	sub.w	r3, r3, r9
 800bbd4:	455b      	cmp	r3, fp
 800bbd6:	dc33      	bgt.n	800bc40 <_printf_float+0x384>
 800bbd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	db3b      	blt.n	800bc58 <_printf_float+0x39c>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	07da      	lsls	r2, r3, #31
 800bbe4:	d438      	bmi.n	800bc58 <_printf_float+0x39c>
 800bbe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe8:	9a05      	ldr	r2, [sp, #20]
 800bbea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbec:	1a9a      	subs	r2, r3, r2
 800bbee:	eba3 0901 	sub.w	r9, r3, r1
 800bbf2:	4591      	cmp	r9, r2
 800bbf4:	bfa8      	it	ge
 800bbf6:	4691      	movge	r9, r2
 800bbf8:	f1b9 0f00 	cmp.w	r9, #0
 800bbfc:	dc35      	bgt.n	800bc6a <_printf_float+0x3ae>
 800bbfe:	f04f 0800 	mov.w	r8, #0
 800bc02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc06:	f104 0a1a 	add.w	sl, r4, #26
 800bc0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc0e:	1a9b      	subs	r3, r3, r2
 800bc10:	eba3 0309 	sub.w	r3, r3, r9
 800bc14:	4543      	cmp	r3, r8
 800bc16:	f77f af79 	ble.w	800bb0c <_printf_float+0x250>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	4652      	mov	r2, sl
 800bc1e:	4631      	mov	r1, r6
 800bc20:	4628      	mov	r0, r5
 800bc22:	47b8      	blx	r7
 800bc24:	3001      	adds	r0, #1
 800bc26:	f43f aeaa 	beq.w	800b97e <_printf_float+0xc2>
 800bc2a:	f108 0801 	add.w	r8, r8, #1
 800bc2e:	e7ec      	b.n	800bc0a <_printf_float+0x34e>
 800bc30:	4613      	mov	r3, r2
 800bc32:	4631      	mov	r1, r6
 800bc34:	4642      	mov	r2, r8
 800bc36:	4628      	mov	r0, r5
 800bc38:	47b8      	blx	r7
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	d1c0      	bne.n	800bbc0 <_printf_float+0x304>
 800bc3e:	e69e      	b.n	800b97e <_printf_float+0xc2>
 800bc40:	2301      	movs	r3, #1
 800bc42:	4631      	mov	r1, r6
 800bc44:	4628      	mov	r0, r5
 800bc46:	9205      	str	r2, [sp, #20]
 800bc48:	47b8      	blx	r7
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	f43f ae97 	beq.w	800b97e <_printf_float+0xc2>
 800bc50:	9a05      	ldr	r2, [sp, #20]
 800bc52:	f10b 0b01 	add.w	fp, fp, #1
 800bc56:	e7b9      	b.n	800bbcc <_printf_float+0x310>
 800bc58:	ee18 3a10 	vmov	r3, s16
 800bc5c:	4652      	mov	r2, sl
 800bc5e:	4631      	mov	r1, r6
 800bc60:	4628      	mov	r0, r5
 800bc62:	47b8      	blx	r7
 800bc64:	3001      	adds	r0, #1
 800bc66:	d1be      	bne.n	800bbe6 <_printf_float+0x32a>
 800bc68:	e689      	b.n	800b97e <_printf_float+0xc2>
 800bc6a:	9a05      	ldr	r2, [sp, #20]
 800bc6c:	464b      	mov	r3, r9
 800bc6e:	4442      	add	r2, r8
 800bc70:	4631      	mov	r1, r6
 800bc72:	4628      	mov	r0, r5
 800bc74:	47b8      	blx	r7
 800bc76:	3001      	adds	r0, #1
 800bc78:	d1c1      	bne.n	800bbfe <_printf_float+0x342>
 800bc7a:	e680      	b.n	800b97e <_printf_float+0xc2>
 800bc7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc7e:	2a01      	cmp	r2, #1
 800bc80:	dc01      	bgt.n	800bc86 <_printf_float+0x3ca>
 800bc82:	07db      	lsls	r3, r3, #31
 800bc84:	d538      	bpl.n	800bcf8 <_printf_float+0x43c>
 800bc86:	2301      	movs	r3, #1
 800bc88:	4642      	mov	r2, r8
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	47b8      	blx	r7
 800bc90:	3001      	adds	r0, #1
 800bc92:	f43f ae74 	beq.w	800b97e <_printf_float+0xc2>
 800bc96:	ee18 3a10 	vmov	r3, s16
 800bc9a:	4652      	mov	r2, sl
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	4628      	mov	r0, r5
 800bca0:	47b8      	blx	r7
 800bca2:	3001      	adds	r0, #1
 800bca4:	f43f ae6b 	beq.w	800b97e <_printf_float+0xc2>
 800bca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bcac:	2200      	movs	r2, #0
 800bcae:	2300      	movs	r3, #0
 800bcb0:	f7f4 ff2a 	bl	8000b08 <__aeabi_dcmpeq>
 800bcb4:	b9d8      	cbnz	r0, 800bcee <_printf_float+0x432>
 800bcb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb8:	f108 0201 	add.w	r2, r8, #1
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	47b8      	blx	r7
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d10e      	bne.n	800bce6 <_printf_float+0x42a>
 800bcc8:	e659      	b.n	800b97e <_printf_float+0xc2>
 800bcca:	2301      	movs	r3, #1
 800bccc:	4652      	mov	r2, sl
 800bcce:	4631      	mov	r1, r6
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	47b8      	blx	r7
 800bcd4:	3001      	adds	r0, #1
 800bcd6:	f43f ae52 	beq.w	800b97e <_printf_float+0xc2>
 800bcda:	f108 0801 	add.w	r8, r8, #1
 800bcde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce0:	3b01      	subs	r3, #1
 800bce2:	4543      	cmp	r3, r8
 800bce4:	dcf1      	bgt.n	800bcca <_printf_float+0x40e>
 800bce6:	464b      	mov	r3, r9
 800bce8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bcec:	e6dc      	b.n	800baa8 <_printf_float+0x1ec>
 800bcee:	f04f 0800 	mov.w	r8, #0
 800bcf2:	f104 0a1a 	add.w	sl, r4, #26
 800bcf6:	e7f2      	b.n	800bcde <_printf_float+0x422>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	4642      	mov	r2, r8
 800bcfc:	e7df      	b.n	800bcbe <_printf_float+0x402>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	464a      	mov	r2, r9
 800bd02:	4631      	mov	r1, r6
 800bd04:	4628      	mov	r0, r5
 800bd06:	47b8      	blx	r7
 800bd08:	3001      	adds	r0, #1
 800bd0a:	f43f ae38 	beq.w	800b97e <_printf_float+0xc2>
 800bd0e:	f108 0801 	add.w	r8, r8, #1
 800bd12:	68e3      	ldr	r3, [r4, #12]
 800bd14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd16:	1a5b      	subs	r3, r3, r1
 800bd18:	4543      	cmp	r3, r8
 800bd1a:	dcf0      	bgt.n	800bcfe <_printf_float+0x442>
 800bd1c:	e6fa      	b.n	800bb14 <_printf_float+0x258>
 800bd1e:	f04f 0800 	mov.w	r8, #0
 800bd22:	f104 0919 	add.w	r9, r4, #25
 800bd26:	e7f4      	b.n	800bd12 <_printf_float+0x456>

0800bd28 <_printf_common>:
 800bd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd2c:	4616      	mov	r6, r2
 800bd2e:	4699      	mov	r9, r3
 800bd30:	688a      	ldr	r2, [r1, #8]
 800bd32:	690b      	ldr	r3, [r1, #16]
 800bd34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	bfb8      	it	lt
 800bd3c:	4613      	movlt	r3, r2
 800bd3e:	6033      	str	r3, [r6, #0]
 800bd40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd44:	4607      	mov	r7, r0
 800bd46:	460c      	mov	r4, r1
 800bd48:	b10a      	cbz	r2, 800bd4e <_printf_common+0x26>
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	6033      	str	r3, [r6, #0]
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	0699      	lsls	r1, r3, #26
 800bd52:	bf42      	ittt	mi
 800bd54:	6833      	ldrmi	r3, [r6, #0]
 800bd56:	3302      	addmi	r3, #2
 800bd58:	6033      	strmi	r3, [r6, #0]
 800bd5a:	6825      	ldr	r5, [r4, #0]
 800bd5c:	f015 0506 	ands.w	r5, r5, #6
 800bd60:	d106      	bne.n	800bd70 <_printf_common+0x48>
 800bd62:	f104 0a19 	add.w	sl, r4, #25
 800bd66:	68e3      	ldr	r3, [r4, #12]
 800bd68:	6832      	ldr	r2, [r6, #0]
 800bd6a:	1a9b      	subs	r3, r3, r2
 800bd6c:	42ab      	cmp	r3, r5
 800bd6e:	dc26      	bgt.n	800bdbe <_printf_common+0x96>
 800bd70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd74:	1e13      	subs	r3, r2, #0
 800bd76:	6822      	ldr	r2, [r4, #0]
 800bd78:	bf18      	it	ne
 800bd7a:	2301      	movne	r3, #1
 800bd7c:	0692      	lsls	r2, r2, #26
 800bd7e:	d42b      	bmi.n	800bdd8 <_printf_common+0xb0>
 800bd80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd84:	4649      	mov	r1, r9
 800bd86:	4638      	mov	r0, r7
 800bd88:	47c0      	blx	r8
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	d01e      	beq.n	800bdcc <_printf_common+0xa4>
 800bd8e:	6823      	ldr	r3, [r4, #0]
 800bd90:	68e5      	ldr	r5, [r4, #12]
 800bd92:	6832      	ldr	r2, [r6, #0]
 800bd94:	f003 0306 	and.w	r3, r3, #6
 800bd98:	2b04      	cmp	r3, #4
 800bd9a:	bf08      	it	eq
 800bd9c:	1aad      	subeq	r5, r5, r2
 800bd9e:	68a3      	ldr	r3, [r4, #8]
 800bda0:	6922      	ldr	r2, [r4, #16]
 800bda2:	bf0c      	ite	eq
 800bda4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bda8:	2500      	movne	r5, #0
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	bfc4      	itt	gt
 800bdae:	1a9b      	subgt	r3, r3, r2
 800bdb0:	18ed      	addgt	r5, r5, r3
 800bdb2:	2600      	movs	r6, #0
 800bdb4:	341a      	adds	r4, #26
 800bdb6:	42b5      	cmp	r5, r6
 800bdb8:	d11a      	bne.n	800bdf0 <_printf_common+0xc8>
 800bdba:	2000      	movs	r0, #0
 800bdbc:	e008      	b.n	800bdd0 <_printf_common+0xa8>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	4652      	mov	r2, sl
 800bdc2:	4649      	mov	r1, r9
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	47c0      	blx	r8
 800bdc8:	3001      	adds	r0, #1
 800bdca:	d103      	bne.n	800bdd4 <_printf_common+0xac>
 800bdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd4:	3501      	adds	r5, #1
 800bdd6:	e7c6      	b.n	800bd66 <_printf_common+0x3e>
 800bdd8:	18e1      	adds	r1, r4, r3
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	2030      	movs	r0, #48	; 0x30
 800bdde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bde2:	4422      	add	r2, r4
 800bde4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bde8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdec:	3302      	adds	r3, #2
 800bdee:	e7c7      	b.n	800bd80 <_printf_common+0x58>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	4649      	mov	r1, r9
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	47c0      	blx	r8
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	d0e6      	beq.n	800bdcc <_printf_common+0xa4>
 800bdfe:	3601      	adds	r6, #1
 800be00:	e7d9      	b.n	800bdb6 <_printf_common+0x8e>
	...

0800be04 <_printf_i>:
 800be04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be08:	7e0f      	ldrb	r7, [r1, #24]
 800be0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be0c:	2f78      	cmp	r7, #120	; 0x78
 800be0e:	4691      	mov	r9, r2
 800be10:	4680      	mov	r8, r0
 800be12:	460c      	mov	r4, r1
 800be14:	469a      	mov	sl, r3
 800be16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be1a:	d807      	bhi.n	800be2c <_printf_i+0x28>
 800be1c:	2f62      	cmp	r7, #98	; 0x62
 800be1e:	d80a      	bhi.n	800be36 <_printf_i+0x32>
 800be20:	2f00      	cmp	r7, #0
 800be22:	f000 80d8 	beq.w	800bfd6 <_printf_i+0x1d2>
 800be26:	2f58      	cmp	r7, #88	; 0x58
 800be28:	f000 80a3 	beq.w	800bf72 <_printf_i+0x16e>
 800be2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be34:	e03a      	b.n	800beac <_printf_i+0xa8>
 800be36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be3a:	2b15      	cmp	r3, #21
 800be3c:	d8f6      	bhi.n	800be2c <_printf_i+0x28>
 800be3e:	a101      	add	r1, pc, #4	; (adr r1, 800be44 <_printf_i+0x40>)
 800be40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be44:	0800be9d 	.word	0x0800be9d
 800be48:	0800beb1 	.word	0x0800beb1
 800be4c:	0800be2d 	.word	0x0800be2d
 800be50:	0800be2d 	.word	0x0800be2d
 800be54:	0800be2d 	.word	0x0800be2d
 800be58:	0800be2d 	.word	0x0800be2d
 800be5c:	0800beb1 	.word	0x0800beb1
 800be60:	0800be2d 	.word	0x0800be2d
 800be64:	0800be2d 	.word	0x0800be2d
 800be68:	0800be2d 	.word	0x0800be2d
 800be6c:	0800be2d 	.word	0x0800be2d
 800be70:	0800bfbd 	.word	0x0800bfbd
 800be74:	0800bee1 	.word	0x0800bee1
 800be78:	0800bf9f 	.word	0x0800bf9f
 800be7c:	0800be2d 	.word	0x0800be2d
 800be80:	0800be2d 	.word	0x0800be2d
 800be84:	0800bfdf 	.word	0x0800bfdf
 800be88:	0800be2d 	.word	0x0800be2d
 800be8c:	0800bee1 	.word	0x0800bee1
 800be90:	0800be2d 	.word	0x0800be2d
 800be94:	0800be2d 	.word	0x0800be2d
 800be98:	0800bfa7 	.word	0x0800bfa7
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	1d1a      	adds	r2, r3, #4
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	602a      	str	r2, [r5, #0]
 800bea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800beac:	2301      	movs	r3, #1
 800beae:	e0a3      	b.n	800bff8 <_printf_i+0x1f4>
 800beb0:	6820      	ldr	r0, [r4, #0]
 800beb2:	6829      	ldr	r1, [r5, #0]
 800beb4:	0606      	lsls	r6, r0, #24
 800beb6:	f101 0304 	add.w	r3, r1, #4
 800beba:	d50a      	bpl.n	800bed2 <_printf_i+0xce>
 800bebc:	680e      	ldr	r6, [r1, #0]
 800bebe:	602b      	str	r3, [r5, #0]
 800bec0:	2e00      	cmp	r6, #0
 800bec2:	da03      	bge.n	800becc <_printf_i+0xc8>
 800bec4:	232d      	movs	r3, #45	; 0x2d
 800bec6:	4276      	negs	r6, r6
 800bec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800becc:	485e      	ldr	r0, [pc, #376]	; (800c048 <_printf_i+0x244>)
 800bece:	230a      	movs	r3, #10
 800bed0:	e019      	b.n	800bf06 <_printf_i+0x102>
 800bed2:	680e      	ldr	r6, [r1, #0]
 800bed4:	602b      	str	r3, [r5, #0]
 800bed6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800beda:	bf18      	it	ne
 800bedc:	b236      	sxthne	r6, r6
 800bede:	e7ef      	b.n	800bec0 <_printf_i+0xbc>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	6820      	ldr	r0, [r4, #0]
 800bee4:	1d19      	adds	r1, r3, #4
 800bee6:	6029      	str	r1, [r5, #0]
 800bee8:	0601      	lsls	r1, r0, #24
 800beea:	d501      	bpl.n	800bef0 <_printf_i+0xec>
 800beec:	681e      	ldr	r6, [r3, #0]
 800beee:	e002      	b.n	800bef6 <_printf_i+0xf2>
 800bef0:	0646      	lsls	r6, r0, #25
 800bef2:	d5fb      	bpl.n	800beec <_printf_i+0xe8>
 800bef4:	881e      	ldrh	r6, [r3, #0]
 800bef6:	4854      	ldr	r0, [pc, #336]	; (800c048 <_printf_i+0x244>)
 800bef8:	2f6f      	cmp	r7, #111	; 0x6f
 800befa:	bf0c      	ite	eq
 800befc:	2308      	moveq	r3, #8
 800befe:	230a      	movne	r3, #10
 800bf00:	2100      	movs	r1, #0
 800bf02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf06:	6865      	ldr	r5, [r4, #4]
 800bf08:	60a5      	str	r5, [r4, #8]
 800bf0a:	2d00      	cmp	r5, #0
 800bf0c:	bfa2      	ittt	ge
 800bf0e:	6821      	ldrge	r1, [r4, #0]
 800bf10:	f021 0104 	bicge.w	r1, r1, #4
 800bf14:	6021      	strge	r1, [r4, #0]
 800bf16:	b90e      	cbnz	r6, 800bf1c <_printf_i+0x118>
 800bf18:	2d00      	cmp	r5, #0
 800bf1a:	d04d      	beq.n	800bfb8 <_printf_i+0x1b4>
 800bf1c:	4615      	mov	r5, r2
 800bf1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf22:	fb03 6711 	mls	r7, r3, r1, r6
 800bf26:	5dc7      	ldrb	r7, [r0, r7]
 800bf28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf2c:	4637      	mov	r7, r6
 800bf2e:	42bb      	cmp	r3, r7
 800bf30:	460e      	mov	r6, r1
 800bf32:	d9f4      	bls.n	800bf1e <_printf_i+0x11a>
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	d10b      	bne.n	800bf50 <_printf_i+0x14c>
 800bf38:	6823      	ldr	r3, [r4, #0]
 800bf3a:	07de      	lsls	r6, r3, #31
 800bf3c:	d508      	bpl.n	800bf50 <_printf_i+0x14c>
 800bf3e:	6923      	ldr	r3, [r4, #16]
 800bf40:	6861      	ldr	r1, [r4, #4]
 800bf42:	4299      	cmp	r1, r3
 800bf44:	bfde      	ittt	le
 800bf46:	2330      	movle	r3, #48	; 0x30
 800bf48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf50:	1b52      	subs	r2, r2, r5
 800bf52:	6122      	str	r2, [r4, #16]
 800bf54:	f8cd a000 	str.w	sl, [sp]
 800bf58:	464b      	mov	r3, r9
 800bf5a:	aa03      	add	r2, sp, #12
 800bf5c:	4621      	mov	r1, r4
 800bf5e:	4640      	mov	r0, r8
 800bf60:	f7ff fee2 	bl	800bd28 <_printf_common>
 800bf64:	3001      	adds	r0, #1
 800bf66:	d14c      	bne.n	800c002 <_printf_i+0x1fe>
 800bf68:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6c:	b004      	add	sp, #16
 800bf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf72:	4835      	ldr	r0, [pc, #212]	; (800c048 <_printf_i+0x244>)
 800bf74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf78:	6829      	ldr	r1, [r5, #0]
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf80:	6029      	str	r1, [r5, #0]
 800bf82:	061d      	lsls	r5, r3, #24
 800bf84:	d514      	bpl.n	800bfb0 <_printf_i+0x1ac>
 800bf86:	07df      	lsls	r7, r3, #31
 800bf88:	bf44      	itt	mi
 800bf8a:	f043 0320 	orrmi.w	r3, r3, #32
 800bf8e:	6023      	strmi	r3, [r4, #0]
 800bf90:	b91e      	cbnz	r6, 800bf9a <_printf_i+0x196>
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	f023 0320 	bic.w	r3, r3, #32
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	2310      	movs	r3, #16
 800bf9c:	e7b0      	b.n	800bf00 <_printf_i+0xfc>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	f043 0320 	orr.w	r3, r3, #32
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	2378      	movs	r3, #120	; 0x78
 800bfa8:	4828      	ldr	r0, [pc, #160]	; (800c04c <_printf_i+0x248>)
 800bfaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfae:	e7e3      	b.n	800bf78 <_printf_i+0x174>
 800bfb0:	0659      	lsls	r1, r3, #25
 800bfb2:	bf48      	it	mi
 800bfb4:	b2b6      	uxthmi	r6, r6
 800bfb6:	e7e6      	b.n	800bf86 <_printf_i+0x182>
 800bfb8:	4615      	mov	r5, r2
 800bfba:	e7bb      	b.n	800bf34 <_printf_i+0x130>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	6826      	ldr	r6, [r4, #0]
 800bfc0:	6961      	ldr	r1, [r4, #20]
 800bfc2:	1d18      	adds	r0, r3, #4
 800bfc4:	6028      	str	r0, [r5, #0]
 800bfc6:	0635      	lsls	r5, r6, #24
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	d501      	bpl.n	800bfd0 <_printf_i+0x1cc>
 800bfcc:	6019      	str	r1, [r3, #0]
 800bfce:	e002      	b.n	800bfd6 <_printf_i+0x1d2>
 800bfd0:	0670      	lsls	r0, r6, #25
 800bfd2:	d5fb      	bpl.n	800bfcc <_printf_i+0x1c8>
 800bfd4:	8019      	strh	r1, [r3, #0]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	6123      	str	r3, [r4, #16]
 800bfda:	4615      	mov	r5, r2
 800bfdc:	e7ba      	b.n	800bf54 <_printf_i+0x150>
 800bfde:	682b      	ldr	r3, [r5, #0]
 800bfe0:	1d1a      	adds	r2, r3, #4
 800bfe2:	602a      	str	r2, [r5, #0]
 800bfe4:	681d      	ldr	r5, [r3, #0]
 800bfe6:	6862      	ldr	r2, [r4, #4]
 800bfe8:	2100      	movs	r1, #0
 800bfea:	4628      	mov	r0, r5
 800bfec:	f7f4 f918 	bl	8000220 <memchr>
 800bff0:	b108      	cbz	r0, 800bff6 <_printf_i+0x1f2>
 800bff2:	1b40      	subs	r0, r0, r5
 800bff4:	6060      	str	r0, [r4, #4]
 800bff6:	6863      	ldr	r3, [r4, #4]
 800bff8:	6123      	str	r3, [r4, #16]
 800bffa:	2300      	movs	r3, #0
 800bffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c000:	e7a8      	b.n	800bf54 <_printf_i+0x150>
 800c002:	6923      	ldr	r3, [r4, #16]
 800c004:	462a      	mov	r2, r5
 800c006:	4649      	mov	r1, r9
 800c008:	4640      	mov	r0, r8
 800c00a:	47d0      	blx	sl
 800c00c:	3001      	adds	r0, #1
 800c00e:	d0ab      	beq.n	800bf68 <_printf_i+0x164>
 800c010:	6823      	ldr	r3, [r4, #0]
 800c012:	079b      	lsls	r3, r3, #30
 800c014:	d413      	bmi.n	800c03e <_printf_i+0x23a>
 800c016:	68e0      	ldr	r0, [r4, #12]
 800c018:	9b03      	ldr	r3, [sp, #12]
 800c01a:	4298      	cmp	r0, r3
 800c01c:	bfb8      	it	lt
 800c01e:	4618      	movlt	r0, r3
 800c020:	e7a4      	b.n	800bf6c <_printf_i+0x168>
 800c022:	2301      	movs	r3, #1
 800c024:	4632      	mov	r2, r6
 800c026:	4649      	mov	r1, r9
 800c028:	4640      	mov	r0, r8
 800c02a:	47d0      	blx	sl
 800c02c:	3001      	adds	r0, #1
 800c02e:	d09b      	beq.n	800bf68 <_printf_i+0x164>
 800c030:	3501      	adds	r5, #1
 800c032:	68e3      	ldr	r3, [r4, #12]
 800c034:	9903      	ldr	r1, [sp, #12]
 800c036:	1a5b      	subs	r3, r3, r1
 800c038:	42ab      	cmp	r3, r5
 800c03a:	dcf2      	bgt.n	800c022 <_printf_i+0x21e>
 800c03c:	e7eb      	b.n	800c016 <_printf_i+0x212>
 800c03e:	2500      	movs	r5, #0
 800c040:	f104 0619 	add.w	r6, r4, #25
 800c044:	e7f5      	b.n	800c032 <_printf_i+0x22e>
 800c046:	bf00      	nop
 800c048:	0800fd1e 	.word	0x0800fd1e
 800c04c:	0800fd2f 	.word	0x0800fd2f

0800c050 <cleanup_glue>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	460c      	mov	r4, r1
 800c054:	6809      	ldr	r1, [r1, #0]
 800c056:	4605      	mov	r5, r0
 800c058:	b109      	cbz	r1, 800c05e <cleanup_glue+0xe>
 800c05a:	f7ff fff9 	bl	800c050 <cleanup_glue>
 800c05e:	4621      	mov	r1, r4
 800c060:	4628      	mov	r0, r5
 800c062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c066:	f001 bc03 	b.w	800d870 <_free_r>
	...

0800c06c <_reclaim_reent>:
 800c06c:	4b2c      	ldr	r3, [pc, #176]	; (800c120 <_reclaim_reent+0xb4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4283      	cmp	r3, r0
 800c072:	b570      	push	{r4, r5, r6, lr}
 800c074:	4604      	mov	r4, r0
 800c076:	d051      	beq.n	800c11c <_reclaim_reent+0xb0>
 800c078:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c07a:	b143      	cbz	r3, 800c08e <_reclaim_reent+0x22>
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d14a      	bne.n	800c118 <_reclaim_reent+0xac>
 800c082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c084:	6819      	ldr	r1, [r3, #0]
 800c086:	b111      	cbz	r1, 800c08e <_reclaim_reent+0x22>
 800c088:	4620      	mov	r0, r4
 800c08a:	f001 fbf1 	bl	800d870 <_free_r>
 800c08e:	6961      	ldr	r1, [r4, #20]
 800c090:	b111      	cbz	r1, 800c098 <_reclaim_reent+0x2c>
 800c092:	4620      	mov	r0, r4
 800c094:	f001 fbec 	bl	800d870 <_free_r>
 800c098:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c09a:	b111      	cbz	r1, 800c0a2 <_reclaim_reent+0x36>
 800c09c:	4620      	mov	r0, r4
 800c09e:	f001 fbe7 	bl	800d870 <_free_r>
 800c0a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c0a4:	b111      	cbz	r1, 800c0ac <_reclaim_reent+0x40>
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f001 fbe2 	bl	800d870 <_free_r>
 800c0ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c0ae:	b111      	cbz	r1, 800c0b6 <_reclaim_reent+0x4a>
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f001 fbdd 	bl	800d870 <_free_r>
 800c0b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c0b8:	b111      	cbz	r1, 800c0c0 <_reclaim_reent+0x54>
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f001 fbd8 	bl	800d870 <_free_r>
 800c0c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c0c2:	b111      	cbz	r1, 800c0ca <_reclaim_reent+0x5e>
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f001 fbd3 	bl	800d870 <_free_r>
 800c0ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c0cc:	b111      	cbz	r1, 800c0d4 <_reclaim_reent+0x68>
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f001 fbce 	bl	800d870 <_free_r>
 800c0d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0d6:	b111      	cbz	r1, 800c0de <_reclaim_reent+0x72>
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f001 fbc9 	bl	800d870 <_free_r>
 800c0de:	69a3      	ldr	r3, [r4, #24]
 800c0e0:	b1e3      	cbz	r3, 800c11c <_reclaim_reent+0xb0>
 800c0e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	4798      	blx	r3
 800c0e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c0ea:	b1b9      	cbz	r1, 800c11c <_reclaim_reent+0xb0>
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0f2:	f7ff bfad 	b.w	800c050 <cleanup_glue>
 800c0f6:	5949      	ldr	r1, [r1, r5]
 800c0f8:	b941      	cbnz	r1, 800c10c <_reclaim_reent+0xa0>
 800c0fa:	3504      	adds	r5, #4
 800c0fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0fe:	2d80      	cmp	r5, #128	; 0x80
 800c100:	68d9      	ldr	r1, [r3, #12]
 800c102:	d1f8      	bne.n	800c0f6 <_reclaim_reent+0x8a>
 800c104:	4620      	mov	r0, r4
 800c106:	f001 fbb3 	bl	800d870 <_free_r>
 800c10a:	e7ba      	b.n	800c082 <_reclaim_reent+0x16>
 800c10c:	680e      	ldr	r6, [r1, #0]
 800c10e:	4620      	mov	r0, r4
 800c110:	f001 fbae 	bl	800d870 <_free_r>
 800c114:	4631      	mov	r1, r6
 800c116:	e7ef      	b.n	800c0f8 <_reclaim_reent+0x8c>
 800c118:	2500      	movs	r5, #0
 800c11a:	e7ef      	b.n	800c0fc <_reclaim_reent+0x90>
 800c11c:	bd70      	pop	{r4, r5, r6, pc}
 800c11e:	bf00      	nop
 800c120:	20000024 	.word	0x20000024

0800c124 <_sbrk_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d06      	ldr	r5, [pc, #24]	; (800c140 <_sbrk_r+0x1c>)
 800c128:	2300      	movs	r3, #0
 800c12a:	4604      	mov	r4, r0
 800c12c:	4608      	mov	r0, r1
 800c12e:	602b      	str	r3, [r5, #0]
 800c130:	f003 fa42 	bl	800f5b8 <_sbrk>
 800c134:	1c43      	adds	r3, r0, #1
 800c136:	d102      	bne.n	800c13e <_sbrk_r+0x1a>
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	b103      	cbz	r3, 800c13e <_sbrk_r+0x1a>
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	bd38      	pop	{r3, r4, r5, pc}
 800c140:	2000679c 	.word	0x2000679c

0800c144 <siprintf>:
 800c144:	b40e      	push	{r1, r2, r3}
 800c146:	b500      	push	{lr}
 800c148:	b09c      	sub	sp, #112	; 0x70
 800c14a:	ab1d      	add	r3, sp, #116	; 0x74
 800c14c:	9002      	str	r0, [sp, #8]
 800c14e:	9006      	str	r0, [sp, #24]
 800c150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c154:	4809      	ldr	r0, [pc, #36]	; (800c17c <siprintf+0x38>)
 800c156:	9107      	str	r1, [sp, #28]
 800c158:	9104      	str	r1, [sp, #16]
 800c15a:	4909      	ldr	r1, [pc, #36]	; (800c180 <siprintf+0x3c>)
 800c15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c160:	9105      	str	r1, [sp, #20]
 800c162:	6800      	ldr	r0, [r0, #0]
 800c164:	9301      	str	r3, [sp, #4]
 800c166:	a902      	add	r1, sp, #8
 800c168:	f001 fc2a 	bl	800d9c0 <_svfiprintf_r>
 800c16c:	9b02      	ldr	r3, [sp, #8]
 800c16e:	2200      	movs	r2, #0
 800c170:	701a      	strb	r2, [r3, #0]
 800c172:	b01c      	add	sp, #112	; 0x70
 800c174:	f85d eb04 	ldr.w	lr, [sp], #4
 800c178:	b003      	add	sp, #12
 800c17a:	4770      	bx	lr
 800c17c:	20000024 	.word	0x20000024
 800c180:	ffff0208 	.word	0xffff0208

0800c184 <__sread>:
 800c184:	b510      	push	{r4, lr}
 800c186:	460c      	mov	r4, r1
 800c188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c18c:	f001 fd18 	bl	800dbc0 <_read_r>
 800c190:	2800      	cmp	r0, #0
 800c192:	bfab      	itete	ge
 800c194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c196:	89a3      	ldrhlt	r3, [r4, #12]
 800c198:	181b      	addge	r3, r3, r0
 800c19a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c19e:	bfac      	ite	ge
 800c1a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1a2:	81a3      	strhlt	r3, [r4, #12]
 800c1a4:	bd10      	pop	{r4, pc}

0800c1a6 <__swrite>:
 800c1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1aa:	461f      	mov	r7, r3
 800c1ac:	898b      	ldrh	r3, [r1, #12]
 800c1ae:	05db      	lsls	r3, r3, #23
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	4616      	mov	r6, r2
 800c1b6:	d505      	bpl.n	800c1c4 <__swrite+0x1e>
 800c1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1bc:	2302      	movs	r3, #2
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f000 ff96 	bl	800d0f0 <_lseek_r>
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1ce:	81a3      	strh	r3, [r4, #12]
 800c1d0:	4632      	mov	r2, r6
 800c1d2:	463b      	mov	r3, r7
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1da:	f000 b825 	b.w	800c228 <_write_r>

0800c1de <__sseek>:
 800c1de:	b510      	push	{r4, lr}
 800c1e0:	460c      	mov	r4, r1
 800c1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e6:	f000 ff83 	bl	800d0f0 <_lseek_r>
 800c1ea:	1c43      	adds	r3, r0, #1
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	bf15      	itete	ne
 800c1f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1fa:	81a3      	strheq	r3, [r4, #12]
 800c1fc:	bf18      	it	ne
 800c1fe:	81a3      	strhne	r3, [r4, #12]
 800c200:	bd10      	pop	{r4, pc}

0800c202 <__sclose>:
 800c202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c206:	f000 b821 	b.w	800c24c <_close_r>

0800c20a <strcat>:
 800c20a:	b510      	push	{r4, lr}
 800c20c:	4602      	mov	r2, r0
 800c20e:	7814      	ldrb	r4, [r2, #0]
 800c210:	4613      	mov	r3, r2
 800c212:	3201      	adds	r2, #1
 800c214:	2c00      	cmp	r4, #0
 800c216:	d1fa      	bne.n	800c20e <strcat+0x4>
 800c218:	3b01      	subs	r3, #1
 800c21a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c21e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c222:	2a00      	cmp	r2, #0
 800c224:	d1f9      	bne.n	800c21a <strcat+0x10>
 800c226:	bd10      	pop	{r4, pc}

0800c228 <_write_r>:
 800c228:	b538      	push	{r3, r4, r5, lr}
 800c22a:	4d07      	ldr	r5, [pc, #28]	; (800c248 <_write_r+0x20>)
 800c22c:	4604      	mov	r4, r0
 800c22e:	4608      	mov	r0, r1
 800c230:	4611      	mov	r1, r2
 800c232:	2200      	movs	r2, #0
 800c234:	602a      	str	r2, [r5, #0]
 800c236:	461a      	mov	r2, r3
 800c238:	f003 f9cc 	bl	800f5d4 <_write>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	d102      	bne.n	800c246 <_write_r+0x1e>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	b103      	cbz	r3, 800c246 <_write_r+0x1e>
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	2000679c 	.word	0x2000679c

0800c24c <_close_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4d06      	ldr	r5, [pc, #24]	; (800c268 <_close_r+0x1c>)
 800c250:	2300      	movs	r3, #0
 800c252:	4604      	mov	r4, r0
 800c254:	4608      	mov	r0, r1
 800c256:	602b      	str	r3, [r5, #0]
 800c258:	f003 f976 	bl	800f548 <_close>
 800c25c:	1c43      	adds	r3, r0, #1
 800c25e:	d102      	bne.n	800c266 <_close_r+0x1a>
 800c260:	682b      	ldr	r3, [r5, #0]
 800c262:	b103      	cbz	r3, 800c266 <_close_r+0x1a>
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	bd38      	pop	{r3, r4, r5, pc}
 800c268:	2000679c 	.word	0x2000679c

0800c26c <quorem>:
 800c26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c270:	6903      	ldr	r3, [r0, #16]
 800c272:	690c      	ldr	r4, [r1, #16]
 800c274:	42a3      	cmp	r3, r4
 800c276:	4607      	mov	r7, r0
 800c278:	f2c0 8081 	blt.w	800c37e <quorem+0x112>
 800c27c:	3c01      	subs	r4, #1
 800c27e:	f101 0814 	add.w	r8, r1, #20
 800c282:	f100 0514 	add.w	r5, r0, #20
 800c286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c28a:	9301      	str	r3, [sp, #4]
 800c28c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c294:	3301      	adds	r3, #1
 800c296:	429a      	cmp	r2, r3
 800c298:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c29c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2a4:	d331      	bcc.n	800c30a <quorem+0x9e>
 800c2a6:	f04f 0e00 	mov.w	lr, #0
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	46ac      	mov	ip, r5
 800c2ae:	46f2      	mov	sl, lr
 800c2b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2b4:	b293      	uxth	r3, r2
 800c2b6:	fb06 e303 	mla	r3, r6, r3, lr
 800c2ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	ebaa 0303 	sub.w	r3, sl, r3
 800c2c4:	f8dc a000 	ldr.w	sl, [ip]
 800c2c8:	0c12      	lsrs	r2, r2, #16
 800c2ca:	fa13 f38a 	uxtah	r3, r3, sl
 800c2ce:	fb06 e202 	mla	r2, r6, r2, lr
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	9b00      	ldr	r3, [sp, #0]
 800c2d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2da:	b292      	uxth	r2, r2
 800c2dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c2e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2e4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c2e8:	4581      	cmp	r9, r0
 800c2ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2ee:	f84c 3b04 	str.w	r3, [ip], #4
 800c2f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2f6:	d2db      	bcs.n	800c2b0 <quorem+0x44>
 800c2f8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2fc:	b92b      	cbnz	r3, 800c30a <quorem+0x9e>
 800c2fe:	9b01      	ldr	r3, [sp, #4]
 800c300:	3b04      	subs	r3, #4
 800c302:	429d      	cmp	r5, r3
 800c304:	461a      	mov	r2, r3
 800c306:	d32e      	bcc.n	800c366 <quorem+0xfa>
 800c308:	613c      	str	r4, [r7, #16]
 800c30a:	4638      	mov	r0, r7
 800c30c:	f001 f998 	bl	800d640 <__mcmp>
 800c310:	2800      	cmp	r0, #0
 800c312:	db24      	blt.n	800c35e <quorem+0xf2>
 800c314:	3601      	adds	r6, #1
 800c316:	4628      	mov	r0, r5
 800c318:	f04f 0c00 	mov.w	ip, #0
 800c31c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c320:	f8d0 e000 	ldr.w	lr, [r0]
 800c324:	b293      	uxth	r3, r2
 800c326:	ebac 0303 	sub.w	r3, ip, r3
 800c32a:	0c12      	lsrs	r2, r2, #16
 800c32c:	fa13 f38e 	uxtah	r3, r3, lr
 800c330:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c338:	b29b      	uxth	r3, r3
 800c33a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c33e:	45c1      	cmp	r9, r8
 800c340:	f840 3b04 	str.w	r3, [r0], #4
 800c344:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c348:	d2e8      	bcs.n	800c31c <quorem+0xb0>
 800c34a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c34e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c352:	b922      	cbnz	r2, 800c35e <quorem+0xf2>
 800c354:	3b04      	subs	r3, #4
 800c356:	429d      	cmp	r5, r3
 800c358:	461a      	mov	r2, r3
 800c35a:	d30a      	bcc.n	800c372 <quorem+0x106>
 800c35c:	613c      	str	r4, [r7, #16]
 800c35e:	4630      	mov	r0, r6
 800c360:	b003      	add	sp, #12
 800c362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c366:	6812      	ldr	r2, [r2, #0]
 800c368:	3b04      	subs	r3, #4
 800c36a:	2a00      	cmp	r2, #0
 800c36c:	d1cc      	bne.n	800c308 <quorem+0x9c>
 800c36e:	3c01      	subs	r4, #1
 800c370:	e7c7      	b.n	800c302 <quorem+0x96>
 800c372:	6812      	ldr	r2, [r2, #0]
 800c374:	3b04      	subs	r3, #4
 800c376:	2a00      	cmp	r2, #0
 800c378:	d1f0      	bne.n	800c35c <quorem+0xf0>
 800c37a:	3c01      	subs	r4, #1
 800c37c:	e7eb      	b.n	800c356 <quorem+0xea>
 800c37e:	2000      	movs	r0, #0
 800c380:	e7ee      	b.n	800c360 <quorem+0xf4>
 800c382:	0000      	movs	r0, r0
 800c384:	0000      	movs	r0, r0
	...

0800c388 <_dtoa_r>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	ed2d 8b04 	vpush	{d8-d9}
 800c390:	ec57 6b10 	vmov	r6, r7, d0
 800c394:	b093      	sub	sp, #76	; 0x4c
 800c396:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c398:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c39c:	9106      	str	r1, [sp, #24]
 800c39e:	ee10 aa10 	vmov	sl, s0
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	9209      	str	r2, [sp, #36]	; 0x24
 800c3a6:	930c      	str	r3, [sp, #48]	; 0x30
 800c3a8:	46bb      	mov	fp, r7
 800c3aa:	b975      	cbnz	r5, 800c3ca <_dtoa_r+0x42>
 800c3ac:	2010      	movs	r0, #16
 800c3ae:	f000 feb1 	bl	800d114 <malloc>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	6260      	str	r0, [r4, #36]	; 0x24
 800c3b6:	b920      	cbnz	r0, 800c3c2 <_dtoa_r+0x3a>
 800c3b8:	4ba7      	ldr	r3, [pc, #668]	; (800c658 <_dtoa_r+0x2d0>)
 800c3ba:	21ea      	movs	r1, #234	; 0xea
 800c3bc:	48a7      	ldr	r0, [pc, #668]	; (800c65c <_dtoa_r+0x2d4>)
 800c3be:	f001 fc11 	bl	800dbe4 <__assert_func>
 800c3c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c3c6:	6005      	str	r5, [r0, #0]
 800c3c8:	60c5      	str	r5, [r0, #12]
 800c3ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3cc:	6819      	ldr	r1, [r3, #0]
 800c3ce:	b151      	cbz	r1, 800c3e6 <_dtoa_r+0x5e>
 800c3d0:	685a      	ldr	r2, [r3, #4]
 800c3d2:	604a      	str	r2, [r1, #4]
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	4093      	lsls	r3, r2
 800c3d8:	608b      	str	r3, [r1, #8]
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 feee 	bl	800d1bc <_Bfree>
 800c3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	601a      	str	r2, [r3, #0]
 800c3e6:	1e3b      	subs	r3, r7, #0
 800c3e8:	bfaa      	itet	ge
 800c3ea:	2300      	movge	r3, #0
 800c3ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c3f0:	f8c8 3000 	strge.w	r3, [r8]
 800c3f4:	4b9a      	ldr	r3, [pc, #616]	; (800c660 <_dtoa_r+0x2d8>)
 800c3f6:	bfbc      	itt	lt
 800c3f8:	2201      	movlt	r2, #1
 800c3fa:	f8c8 2000 	strlt.w	r2, [r8]
 800c3fe:	ea33 030b 	bics.w	r3, r3, fp
 800c402:	d11b      	bne.n	800c43c <_dtoa_r+0xb4>
 800c404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c406:	f242 730f 	movw	r3, #9999	; 0x270f
 800c40a:	6013      	str	r3, [r2, #0]
 800c40c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c410:	4333      	orrs	r3, r6
 800c412:	f000 8592 	beq.w	800cf3a <_dtoa_r+0xbb2>
 800c416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c418:	b963      	cbnz	r3, 800c434 <_dtoa_r+0xac>
 800c41a:	4b92      	ldr	r3, [pc, #584]	; (800c664 <_dtoa_r+0x2dc>)
 800c41c:	e022      	b.n	800c464 <_dtoa_r+0xdc>
 800c41e:	4b92      	ldr	r3, [pc, #584]	; (800c668 <_dtoa_r+0x2e0>)
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	3308      	adds	r3, #8
 800c424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	9801      	ldr	r0, [sp, #4]
 800c42a:	b013      	add	sp, #76	; 0x4c
 800c42c:	ecbd 8b04 	vpop	{d8-d9}
 800c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c434:	4b8b      	ldr	r3, [pc, #556]	; (800c664 <_dtoa_r+0x2dc>)
 800c436:	9301      	str	r3, [sp, #4]
 800c438:	3303      	adds	r3, #3
 800c43a:	e7f3      	b.n	800c424 <_dtoa_r+0x9c>
 800c43c:	2200      	movs	r2, #0
 800c43e:	2300      	movs	r3, #0
 800c440:	4650      	mov	r0, sl
 800c442:	4659      	mov	r1, fp
 800c444:	f7f4 fb60 	bl	8000b08 <__aeabi_dcmpeq>
 800c448:	ec4b ab19 	vmov	d9, sl, fp
 800c44c:	4680      	mov	r8, r0
 800c44e:	b158      	cbz	r0, 800c468 <_dtoa_r+0xe0>
 800c450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c452:	2301      	movs	r3, #1
 800c454:	6013      	str	r3, [r2, #0]
 800c456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f000 856b 	beq.w	800cf34 <_dtoa_r+0xbac>
 800c45e:	4883      	ldr	r0, [pc, #524]	; (800c66c <_dtoa_r+0x2e4>)
 800c460:	6018      	str	r0, [r3, #0]
 800c462:	1e43      	subs	r3, r0, #1
 800c464:	9301      	str	r3, [sp, #4]
 800c466:	e7df      	b.n	800c428 <_dtoa_r+0xa0>
 800c468:	ec4b ab10 	vmov	d0, sl, fp
 800c46c:	aa10      	add	r2, sp, #64	; 0x40
 800c46e:	a911      	add	r1, sp, #68	; 0x44
 800c470:	4620      	mov	r0, r4
 800c472:	f001 f98b 	bl	800d78c <__d2b>
 800c476:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c47a:	ee08 0a10 	vmov	s16, r0
 800c47e:	2d00      	cmp	r5, #0
 800c480:	f000 8084 	beq.w	800c58c <_dtoa_r+0x204>
 800c484:	ee19 3a90 	vmov	r3, s19
 800c488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c48c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c490:	4656      	mov	r6, sl
 800c492:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c49a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c49e:	4b74      	ldr	r3, [pc, #464]	; (800c670 <_dtoa_r+0x2e8>)
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	f7f3 ff0f 	bl	80002c8 <__aeabi_dsub>
 800c4aa:	a365      	add	r3, pc, #404	; (adr r3, 800c640 <_dtoa_r+0x2b8>)
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	f7f4 f8c2 	bl	8000638 <__aeabi_dmul>
 800c4b4:	a364      	add	r3, pc, #400	; (adr r3, 800c648 <_dtoa_r+0x2c0>)
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	f7f3 ff07 	bl	80002cc <__adddf3>
 800c4be:	4606      	mov	r6, r0
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	460f      	mov	r7, r1
 800c4c4:	f7f4 f84e 	bl	8000564 <__aeabi_i2d>
 800c4c8:	a361      	add	r3, pc, #388	; (adr r3, 800c650 <_dtoa_r+0x2c8>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f4 f8b3 	bl	8000638 <__aeabi_dmul>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	4639      	mov	r1, r7
 800c4da:	f7f3 fef7 	bl	80002cc <__adddf3>
 800c4de:	4606      	mov	r6, r0
 800c4e0:	460f      	mov	r7, r1
 800c4e2:	f7f4 fb59 	bl	8000b98 <__aeabi_d2iz>
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	9000      	str	r0, [sp, #0]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	4639      	mov	r1, r7
 800c4f0:	f7f4 fb14 	bl	8000b1c <__aeabi_dcmplt>
 800c4f4:	b150      	cbz	r0, 800c50c <_dtoa_r+0x184>
 800c4f6:	9800      	ldr	r0, [sp, #0]
 800c4f8:	f7f4 f834 	bl	8000564 <__aeabi_i2d>
 800c4fc:	4632      	mov	r2, r6
 800c4fe:	463b      	mov	r3, r7
 800c500:	f7f4 fb02 	bl	8000b08 <__aeabi_dcmpeq>
 800c504:	b910      	cbnz	r0, 800c50c <_dtoa_r+0x184>
 800c506:	9b00      	ldr	r3, [sp, #0]
 800c508:	3b01      	subs	r3, #1
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	9b00      	ldr	r3, [sp, #0]
 800c50e:	2b16      	cmp	r3, #22
 800c510:	d85a      	bhi.n	800c5c8 <_dtoa_r+0x240>
 800c512:	9a00      	ldr	r2, [sp, #0]
 800c514:	4b57      	ldr	r3, [pc, #348]	; (800c674 <_dtoa_r+0x2ec>)
 800c516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	ec51 0b19 	vmov	r0, r1, d9
 800c522:	f7f4 fafb 	bl	8000b1c <__aeabi_dcmplt>
 800c526:	2800      	cmp	r0, #0
 800c528:	d050      	beq.n	800c5cc <_dtoa_r+0x244>
 800c52a:	9b00      	ldr	r3, [sp, #0]
 800c52c:	3b01      	subs	r3, #1
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	2300      	movs	r3, #0
 800c532:	930b      	str	r3, [sp, #44]	; 0x2c
 800c534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c536:	1b5d      	subs	r5, r3, r5
 800c538:	1e6b      	subs	r3, r5, #1
 800c53a:	9305      	str	r3, [sp, #20]
 800c53c:	bf45      	ittet	mi
 800c53e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c542:	9304      	strmi	r3, [sp, #16]
 800c544:	2300      	movpl	r3, #0
 800c546:	2300      	movmi	r3, #0
 800c548:	bf4c      	ite	mi
 800c54a:	9305      	strmi	r3, [sp, #20]
 800c54c:	9304      	strpl	r3, [sp, #16]
 800c54e:	9b00      	ldr	r3, [sp, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	db3d      	blt.n	800c5d0 <_dtoa_r+0x248>
 800c554:	9b05      	ldr	r3, [sp, #20]
 800c556:	9a00      	ldr	r2, [sp, #0]
 800c558:	920a      	str	r2, [sp, #40]	; 0x28
 800c55a:	4413      	add	r3, r2
 800c55c:	9305      	str	r3, [sp, #20]
 800c55e:	2300      	movs	r3, #0
 800c560:	9307      	str	r3, [sp, #28]
 800c562:	9b06      	ldr	r3, [sp, #24]
 800c564:	2b09      	cmp	r3, #9
 800c566:	f200 8089 	bhi.w	800c67c <_dtoa_r+0x2f4>
 800c56a:	2b05      	cmp	r3, #5
 800c56c:	bfc4      	itt	gt
 800c56e:	3b04      	subgt	r3, #4
 800c570:	9306      	strgt	r3, [sp, #24]
 800c572:	9b06      	ldr	r3, [sp, #24]
 800c574:	f1a3 0302 	sub.w	r3, r3, #2
 800c578:	bfcc      	ite	gt
 800c57a:	2500      	movgt	r5, #0
 800c57c:	2501      	movle	r5, #1
 800c57e:	2b03      	cmp	r3, #3
 800c580:	f200 8087 	bhi.w	800c692 <_dtoa_r+0x30a>
 800c584:	e8df f003 	tbb	[pc, r3]
 800c588:	59383a2d 	.word	0x59383a2d
 800c58c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c590:	441d      	add	r5, r3
 800c592:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c596:	2b20      	cmp	r3, #32
 800c598:	bfc1      	itttt	gt
 800c59a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c59e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c5a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800c5a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c5aa:	bfda      	itte	le
 800c5ac:	f1c3 0320 	rsble	r3, r3, #32
 800c5b0:	fa06 f003 	lslle.w	r0, r6, r3
 800c5b4:	4318      	orrgt	r0, r3
 800c5b6:	f7f3 ffc5 	bl	8000544 <__aeabi_ui2d>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	4606      	mov	r6, r0
 800c5be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c5c2:	3d01      	subs	r5, #1
 800c5c4:	930e      	str	r3, [sp, #56]	; 0x38
 800c5c6:	e76a      	b.n	800c49e <_dtoa_r+0x116>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e7b2      	b.n	800c532 <_dtoa_r+0x1aa>
 800c5cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c5ce:	e7b1      	b.n	800c534 <_dtoa_r+0x1ac>
 800c5d0:	9b04      	ldr	r3, [sp, #16]
 800c5d2:	9a00      	ldr	r2, [sp, #0]
 800c5d4:	1a9b      	subs	r3, r3, r2
 800c5d6:	9304      	str	r3, [sp, #16]
 800c5d8:	4253      	negs	r3, r2
 800c5da:	9307      	str	r3, [sp, #28]
 800c5dc:	2300      	movs	r3, #0
 800c5de:	930a      	str	r3, [sp, #40]	; 0x28
 800c5e0:	e7bf      	b.n	800c562 <_dtoa_r+0x1da>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	9308      	str	r3, [sp, #32]
 800c5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	dc55      	bgt.n	800c698 <_dtoa_r+0x310>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	9209      	str	r2, [sp, #36]	; 0x24
 800c5f6:	e00c      	b.n	800c612 <_dtoa_r+0x28a>
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	e7f3      	b.n	800c5e4 <_dtoa_r+0x25c>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c600:	9308      	str	r3, [sp, #32]
 800c602:	9b00      	ldr	r3, [sp, #0]
 800c604:	4413      	add	r3, r2
 800c606:	9302      	str	r3, [sp, #8]
 800c608:	3301      	adds	r3, #1
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	9303      	str	r3, [sp, #12]
 800c60e:	bfb8      	it	lt
 800c610:	2301      	movlt	r3, #1
 800c612:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c614:	2200      	movs	r2, #0
 800c616:	6042      	str	r2, [r0, #4]
 800c618:	2204      	movs	r2, #4
 800c61a:	f102 0614 	add.w	r6, r2, #20
 800c61e:	429e      	cmp	r6, r3
 800c620:	6841      	ldr	r1, [r0, #4]
 800c622:	d93d      	bls.n	800c6a0 <_dtoa_r+0x318>
 800c624:	4620      	mov	r0, r4
 800c626:	f000 fd89 	bl	800d13c <_Balloc>
 800c62a:	9001      	str	r0, [sp, #4]
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d13b      	bne.n	800c6a8 <_dtoa_r+0x320>
 800c630:	4b11      	ldr	r3, [pc, #68]	; (800c678 <_dtoa_r+0x2f0>)
 800c632:	4602      	mov	r2, r0
 800c634:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c638:	e6c0      	b.n	800c3bc <_dtoa_r+0x34>
 800c63a:	2301      	movs	r3, #1
 800c63c:	e7df      	b.n	800c5fe <_dtoa_r+0x276>
 800c63e:	bf00      	nop
 800c640:	636f4361 	.word	0x636f4361
 800c644:	3fd287a7 	.word	0x3fd287a7
 800c648:	8b60c8b3 	.word	0x8b60c8b3
 800c64c:	3fc68a28 	.word	0x3fc68a28
 800c650:	509f79fb 	.word	0x509f79fb
 800c654:	3fd34413 	.word	0x3fd34413
 800c658:	0800fd4d 	.word	0x0800fd4d
 800c65c:	0800fd64 	.word	0x0800fd64
 800c660:	7ff00000 	.word	0x7ff00000
 800c664:	0800fd49 	.word	0x0800fd49
 800c668:	0800fd40 	.word	0x0800fd40
 800c66c:	0800fd1d 	.word	0x0800fd1d
 800c670:	3ff80000 	.word	0x3ff80000
 800c674:	0800fe58 	.word	0x0800fe58
 800c678:	0800fdbf 	.word	0x0800fdbf
 800c67c:	2501      	movs	r5, #1
 800c67e:	2300      	movs	r3, #0
 800c680:	9306      	str	r3, [sp, #24]
 800c682:	9508      	str	r5, [sp, #32]
 800c684:	f04f 33ff 	mov.w	r3, #4294967295
 800c688:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c68c:	2200      	movs	r2, #0
 800c68e:	2312      	movs	r3, #18
 800c690:	e7b0      	b.n	800c5f4 <_dtoa_r+0x26c>
 800c692:	2301      	movs	r3, #1
 800c694:	9308      	str	r3, [sp, #32]
 800c696:	e7f5      	b.n	800c684 <_dtoa_r+0x2fc>
 800c698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c69a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c69e:	e7b8      	b.n	800c612 <_dtoa_r+0x28a>
 800c6a0:	3101      	adds	r1, #1
 800c6a2:	6041      	str	r1, [r0, #4]
 800c6a4:	0052      	lsls	r2, r2, #1
 800c6a6:	e7b8      	b.n	800c61a <_dtoa_r+0x292>
 800c6a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6aa:	9a01      	ldr	r2, [sp, #4]
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	9b03      	ldr	r3, [sp, #12]
 800c6b0:	2b0e      	cmp	r3, #14
 800c6b2:	f200 809d 	bhi.w	800c7f0 <_dtoa_r+0x468>
 800c6b6:	2d00      	cmp	r5, #0
 800c6b8:	f000 809a 	beq.w	800c7f0 <_dtoa_r+0x468>
 800c6bc:	9b00      	ldr	r3, [sp, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	dd32      	ble.n	800c728 <_dtoa_r+0x3a0>
 800c6c2:	4ab7      	ldr	r2, [pc, #732]	; (800c9a0 <_dtoa_r+0x618>)
 800c6c4:	f003 030f 	and.w	r3, r3, #15
 800c6c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c6cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6d0:	9b00      	ldr	r3, [sp, #0]
 800c6d2:	05d8      	lsls	r0, r3, #23
 800c6d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c6d8:	d516      	bpl.n	800c708 <_dtoa_r+0x380>
 800c6da:	4bb2      	ldr	r3, [pc, #712]	; (800c9a4 <_dtoa_r+0x61c>)
 800c6dc:	ec51 0b19 	vmov	r0, r1, d9
 800c6e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6e4:	f7f4 f8d2 	bl	800088c <__aeabi_ddiv>
 800c6e8:	f007 070f 	and.w	r7, r7, #15
 800c6ec:	4682      	mov	sl, r0
 800c6ee:	468b      	mov	fp, r1
 800c6f0:	2503      	movs	r5, #3
 800c6f2:	4eac      	ldr	r6, [pc, #688]	; (800c9a4 <_dtoa_r+0x61c>)
 800c6f4:	b957      	cbnz	r7, 800c70c <_dtoa_r+0x384>
 800c6f6:	4642      	mov	r2, r8
 800c6f8:	464b      	mov	r3, r9
 800c6fa:	4650      	mov	r0, sl
 800c6fc:	4659      	mov	r1, fp
 800c6fe:	f7f4 f8c5 	bl	800088c <__aeabi_ddiv>
 800c702:	4682      	mov	sl, r0
 800c704:	468b      	mov	fp, r1
 800c706:	e028      	b.n	800c75a <_dtoa_r+0x3d2>
 800c708:	2502      	movs	r5, #2
 800c70a:	e7f2      	b.n	800c6f2 <_dtoa_r+0x36a>
 800c70c:	07f9      	lsls	r1, r7, #31
 800c70e:	d508      	bpl.n	800c722 <_dtoa_r+0x39a>
 800c710:	4640      	mov	r0, r8
 800c712:	4649      	mov	r1, r9
 800c714:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c718:	f7f3 ff8e 	bl	8000638 <__aeabi_dmul>
 800c71c:	3501      	adds	r5, #1
 800c71e:	4680      	mov	r8, r0
 800c720:	4689      	mov	r9, r1
 800c722:	107f      	asrs	r7, r7, #1
 800c724:	3608      	adds	r6, #8
 800c726:	e7e5      	b.n	800c6f4 <_dtoa_r+0x36c>
 800c728:	f000 809b 	beq.w	800c862 <_dtoa_r+0x4da>
 800c72c:	9b00      	ldr	r3, [sp, #0]
 800c72e:	4f9d      	ldr	r7, [pc, #628]	; (800c9a4 <_dtoa_r+0x61c>)
 800c730:	425e      	negs	r6, r3
 800c732:	4b9b      	ldr	r3, [pc, #620]	; (800c9a0 <_dtoa_r+0x618>)
 800c734:	f006 020f 	and.w	r2, r6, #15
 800c738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	ec51 0b19 	vmov	r0, r1, d9
 800c744:	f7f3 ff78 	bl	8000638 <__aeabi_dmul>
 800c748:	1136      	asrs	r6, r6, #4
 800c74a:	4682      	mov	sl, r0
 800c74c:	468b      	mov	fp, r1
 800c74e:	2300      	movs	r3, #0
 800c750:	2502      	movs	r5, #2
 800c752:	2e00      	cmp	r6, #0
 800c754:	d17a      	bne.n	800c84c <_dtoa_r+0x4c4>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1d3      	bne.n	800c702 <_dtoa_r+0x37a>
 800c75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 8082 	beq.w	800c866 <_dtoa_r+0x4de>
 800c762:	4b91      	ldr	r3, [pc, #580]	; (800c9a8 <_dtoa_r+0x620>)
 800c764:	2200      	movs	r2, #0
 800c766:	4650      	mov	r0, sl
 800c768:	4659      	mov	r1, fp
 800c76a:	f7f4 f9d7 	bl	8000b1c <__aeabi_dcmplt>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d079      	beq.n	800c866 <_dtoa_r+0x4de>
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d076      	beq.n	800c866 <_dtoa_r+0x4de>
 800c778:	9b02      	ldr	r3, [sp, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	dd36      	ble.n	800c7ec <_dtoa_r+0x464>
 800c77e:	9b00      	ldr	r3, [sp, #0]
 800c780:	4650      	mov	r0, sl
 800c782:	4659      	mov	r1, fp
 800c784:	1e5f      	subs	r7, r3, #1
 800c786:	2200      	movs	r2, #0
 800c788:	4b88      	ldr	r3, [pc, #544]	; (800c9ac <_dtoa_r+0x624>)
 800c78a:	f7f3 ff55 	bl	8000638 <__aeabi_dmul>
 800c78e:	9e02      	ldr	r6, [sp, #8]
 800c790:	4682      	mov	sl, r0
 800c792:	468b      	mov	fp, r1
 800c794:	3501      	adds	r5, #1
 800c796:	4628      	mov	r0, r5
 800c798:	f7f3 fee4 	bl	8000564 <__aeabi_i2d>
 800c79c:	4652      	mov	r2, sl
 800c79e:	465b      	mov	r3, fp
 800c7a0:	f7f3 ff4a 	bl	8000638 <__aeabi_dmul>
 800c7a4:	4b82      	ldr	r3, [pc, #520]	; (800c9b0 <_dtoa_r+0x628>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f7f3 fd90 	bl	80002cc <__adddf3>
 800c7ac:	46d0      	mov	r8, sl
 800c7ae:	46d9      	mov	r9, fp
 800c7b0:	4682      	mov	sl, r0
 800c7b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c7b6:	2e00      	cmp	r6, #0
 800c7b8:	d158      	bne.n	800c86c <_dtoa_r+0x4e4>
 800c7ba:	4b7e      	ldr	r3, [pc, #504]	; (800c9b4 <_dtoa_r+0x62c>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	4640      	mov	r0, r8
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	f7f3 fd81 	bl	80002c8 <__aeabi_dsub>
 800c7c6:	4652      	mov	r2, sl
 800c7c8:	465b      	mov	r3, fp
 800c7ca:	4680      	mov	r8, r0
 800c7cc:	4689      	mov	r9, r1
 800c7ce:	f7f4 f9c3 	bl	8000b58 <__aeabi_dcmpgt>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	f040 8295 	bne.w	800cd02 <_dtoa_r+0x97a>
 800c7d8:	4652      	mov	r2, sl
 800c7da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7de:	4640      	mov	r0, r8
 800c7e0:	4649      	mov	r1, r9
 800c7e2:	f7f4 f99b 	bl	8000b1c <__aeabi_dcmplt>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f040 8289 	bne.w	800ccfe <_dtoa_r+0x976>
 800c7ec:	ec5b ab19 	vmov	sl, fp, d9
 800c7f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f2c0 8148 	blt.w	800ca88 <_dtoa_r+0x700>
 800c7f8:	9a00      	ldr	r2, [sp, #0]
 800c7fa:	2a0e      	cmp	r2, #14
 800c7fc:	f300 8144 	bgt.w	800ca88 <_dtoa_r+0x700>
 800c800:	4b67      	ldr	r3, [pc, #412]	; (800c9a0 <_dtoa_r+0x618>)
 800c802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c806:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f280 80d5 	bge.w	800c9bc <_dtoa_r+0x634>
 800c812:	9b03      	ldr	r3, [sp, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	f300 80d1 	bgt.w	800c9bc <_dtoa_r+0x634>
 800c81a:	f040 826f 	bne.w	800ccfc <_dtoa_r+0x974>
 800c81e:	4b65      	ldr	r3, [pc, #404]	; (800c9b4 <_dtoa_r+0x62c>)
 800c820:	2200      	movs	r2, #0
 800c822:	4640      	mov	r0, r8
 800c824:	4649      	mov	r1, r9
 800c826:	f7f3 ff07 	bl	8000638 <__aeabi_dmul>
 800c82a:	4652      	mov	r2, sl
 800c82c:	465b      	mov	r3, fp
 800c82e:	f7f4 f989 	bl	8000b44 <__aeabi_dcmpge>
 800c832:	9e03      	ldr	r6, [sp, #12]
 800c834:	4637      	mov	r7, r6
 800c836:	2800      	cmp	r0, #0
 800c838:	f040 8245 	bne.w	800ccc6 <_dtoa_r+0x93e>
 800c83c:	9d01      	ldr	r5, [sp, #4]
 800c83e:	2331      	movs	r3, #49	; 0x31
 800c840:	f805 3b01 	strb.w	r3, [r5], #1
 800c844:	9b00      	ldr	r3, [sp, #0]
 800c846:	3301      	adds	r3, #1
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	e240      	b.n	800ccce <_dtoa_r+0x946>
 800c84c:	07f2      	lsls	r2, r6, #31
 800c84e:	d505      	bpl.n	800c85c <_dtoa_r+0x4d4>
 800c850:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c854:	f7f3 fef0 	bl	8000638 <__aeabi_dmul>
 800c858:	3501      	adds	r5, #1
 800c85a:	2301      	movs	r3, #1
 800c85c:	1076      	asrs	r6, r6, #1
 800c85e:	3708      	adds	r7, #8
 800c860:	e777      	b.n	800c752 <_dtoa_r+0x3ca>
 800c862:	2502      	movs	r5, #2
 800c864:	e779      	b.n	800c75a <_dtoa_r+0x3d2>
 800c866:	9f00      	ldr	r7, [sp, #0]
 800c868:	9e03      	ldr	r6, [sp, #12]
 800c86a:	e794      	b.n	800c796 <_dtoa_r+0x40e>
 800c86c:	9901      	ldr	r1, [sp, #4]
 800c86e:	4b4c      	ldr	r3, [pc, #304]	; (800c9a0 <_dtoa_r+0x618>)
 800c870:	4431      	add	r1, r6
 800c872:	910d      	str	r1, [sp, #52]	; 0x34
 800c874:	9908      	ldr	r1, [sp, #32]
 800c876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c87a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c87e:	2900      	cmp	r1, #0
 800c880:	d043      	beq.n	800c90a <_dtoa_r+0x582>
 800c882:	494d      	ldr	r1, [pc, #308]	; (800c9b8 <_dtoa_r+0x630>)
 800c884:	2000      	movs	r0, #0
 800c886:	f7f4 f801 	bl	800088c <__aeabi_ddiv>
 800c88a:	4652      	mov	r2, sl
 800c88c:	465b      	mov	r3, fp
 800c88e:	f7f3 fd1b 	bl	80002c8 <__aeabi_dsub>
 800c892:	9d01      	ldr	r5, [sp, #4]
 800c894:	4682      	mov	sl, r0
 800c896:	468b      	mov	fp, r1
 800c898:	4649      	mov	r1, r9
 800c89a:	4640      	mov	r0, r8
 800c89c:	f7f4 f97c 	bl	8000b98 <__aeabi_d2iz>
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	f7f3 fe5f 	bl	8000564 <__aeabi_i2d>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	f7f3 fd0b 	bl	80002c8 <__aeabi_dsub>
 800c8b2:	3630      	adds	r6, #48	; 0x30
 800c8b4:	f805 6b01 	strb.w	r6, [r5], #1
 800c8b8:	4652      	mov	r2, sl
 800c8ba:	465b      	mov	r3, fp
 800c8bc:	4680      	mov	r8, r0
 800c8be:	4689      	mov	r9, r1
 800c8c0:	f7f4 f92c 	bl	8000b1c <__aeabi_dcmplt>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d163      	bne.n	800c990 <_dtoa_r+0x608>
 800c8c8:	4642      	mov	r2, r8
 800c8ca:	464b      	mov	r3, r9
 800c8cc:	4936      	ldr	r1, [pc, #216]	; (800c9a8 <_dtoa_r+0x620>)
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	f7f3 fcfa 	bl	80002c8 <__aeabi_dsub>
 800c8d4:	4652      	mov	r2, sl
 800c8d6:	465b      	mov	r3, fp
 800c8d8:	f7f4 f920 	bl	8000b1c <__aeabi_dcmplt>
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	f040 80b5 	bne.w	800ca4c <_dtoa_r+0x6c4>
 800c8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8e4:	429d      	cmp	r5, r3
 800c8e6:	d081      	beq.n	800c7ec <_dtoa_r+0x464>
 800c8e8:	4b30      	ldr	r3, [pc, #192]	; (800c9ac <_dtoa_r+0x624>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	4650      	mov	r0, sl
 800c8ee:	4659      	mov	r1, fp
 800c8f0:	f7f3 fea2 	bl	8000638 <__aeabi_dmul>
 800c8f4:	4b2d      	ldr	r3, [pc, #180]	; (800c9ac <_dtoa_r+0x624>)
 800c8f6:	4682      	mov	sl, r0
 800c8f8:	468b      	mov	fp, r1
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	4649      	mov	r1, r9
 800c8fe:	2200      	movs	r2, #0
 800c900:	f7f3 fe9a 	bl	8000638 <__aeabi_dmul>
 800c904:	4680      	mov	r8, r0
 800c906:	4689      	mov	r9, r1
 800c908:	e7c6      	b.n	800c898 <_dtoa_r+0x510>
 800c90a:	4650      	mov	r0, sl
 800c90c:	4659      	mov	r1, fp
 800c90e:	f7f3 fe93 	bl	8000638 <__aeabi_dmul>
 800c912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c914:	9d01      	ldr	r5, [sp, #4]
 800c916:	930f      	str	r3, [sp, #60]	; 0x3c
 800c918:	4682      	mov	sl, r0
 800c91a:	468b      	mov	fp, r1
 800c91c:	4649      	mov	r1, r9
 800c91e:	4640      	mov	r0, r8
 800c920:	f7f4 f93a 	bl	8000b98 <__aeabi_d2iz>
 800c924:	4606      	mov	r6, r0
 800c926:	f7f3 fe1d 	bl	8000564 <__aeabi_i2d>
 800c92a:	3630      	adds	r6, #48	; 0x30
 800c92c:	4602      	mov	r2, r0
 800c92e:	460b      	mov	r3, r1
 800c930:	4640      	mov	r0, r8
 800c932:	4649      	mov	r1, r9
 800c934:	f7f3 fcc8 	bl	80002c8 <__aeabi_dsub>
 800c938:	f805 6b01 	strb.w	r6, [r5], #1
 800c93c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c93e:	429d      	cmp	r5, r3
 800c940:	4680      	mov	r8, r0
 800c942:	4689      	mov	r9, r1
 800c944:	f04f 0200 	mov.w	r2, #0
 800c948:	d124      	bne.n	800c994 <_dtoa_r+0x60c>
 800c94a:	4b1b      	ldr	r3, [pc, #108]	; (800c9b8 <_dtoa_r+0x630>)
 800c94c:	4650      	mov	r0, sl
 800c94e:	4659      	mov	r1, fp
 800c950:	f7f3 fcbc 	bl	80002cc <__adddf3>
 800c954:	4602      	mov	r2, r0
 800c956:	460b      	mov	r3, r1
 800c958:	4640      	mov	r0, r8
 800c95a:	4649      	mov	r1, r9
 800c95c:	f7f4 f8fc 	bl	8000b58 <__aeabi_dcmpgt>
 800c960:	2800      	cmp	r0, #0
 800c962:	d173      	bne.n	800ca4c <_dtoa_r+0x6c4>
 800c964:	4652      	mov	r2, sl
 800c966:	465b      	mov	r3, fp
 800c968:	4913      	ldr	r1, [pc, #76]	; (800c9b8 <_dtoa_r+0x630>)
 800c96a:	2000      	movs	r0, #0
 800c96c:	f7f3 fcac 	bl	80002c8 <__aeabi_dsub>
 800c970:	4602      	mov	r2, r0
 800c972:	460b      	mov	r3, r1
 800c974:	4640      	mov	r0, r8
 800c976:	4649      	mov	r1, r9
 800c978:	f7f4 f8d0 	bl	8000b1c <__aeabi_dcmplt>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	f43f af35 	beq.w	800c7ec <_dtoa_r+0x464>
 800c982:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c984:	1e6b      	subs	r3, r5, #1
 800c986:	930f      	str	r3, [sp, #60]	; 0x3c
 800c988:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c98c:	2b30      	cmp	r3, #48	; 0x30
 800c98e:	d0f8      	beq.n	800c982 <_dtoa_r+0x5fa>
 800c990:	9700      	str	r7, [sp, #0]
 800c992:	e049      	b.n	800ca28 <_dtoa_r+0x6a0>
 800c994:	4b05      	ldr	r3, [pc, #20]	; (800c9ac <_dtoa_r+0x624>)
 800c996:	f7f3 fe4f 	bl	8000638 <__aeabi_dmul>
 800c99a:	4680      	mov	r8, r0
 800c99c:	4689      	mov	r9, r1
 800c99e:	e7bd      	b.n	800c91c <_dtoa_r+0x594>
 800c9a0:	0800fe58 	.word	0x0800fe58
 800c9a4:	0800fe30 	.word	0x0800fe30
 800c9a8:	3ff00000 	.word	0x3ff00000
 800c9ac:	40240000 	.word	0x40240000
 800c9b0:	401c0000 	.word	0x401c0000
 800c9b4:	40140000 	.word	0x40140000
 800c9b8:	3fe00000 	.word	0x3fe00000
 800c9bc:	9d01      	ldr	r5, [sp, #4]
 800c9be:	4656      	mov	r6, sl
 800c9c0:	465f      	mov	r7, fp
 800c9c2:	4642      	mov	r2, r8
 800c9c4:	464b      	mov	r3, r9
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	4639      	mov	r1, r7
 800c9ca:	f7f3 ff5f 	bl	800088c <__aeabi_ddiv>
 800c9ce:	f7f4 f8e3 	bl	8000b98 <__aeabi_d2iz>
 800c9d2:	4682      	mov	sl, r0
 800c9d4:	f7f3 fdc6 	bl	8000564 <__aeabi_i2d>
 800c9d8:	4642      	mov	r2, r8
 800c9da:	464b      	mov	r3, r9
 800c9dc:	f7f3 fe2c 	bl	8000638 <__aeabi_dmul>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	4639      	mov	r1, r7
 800c9e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c9ec:	f7f3 fc6c 	bl	80002c8 <__aeabi_dsub>
 800c9f0:	f805 6b01 	strb.w	r6, [r5], #1
 800c9f4:	9e01      	ldr	r6, [sp, #4]
 800c9f6:	9f03      	ldr	r7, [sp, #12]
 800c9f8:	1bae      	subs	r6, r5, r6
 800c9fa:	42b7      	cmp	r7, r6
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	d135      	bne.n	800ca6e <_dtoa_r+0x6e6>
 800ca02:	f7f3 fc63 	bl	80002cc <__adddf3>
 800ca06:	4642      	mov	r2, r8
 800ca08:	464b      	mov	r3, r9
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	460f      	mov	r7, r1
 800ca0e:	f7f4 f8a3 	bl	8000b58 <__aeabi_dcmpgt>
 800ca12:	b9d0      	cbnz	r0, 800ca4a <_dtoa_r+0x6c2>
 800ca14:	4642      	mov	r2, r8
 800ca16:	464b      	mov	r3, r9
 800ca18:	4630      	mov	r0, r6
 800ca1a:	4639      	mov	r1, r7
 800ca1c:	f7f4 f874 	bl	8000b08 <__aeabi_dcmpeq>
 800ca20:	b110      	cbz	r0, 800ca28 <_dtoa_r+0x6a0>
 800ca22:	f01a 0f01 	tst.w	sl, #1
 800ca26:	d110      	bne.n	800ca4a <_dtoa_r+0x6c2>
 800ca28:	4620      	mov	r0, r4
 800ca2a:	ee18 1a10 	vmov	r1, s16
 800ca2e:	f000 fbc5 	bl	800d1bc <_Bfree>
 800ca32:	2300      	movs	r3, #0
 800ca34:	9800      	ldr	r0, [sp, #0]
 800ca36:	702b      	strb	r3, [r5, #0]
 800ca38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	6018      	str	r0, [r3, #0]
 800ca3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f43f acf1 	beq.w	800c428 <_dtoa_r+0xa0>
 800ca46:	601d      	str	r5, [r3, #0]
 800ca48:	e4ee      	b.n	800c428 <_dtoa_r+0xa0>
 800ca4a:	9f00      	ldr	r7, [sp, #0]
 800ca4c:	462b      	mov	r3, r5
 800ca4e:	461d      	mov	r5, r3
 800ca50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca54:	2a39      	cmp	r2, #57	; 0x39
 800ca56:	d106      	bne.n	800ca66 <_dtoa_r+0x6de>
 800ca58:	9a01      	ldr	r2, [sp, #4]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d1f7      	bne.n	800ca4e <_dtoa_r+0x6c6>
 800ca5e:	9901      	ldr	r1, [sp, #4]
 800ca60:	2230      	movs	r2, #48	; 0x30
 800ca62:	3701      	adds	r7, #1
 800ca64:	700a      	strb	r2, [r1, #0]
 800ca66:	781a      	ldrb	r2, [r3, #0]
 800ca68:	3201      	adds	r2, #1
 800ca6a:	701a      	strb	r2, [r3, #0]
 800ca6c:	e790      	b.n	800c990 <_dtoa_r+0x608>
 800ca6e:	4ba6      	ldr	r3, [pc, #664]	; (800cd08 <_dtoa_r+0x980>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	f7f3 fde1 	bl	8000638 <__aeabi_dmul>
 800ca76:	2200      	movs	r2, #0
 800ca78:	2300      	movs	r3, #0
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	460f      	mov	r7, r1
 800ca7e:	f7f4 f843 	bl	8000b08 <__aeabi_dcmpeq>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d09d      	beq.n	800c9c2 <_dtoa_r+0x63a>
 800ca86:	e7cf      	b.n	800ca28 <_dtoa_r+0x6a0>
 800ca88:	9a08      	ldr	r2, [sp, #32]
 800ca8a:	2a00      	cmp	r2, #0
 800ca8c:	f000 80d7 	beq.w	800cc3e <_dtoa_r+0x8b6>
 800ca90:	9a06      	ldr	r2, [sp, #24]
 800ca92:	2a01      	cmp	r2, #1
 800ca94:	f300 80ba 	bgt.w	800cc0c <_dtoa_r+0x884>
 800ca98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca9a:	2a00      	cmp	r2, #0
 800ca9c:	f000 80b2 	beq.w	800cc04 <_dtoa_r+0x87c>
 800caa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800caa4:	9e07      	ldr	r6, [sp, #28]
 800caa6:	9d04      	ldr	r5, [sp, #16]
 800caa8:	9a04      	ldr	r2, [sp, #16]
 800caaa:	441a      	add	r2, r3
 800caac:	9204      	str	r2, [sp, #16]
 800caae:	9a05      	ldr	r2, [sp, #20]
 800cab0:	2101      	movs	r1, #1
 800cab2:	441a      	add	r2, r3
 800cab4:	4620      	mov	r0, r4
 800cab6:	9205      	str	r2, [sp, #20]
 800cab8:	f000 fc38 	bl	800d32c <__i2b>
 800cabc:	4607      	mov	r7, r0
 800cabe:	2d00      	cmp	r5, #0
 800cac0:	dd0c      	ble.n	800cadc <_dtoa_r+0x754>
 800cac2:	9b05      	ldr	r3, [sp, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	dd09      	ble.n	800cadc <_dtoa_r+0x754>
 800cac8:	42ab      	cmp	r3, r5
 800caca:	9a04      	ldr	r2, [sp, #16]
 800cacc:	bfa8      	it	ge
 800cace:	462b      	movge	r3, r5
 800cad0:	1ad2      	subs	r2, r2, r3
 800cad2:	9204      	str	r2, [sp, #16]
 800cad4:	9a05      	ldr	r2, [sp, #20]
 800cad6:	1aed      	subs	r5, r5, r3
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	9305      	str	r3, [sp, #20]
 800cadc:	9b07      	ldr	r3, [sp, #28]
 800cade:	b31b      	cbz	r3, 800cb28 <_dtoa_r+0x7a0>
 800cae0:	9b08      	ldr	r3, [sp, #32]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f000 80af 	beq.w	800cc46 <_dtoa_r+0x8be>
 800cae8:	2e00      	cmp	r6, #0
 800caea:	dd13      	ble.n	800cb14 <_dtoa_r+0x78c>
 800caec:	4639      	mov	r1, r7
 800caee:	4632      	mov	r2, r6
 800caf0:	4620      	mov	r0, r4
 800caf2:	f000 fcdb 	bl	800d4ac <__pow5mult>
 800caf6:	ee18 2a10 	vmov	r2, s16
 800cafa:	4601      	mov	r1, r0
 800cafc:	4607      	mov	r7, r0
 800cafe:	4620      	mov	r0, r4
 800cb00:	f000 fc2a 	bl	800d358 <__multiply>
 800cb04:	ee18 1a10 	vmov	r1, s16
 800cb08:	4680      	mov	r8, r0
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f000 fb56 	bl	800d1bc <_Bfree>
 800cb10:	ee08 8a10 	vmov	s16, r8
 800cb14:	9b07      	ldr	r3, [sp, #28]
 800cb16:	1b9a      	subs	r2, r3, r6
 800cb18:	d006      	beq.n	800cb28 <_dtoa_r+0x7a0>
 800cb1a:	ee18 1a10 	vmov	r1, s16
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f000 fcc4 	bl	800d4ac <__pow5mult>
 800cb24:	ee08 0a10 	vmov	s16, r0
 800cb28:	2101      	movs	r1, #1
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f000 fbfe 	bl	800d32c <__i2b>
 800cb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	4606      	mov	r6, r0
 800cb36:	f340 8088 	ble.w	800cc4a <_dtoa_r+0x8c2>
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	4601      	mov	r1, r0
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f000 fcb4 	bl	800d4ac <__pow5mult>
 800cb44:	9b06      	ldr	r3, [sp, #24]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	4606      	mov	r6, r0
 800cb4a:	f340 8081 	ble.w	800cc50 <_dtoa_r+0x8c8>
 800cb4e:	f04f 0800 	mov.w	r8, #0
 800cb52:	6933      	ldr	r3, [r6, #16]
 800cb54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb58:	6918      	ldr	r0, [r3, #16]
 800cb5a:	f000 fb97 	bl	800d28c <__hi0bits>
 800cb5e:	f1c0 0020 	rsb	r0, r0, #32
 800cb62:	9b05      	ldr	r3, [sp, #20]
 800cb64:	4418      	add	r0, r3
 800cb66:	f010 001f 	ands.w	r0, r0, #31
 800cb6a:	f000 8092 	beq.w	800cc92 <_dtoa_r+0x90a>
 800cb6e:	f1c0 0320 	rsb	r3, r0, #32
 800cb72:	2b04      	cmp	r3, #4
 800cb74:	f340 808a 	ble.w	800cc8c <_dtoa_r+0x904>
 800cb78:	f1c0 001c 	rsb	r0, r0, #28
 800cb7c:	9b04      	ldr	r3, [sp, #16]
 800cb7e:	4403      	add	r3, r0
 800cb80:	9304      	str	r3, [sp, #16]
 800cb82:	9b05      	ldr	r3, [sp, #20]
 800cb84:	4403      	add	r3, r0
 800cb86:	4405      	add	r5, r0
 800cb88:	9305      	str	r3, [sp, #20]
 800cb8a:	9b04      	ldr	r3, [sp, #16]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	dd07      	ble.n	800cba0 <_dtoa_r+0x818>
 800cb90:	ee18 1a10 	vmov	r1, s16
 800cb94:	461a      	mov	r2, r3
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 fce2 	bl	800d560 <__lshift>
 800cb9c:	ee08 0a10 	vmov	s16, r0
 800cba0:	9b05      	ldr	r3, [sp, #20]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	dd05      	ble.n	800cbb2 <_dtoa_r+0x82a>
 800cba6:	4631      	mov	r1, r6
 800cba8:	461a      	mov	r2, r3
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f000 fcd8 	bl	800d560 <__lshift>
 800cbb0:	4606      	mov	r6, r0
 800cbb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d06e      	beq.n	800cc96 <_dtoa_r+0x90e>
 800cbb8:	ee18 0a10 	vmov	r0, s16
 800cbbc:	4631      	mov	r1, r6
 800cbbe:	f000 fd3f 	bl	800d640 <__mcmp>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	da67      	bge.n	800cc96 <_dtoa_r+0x90e>
 800cbc6:	9b00      	ldr	r3, [sp, #0]
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	ee18 1a10 	vmov	r1, s16
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	220a      	movs	r2, #10
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f000 fb13 	bl	800d200 <__multadd>
 800cbda:	9b08      	ldr	r3, [sp, #32]
 800cbdc:	ee08 0a10 	vmov	s16, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f000 81b1 	beq.w	800cf48 <_dtoa_r+0xbc0>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	4639      	mov	r1, r7
 800cbea:	220a      	movs	r2, #10
 800cbec:	4620      	mov	r0, r4
 800cbee:	f000 fb07 	bl	800d200 <__multadd>
 800cbf2:	9b02      	ldr	r3, [sp, #8]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	4607      	mov	r7, r0
 800cbf8:	f300 808e 	bgt.w	800cd18 <_dtoa_r+0x990>
 800cbfc:	9b06      	ldr	r3, [sp, #24]
 800cbfe:	2b02      	cmp	r3, #2
 800cc00:	dc51      	bgt.n	800cca6 <_dtoa_r+0x91e>
 800cc02:	e089      	b.n	800cd18 <_dtoa_r+0x990>
 800cc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc0a:	e74b      	b.n	800caa4 <_dtoa_r+0x71c>
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	1e5e      	subs	r6, r3, #1
 800cc10:	9b07      	ldr	r3, [sp, #28]
 800cc12:	42b3      	cmp	r3, r6
 800cc14:	bfbf      	itttt	lt
 800cc16:	9b07      	ldrlt	r3, [sp, #28]
 800cc18:	9607      	strlt	r6, [sp, #28]
 800cc1a:	1af2      	sublt	r2, r6, r3
 800cc1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cc1e:	bfb6      	itet	lt
 800cc20:	189b      	addlt	r3, r3, r2
 800cc22:	1b9e      	subge	r6, r3, r6
 800cc24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cc26:	9b03      	ldr	r3, [sp, #12]
 800cc28:	bfb8      	it	lt
 800cc2a:	2600      	movlt	r6, #0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	bfb7      	itett	lt
 800cc30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cc34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cc38:	1a9d      	sublt	r5, r3, r2
 800cc3a:	2300      	movlt	r3, #0
 800cc3c:	e734      	b.n	800caa8 <_dtoa_r+0x720>
 800cc3e:	9e07      	ldr	r6, [sp, #28]
 800cc40:	9d04      	ldr	r5, [sp, #16]
 800cc42:	9f08      	ldr	r7, [sp, #32]
 800cc44:	e73b      	b.n	800cabe <_dtoa_r+0x736>
 800cc46:	9a07      	ldr	r2, [sp, #28]
 800cc48:	e767      	b.n	800cb1a <_dtoa_r+0x792>
 800cc4a:	9b06      	ldr	r3, [sp, #24]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	dc18      	bgt.n	800cc82 <_dtoa_r+0x8fa>
 800cc50:	f1ba 0f00 	cmp.w	sl, #0
 800cc54:	d115      	bne.n	800cc82 <_dtoa_r+0x8fa>
 800cc56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc5a:	b993      	cbnz	r3, 800cc82 <_dtoa_r+0x8fa>
 800cc5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc60:	0d1b      	lsrs	r3, r3, #20
 800cc62:	051b      	lsls	r3, r3, #20
 800cc64:	b183      	cbz	r3, 800cc88 <_dtoa_r+0x900>
 800cc66:	9b04      	ldr	r3, [sp, #16]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	9304      	str	r3, [sp, #16]
 800cc6c:	9b05      	ldr	r3, [sp, #20]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	9305      	str	r3, [sp, #20]
 800cc72:	f04f 0801 	mov.w	r8, #1
 800cc76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f47f af6a 	bne.w	800cb52 <_dtoa_r+0x7ca>
 800cc7e:	2001      	movs	r0, #1
 800cc80:	e76f      	b.n	800cb62 <_dtoa_r+0x7da>
 800cc82:	f04f 0800 	mov.w	r8, #0
 800cc86:	e7f6      	b.n	800cc76 <_dtoa_r+0x8ee>
 800cc88:	4698      	mov	r8, r3
 800cc8a:	e7f4      	b.n	800cc76 <_dtoa_r+0x8ee>
 800cc8c:	f43f af7d 	beq.w	800cb8a <_dtoa_r+0x802>
 800cc90:	4618      	mov	r0, r3
 800cc92:	301c      	adds	r0, #28
 800cc94:	e772      	b.n	800cb7c <_dtoa_r+0x7f4>
 800cc96:	9b03      	ldr	r3, [sp, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	dc37      	bgt.n	800cd0c <_dtoa_r+0x984>
 800cc9c:	9b06      	ldr	r3, [sp, #24]
 800cc9e:	2b02      	cmp	r3, #2
 800cca0:	dd34      	ble.n	800cd0c <_dtoa_r+0x984>
 800cca2:	9b03      	ldr	r3, [sp, #12]
 800cca4:	9302      	str	r3, [sp, #8]
 800cca6:	9b02      	ldr	r3, [sp, #8]
 800cca8:	b96b      	cbnz	r3, 800ccc6 <_dtoa_r+0x93e>
 800ccaa:	4631      	mov	r1, r6
 800ccac:	2205      	movs	r2, #5
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f000 faa6 	bl	800d200 <__multadd>
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	ee18 0a10 	vmov	r0, s16
 800ccbc:	f000 fcc0 	bl	800d640 <__mcmp>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	f73f adbb 	bgt.w	800c83c <_dtoa_r+0x4b4>
 800ccc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc8:	9d01      	ldr	r5, [sp, #4]
 800ccca:	43db      	mvns	r3, r3
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	f04f 0800 	mov.w	r8, #0
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f000 fa71 	bl	800d1bc <_Bfree>
 800ccda:	2f00      	cmp	r7, #0
 800ccdc:	f43f aea4 	beq.w	800ca28 <_dtoa_r+0x6a0>
 800cce0:	f1b8 0f00 	cmp.w	r8, #0
 800cce4:	d005      	beq.n	800ccf2 <_dtoa_r+0x96a>
 800cce6:	45b8      	cmp	r8, r7
 800cce8:	d003      	beq.n	800ccf2 <_dtoa_r+0x96a>
 800ccea:	4641      	mov	r1, r8
 800ccec:	4620      	mov	r0, r4
 800ccee:	f000 fa65 	bl	800d1bc <_Bfree>
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f000 fa61 	bl	800d1bc <_Bfree>
 800ccfa:	e695      	b.n	800ca28 <_dtoa_r+0x6a0>
 800ccfc:	2600      	movs	r6, #0
 800ccfe:	4637      	mov	r7, r6
 800cd00:	e7e1      	b.n	800ccc6 <_dtoa_r+0x93e>
 800cd02:	9700      	str	r7, [sp, #0]
 800cd04:	4637      	mov	r7, r6
 800cd06:	e599      	b.n	800c83c <_dtoa_r+0x4b4>
 800cd08:	40240000 	.word	0x40240000
 800cd0c:	9b08      	ldr	r3, [sp, #32]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f000 80ca 	beq.w	800cea8 <_dtoa_r+0xb20>
 800cd14:	9b03      	ldr	r3, [sp, #12]
 800cd16:	9302      	str	r3, [sp, #8]
 800cd18:	2d00      	cmp	r5, #0
 800cd1a:	dd05      	ble.n	800cd28 <_dtoa_r+0x9a0>
 800cd1c:	4639      	mov	r1, r7
 800cd1e:	462a      	mov	r2, r5
 800cd20:	4620      	mov	r0, r4
 800cd22:	f000 fc1d 	bl	800d560 <__lshift>
 800cd26:	4607      	mov	r7, r0
 800cd28:	f1b8 0f00 	cmp.w	r8, #0
 800cd2c:	d05b      	beq.n	800cde6 <_dtoa_r+0xa5e>
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	4620      	mov	r0, r4
 800cd32:	f000 fa03 	bl	800d13c <_Balloc>
 800cd36:	4605      	mov	r5, r0
 800cd38:	b928      	cbnz	r0, 800cd46 <_dtoa_r+0x9be>
 800cd3a:	4b87      	ldr	r3, [pc, #540]	; (800cf58 <_dtoa_r+0xbd0>)
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd42:	f7ff bb3b 	b.w	800c3bc <_dtoa_r+0x34>
 800cd46:	693a      	ldr	r2, [r7, #16]
 800cd48:	3202      	adds	r2, #2
 800cd4a:	0092      	lsls	r2, r2, #2
 800cd4c:	f107 010c 	add.w	r1, r7, #12
 800cd50:	300c      	adds	r0, #12
 800cd52:	f7fe fc68 	bl	800b626 <memcpy>
 800cd56:	2201      	movs	r2, #1
 800cd58:	4629      	mov	r1, r5
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f000 fc00 	bl	800d560 <__lshift>
 800cd60:	9b01      	ldr	r3, [sp, #4]
 800cd62:	f103 0901 	add.w	r9, r3, #1
 800cd66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	9305      	str	r3, [sp, #20]
 800cd6e:	f00a 0301 	and.w	r3, sl, #1
 800cd72:	46b8      	mov	r8, r7
 800cd74:	9304      	str	r3, [sp, #16]
 800cd76:	4607      	mov	r7, r0
 800cd78:	4631      	mov	r1, r6
 800cd7a:	ee18 0a10 	vmov	r0, s16
 800cd7e:	f7ff fa75 	bl	800c26c <quorem>
 800cd82:	4641      	mov	r1, r8
 800cd84:	9002      	str	r0, [sp, #8]
 800cd86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd8a:	ee18 0a10 	vmov	r0, s16
 800cd8e:	f000 fc57 	bl	800d640 <__mcmp>
 800cd92:	463a      	mov	r2, r7
 800cd94:	9003      	str	r0, [sp, #12]
 800cd96:	4631      	mov	r1, r6
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 fc6d 	bl	800d678 <__mdiff>
 800cd9e:	68c2      	ldr	r2, [r0, #12]
 800cda0:	f109 3bff 	add.w	fp, r9, #4294967295
 800cda4:	4605      	mov	r5, r0
 800cda6:	bb02      	cbnz	r2, 800cdea <_dtoa_r+0xa62>
 800cda8:	4601      	mov	r1, r0
 800cdaa:	ee18 0a10 	vmov	r0, s16
 800cdae:	f000 fc47 	bl	800d640 <__mcmp>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	4629      	mov	r1, r5
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	9207      	str	r2, [sp, #28]
 800cdba:	f000 f9ff 	bl	800d1bc <_Bfree>
 800cdbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cdc2:	ea43 0102 	orr.w	r1, r3, r2
 800cdc6:	9b04      	ldr	r3, [sp, #16]
 800cdc8:	430b      	orrs	r3, r1
 800cdca:	464d      	mov	r5, r9
 800cdcc:	d10f      	bne.n	800cdee <_dtoa_r+0xa66>
 800cdce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cdd2:	d02a      	beq.n	800ce2a <_dtoa_r+0xaa2>
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	dd02      	ble.n	800cde0 <_dtoa_r+0xa58>
 800cdda:	9b02      	ldr	r3, [sp, #8]
 800cddc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cde0:	f88b a000 	strb.w	sl, [fp]
 800cde4:	e775      	b.n	800ccd2 <_dtoa_r+0x94a>
 800cde6:	4638      	mov	r0, r7
 800cde8:	e7ba      	b.n	800cd60 <_dtoa_r+0x9d8>
 800cdea:	2201      	movs	r2, #1
 800cdec:	e7e2      	b.n	800cdb4 <_dtoa_r+0xa2c>
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	db04      	blt.n	800cdfe <_dtoa_r+0xa76>
 800cdf4:	9906      	ldr	r1, [sp, #24]
 800cdf6:	430b      	orrs	r3, r1
 800cdf8:	9904      	ldr	r1, [sp, #16]
 800cdfa:	430b      	orrs	r3, r1
 800cdfc:	d122      	bne.n	800ce44 <_dtoa_r+0xabc>
 800cdfe:	2a00      	cmp	r2, #0
 800ce00:	ddee      	ble.n	800cde0 <_dtoa_r+0xa58>
 800ce02:	ee18 1a10 	vmov	r1, s16
 800ce06:	2201      	movs	r2, #1
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f000 fba9 	bl	800d560 <__lshift>
 800ce0e:	4631      	mov	r1, r6
 800ce10:	ee08 0a10 	vmov	s16, r0
 800ce14:	f000 fc14 	bl	800d640 <__mcmp>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	dc03      	bgt.n	800ce24 <_dtoa_r+0xa9c>
 800ce1c:	d1e0      	bne.n	800cde0 <_dtoa_r+0xa58>
 800ce1e:	f01a 0f01 	tst.w	sl, #1
 800ce22:	d0dd      	beq.n	800cde0 <_dtoa_r+0xa58>
 800ce24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce28:	d1d7      	bne.n	800cdda <_dtoa_r+0xa52>
 800ce2a:	2339      	movs	r3, #57	; 0x39
 800ce2c:	f88b 3000 	strb.w	r3, [fp]
 800ce30:	462b      	mov	r3, r5
 800ce32:	461d      	mov	r5, r3
 800ce34:	3b01      	subs	r3, #1
 800ce36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce3a:	2a39      	cmp	r2, #57	; 0x39
 800ce3c:	d071      	beq.n	800cf22 <_dtoa_r+0xb9a>
 800ce3e:	3201      	adds	r2, #1
 800ce40:	701a      	strb	r2, [r3, #0]
 800ce42:	e746      	b.n	800ccd2 <_dtoa_r+0x94a>
 800ce44:	2a00      	cmp	r2, #0
 800ce46:	dd07      	ble.n	800ce58 <_dtoa_r+0xad0>
 800ce48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce4c:	d0ed      	beq.n	800ce2a <_dtoa_r+0xaa2>
 800ce4e:	f10a 0301 	add.w	r3, sl, #1
 800ce52:	f88b 3000 	strb.w	r3, [fp]
 800ce56:	e73c      	b.n	800ccd2 <_dtoa_r+0x94a>
 800ce58:	9b05      	ldr	r3, [sp, #20]
 800ce5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ce5e:	4599      	cmp	r9, r3
 800ce60:	d047      	beq.n	800cef2 <_dtoa_r+0xb6a>
 800ce62:	ee18 1a10 	vmov	r1, s16
 800ce66:	2300      	movs	r3, #0
 800ce68:	220a      	movs	r2, #10
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f000 f9c8 	bl	800d200 <__multadd>
 800ce70:	45b8      	cmp	r8, r7
 800ce72:	ee08 0a10 	vmov	s16, r0
 800ce76:	f04f 0300 	mov.w	r3, #0
 800ce7a:	f04f 020a 	mov.w	r2, #10
 800ce7e:	4641      	mov	r1, r8
 800ce80:	4620      	mov	r0, r4
 800ce82:	d106      	bne.n	800ce92 <_dtoa_r+0xb0a>
 800ce84:	f000 f9bc 	bl	800d200 <__multadd>
 800ce88:	4680      	mov	r8, r0
 800ce8a:	4607      	mov	r7, r0
 800ce8c:	f109 0901 	add.w	r9, r9, #1
 800ce90:	e772      	b.n	800cd78 <_dtoa_r+0x9f0>
 800ce92:	f000 f9b5 	bl	800d200 <__multadd>
 800ce96:	4639      	mov	r1, r7
 800ce98:	4680      	mov	r8, r0
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	220a      	movs	r2, #10
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f000 f9ae 	bl	800d200 <__multadd>
 800cea4:	4607      	mov	r7, r0
 800cea6:	e7f1      	b.n	800ce8c <_dtoa_r+0xb04>
 800cea8:	9b03      	ldr	r3, [sp, #12]
 800ceaa:	9302      	str	r3, [sp, #8]
 800ceac:	9d01      	ldr	r5, [sp, #4]
 800ceae:	ee18 0a10 	vmov	r0, s16
 800ceb2:	4631      	mov	r1, r6
 800ceb4:	f7ff f9da 	bl	800c26c <quorem>
 800ceb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	f805 ab01 	strb.w	sl, [r5], #1
 800cec2:	1aea      	subs	r2, r5, r3
 800cec4:	9b02      	ldr	r3, [sp, #8]
 800cec6:	4293      	cmp	r3, r2
 800cec8:	dd09      	ble.n	800cede <_dtoa_r+0xb56>
 800ceca:	ee18 1a10 	vmov	r1, s16
 800cece:	2300      	movs	r3, #0
 800ced0:	220a      	movs	r2, #10
 800ced2:	4620      	mov	r0, r4
 800ced4:	f000 f994 	bl	800d200 <__multadd>
 800ced8:	ee08 0a10 	vmov	s16, r0
 800cedc:	e7e7      	b.n	800ceae <_dtoa_r+0xb26>
 800cede:	9b02      	ldr	r3, [sp, #8]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	bfc8      	it	gt
 800cee4:	461d      	movgt	r5, r3
 800cee6:	9b01      	ldr	r3, [sp, #4]
 800cee8:	bfd8      	it	le
 800ceea:	2501      	movle	r5, #1
 800ceec:	441d      	add	r5, r3
 800ceee:	f04f 0800 	mov.w	r8, #0
 800cef2:	ee18 1a10 	vmov	r1, s16
 800cef6:	2201      	movs	r2, #1
 800cef8:	4620      	mov	r0, r4
 800cefa:	f000 fb31 	bl	800d560 <__lshift>
 800cefe:	4631      	mov	r1, r6
 800cf00:	ee08 0a10 	vmov	s16, r0
 800cf04:	f000 fb9c 	bl	800d640 <__mcmp>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	dc91      	bgt.n	800ce30 <_dtoa_r+0xaa8>
 800cf0c:	d102      	bne.n	800cf14 <_dtoa_r+0xb8c>
 800cf0e:	f01a 0f01 	tst.w	sl, #1
 800cf12:	d18d      	bne.n	800ce30 <_dtoa_r+0xaa8>
 800cf14:	462b      	mov	r3, r5
 800cf16:	461d      	mov	r5, r3
 800cf18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf1c:	2a30      	cmp	r2, #48	; 0x30
 800cf1e:	d0fa      	beq.n	800cf16 <_dtoa_r+0xb8e>
 800cf20:	e6d7      	b.n	800ccd2 <_dtoa_r+0x94a>
 800cf22:	9a01      	ldr	r2, [sp, #4]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d184      	bne.n	800ce32 <_dtoa_r+0xaaa>
 800cf28:	9b00      	ldr	r3, [sp, #0]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	2331      	movs	r3, #49	; 0x31
 800cf30:	7013      	strb	r3, [r2, #0]
 800cf32:	e6ce      	b.n	800ccd2 <_dtoa_r+0x94a>
 800cf34:	4b09      	ldr	r3, [pc, #36]	; (800cf5c <_dtoa_r+0xbd4>)
 800cf36:	f7ff ba95 	b.w	800c464 <_dtoa_r+0xdc>
 800cf3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f47f aa6e 	bne.w	800c41e <_dtoa_r+0x96>
 800cf42:	4b07      	ldr	r3, [pc, #28]	; (800cf60 <_dtoa_r+0xbd8>)
 800cf44:	f7ff ba8e 	b.w	800c464 <_dtoa_r+0xdc>
 800cf48:	9b02      	ldr	r3, [sp, #8]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	dcae      	bgt.n	800ceac <_dtoa_r+0xb24>
 800cf4e:	9b06      	ldr	r3, [sp, #24]
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	f73f aea8 	bgt.w	800cca6 <_dtoa_r+0x91e>
 800cf56:	e7a9      	b.n	800ceac <_dtoa_r+0xb24>
 800cf58:	0800fdbf 	.word	0x0800fdbf
 800cf5c:	0800fd1c 	.word	0x0800fd1c
 800cf60:	0800fd40 	.word	0x0800fd40

0800cf64 <__sflush_r>:
 800cf64:	898a      	ldrh	r2, [r1, #12]
 800cf66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf6a:	4605      	mov	r5, r0
 800cf6c:	0710      	lsls	r0, r2, #28
 800cf6e:	460c      	mov	r4, r1
 800cf70:	d458      	bmi.n	800d024 <__sflush_r+0xc0>
 800cf72:	684b      	ldr	r3, [r1, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	dc05      	bgt.n	800cf84 <__sflush_r+0x20>
 800cf78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	dc02      	bgt.n	800cf84 <__sflush_r+0x20>
 800cf7e:	2000      	movs	r0, #0
 800cf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf86:	2e00      	cmp	r6, #0
 800cf88:	d0f9      	beq.n	800cf7e <__sflush_r+0x1a>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf90:	682f      	ldr	r7, [r5, #0]
 800cf92:	602b      	str	r3, [r5, #0]
 800cf94:	d032      	beq.n	800cffc <__sflush_r+0x98>
 800cf96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf98:	89a3      	ldrh	r3, [r4, #12]
 800cf9a:	075a      	lsls	r2, r3, #29
 800cf9c:	d505      	bpl.n	800cfaa <__sflush_r+0x46>
 800cf9e:	6863      	ldr	r3, [r4, #4]
 800cfa0:	1ac0      	subs	r0, r0, r3
 800cfa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfa4:	b10b      	cbz	r3, 800cfaa <__sflush_r+0x46>
 800cfa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfa8:	1ac0      	subs	r0, r0, r3
 800cfaa:	2300      	movs	r3, #0
 800cfac:	4602      	mov	r2, r0
 800cfae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfb0:	6a21      	ldr	r1, [r4, #32]
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	47b0      	blx	r6
 800cfb6:	1c43      	adds	r3, r0, #1
 800cfb8:	89a3      	ldrh	r3, [r4, #12]
 800cfba:	d106      	bne.n	800cfca <__sflush_r+0x66>
 800cfbc:	6829      	ldr	r1, [r5, #0]
 800cfbe:	291d      	cmp	r1, #29
 800cfc0:	d82c      	bhi.n	800d01c <__sflush_r+0xb8>
 800cfc2:	4a2a      	ldr	r2, [pc, #168]	; (800d06c <__sflush_r+0x108>)
 800cfc4:	40ca      	lsrs	r2, r1
 800cfc6:	07d6      	lsls	r6, r2, #31
 800cfc8:	d528      	bpl.n	800d01c <__sflush_r+0xb8>
 800cfca:	2200      	movs	r2, #0
 800cfcc:	6062      	str	r2, [r4, #4]
 800cfce:	04d9      	lsls	r1, r3, #19
 800cfd0:	6922      	ldr	r2, [r4, #16]
 800cfd2:	6022      	str	r2, [r4, #0]
 800cfd4:	d504      	bpl.n	800cfe0 <__sflush_r+0x7c>
 800cfd6:	1c42      	adds	r2, r0, #1
 800cfd8:	d101      	bne.n	800cfde <__sflush_r+0x7a>
 800cfda:	682b      	ldr	r3, [r5, #0]
 800cfdc:	b903      	cbnz	r3, 800cfe0 <__sflush_r+0x7c>
 800cfde:	6560      	str	r0, [r4, #84]	; 0x54
 800cfe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfe2:	602f      	str	r7, [r5, #0]
 800cfe4:	2900      	cmp	r1, #0
 800cfe6:	d0ca      	beq.n	800cf7e <__sflush_r+0x1a>
 800cfe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfec:	4299      	cmp	r1, r3
 800cfee:	d002      	beq.n	800cff6 <__sflush_r+0x92>
 800cff0:	4628      	mov	r0, r5
 800cff2:	f000 fc3d 	bl	800d870 <_free_r>
 800cff6:	2000      	movs	r0, #0
 800cff8:	6360      	str	r0, [r4, #52]	; 0x34
 800cffa:	e7c1      	b.n	800cf80 <__sflush_r+0x1c>
 800cffc:	6a21      	ldr	r1, [r4, #32]
 800cffe:	2301      	movs	r3, #1
 800d000:	4628      	mov	r0, r5
 800d002:	47b0      	blx	r6
 800d004:	1c41      	adds	r1, r0, #1
 800d006:	d1c7      	bne.n	800cf98 <__sflush_r+0x34>
 800d008:	682b      	ldr	r3, [r5, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d0c4      	beq.n	800cf98 <__sflush_r+0x34>
 800d00e:	2b1d      	cmp	r3, #29
 800d010:	d001      	beq.n	800d016 <__sflush_r+0xb2>
 800d012:	2b16      	cmp	r3, #22
 800d014:	d101      	bne.n	800d01a <__sflush_r+0xb6>
 800d016:	602f      	str	r7, [r5, #0]
 800d018:	e7b1      	b.n	800cf7e <__sflush_r+0x1a>
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d020:	81a3      	strh	r3, [r4, #12]
 800d022:	e7ad      	b.n	800cf80 <__sflush_r+0x1c>
 800d024:	690f      	ldr	r7, [r1, #16]
 800d026:	2f00      	cmp	r7, #0
 800d028:	d0a9      	beq.n	800cf7e <__sflush_r+0x1a>
 800d02a:	0793      	lsls	r3, r2, #30
 800d02c:	680e      	ldr	r6, [r1, #0]
 800d02e:	bf08      	it	eq
 800d030:	694b      	ldreq	r3, [r1, #20]
 800d032:	600f      	str	r7, [r1, #0]
 800d034:	bf18      	it	ne
 800d036:	2300      	movne	r3, #0
 800d038:	eba6 0807 	sub.w	r8, r6, r7
 800d03c:	608b      	str	r3, [r1, #8]
 800d03e:	f1b8 0f00 	cmp.w	r8, #0
 800d042:	dd9c      	ble.n	800cf7e <__sflush_r+0x1a>
 800d044:	6a21      	ldr	r1, [r4, #32]
 800d046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d048:	4643      	mov	r3, r8
 800d04a:	463a      	mov	r2, r7
 800d04c:	4628      	mov	r0, r5
 800d04e:	47b0      	blx	r6
 800d050:	2800      	cmp	r0, #0
 800d052:	dc06      	bgt.n	800d062 <__sflush_r+0xfe>
 800d054:	89a3      	ldrh	r3, [r4, #12]
 800d056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d05a:	81a3      	strh	r3, [r4, #12]
 800d05c:	f04f 30ff 	mov.w	r0, #4294967295
 800d060:	e78e      	b.n	800cf80 <__sflush_r+0x1c>
 800d062:	4407      	add	r7, r0
 800d064:	eba8 0800 	sub.w	r8, r8, r0
 800d068:	e7e9      	b.n	800d03e <__sflush_r+0xda>
 800d06a:	bf00      	nop
 800d06c:	20400001 	.word	0x20400001

0800d070 <_fflush_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	690b      	ldr	r3, [r1, #16]
 800d074:	4605      	mov	r5, r0
 800d076:	460c      	mov	r4, r1
 800d078:	b913      	cbnz	r3, 800d080 <_fflush_r+0x10>
 800d07a:	2500      	movs	r5, #0
 800d07c:	4628      	mov	r0, r5
 800d07e:	bd38      	pop	{r3, r4, r5, pc}
 800d080:	b118      	cbz	r0, 800d08a <_fflush_r+0x1a>
 800d082:	6983      	ldr	r3, [r0, #24]
 800d084:	b90b      	cbnz	r3, 800d08a <_fflush_r+0x1a>
 800d086:	f7fe fa09 	bl	800b49c <__sinit>
 800d08a:	4b14      	ldr	r3, [pc, #80]	; (800d0dc <_fflush_r+0x6c>)
 800d08c:	429c      	cmp	r4, r3
 800d08e:	d11b      	bne.n	800d0c8 <_fflush_r+0x58>
 800d090:	686c      	ldr	r4, [r5, #4]
 800d092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d0ef      	beq.n	800d07a <_fflush_r+0xa>
 800d09a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d09c:	07d0      	lsls	r0, r2, #31
 800d09e:	d404      	bmi.n	800d0aa <_fflush_r+0x3a>
 800d0a0:	0599      	lsls	r1, r3, #22
 800d0a2:	d402      	bmi.n	800d0aa <_fflush_r+0x3a>
 800d0a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0a6:	f7fe fabc 	bl	800b622 <__retarget_lock_acquire_recursive>
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	f7ff ff59 	bl	800cf64 <__sflush_r>
 800d0b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0b4:	07da      	lsls	r2, r3, #31
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	d4e0      	bmi.n	800d07c <_fflush_r+0xc>
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	059b      	lsls	r3, r3, #22
 800d0be:	d4dd      	bmi.n	800d07c <_fflush_r+0xc>
 800d0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0c2:	f7fe faaf 	bl	800b624 <__retarget_lock_release_recursive>
 800d0c6:	e7d9      	b.n	800d07c <_fflush_r+0xc>
 800d0c8:	4b05      	ldr	r3, [pc, #20]	; (800d0e0 <_fflush_r+0x70>)
 800d0ca:	429c      	cmp	r4, r3
 800d0cc:	d101      	bne.n	800d0d2 <_fflush_r+0x62>
 800d0ce:	68ac      	ldr	r4, [r5, #8]
 800d0d0:	e7df      	b.n	800d092 <_fflush_r+0x22>
 800d0d2:	4b04      	ldr	r3, [pc, #16]	; (800d0e4 <_fflush_r+0x74>)
 800d0d4:	429c      	cmp	r4, r3
 800d0d6:	bf08      	it	eq
 800d0d8:	68ec      	ldreq	r4, [r5, #12]
 800d0da:	e7da      	b.n	800d092 <_fflush_r+0x22>
 800d0dc:	0800fcc8 	.word	0x0800fcc8
 800d0e0:	0800fce8 	.word	0x0800fce8
 800d0e4:	0800fca8 	.word	0x0800fca8

0800d0e8 <_localeconv_r>:
 800d0e8:	4800      	ldr	r0, [pc, #0]	; (800d0ec <_localeconv_r+0x4>)
 800d0ea:	4770      	bx	lr
 800d0ec:	20000178 	.word	0x20000178

0800d0f0 <_lseek_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4d07      	ldr	r5, [pc, #28]	; (800d110 <_lseek_r+0x20>)
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	4608      	mov	r0, r1
 800d0f8:	4611      	mov	r1, r2
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	602a      	str	r2, [r5, #0]
 800d0fe:	461a      	mov	r2, r3
 800d100:	f002 fa4a 	bl	800f598 <_lseek>
 800d104:	1c43      	adds	r3, r0, #1
 800d106:	d102      	bne.n	800d10e <_lseek_r+0x1e>
 800d108:	682b      	ldr	r3, [r5, #0]
 800d10a:	b103      	cbz	r3, 800d10e <_lseek_r+0x1e>
 800d10c:	6023      	str	r3, [r4, #0]
 800d10e:	bd38      	pop	{r3, r4, r5, pc}
 800d110:	2000679c 	.word	0x2000679c

0800d114 <malloc>:
 800d114:	4b02      	ldr	r3, [pc, #8]	; (800d120 <malloc+0xc>)
 800d116:	4601      	mov	r1, r0
 800d118:	6818      	ldr	r0, [r3, #0]
 800d11a:	f7fe babb 	b.w	800b694 <_malloc_r>
 800d11e:	bf00      	nop
 800d120:	20000024 	.word	0x20000024

0800d124 <__malloc_lock>:
 800d124:	4801      	ldr	r0, [pc, #4]	; (800d12c <__malloc_lock+0x8>)
 800d126:	f7fe ba7c 	b.w	800b622 <__retarget_lock_acquire_recursive>
 800d12a:	bf00      	nop
 800d12c:	20006790 	.word	0x20006790

0800d130 <__malloc_unlock>:
 800d130:	4801      	ldr	r0, [pc, #4]	; (800d138 <__malloc_unlock+0x8>)
 800d132:	f7fe ba77 	b.w	800b624 <__retarget_lock_release_recursive>
 800d136:	bf00      	nop
 800d138:	20006790 	.word	0x20006790

0800d13c <_Balloc>:
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d140:	4604      	mov	r4, r0
 800d142:	460d      	mov	r5, r1
 800d144:	b976      	cbnz	r6, 800d164 <_Balloc+0x28>
 800d146:	2010      	movs	r0, #16
 800d148:	f7ff ffe4 	bl	800d114 <malloc>
 800d14c:	4602      	mov	r2, r0
 800d14e:	6260      	str	r0, [r4, #36]	; 0x24
 800d150:	b920      	cbnz	r0, 800d15c <_Balloc+0x20>
 800d152:	4b18      	ldr	r3, [pc, #96]	; (800d1b4 <_Balloc+0x78>)
 800d154:	4818      	ldr	r0, [pc, #96]	; (800d1b8 <_Balloc+0x7c>)
 800d156:	2166      	movs	r1, #102	; 0x66
 800d158:	f000 fd44 	bl	800dbe4 <__assert_func>
 800d15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d160:	6006      	str	r6, [r0, #0]
 800d162:	60c6      	str	r6, [r0, #12]
 800d164:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d166:	68f3      	ldr	r3, [r6, #12]
 800d168:	b183      	cbz	r3, 800d18c <_Balloc+0x50>
 800d16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d172:	b9b8      	cbnz	r0, 800d1a4 <_Balloc+0x68>
 800d174:	2101      	movs	r1, #1
 800d176:	fa01 f605 	lsl.w	r6, r1, r5
 800d17a:	1d72      	adds	r2, r6, #5
 800d17c:	0092      	lsls	r2, r2, #2
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 fb60 	bl	800d844 <_calloc_r>
 800d184:	b160      	cbz	r0, 800d1a0 <_Balloc+0x64>
 800d186:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d18a:	e00e      	b.n	800d1aa <_Balloc+0x6e>
 800d18c:	2221      	movs	r2, #33	; 0x21
 800d18e:	2104      	movs	r1, #4
 800d190:	4620      	mov	r0, r4
 800d192:	f000 fb57 	bl	800d844 <_calloc_r>
 800d196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d198:	60f0      	str	r0, [r6, #12]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1e4      	bne.n	800d16a <_Balloc+0x2e>
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	bd70      	pop	{r4, r5, r6, pc}
 800d1a4:	6802      	ldr	r2, [r0, #0]
 800d1a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1b0:	e7f7      	b.n	800d1a2 <_Balloc+0x66>
 800d1b2:	bf00      	nop
 800d1b4:	0800fd4d 	.word	0x0800fd4d
 800d1b8:	0800fdd0 	.word	0x0800fdd0

0800d1bc <_Bfree>:
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1c0:	4605      	mov	r5, r0
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	b976      	cbnz	r6, 800d1e4 <_Bfree+0x28>
 800d1c6:	2010      	movs	r0, #16
 800d1c8:	f7ff ffa4 	bl	800d114 <malloc>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	6268      	str	r0, [r5, #36]	; 0x24
 800d1d0:	b920      	cbnz	r0, 800d1dc <_Bfree+0x20>
 800d1d2:	4b09      	ldr	r3, [pc, #36]	; (800d1f8 <_Bfree+0x3c>)
 800d1d4:	4809      	ldr	r0, [pc, #36]	; (800d1fc <_Bfree+0x40>)
 800d1d6:	218a      	movs	r1, #138	; 0x8a
 800d1d8:	f000 fd04 	bl	800dbe4 <__assert_func>
 800d1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1e0:	6006      	str	r6, [r0, #0]
 800d1e2:	60c6      	str	r6, [r0, #12]
 800d1e4:	b13c      	cbz	r4, 800d1f6 <_Bfree+0x3a>
 800d1e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1e8:	6862      	ldr	r2, [r4, #4]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1f0:	6021      	str	r1, [r4, #0]
 800d1f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	0800fd4d 	.word	0x0800fd4d
 800d1fc:	0800fdd0 	.word	0x0800fdd0

0800d200 <__multadd>:
 800d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d204:	690d      	ldr	r5, [r1, #16]
 800d206:	4607      	mov	r7, r0
 800d208:	460c      	mov	r4, r1
 800d20a:	461e      	mov	r6, r3
 800d20c:	f101 0c14 	add.w	ip, r1, #20
 800d210:	2000      	movs	r0, #0
 800d212:	f8dc 3000 	ldr.w	r3, [ip]
 800d216:	b299      	uxth	r1, r3
 800d218:	fb02 6101 	mla	r1, r2, r1, r6
 800d21c:	0c1e      	lsrs	r6, r3, #16
 800d21e:	0c0b      	lsrs	r3, r1, #16
 800d220:	fb02 3306 	mla	r3, r2, r6, r3
 800d224:	b289      	uxth	r1, r1
 800d226:	3001      	adds	r0, #1
 800d228:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d22c:	4285      	cmp	r5, r0
 800d22e:	f84c 1b04 	str.w	r1, [ip], #4
 800d232:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d236:	dcec      	bgt.n	800d212 <__multadd+0x12>
 800d238:	b30e      	cbz	r6, 800d27e <__multadd+0x7e>
 800d23a:	68a3      	ldr	r3, [r4, #8]
 800d23c:	42ab      	cmp	r3, r5
 800d23e:	dc19      	bgt.n	800d274 <__multadd+0x74>
 800d240:	6861      	ldr	r1, [r4, #4]
 800d242:	4638      	mov	r0, r7
 800d244:	3101      	adds	r1, #1
 800d246:	f7ff ff79 	bl	800d13c <_Balloc>
 800d24a:	4680      	mov	r8, r0
 800d24c:	b928      	cbnz	r0, 800d25a <__multadd+0x5a>
 800d24e:	4602      	mov	r2, r0
 800d250:	4b0c      	ldr	r3, [pc, #48]	; (800d284 <__multadd+0x84>)
 800d252:	480d      	ldr	r0, [pc, #52]	; (800d288 <__multadd+0x88>)
 800d254:	21b5      	movs	r1, #181	; 0xb5
 800d256:	f000 fcc5 	bl	800dbe4 <__assert_func>
 800d25a:	6922      	ldr	r2, [r4, #16]
 800d25c:	3202      	adds	r2, #2
 800d25e:	f104 010c 	add.w	r1, r4, #12
 800d262:	0092      	lsls	r2, r2, #2
 800d264:	300c      	adds	r0, #12
 800d266:	f7fe f9de 	bl	800b626 <memcpy>
 800d26a:	4621      	mov	r1, r4
 800d26c:	4638      	mov	r0, r7
 800d26e:	f7ff ffa5 	bl	800d1bc <_Bfree>
 800d272:	4644      	mov	r4, r8
 800d274:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d278:	3501      	adds	r5, #1
 800d27a:	615e      	str	r6, [r3, #20]
 800d27c:	6125      	str	r5, [r4, #16]
 800d27e:	4620      	mov	r0, r4
 800d280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d284:	0800fdbf 	.word	0x0800fdbf
 800d288:	0800fdd0 	.word	0x0800fdd0

0800d28c <__hi0bits>:
 800d28c:	0c03      	lsrs	r3, r0, #16
 800d28e:	041b      	lsls	r3, r3, #16
 800d290:	b9d3      	cbnz	r3, 800d2c8 <__hi0bits+0x3c>
 800d292:	0400      	lsls	r0, r0, #16
 800d294:	2310      	movs	r3, #16
 800d296:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d29a:	bf04      	itt	eq
 800d29c:	0200      	lsleq	r0, r0, #8
 800d29e:	3308      	addeq	r3, #8
 800d2a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d2a4:	bf04      	itt	eq
 800d2a6:	0100      	lsleq	r0, r0, #4
 800d2a8:	3304      	addeq	r3, #4
 800d2aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d2ae:	bf04      	itt	eq
 800d2b0:	0080      	lsleq	r0, r0, #2
 800d2b2:	3302      	addeq	r3, #2
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	db05      	blt.n	800d2c4 <__hi0bits+0x38>
 800d2b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d2bc:	f103 0301 	add.w	r3, r3, #1
 800d2c0:	bf08      	it	eq
 800d2c2:	2320      	moveq	r3, #32
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	4770      	bx	lr
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	e7e4      	b.n	800d296 <__hi0bits+0xa>

0800d2cc <__lo0bits>:
 800d2cc:	6803      	ldr	r3, [r0, #0]
 800d2ce:	f013 0207 	ands.w	r2, r3, #7
 800d2d2:	4601      	mov	r1, r0
 800d2d4:	d00b      	beq.n	800d2ee <__lo0bits+0x22>
 800d2d6:	07da      	lsls	r2, r3, #31
 800d2d8:	d423      	bmi.n	800d322 <__lo0bits+0x56>
 800d2da:	0798      	lsls	r0, r3, #30
 800d2dc:	bf49      	itett	mi
 800d2de:	085b      	lsrmi	r3, r3, #1
 800d2e0:	089b      	lsrpl	r3, r3, #2
 800d2e2:	2001      	movmi	r0, #1
 800d2e4:	600b      	strmi	r3, [r1, #0]
 800d2e6:	bf5c      	itt	pl
 800d2e8:	600b      	strpl	r3, [r1, #0]
 800d2ea:	2002      	movpl	r0, #2
 800d2ec:	4770      	bx	lr
 800d2ee:	b298      	uxth	r0, r3
 800d2f0:	b9a8      	cbnz	r0, 800d31e <__lo0bits+0x52>
 800d2f2:	0c1b      	lsrs	r3, r3, #16
 800d2f4:	2010      	movs	r0, #16
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	b90a      	cbnz	r2, 800d2fe <__lo0bits+0x32>
 800d2fa:	3008      	adds	r0, #8
 800d2fc:	0a1b      	lsrs	r3, r3, #8
 800d2fe:	071a      	lsls	r2, r3, #28
 800d300:	bf04      	itt	eq
 800d302:	091b      	lsreq	r3, r3, #4
 800d304:	3004      	addeq	r0, #4
 800d306:	079a      	lsls	r2, r3, #30
 800d308:	bf04      	itt	eq
 800d30a:	089b      	lsreq	r3, r3, #2
 800d30c:	3002      	addeq	r0, #2
 800d30e:	07da      	lsls	r2, r3, #31
 800d310:	d403      	bmi.n	800d31a <__lo0bits+0x4e>
 800d312:	085b      	lsrs	r3, r3, #1
 800d314:	f100 0001 	add.w	r0, r0, #1
 800d318:	d005      	beq.n	800d326 <__lo0bits+0x5a>
 800d31a:	600b      	str	r3, [r1, #0]
 800d31c:	4770      	bx	lr
 800d31e:	4610      	mov	r0, r2
 800d320:	e7e9      	b.n	800d2f6 <__lo0bits+0x2a>
 800d322:	2000      	movs	r0, #0
 800d324:	4770      	bx	lr
 800d326:	2020      	movs	r0, #32
 800d328:	4770      	bx	lr
	...

0800d32c <__i2b>:
 800d32c:	b510      	push	{r4, lr}
 800d32e:	460c      	mov	r4, r1
 800d330:	2101      	movs	r1, #1
 800d332:	f7ff ff03 	bl	800d13c <_Balloc>
 800d336:	4602      	mov	r2, r0
 800d338:	b928      	cbnz	r0, 800d346 <__i2b+0x1a>
 800d33a:	4b05      	ldr	r3, [pc, #20]	; (800d350 <__i2b+0x24>)
 800d33c:	4805      	ldr	r0, [pc, #20]	; (800d354 <__i2b+0x28>)
 800d33e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d342:	f000 fc4f 	bl	800dbe4 <__assert_func>
 800d346:	2301      	movs	r3, #1
 800d348:	6144      	str	r4, [r0, #20]
 800d34a:	6103      	str	r3, [r0, #16]
 800d34c:	bd10      	pop	{r4, pc}
 800d34e:	bf00      	nop
 800d350:	0800fdbf 	.word	0x0800fdbf
 800d354:	0800fdd0 	.word	0x0800fdd0

0800d358 <__multiply>:
 800d358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35c:	4691      	mov	r9, r2
 800d35e:	690a      	ldr	r2, [r1, #16]
 800d360:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d364:	429a      	cmp	r2, r3
 800d366:	bfb8      	it	lt
 800d368:	460b      	movlt	r3, r1
 800d36a:	460c      	mov	r4, r1
 800d36c:	bfbc      	itt	lt
 800d36e:	464c      	movlt	r4, r9
 800d370:	4699      	movlt	r9, r3
 800d372:	6927      	ldr	r7, [r4, #16]
 800d374:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d378:	68a3      	ldr	r3, [r4, #8]
 800d37a:	6861      	ldr	r1, [r4, #4]
 800d37c:	eb07 060a 	add.w	r6, r7, sl
 800d380:	42b3      	cmp	r3, r6
 800d382:	b085      	sub	sp, #20
 800d384:	bfb8      	it	lt
 800d386:	3101      	addlt	r1, #1
 800d388:	f7ff fed8 	bl	800d13c <_Balloc>
 800d38c:	b930      	cbnz	r0, 800d39c <__multiply+0x44>
 800d38e:	4602      	mov	r2, r0
 800d390:	4b44      	ldr	r3, [pc, #272]	; (800d4a4 <__multiply+0x14c>)
 800d392:	4845      	ldr	r0, [pc, #276]	; (800d4a8 <__multiply+0x150>)
 800d394:	f240 115d 	movw	r1, #349	; 0x15d
 800d398:	f000 fc24 	bl	800dbe4 <__assert_func>
 800d39c:	f100 0514 	add.w	r5, r0, #20
 800d3a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3a4:	462b      	mov	r3, r5
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	4543      	cmp	r3, r8
 800d3aa:	d321      	bcc.n	800d3f0 <__multiply+0x98>
 800d3ac:	f104 0314 	add.w	r3, r4, #20
 800d3b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d3b4:	f109 0314 	add.w	r3, r9, #20
 800d3b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d3bc:	9202      	str	r2, [sp, #8]
 800d3be:	1b3a      	subs	r2, r7, r4
 800d3c0:	3a15      	subs	r2, #21
 800d3c2:	f022 0203 	bic.w	r2, r2, #3
 800d3c6:	3204      	adds	r2, #4
 800d3c8:	f104 0115 	add.w	r1, r4, #21
 800d3cc:	428f      	cmp	r7, r1
 800d3ce:	bf38      	it	cc
 800d3d0:	2204      	movcc	r2, #4
 800d3d2:	9201      	str	r2, [sp, #4]
 800d3d4:	9a02      	ldr	r2, [sp, #8]
 800d3d6:	9303      	str	r3, [sp, #12]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d80c      	bhi.n	800d3f6 <__multiply+0x9e>
 800d3dc:	2e00      	cmp	r6, #0
 800d3de:	dd03      	ble.n	800d3e8 <__multiply+0x90>
 800d3e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d05a      	beq.n	800d49e <__multiply+0x146>
 800d3e8:	6106      	str	r6, [r0, #16]
 800d3ea:	b005      	add	sp, #20
 800d3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f0:	f843 2b04 	str.w	r2, [r3], #4
 800d3f4:	e7d8      	b.n	800d3a8 <__multiply+0x50>
 800d3f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d3fa:	f1ba 0f00 	cmp.w	sl, #0
 800d3fe:	d024      	beq.n	800d44a <__multiply+0xf2>
 800d400:	f104 0e14 	add.w	lr, r4, #20
 800d404:	46a9      	mov	r9, r5
 800d406:	f04f 0c00 	mov.w	ip, #0
 800d40a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d40e:	f8d9 1000 	ldr.w	r1, [r9]
 800d412:	fa1f fb82 	uxth.w	fp, r2
 800d416:	b289      	uxth	r1, r1
 800d418:	fb0a 110b 	mla	r1, sl, fp, r1
 800d41c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d420:	f8d9 2000 	ldr.w	r2, [r9]
 800d424:	4461      	add	r1, ip
 800d426:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d42a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d42e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d432:	b289      	uxth	r1, r1
 800d434:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d438:	4577      	cmp	r7, lr
 800d43a:	f849 1b04 	str.w	r1, [r9], #4
 800d43e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d442:	d8e2      	bhi.n	800d40a <__multiply+0xb2>
 800d444:	9a01      	ldr	r2, [sp, #4]
 800d446:	f845 c002 	str.w	ip, [r5, r2]
 800d44a:	9a03      	ldr	r2, [sp, #12]
 800d44c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d450:	3304      	adds	r3, #4
 800d452:	f1b9 0f00 	cmp.w	r9, #0
 800d456:	d020      	beq.n	800d49a <__multiply+0x142>
 800d458:	6829      	ldr	r1, [r5, #0]
 800d45a:	f104 0c14 	add.w	ip, r4, #20
 800d45e:	46ae      	mov	lr, r5
 800d460:	f04f 0a00 	mov.w	sl, #0
 800d464:	f8bc b000 	ldrh.w	fp, [ip]
 800d468:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d46c:	fb09 220b 	mla	r2, r9, fp, r2
 800d470:	4492      	add	sl, r2
 800d472:	b289      	uxth	r1, r1
 800d474:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d478:	f84e 1b04 	str.w	r1, [lr], #4
 800d47c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d480:	f8be 1000 	ldrh.w	r1, [lr]
 800d484:	0c12      	lsrs	r2, r2, #16
 800d486:	fb09 1102 	mla	r1, r9, r2, r1
 800d48a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d48e:	4567      	cmp	r7, ip
 800d490:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d494:	d8e6      	bhi.n	800d464 <__multiply+0x10c>
 800d496:	9a01      	ldr	r2, [sp, #4]
 800d498:	50a9      	str	r1, [r5, r2]
 800d49a:	3504      	adds	r5, #4
 800d49c:	e79a      	b.n	800d3d4 <__multiply+0x7c>
 800d49e:	3e01      	subs	r6, #1
 800d4a0:	e79c      	b.n	800d3dc <__multiply+0x84>
 800d4a2:	bf00      	nop
 800d4a4:	0800fdbf 	.word	0x0800fdbf
 800d4a8:	0800fdd0 	.word	0x0800fdd0

0800d4ac <__pow5mult>:
 800d4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4b0:	4615      	mov	r5, r2
 800d4b2:	f012 0203 	ands.w	r2, r2, #3
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	460f      	mov	r7, r1
 800d4ba:	d007      	beq.n	800d4cc <__pow5mult+0x20>
 800d4bc:	4c25      	ldr	r4, [pc, #148]	; (800d554 <__pow5mult+0xa8>)
 800d4be:	3a01      	subs	r2, #1
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4c6:	f7ff fe9b 	bl	800d200 <__multadd>
 800d4ca:	4607      	mov	r7, r0
 800d4cc:	10ad      	asrs	r5, r5, #2
 800d4ce:	d03d      	beq.n	800d54c <__pow5mult+0xa0>
 800d4d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4d2:	b97c      	cbnz	r4, 800d4f4 <__pow5mult+0x48>
 800d4d4:	2010      	movs	r0, #16
 800d4d6:	f7ff fe1d 	bl	800d114 <malloc>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	6270      	str	r0, [r6, #36]	; 0x24
 800d4de:	b928      	cbnz	r0, 800d4ec <__pow5mult+0x40>
 800d4e0:	4b1d      	ldr	r3, [pc, #116]	; (800d558 <__pow5mult+0xac>)
 800d4e2:	481e      	ldr	r0, [pc, #120]	; (800d55c <__pow5mult+0xb0>)
 800d4e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d4e8:	f000 fb7c 	bl	800dbe4 <__assert_func>
 800d4ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4f0:	6004      	str	r4, [r0, #0]
 800d4f2:	60c4      	str	r4, [r0, #12]
 800d4f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4fc:	b94c      	cbnz	r4, 800d512 <__pow5mult+0x66>
 800d4fe:	f240 2171 	movw	r1, #625	; 0x271
 800d502:	4630      	mov	r0, r6
 800d504:	f7ff ff12 	bl	800d32c <__i2b>
 800d508:	2300      	movs	r3, #0
 800d50a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d50e:	4604      	mov	r4, r0
 800d510:	6003      	str	r3, [r0, #0]
 800d512:	f04f 0900 	mov.w	r9, #0
 800d516:	07eb      	lsls	r3, r5, #31
 800d518:	d50a      	bpl.n	800d530 <__pow5mult+0x84>
 800d51a:	4639      	mov	r1, r7
 800d51c:	4622      	mov	r2, r4
 800d51e:	4630      	mov	r0, r6
 800d520:	f7ff ff1a 	bl	800d358 <__multiply>
 800d524:	4639      	mov	r1, r7
 800d526:	4680      	mov	r8, r0
 800d528:	4630      	mov	r0, r6
 800d52a:	f7ff fe47 	bl	800d1bc <_Bfree>
 800d52e:	4647      	mov	r7, r8
 800d530:	106d      	asrs	r5, r5, #1
 800d532:	d00b      	beq.n	800d54c <__pow5mult+0xa0>
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	b938      	cbnz	r0, 800d548 <__pow5mult+0x9c>
 800d538:	4622      	mov	r2, r4
 800d53a:	4621      	mov	r1, r4
 800d53c:	4630      	mov	r0, r6
 800d53e:	f7ff ff0b 	bl	800d358 <__multiply>
 800d542:	6020      	str	r0, [r4, #0]
 800d544:	f8c0 9000 	str.w	r9, [r0]
 800d548:	4604      	mov	r4, r0
 800d54a:	e7e4      	b.n	800d516 <__pow5mult+0x6a>
 800d54c:	4638      	mov	r0, r7
 800d54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d552:	bf00      	nop
 800d554:	0800ff20 	.word	0x0800ff20
 800d558:	0800fd4d 	.word	0x0800fd4d
 800d55c:	0800fdd0 	.word	0x0800fdd0

0800d560 <__lshift>:
 800d560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d564:	460c      	mov	r4, r1
 800d566:	6849      	ldr	r1, [r1, #4]
 800d568:	6923      	ldr	r3, [r4, #16]
 800d56a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d56e:	68a3      	ldr	r3, [r4, #8]
 800d570:	4607      	mov	r7, r0
 800d572:	4691      	mov	r9, r2
 800d574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d578:	f108 0601 	add.w	r6, r8, #1
 800d57c:	42b3      	cmp	r3, r6
 800d57e:	db0b      	blt.n	800d598 <__lshift+0x38>
 800d580:	4638      	mov	r0, r7
 800d582:	f7ff fddb 	bl	800d13c <_Balloc>
 800d586:	4605      	mov	r5, r0
 800d588:	b948      	cbnz	r0, 800d59e <__lshift+0x3e>
 800d58a:	4602      	mov	r2, r0
 800d58c:	4b2a      	ldr	r3, [pc, #168]	; (800d638 <__lshift+0xd8>)
 800d58e:	482b      	ldr	r0, [pc, #172]	; (800d63c <__lshift+0xdc>)
 800d590:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d594:	f000 fb26 	bl	800dbe4 <__assert_func>
 800d598:	3101      	adds	r1, #1
 800d59a:	005b      	lsls	r3, r3, #1
 800d59c:	e7ee      	b.n	800d57c <__lshift+0x1c>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f100 0114 	add.w	r1, r0, #20
 800d5a4:	f100 0210 	add.w	r2, r0, #16
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	4553      	cmp	r3, sl
 800d5ac:	db37      	blt.n	800d61e <__lshift+0xbe>
 800d5ae:	6920      	ldr	r0, [r4, #16]
 800d5b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5b4:	f104 0314 	add.w	r3, r4, #20
 800d5b8:	f019 091f 	ands.w	r9, r9, #31
 800d5bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d5c4:	d02f      	beq.n	800d626 <__lshift+0xc6>
 800d5c6:	f1c9 0e20 	rsb	lr, r9, #32
 800d5ca:	468a      	mov	sl, r1
 800d5cc:	f04f 0c00 	mov.w	ip, #0
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	fa02 f209 	lsl.w	r2, r2, r9
 800d5d6:	ea42 020c 	orr.w	r2, r2, ip
 800d5da:	f84a 2b04 	str.w	r2, [sl], #4
 800d5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5e2:	4298      	cmp	r0, r3
 800d5e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d5e8:	d8f2      	bhi.n	800d5d0 <__lshift+0x70>
 800d5ea:	1b03      	subs	r3, r0, r4
 800d5ec:	3b15      	subs	r3, #21
 800d5ee:	f023 0303 	bic.w	r3, r3, #3
 800d5f2:	3304      	adds	r3, #4
 800d5f4:	f104 0215 	add.w	r2, r4, #21
 800d5f8:	4290      	cmp	r0, r2
 800d5fa:	bf38      	it	cc
 800d5fc:	2304      	movcc	r3, #4
 800d5fe:	f841 c003 	str.w	ip, [r1, r3]
 800d602:	f1bc 0f00 	cmp.w	ip, #0
 800d606:	d001      	beq.n	800d60c <__lshift+0xac>
 800d608:	f108 0602 	add.w	r6, r8, #2
 800d60c:	3e01      	subs	r6, #1
 800d60e:	4638      	mov	r0, r7
 800d610:	612e      	str	r6, [r5, #16]
 800d612:	4621      	mov	r1, r4
 800d614:	f7ff fdd2 	bl	800d1bc <_Bfree>
 800d618:	4628      	mov	r0, r5
 800d61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d61e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d622:	3301      	adds	r3, #1
 800d624:	e7c1      	b.n	800d5aa <__lshift+0x4a>
 800d626:	3904      	subs	r1, #4
 800d628:	f853 2b04 	ldr.w	r2, [r3], #4
 800d62c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d630:	4298      	cmp	r0, r3
 800d632:	d8f9      	bhi.n	800d628 <__lshift+0xc8>
 800d634:	e7ea      	b.n	800d60c <__lshift+0xac>
 800d636:	bf00      	nop
 800d638:	0800fdbf 	.word	0x0800fdbf
 800d63c:	0800fdd0 	.word	0x0800fdd0

0800d640 <__mcmp>:
 800d640:	b530      	push	{r4, r5, lr}
 800d642:	6902      	ldr	r2, [r0, #16]
 800d644:	690c      	ldr	r4, [r1, #16]
 800d646:	1b12      	subs	r2, r2, r4
 800d648:	d10e      	bne.n	800d668 <__mcmp+0x28>
 800d64a:	f100 0314 	add.w	r3, r0, #20
 800d64e:	3114      	adds	r1, #20
 800d650:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d654:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d658:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d65c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d660:	42a5      	cmp	r5, r4
 800d662:	d003      	beq.n	800d66c <__mcmp+0x2c>
 800d664:	d305      	bcc.n	800d672 <__mcmp+0x32>
 800d666:	2201      	movs	r2, #1
 800d668:	4610      	mov	r0, r2
 800d66a:	bd30      	pop	{r4, r5, pc}
 800d66c:	4283      	cmp	r3, r0
 800d66e:	d3f3      	bcc.n	800d658 <__mcmp+0x18>
 800d670:	e7fa      	b.n	800d668 <__mcmp+0x28>
 800d672:	f04f 32ff 	mov.w	r2, #4294967295
 800d676:	e7f7      	b.n	800d668 <__mcmp+0x28>

0800d678 <__mdiff>:
 800d678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	460c      	mov	r4, r1
 800d67e:	4606      	mov	r6, r0
 800d680:	4611      	mov	r1, r2
 800d682:	4620      	mov	r0, r4
 800d684:	4690      	mov	r8, r2
 800d686:	f7ff ffdb 	bl	800d640 <__mcmp>
 800d68a:	1e05      	subs	r5, r0, #0
 800d68c:	d110      	bne.n	800d6b0 <__mdiff+0x38>
 800d68e:	4629      	mov	r1, r5
 800d690:	4630      	mov	r0, r6
 800d692:	f7ff fd53 	bl	800d13c <_Balloc>
 800d696:	b930      	cbnz	r0, 800d6a6 <__mdiff+0x2e>
 800d698:	4b3a      	ldr	r3, [pc, #232]	; (800d784 <__mdiff+0x10c>)
 800d69a:	4602      	mov	r2, r0
 800d69c:	f240 2132 	movw	r1, #562	; 0x232
 800d6a0:	4839      	ldr	r0, [pc, #228]	; (800d788 <__mdiff+0x110>)
 800d6a2:	f000 fa9f 	bl	800dbe4 <__assert_func>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b0:	bfa4      	itt	ge
 800d6b2:	4643      	movge	r3, r8
 800d6b4:	46a0      	movge	r8, r4
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d6bc:	bfa6      	itte	ge
 800d6be:	461c      	movge	r4, r3
 800d6c0:	2500      	movge	r5, #0
 800d6c2:	2501      	movlt	r5, #1
 800d6c4:	f7ff fd3a 	bl	800d13c <_Balloc>
 800d6c8:	b920      	cbnz	r0, 800d6d4 <__mdiff+0x5c>
 800d6ca:	4b2e      	ldr	r3, [pc, #184]	; (800d784 <__mdiff+0x10c>)
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d6d2:	e7e5      	b.n	800d6a0 <__mdiff+0x28>
 800d6d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d6d8:	6926      	ldr	r6, [r4, #16]
 800d6da:	60c5      	str	r5, [r0, #12]
 800d6dc:	f104 0914 	add.w	r9, r4, #20
 800d6e0:	f108 0514 	add.w	r5, r8, #20
 800d6e4:	f100 0e14 	add.w	lr, r0, #20
 800d6e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d6ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d6f0:	f108 0210 	add.w	r2, r8, #16
 800d6f4:	46f2      	mov	sl, lr
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d700:	fa1f f883 	uxth.w	r8, r3
 800d704:	fa11 f18b 	uxtah	r1, r1, fp
 800d708:	0c1b      	lsrs	r3, r3, #16
 800d70a:	eba1 0808 	sub.w	r8, r1, r8
 800d70e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d712:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d716:	fa1f f888 	uxth.w	r8, r8
 800d71a:	1419      	asrs	r1, r3, #16
 800d71c:	454e      	cmp	r6, r9
 800d71e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d722:	f84a 3b04 	str.w	r3, [sl], #4
 800d726:	d8e7      	bhi.n	800d6f8 <__mdiff+0x80>
 800d728:	1b33      	subs	r3, r6, r4
 800d72a:	3b15      	subs	r3, #21
 800d72c:	f023 0303 	bic.w	r3, r3, #3
 800d730:	3304      	adds	r3, #4
 800d732:	3415      	adds	r4, #21
 800d734:	42a6      	cmp	r6, r4
 800d736:	bf38      	it	cc
 800d738:	2304      	movcc	r3, #4
 800d73a:	441d      	add	r5, r3
 800d73c:	4473      	add	r3, lr
 800d73e:	469e      	mov	lr, r3
 800d740:	462e      	mov	r6, r5
 800d742:	4566      	cmp	r6, ip
 800d744:	d30e      	bcc.n	800d764 <__mdiff+0xec>
 800d746:	f10c 0203 	add.w	r2, ip, #3
 800d74a:	1b52      	subs	r2, r2, r5
 800d74c:	f022 0203 	bic.w	r2, r2, #3
 800d750:	3d03      	subs	r5, #3
 800d752:	45ac      	cmp	ip, r5
 800d754:	bf38      	it	cc
 800d756:	2200      	movcc	r2, #0
 800d758:	441a      	add	r2, r3
 800d75a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d75e:	b17b      	cbz	r3, 800d780 <__mdiff+0x108>
 800d760:	6107      	str	r7, [r0, #16]
 800d762:	e7a3      	b.n	800d6ac <__mdiff+0x34>
 800d764:	f856 8b04 	ldr.w	r8, [r6], #4
 800d768:	fa11 f288 	uxtah	r2, r1, r8
 800d76c:	1414      	asrs	r4, r2, #16
 800d76e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d772:	b292      	uxth	r2, r2
 800d774:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d778:	f84e 2b04 	str.w	r2, [lr], #4
 800d77c:	1421      	asrs	r1, r4, #16
 800d77e:	e7e0      	b.n	800d742 <__mdiff+0xca>
 800d780:	3f01      	subs	r7, #1
 800d782:	e7ea      	b.n	800d75a <__mdiff+0xe2>
 800d784:	0800fdbf 	.word	0x0800fdbf
 800d788:	0800fdd0 	.word	0x0800fdd0

0800d78c <__d2b>:
 800d78c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d790:	4689      	mov	r9, r1
 800d792:	2101      	movs	r1, #1
 800d794:	ec57 6b10 	vmov	r6, r7, d0
 800d798:	4690      	mov	r8, r2
 800d79a:	f7ff fccf 	bl	800d13c <_Balloc>
 800d79e:	4604      	mov	r4, r0
 800d7a0:	b930      	cbnz	r0, 800d7b0 <__d2b+0x24>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	4b25      	ldr	r3, [pc, #148]	; (800d83c <__d2b+0xb0>)
 800d7a6:	4826      	ldr	r0, [pc, #152]	; (800d840 <__d2b+0xb4>)
 800d7a8:	f240 310a 	movw	r1, #778	; 0x30a
 800d7ac:	f000 fa1a 	bl	800dbe4 <__assert_func>
 800d7b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d7b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7b8:	bb35      	cbnz	r5, 800d808 <__d2b+0x7c>
 800d7ba:	2e00      	cmp	r6, #0
 800d7bc:	9301      	str	r3, [sp, #4]
 800d7be:	d028      	beq.n	800d812 <__d2b+0x86>
 800d7c0:	4668      	mov	r0, sp
 800d7c2:	9600      	str	r6, [sp, #0]
 800d7c4:	f7ff fd82 	bl	800d2cc <__lo0bits>
 800d7c8:	9900      	ldr	r1, [sp, #0]
 800d7ca:	b300      	cbz	r0, 800d80e <__d2b+0x82>
 800d7cc:	9a01      	ldr	r2, [sp, #4]
 800d7ce:	f1c0 0320 	rsb	r3, r0, #32
 800d7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d6:	430b      	orrs	r3, r1
 800d7d8:	40c2      	lsrs	r2, r0
 800d7da:	6163      	str	r3, [r4, #20]
 800d7dc:	9201      	str	r2, [sp, #4]
 800d7de:	9b01      	ldr	r3, [sp, #4]
 800d7e0:	61a3      	str	r3, [r4, #24]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	bf14      	ite	ne
 800d7e6:	2202      	movne	r2, #2
 800d7e8:	2201      	moveq	r2, #1
 800d7ea:	6122      	str	r2, [r4, #16]
 800d7ec:	b1d5      	cbz	r5, 800d824 <__d2b+0x98>
 800d7ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7f2:	4405      	add	r5, r0
 800d7f4:	f8c9 5000 	str.w	r5, [r9]
 800d7f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7fc:	f8c8 0000 	str.w	r0, [r8]
 800d800:	4620      	mov	r0, r4
 800d802:	b003      	add	sp, #12
 800d804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d80c:	e7d5      	b.n	800d7ba <__d2b+0x2e>
 800d80e:	6161      	str	r1, [r4, #20]
 800d810:	e7e5      	b.n	800d7de <__d2b+0x52>
 800d812:	a801      	add	r0, sp, #4
 800d814:	f7ff fd5a 	bl	800d2cc <__lo0bits>
 800d818:	9b01      	ldr	r3, [sp, #4]
 800d81a:	6163      	str	r3, [r4, #20]
 800d81c:	2201      	movs	r2, #1
 800d81e:	6122      	str	r2, [r4, #16]
 800d820:	3020      	adds	r0, #32
 800d822:	e7e3      	b.n	800d7ec <__d2b+0x60>
 800d824:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d828:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d82c:	f8c9 0000 	str.w	r0, [r9]
 800d830:	6918      	ldr	r0, [r3, #16]
 800d832:	f7ff fd2b 	bl	800d28c <__hi0bits>
 800d836:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d83a:	e7df      	b.n	800d7fc <__d2b+0x70>
 800d83c:	0800fdbf 	.word	0x0800fdbf
 800d840:	0800fdd0 	.word	0x0800fdd0

0800d844 <_calloc_r>:
 800d844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d846:	fba1 2402 	umull	r2, r4, r1, r2
 800d84a:	b94c      	cbnz	r4, 800d860 <_calloc_r+0x1c>
 800d84c:	4611      	mov	r1, r2
 800d84e:	9201      	str	r2, [sp, #4]
 800d850:	f7fd ff20 	bl	800b694 <_malloc_r>
 800d854:	9a01      	ldr	r2, [sp, #4]
 800d856:	4605      	mov	r5, r0
 800d858:	b930      	cbnz	r0, 800d868 <_calloc_r+0x24>
 800d85a:	4628      	mov	r0, r5
 800d85c:	b003      	add	sp, #12
 800d85e:	bd30      	pop	{r4, r5, pc}
 800d860:	220c      	movs	r2, #12
 800d862:	6002      	str	r2, [r0, #0]
 800d864:	2500      	movs	r5, #0
 800d866:	e7f8      	b.n	800d85a <_calloc_r+0x16>
 800d868:	4621      	mov	r1, r4
 800d86a:	f7fd feea 	bl	800b642 <memset>
 800d86e:	e7f4      	b.n	800d85a <_calloc_r+0x16>

0800d870 <_free_r>:
 800d870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d872:	2900      	cmp	r1, #0
 800d874:	d044      	beq.n	800d900 <_free_r+0x90>
 800d876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d87a:	9001      	str	r0, [sp, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f1a1 0404 	sub.w	r4, r1, #4
 800d882:	bfb8      	it	lt
 800d884:	18e4      	addlt	r4, r4, r3
 800d886:	f7ff fc4d 	bl	800d124 <__malloc_lock>
 800d88a:	4a1e      	ldr	r2, [pc, #120]	; (800d904 <_free_r+0x94>)
 800d88c:	9801      	ldr	r0, [sp, #4]
 800d88e:	6813      	ldr	r3, [r2, #0]
 800d890:	b933      	cbnz	r3, 800d8a0 <_free_r+0x30>
 800d892:	6063      	str	r3, [r4, #4]
 800d894:	6014      	str	r4, [r2, #0]
 800d896:	b003      	add	sp, #12
 800d898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d89c:	f7ff bc48 	b.w	800d130 <__malloc_unlock>
 800d8a0:	42a3      	cmp	r3, r4
 800d8a2:	d908      	bls.n	800d8b6 <_free_r+0x46>
 800d8a4:	6825      	ldr	r5, [r4, #0]
 800d8a6:	1961      	adds	r1, r4, r5
 800d8a8:	428b      	cmp	r3, r1
 800d8aa:	bf01      	itttt	eq
 800d8ac:	6819      	ldreq	r1, [r3, #0]
 800d8ae:	685b      	ldreq	r3, [r3, #4]
 800d8b0:	1949      	addeq	r1, r1, r5
 800d8b2:	6021      	streq	r1, [r4, #0]
 800d8b4:	e7ed      	b.n	800d892 <_free_r+0x22>
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	b10b      	cbz	r3, 800d8c0 <_free_r+0x50>
 800d8bc:	42a3      	cmp	r3, r4
 800d8be:	d9fa      	bls.n	800d8b6 <_free_r+0x46>
 800d8c0:	6811      	ldr	r1, [r2, #0]
 800d8c2:	1855      	adds	r5, r2, r1
 800d8c4:	42a5      	cmp	r5, r4
 800d8c6:	d10b      	bne.n	800d8e0 <_free_r+0x70>
 800d8c8:	6824      	ldr	r4, [r4, #0]
 800d8ca:	4421      	add	r1, r4
 800d8cc:	1854      	adds	r4, r2, r1
 800d8ce:	42a3      	cmp	r3, r4
 800d8d0:	6011      	str	r1, [r2, #0]
 800d8d2:	d1e0      	bne.n	800d896 <_free_r+0x26>
 800d8d4:	681c      	ldr	r4, [r3, #0]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	6053      	str	r3, [r2, #4]
 800d8da:	4421      	add	r1, r4
 800d8dc:	6011      	str	r1, [r2, #0]
 800d8de:	e7da      	b.n	800d896 <_free_r+0x26>
 800d8e0:	d902      	bls.n	800d8e8 <_free_r+0x78>
 800d8e2:	230c      	movs	r3, #12
 800d8e4:	6003      	str	r3, [r0, #0]
 800d8e6:	e7d6      	b.n	800d896 <_free_r+0x26>
 800d8e8:	6825      	ldr	r5, [r4, #0]
 800d8ea:	1961      	adds	r1, r4, r5
 800d8ec:	428b      	cmp	r3, r1
 800d8ee:	bf04      	itt	eq
 800d8f0:	6819      	ldreq	r1, [r3, #0]
 800d8f2:	685b      	ldreq	r3, [r3, #4]
 800d8f4:	6063      	str	r3, [r4, #4]
 800d8f6:	bf04      	itt	eq
 800d8f8:	1949      	addeq	r1, r1, r5
 800d8fa:	6021      	streq	r1, [r4, #0]
 800d8fc:	6054      	str	r4, [r2, #4]
 800d8fe:	e7ca      	b.n	800d896 <_free_r+0x26>
 800d900:	b003      	add	sp, #12
 800d902:	bd30      	pop	{r4, r5, pc}
 800d904:	20006794 	.word	0x20006794

0800d908 <__ssputs_r>:
 800d908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d90c:	688e      	ldr	r6, [r1, #8]
 800d90e:	429e      	cmp	r6, r3
 800d910:	4682      	mov	sl, r0
 800d912:	460c      	mov	r4, r1
 800d914:	4690      	mov	r8, r2
 800d916:	461f      	mov	r7, r3
 800d918:	d838      	bhi.n	800d98c <__ssputs_r+0x84>
 800d91a:	898a      	ldrh	r2, [r1, #12]
 800d91c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d920:	d032      	beq.n	800d988 <__ssputs_r+0x80>
 800d922:	6825      	ldr	r5, [r4, #0]
 800d924:	6909      	ldr	r1, [r1, #16]
 800d926:	eba5 0901 	sub.w	r9, r5, r1
 800d92a:	6965      	ldr	r5, [r4, #20]
 800d92c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d934:	3301      	adds	r3, #1
 800d936:	444b      	add	r3, r9
 800d938:	106d      	asrs	r5, r5, #1
 800d93a:	429d      	cmp	r5, r3
 800d93c:	bf38      	it	cc
 800d93e:	461d      	movcc	r5, r3
 800d940:	0553      	lsls	r3, r2, #21
 800d942:	d531      	bpl.n	800d9a8 <__ssputs_r+0xa0>
 800d944:	4629      	mov	r1, r5
 800d946:	f7fd fea5 	bl	800b694 <_malloc_r>
 800d94a:	4606      	mov	r6, r0
 800d94c:	b950      	cbnz	r0, 800d964 <__ssputs_r+0x5c>
 800d94e:	230c      	movs	r3, #12
 800d950:	f8ca 3000 	str.w	r3, [sl]
 800d954:	89a3      	ldrh	r3, [r4, #12]
 800d956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d95a:	81a3      	strh	r3, [r4, #12]
 800d95c:	f04f 30ff 	mov.w	r0, #4294967295
 800d960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d964:	6921      	ldr	r1, [r4, #16]
 800d966:	464a      	mov	r2, r9
 800d968:	f7fd fe5d 	bl	800b626 <memcpy>
 800d96c:	89a3      	ldrh	r3, [r4, #12]
 800d96e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d976:	81a3      	strh	r3, [r4, #12]
 800d978:	6126      	str	r6, [r4, #16]
 800d97a:	6165      	str	r5, [r4, #20]
 800d97c:	444e      	add	r6, r9
 800d97e:	eba5 0509 	sub.w	r5, r5, r9
 800d982:	6026      	str	r6, [r4, #0]
 800d984:	60a5      	str	r5, [r4, #8]
 800d986:	463e      	mov	r6, r7
 800d988:	42be      	cmp	r6, r7
 800d98a:	d900      	bls.n	800d98e <__ssputs_r+0x86>
 800d98c:	463e      	mov	r6, r7
 800d98e:	6820      	ldr	r0, [r4, #0]
 800d990:	4632      	mov	r2, r6
 800d992:	4641      	mov	r1, r8
 800d994:	f000 f968 	bl	800dc68 <memmove>
 800d998:	68a3      	ldr	r3, [r4, #8]
 800d99a:	1b9b      	subs	r3, r3, r6
 800d99c:	60a3      	str	r3, [r4, #8]
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	4433      	add	r3, r6
 800d9a2:	6023      	str	r3, [r4, #0]
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	e7db      	b.n	800d960 <__ssputs_r+0x58>
 800d9a8:	462a      	mov	r2, r5
 800d9aa:	f000 f977 	bl	800dc9c <_realloc_r>
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d1e1      	bne.n	800d978 <__ssputs_r+0x70>
 800d9b4:	6921      	ldr	r1, [r4, #16]
 800d9b6:	4650      	mov	r0, sl
 800d9b8:	f7ff ff5a 	bl	800d870 <_free_r>
 800d9bc:	e7c7      	b.n	800d94e <__ssputs_r+0x46>
	...

0800d9c0 <_svfiprintf_r>:
 800d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c4:	4698      	mov	r8, r3
 800d9c6:	898b      	ldrh	r3, [r1, #12]
 800d9c8:	061b      	lsls	r3, r3, #24
 800d9ca:	b09d      	sub	sp, #116	; 0x74
 800d9cc:	4607      	mov	r7, r0
 800d9ce:	460d      	mov	r5, r1
 800d9d0:	4614      	mov	r4, r2
 800d9d2:	d50e      	bpl.n	800d9f2 <_svfiprintf_r+0x32>
 800d9d4:	690b      	ldr	r3, [r1, #16]
 800d9d6:	b963      	cbnz	r3, 800d9f2 <_svfiprintf_r+0x32>
 800d9d8:	2140      	movs	r1, #64	; 0x40
 800d9da:	f7fd fe5b 	bl	800b694 <_malloc_r>
 800d9de:	6028      	str	r0, [r5, #0]
 800d9e0:	6128      	str	r0, [r5, #16]
 800d9e2:	b920      	cbnz	r0, 800d9ee <_svfiprintf_r+0x2e>
 800d9e4:	230c      	movs	r3, #12
 800d9e6:	603b      	str	r3, [r7, #0]
 800d9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ec:	e0d1      	b.n	800db92 <_svfiprintf_r+0x1d2>
 800d9ee:	2340      	movs	r3, #64	; 0x40
 800d9f0:	616b      	str	r3, [r5, #20]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9f6:	2320      	movs	r3, #32
 800d9f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800da00:	2330      	movs	r3, #48	; 0x30
 800da02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dbac <_svfiprintf_r+0x1ec>
 800da06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da0a:	f04f 0901 	mov.w	r9, #1
 800da0e:	4623      	mov	r3, r4
 800da10:	469a      	mov	sl, r3
 800da12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da16:	b10a      	cbz	r2, 800da1c <_svfiprintf_r+0x5c>
 800da18:	2a25      	cmp	r2, #37	; 0x25
 800da1a:	d1f9      	bne.n	800da10 <_svfiprintf_r+0x50>
 800da1c:	ebba 0b04 	subs.w	fp, sl, r4
 800da20:	d00b      	beq.n	800da3a <_svfiprintf_r+0x7a>
 800da22:	465b      	mov	r3, fp
 800da24:	4622      	mov	r2, r4
 800da26:	4629      	mov	r1, r5
 800da28:	4638      	mov	r0, r7
 800da2a:	f7ff ff6d 	bl	800d908 <__ssputs_r>
 800da2e:	3001      	adds	r0, #1
 800da30:	f000 80aa 	beq.w	800db88 <_svfiprintf_r+0x1c8>
 800da34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da36:	445a      	add	r2, fp
 800da38:	9209      	str	r2, [sp, #36]	; 0x24
 800da3a:	f89a 3000 	ldrb.w	r3, [sl]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	f000 80a2 	beq.w	800db88 <_svfiprintf_r+0x1c8>
 800da44:	2300      	movs	r3, #0
 800da46:	f04f 32ff 	mov.w	r2, #4294967295
 800da4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da4e:	f10a 0a01 	add.w	sl, sl, #1
 800da52:	9304      	str	r3, [sp, #16]
 800da54:	9307      	str	r3, [sp, #28]
 800da56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da5a:	931a      	str	r3, [sp, #104]	; 0x68
 800da5c:	4654      	mov	r4, sl
 800da5e:	2205      	movs	r2, #5
 800da60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da64:	4851      	ldr	r0, [pc, #324]	; (800dbac <_svfiprintf_r+0x1ec>)
 800da66:	f7f2 fbdb 	bl	8000220 <memchr>
 800da6a:	9a04      	ldr	r2, [sp, #16]
 800da6c:	b9d8      	cbnz	r0, 800daa6 <_svfiprintf_r+0xe6>
 800da6e:	06d0      	lsls	r0, r2, #27
 800da70:	bf44      	itt	mi
 800da72:	2320      	movmi	r3, #32
 800da74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da78:	0711      	lsls	r1, r2, #28
 800da7a:	bf44      	itt	mi
 800da7c:	232b      	movmi	r3, #43	; 0x2b
 800da7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da82:	f89a 3000 	ldrb.w	r3, [sl]
 800da86:	2b2a      	cmp	r3, #42	; 0x2a
 800da88:	d015      	beq.n	800dab6 <_svfiprintf_r+0xf6>
 800da8a:	9a07      	ldr	r2, [sp, #28]
 800da8c:	4654      	mov	r4, sl
 800da8e:	2000      	movs	r0, #0
 800da90:	f04f 0c0a 	mov.w	ip, #10
 800da94:	4621      	mov	r1, r4
 800da96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da9a:	3b30      	subs	r3, #48	; 0x30
 800da9c:	2b09      	cmp	r3, #9
 800da9e:	d94e      	bls.n	800db3e <_svfiprintf_r+0x17e>
 800daa0:	b1b0      	cbz	r0, 800dad0 <_svfiprintf_r+0x110>
 800daa2:	9207      	str	r2, [sp, #28]
 800daa4:	e014      	b.n	800dad0 <_svfiprintf_r+0x110>
 800daa6:	eba0 0308 	sub.w	r3, r0, r8
 800daaa:	fa09 f303 	lsl.w	r3, r9, r3
 800daae:	4313      	orrs	r3, r2
 800dab0:	9304      	str	r3, [sp, #16]
 800dab2:	46a2      	mov	sl, r4
 800dab4:	e7d2      	b.n	800da5c <_svfiprintf_r+0x9c>
 800dab6:	9b03      	ldr	r3, [sp, #12]
 800dab8:	1d19      	adds	r1, r3, #4
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	9103      	str	r1, [sp, #12]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	bfbb      	ittet	lt
 800dac2:	425b      	neglt	r3, r3
 800dac4:	f042 0202 	orrlt.w	r2, r2, #2
 800dac8:	9307      	strge	r3, [sp, #28]
 800daca:	9307      	strlt	r3, [sp, #28]
 800dacc:	bfb8      	it	lt
 800dace:	9204      	strlt	r2, [sp, #16]
 800dad0:	7823      	ldrb	r3, [r4, #0]
 800dad2:	2b2e      	cmp	r3, #46	; 0x2e
 800dad4:	d10c      	bne.n	800daf0 <_svfiprintf_r+0x130>
 800dad6:	7863      	ldrb	r3, [r4, #1]
 800dad8:	2b2a      	cmp	r3, #42	; 0x2a
 800dada:	d135      	bne.n	800db48 <_svfiprintf_r+0x188>
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	1d1a      	adds	r2, r3, #4
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	9203      	str	r2, [sp, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	bfb8      	it	lt
 800dae8:	f04f 33ff 	movlt.w	r3, #4294967295
 800daec:	3402      	adds	r4, #2
 800daee:	9305      	str	r3, [sp, #20]
 800daf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dbbc <_svfiprintf_r+0x1fc>
 800daf4:	7821      	ldrb	r1, [r4, #0]
 800daf6:	2203      	movs	r2, #3
 800daf8:	4650      	mov	r0, sl
 800dafa:	f7f2 fb91 	bl	8000220 <memchr>
 800dafe:	b140      	cbz	r0, 800db12 <_svfiprintf_r+0x152>
 800db00:	2340      	movs	r3, #64	; 0x40
 800db02:	eba0 000a 	sub.w	r0, r0, sl
 800db06:	fa03 f000 	lsl.w	r0, r3, r0
 800db0a:	9b04      	ldr	r3, [sp, #16]
 800db0c:	4303      	orrs	r3, r0
 800db0e:	3401      	adds	r4, #1
 800db10:	9304      	str	r3, [sp, #16]
 800db12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db16:	4826      	ldr	r0, [pc, #152]	; (800dbb0 <_svfiprintf_r+0x1f0>)
 800db18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db1c:	2206      	movs	r2, #6
 800db1e:	f7f2 fb7f 	bl	8000220 <memchr>
 800db22:	2800      	cmp	r0, #0
 800db24:	d038      	beq.n	800db98 <_svfiprintf_r+0x1d8>
 800db26:	4b23      	ldr	r3, [pc, #140]	; (800dbb4 <_svfiprintf_r+0x1f4>)
 800db28:	bb1b      	cbnz	r3, 800db72 <_svfiprintf_r+0x1b2>
 800db2a:	9b03      	ldr	r3, [sp, #12]
 800db2c:	3307      	adds	r3, #7
 800db2e:	f023 0307 	bic.w	r3, r3, #7
 800db32:	3308      	adds	r3, #8
 800db34:	9303      	str	r3, [sp, #12]
 800db36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db38:	4433      	add	r3, r6
 800db3a:	9309      	str	r3, [sp, #36]	; 0x24
 800db3c:	e767      	b.n	800da0e <_svfiprintf_r+0x4e>
 800db3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800db42:	460c      	mov	r4, r1
 800db44:	2001      	movs	r0, #1
 800db46:	e7a5      	b.n	800da94 <_svfiprintf_r+0xd4>
 800db48:	2300      	movs	r3, #0
 800db4a:	3401      	adds	r4, #1
 800db4c:	9305      	str	r3, [sp, #20]
 800db4e:	4619      	mov	r1, r3
 800db50:	f04f 0c0a 	mov.w	ip, #10
 800db54:	4620      	mov	r0, r4
 800db56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db5a:	3a30      	subs	r2, #48	; 0x30
 800db5c:	2a09      	cmp	r2, #9
 800db5e:	d903      	bls.n	800db68 <_svfiprintf_r+0x1a8>
 800db60:	2b00      	cmp	r3, #0
 800db62:	d0c5      	beq.n	800daf0 <_svfiprintf_r+0x130>
 800db64:	9105      	str	r1, [sp, #20]
 800db66:	e7c3      	b.n	800daf0 <_svfiprintf_r+0x130>
 800db68:	fb0c 2101 	mla	r1, ip, r1, r2
 800db6c:	4604      	mov	r4, r0
 800db6e:	2301      	movs	r3, #1
 800db70:	e7f0      	b.n	800db54 <_svfiprintf_r+0x194>
 800db72:	ab03      	add	r3, sp, #12
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	462a      	mov	r2, r5
 800db78:	4b0f      	ldr	r3, [pc, #60]	; (800dbb8 <_svfiprintf_r+0x1f8>)
 800db7a:	a904      	add	r1, sp, #16
 800db7c:	4638      	mov	r0, r7
 800db7e:	f7fd fe9d 	bl	800b8bc <_printf_float>
 800db82:	1c42      	adds	r2, r0, #1
 800db84:	4606      	mov	r6, r0
 800db86:	d1d6      	bne.n	800db36 <_svfiprintf_r+0x176>
 800db88:	89ab      	ldrh	r3, [r5, #12]
 800db8a:	065b      	lsls	r3, r3, #25
 800db8c:	f53f af2c 	bmi.w	800d9e8 <_svfiprintf_r+0x28>
 800db90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db92:	b01d      	add	sp, #116	; 0x74
 800db94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db98:	ab03      	add	r3, sp, #12
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	462a      	mov	r2, r5
 800db9e:	4b06      	ldr	r3, [pc, #24]	; (800dbb8 <_svfiprintf_r+0x1f8>)
 800dba0:	a904      	add	r1, sp, #16
 800dba2:	4638      	mov	r0, r7
 800dba4:	f7fe f92e 	bl	800be04 <_printf_i>
 800dba8:	e7eb      	b.n	800db82 <_svfiprintf_r+0x1c2>
 800dbaa:	bf00      	nop
 800dbac:	0800ff2c 	.word	0x0800ff2c
 800dbb0:	0800ff36 	.word	0x0800ff36
 800dbb4:	0800b8bd 	.word	0x0800b8bd
 800dbb8:	0800d909 	.word	0x0800d909
 800dbbc:	0800ff32 	.word	0x0800ff32

0800dbc0 <_read_r>:
 800dbc0:	b538      	push	{r3, r4, r5, lr}
 800dbc2:	4d07      	ldr	r5, [pc, #28]	; (800dbe0 <_read_r+0x20>)
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	4608      	mov	r0, r1
 800dbc8:	4611      	mov	r1, r2
 800dbca:	2200      	movs	r2, #0
 800dbcc:	602a      	str	r2, [r5, #0]
 800dbce:	461a      	mov	r2, r3
 800dbd0:	f001 fcea 	bl	800f5a8 <_read>
 800dbd4:	1c43      	adds	r3, r0, #1
 800dbd6:	d102      	bne.n	800dbde <_read_r+0x1e>
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	b103      	cbz	r3, 800dbde <_read_r+0x1e>
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	bd38      	pop	{r3, r4, r5, pc}
 800dbe0:	2000679c 	.word	0x2000679c

0800dbe4 <__assert_func>:
 800dbe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbe6:	4614      	mov	r4, r2
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4b09      	ldr	r3, [pc, #36]	; (800dc10 <__assert_func+0x2c>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4605      	mov	r5, r0
 800dbf0:	68d8      	ldr	r0, [r3, #12]
 800dbf2:	b14c      	cbz	r4, 800dc08 <__assert_func+0x24>
 800dbf4:	4b07      	ldr	r3, [pc, #28]	; (800dc14 <__assert_func+0x30>)
 800dbf6:	9100      	str	r1, [sp, #0]
 800dbf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbfc:	4906      	ldr	r1, [pc, #24]	; (800dc18 <__assert_func+0x34>)
 800dbfe:	462b      	mov	r3, r5
 800dc00:	f000 f80e 	bl	800dc20 <fiprintf>
 800dc04:	f000 faa0 	bl	800e148 <abort>
 800dc08:	4b04      	ldr	r3, [pc, #16]	; (800dc1c <__assert_func+0x38>)
 800dc0a:	461c      	mov	r4, r3
 800dc0c:	e7f3      	b.n	800dbf6 <__assert_func+0x12>
 800dc0e:	bf00      	nop
 800dc10:	20000024 	.word	0x20000024
 800dc14:	0800ff3d 	.word	0x0800ff3d
 800dc18:	0800ff4a 	.word	0x0800ff4a
 800dc1c:	0800ff78 	.word	0x0800ff78

0800dc20 <fiprintf>:
 800dc20:	b40e      	push	{r1, r2, r3}
 800dc22:	b503      	push	{r0, r1, lr}
 800dc24:	4601      	mov	r1, r0
 800dc26:	ab03      	add	r3, sp, #12
 800dc28:	4805      	ldr	r0, [pc, #20]	; (800dc40 <fiprintf+0x20>)
 800dc2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc2e:	6800      	ldr	r0, [r0, #0]
 800dc30:	9301      	str	r3, [sp, #4]
 800dc32:	f000 f88b 	bl	800dd4c <_vfiprintf_r>
 800dc36:	b002      	add	sp, #8
 800dc38:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc3c:	b003      	add	sp, #12
 800dc3e:	4770      	bx	lr
 800dc40:	20000024 	.word	0x20000024

0800dc44 <__ascii_mbtowc>:
 800dc44:	b082      	sub	sp, #8
 800dc46:	b901      	cbnz	r1, 800dc4a <__ascii_mbtowc+0x6>
 800dc48:	a901      	add	r1, sp, #4
 800dc4a:	b142      	cbz	r2, 800dc5e <__ascii_mbtowc+0x1a>
 800dc4c:	b14b      	cbz	r3, 800dc62 <__ascii_mbtowc+0x1e>
 800dc4e:	7813      	ldrb	r3, [r2, #0]
 800dc50:	600b      	str	r3, [r1, #0]
 800dc52:	7812      	ldrb	r2, [r2, #0]
 800dc54:	1e10      	subs	r0, r2, #0
 800dc56:	bf18      	it	ne
 800dc58:	2001      	movne	r0, #1
 800dc5a:	b002      	add	sp, #8
 800dc5c:	4770      	bx	lr
 800dc5e:	4610      	mov	r0, r2
 800dc60:	e7fb      	b.n	800dc5a <__ascii_mbtowc+0x16>
 800dc62:	f06f 0001 	mvn.w	r0, #1
 800dc66:	e7f8      	b.n	800dc5a <__ascii_mbtowc+0x16>

0800dc68 <memmove>:
 800dc68:	4288      	cmp	r0, r1
 800dc6a:	b510      	push	{r4, lr}
 800dc6c:	eb01 0402 	add.w	r4, r1, r2
 800dc70:	d902      	bls.n	800dc78 <memmove+0x10>
 800dc72:	4284      	cmp	r4, r0
 800dc74:	4623      	mov	r3, r4
 800dc76:	d807      	bhi.n	800dc88 <memmove+0x20>
 800dc78:	1e43      	subs	r3, r0, #1
 800dc7a:	42a1      	cmp	r1, r4
 800dc7c:	d008      	beq.n	800dc90 <memmove+0x28>
 800dc7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc86:	e7f8      	b.n	800dc7a <memmove+0x12>
 800dc88:	4402      	add	r2, r0
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	428a      	cmp	r2, r1
 800dc8e:	d100      	bne.n	800dc92 <memmove+0x2a>
 800dc90:	bd10      	pop	{r4, pc}
 800dc92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc9a:	e7f7      	b.n	800dc8c <memmove+0x24>

0800dc9c <_realloc_r>:
 800dc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca0:	4680      	mov	r8, r0
 800dca2:	4614      	mov	r4, r2
 800dca4:	460e      	mov	r6, r1
 800dca6:	b921      	cbnz	r1, 800dcb2 <_realloc_r+0x16>
 800dca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcac:	4611      	mov	r1, r2
 800dcae:	f7fd bcf1 	b.w	800b694 <_malloc_r>
 800dcb2:	b92a      	cbnz	r2, 800dcc0 <_realloc_r+0x24>
 800dcb4:	f7ff fddc 	bl	800d870 <_free_r>
 800dcb8:	4625      	mov	r5, r4
 800dcba:	4628      	mov	r0, r5
 800dcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc0:	f000 faae 	bl	800e220 <_malloc_usable_size_r>
 800dcc4:	4284      	cmp	r4, r0
 800dcc6:	4607      	mov	r7, r0
 800dcc8:	d802      	bhi.n	800dcd0 <_realloc_r+0x34>
 800dcca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcce:	d812      	bhi.n	800dcf6 <_realloc_r+0x5a>
 800dcd0:	4621      	mov	r1, r4
 800dcd2:	4640      	mov	r0, r8
 800dcd4:	f7fd fcde 	bl	800b694 <_malloc_r>
 800dcd8:	4605      	mov	r5, r0
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d0ed      	beq.n	800dcba <_realloc_r+0x1e>
 800dcde:	42bc      	cmp	r4, r7
 800dce0:	4622      	mov	r2, r4
 800dce2:	4631      	mov	r1, r6
 800dce4:	bf28      	it	cs
 800dce6:	463a      	movcs	r2, r7
 800dce8:	f7fd fc9d 	bl	800b626 <memcpy>
 800dcec:	4631      	mov	r1, r6
 800dcee:	4640      	mov	r0, r8
 800dcf0:	f7ff fdbe 	bl	800d870 <_free_r>
 800dcf4:	e7e1      	b.n	800dcba <_realloc_r+0x1e>
 800dcf6:	4635      	mov	r5, r6
 800dcf8:	e7df      	b.n	800dcba <_realloc_r+0x1e>

0800dcfa <__sfputc_r>:
 800dcfa:	6893      	ldr	r3, [r2, #8]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	b410      	push	{r4}
 800dd02:	6093      	str	r3, [r2, #8]
 800dd04:	da08      	bge.n	800dd18 <__sfputc_r+0x1e>
 800dd06:	6994      	ldr	r4, [r2, #24]
 800dd08:	42a3      	cmp	r3, r4
 800dd0a:	db01      	blt.n	800dd10 <__sfputc_r+0x16>
 800dd0c:	290a      	cmp	r1, #10
 800dd0e:	d103      	bne.n	800dd18 <__sfputc_r+0x1e>
 800dd10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd14:	f000 b94a 	b.w	800dfac <__swbuf_r>
 800dd18:	6813      	ldr	r3, [r2, #0]
 800dd1a:	1c58      	adds	r0, r3, #1
 800dd1c:	6010      	str	r0, [r2, #0]
 800dd1e:	7019      	strb	r1, [r3, #0]
 800dd20:	4608      	mov	r0, r1
 800dd22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <__sfputs_r>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	4606      	mov	r6, r0
 800dd2c:	460f      	mov	r7, r1
 800dd2e:	4614      	mov	r4, r2
 800dd30:	18d5      	adds	r5, r2, r3
 800dd32:	42ac      	cmp	r4, r5
 800dd34:	d101      	bne.n	800dd3a <__sfputs_r+0x12>
 800dd36:	2000      	movs	r0, #0
 800dd38:	e007      	b.n	800dd4a <__sfputs_r+0x22>
 800dd3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd3e:	463a      	mov	r2, r7
 800dd40:	4630      	mov	r0, r6
 800dd42:	f7ff ffda 	bl	800dcfa <__sfputc_r>
 800dd46:	1c43      	adds	r3, r0, #1
 800dd48:	d1f3      	bne.n	800dd32 <__sfputs_r+0xa>
 800dd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd4c <_vfiprintf_r>:
 800dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd50:	460d      	mov	r5, r1
 800dd52:	b09d      	sub	sp, #116	; 0x74
 800dd54:	4614      	mov	r4, r2
 800dd56:	4698      	mov	r8, r3
 800dd58:	4606      	mov	r6, r0
 800dd5a:	b118      	cbz	r0, 800dd64 <_vfiprintf_r+0x18>
 800dd5c:	6983      	ldr	r3, [r0, #24]
 800dd5e:	b90b      	cbnz	r3, 800dd64 <_vfiprintf_r+0x18>
 800dd60:	f7fd fb9c 	bl	800b49c <__sinit>
 800dd64:	4b89      	ldr	r3, [pc, #548]	; (800df8c <_vfiprintf_r+0x240>)
 800dd66:	429d      	cmp	r5, r3
 800dd68:	d11b      	bne.n	800dda2 <_vfiprintf_r+0x56>
 800dd6a:	6875      	ldr	r5, [r6, #4]
 800dd6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd6e:	07d9      	lsls	r1, r3, #31
 800dd70:	d405      	bmi.n	800dd7e <_vfiprintf_r+0x32>
 800dd72:	89ab      	ldrh	r3, [r5, #12]
 800dd74:	059a      	lsls	r2, r3, #22
 800dd76:	d402      	bmi.n	800dd7e <_vfiprintf_r+0x32>
 800dd78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd7a:	f7fd fc52 	bl	800b622 <__retarget_lock_acquire_recursive>
 800dd7e:	89ab      	ldrh	r3, [r5, #12]
 800dd80:	071b      	lsls	r3, r3, #28
 800dd82:	d501      	bpl.n	800dd88 <_vfiprintf_r+0x3c>
 800dd84:	692b      	ldr	r3, [r5, #16]
 800dd86:	b9eb      	cbnz	r3, 800ddc4 <_vfiprintf_r+0x78>
 800dd88:	4629      	mov	r1, r5
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	f000 f96e 	bl	800e06c <__swsetup_r>
 800dd90:	b1c0      	cbz	r0, 800ddc4 <_vfiprintf_r+0x78>
 800dd92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd94:	07dc      	lsls	r4, r3, #31
 800dd96:	d50e      	bpl.n	800ddb6 <_vfiprintf_r+0x6a>
 800dd98:	f04f 30ff 	mov.w	r0, #4294967295
 800dd9c:	b01d      	add	sp, #116	; 0x74
 800dd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda2:	4b7b      	ldr	r3, [pc, #492]	; (800df90 <_vfiprintf_r+0x244>)
 800dda4:	429d      	cmp	r5, r3
 800dda6:	d101      	bne.n	800ddac <_vfiprintf_r+0x60>
 800dda8:	68b5      	ldr	r5, [r6, #8]
 800ddaa:	e7df      	b.n	800dd6c <_vfiprintf_r+0x20>
 800ddac:	4b79      	ldr	r3, [pc, #484]	; (800df94 <_vfiprintf_r+0x248>)
 800ddae:	429d      	cmp	r5, r3
 800ddb0:	bf08      	it	eq
 800ddb2:	68f5      	ldreq	r5, [r6, #12]
 800ddb4:	e7da      	b.n	800dd6c <_vfiprintf_r+0x20>
 800ddb6:	89ab      	ldrh	r3, [r5, #12]
 800ddb8:	0598      	lsls	r0, r3, #22
 800ddba:	d4ed      	bmi.n	800dd98 <_vfiprintf_r+0x4c>
 800ddbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddbe:	f7fd fc31 	bl	800b624 <__retarget_lock_release_recursive>
 800ddc2:	e7e9      	b.n	800dd98 <_vfiprintf_r+0x4c>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	9309      	str	r3, [sp, #36]	; 0x24
 800ddc8:	2320      	movs	r3, #32
 800ddca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddce:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddd2:	2330      	movs	r3, #48	; 0x30
 800ddd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df98 <_vfiprintf_r+0x24c>
 800ddd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dddc:	f04f 0901 	mov.w	r9, #1
 800dde0:	4623      	mov	r3, r4
 800dde2:	469a      	mov	sl, r3
 800dde4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dde8:	b10a      	cbz	r2, 800ddee <_vfiprintf_r+0xa2>
 800ddea:	2a25      	cmp	r2, #37	; 0x25
 800ddec:	d1f9      	bne.n	800dde2 <_vfiprintf_r+0x96>
 800ddee:	ebba 0b04 	subs.w	fp, sl, r4
 800ddf2:	d00b      	beq.n	800de0c <_vfiprintf_r+0xc0>
 800ddf4:	465b      	mov	r3, fp
 800ddf6:	4622      	mov	r2, r4
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	f7ff ff94 	bl	800dd28 <__sfputs_r>
 800de00:	3001      	adds	r0, #1
 800de02:	f000 80aa 	beq.w	800df5a <_vfiprintf_r+0x20e>
 800de06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de08:	445a      	add	r2, fp
 800de0a:	9209      	str	r2, [sp, #36]	; 0x24
 800de0c:	f89a 3000 	ldrb.w	r3, [sl]
 800de10:	2b00      	cmp	r3, #0
 800de12:	f000 80a2 	beq.w	800df5a <_vfiprintf_r+0x20e>
 800de16:	2300      	movs	r3, #0
 800de18:	f04f 32ff 	mov.w	r2, #4294967295
 800de1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de20:	f10a 0a01 	add.w	sl, sl, #1
 800de24:	9304      	str	r3, [sp, #16]
 800de26:	9307      	str	r3, [sp, #28]
 800de28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de2c:	931a      	str	r3, [sp, #104]	; 0x68
 800de2e:	4654      	mov	r4, sl
 800de30:	2205      	movs	r2, #5
 800de32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de36:	4858      	ldr	r0, [pc, #352]	; (800df98 <_vfiprintf_r+0x24c>)
 800de38:	f7f2 f9f2 	bl	8000220 <memchr>
 800de3c:	9a04      	ldr	r2, [sp, #16]
 800de3e:	b9d8      	cbnz	r0, 800de78 <_vfiprintf_r+0x12c>
 800de40:	06d1      	lsls	r1, r2, #27
 800de42:	bf44      	itt	mi
 800de44:	2320      	movmi	r3, #32
 800de46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de4a:	0713      	lsls	r3, r2, #28
 800de4c:	bf44      	itt	mi
 800de4e:	232b      	movmi	r3, #43	; 0x2b
 800de50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de54:	f89a 3000 	ldrb.w	r3, [sl]
 800de58:	2b2a      	cmp	r3, #42	; 0x2a
 800de5a:	d015      	beq.n	800de88 <_vfiprintf_r+0x13c>
 800de5c:	9a07      	ldr	r2, [sp, #28]
 800de5e:	4654      	mov	r4, sl
 800de60:	2000      	movs	r0, #0
 800de62:	f04f 0c0a 	mov.w	ip, #10
 800de66:	4621      	mov	r1, r4
 800de68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de6c:	3b30      	subs	r3, #48	; 0x30
 800de6e:	2b09      	cmp	r3, #9
 800de70:	d94e      	bls.n	800df10 <_vfiprintf_r+0x1c4>
 800de72:	b1b0      	cbz	r0, 800dea2 <_vfiprintf_r+0x156>
 800de74:	9207      	str	r2, [sp, #28]
 800de76:	e014      	b.n	800dea2 <_vfiprintf_r+0x156>
 800de78:	eba0 0308 	sub.w	r3, r0, r8
 800de7c:	fa09 f303 	lsl.w	r3, r9, r3
 800de80:	4313      	orrs	r3, r2
 800de82:	9304      	str	r3, [sp, #16]
 800de84:	46a2      	mov	sl, r4
 800de86:	e7d2      	b.n	800de2e <_vfiprintf_r+0xe2>
 800de88:	9b03      	ldr	r3, [sp, #12]
 800de8a:	1d19      	adds	r1, r3, #4
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	9103      	str	r1, [sp, #12]
 800de90:	2b00      	cmp	r3, #0
 800de92:	bfbb      	ittet	lt
 800de94:	425b      	neglt	r3, r3
 800de96:	f042 0202 	orrlt.w	r2, r2, #2
 800de9a:	9307      	strge	r3, [sp, #28]
 800de9c:	9307      	strlt	r3, [sp, #28]
 800de9e:	bfb8      	it	lt
 800dea0:	9204      	strlt	r2, [sp, #16]
 800dea2:	7823      	ldrb	r3, [r4, #0]
 800dea4:	2b2e      	cmp	r3, #46	; 0x2e
 800dea6:	d10c      	bne.n	800dec2 <_vfiprintf_r+0x176>
 800dea8:	7863      	ldrb	r3, [r4, #1]
 800deaa:	2b2a      	cmp	r3, #42	; 0x2a
 800deac:	d135      	bne.n	800df1a <_vfiprintf_r+0x1ce>
 800deae:	9b03      	ldr	r3, [sp, #12]
 800deb0:	1d1a      	adds	r2, r3, #4
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	9203      	str	r2, [sp, #12]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	bfb8      	it	lt
 800deba:	f04f 33ff 	movlt.w	r3, #4294967295
 800debe:	3402      	adds	r4, #2
 800dec0:	9305      	str	r3, [sp, #20]
 800dec2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dfa8 <_vfiprintf_r+0x25c>
 800dec6:	7821      	ldrb	r1, [r4, #0]
 800dec8:	2203      	movs	r2, #3
 800deca:	4650      	mov	r0, sl
 800decc:	f7f2 f9a8 	bl	8000220 <memchr>
 800ded0:	b140      	cbz	r0, 800dee4 <_vfiprintf_r+0x198>
 800ded2:	2340      	movs	r3, #64	; 0x40
 800ded4:	eba0 000a 	sub.w	r0, r0, sl
 800ded8:	fa03 f000 	lsl.w	r0, r3, r0
 800dedc:	9b04      	ldr	r3, [sp, #16]
 800dede:	4303      	orrs	r3, r0
 800dee0:	3401      	adds	r4, #1
 800dee2:	9304      	str	r3, [sp, #16]
 800dee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dee8:	482c      	ldr	r0, [pc, #176]	; (800df9c <_vfiprintf_r+0x250>)
 800deea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800deee:	2206      	movs	r2, #6
 800def0:	f7f2 f996 	bl	8000220 <memchr>
 800def4:	2800      	cmp	r0, #0
 800def6:	d03f      	beq.n	800df78 <_vfiprintf_r+0x22c>
 800def8:	4b29      	ldr	r3, [pc, #164]	; (800dfa0 <_vfiprintf_r+0x254>)
 800defa:	bb1b      	cbnz	r3, 800df44 <_vfiprintf_r+0x1f8>
 800defc:	9b03      	ldr	r3, [sp, #12]
 800defe:	3307      	adds	r3, #7
 800df00:	f023 0307 	bic.w	r3, r3, #7
 800df04:	3308      	adds	r3, #8
 800df06:	9303      	str	r3, [sp, #12]
 800df08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df0a:	443b      	add	r3, r7
 800df0c:	9309      	str	r3, [sp, #36]	; 0x24
 800df0e:	e767      	b.n	800dde0 <_vfiprintf_r+0x94>
 800df10:	fb0c 3202 	mla	r2, ip, r2, r3
 800df14:	460c      	mov	r4, r1
 800df16:	2001      	movs	r0, #1
 800df18:	e7a5      	b.n	800de66 <_vfiprintf_r+0x11a>
 800df1a:	2300      	movs	r3, #0
 800df1c:	3401      	adds	r4, #1
 800df1e:	9305      	str	r3, [sp, #20]
 800df20:	4619      	mov	r1, r3
 800df22:	f04f 0c0a 	mov.w	ip, #10
 800df26:	4620      	mov	r0, r4
 800df28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df2c:	3a30      	subs	r2, #48	; 0x30
 800df2e:	2a09      	cmp	r2, #9
 800df30:	d903      	bls.n	800df3a <_vfiprintf_r+0x1ee>
 800df32:	2b00      	cmp	r3, #0
 800df34:	d0c5      	beq.n	800dec2 <_vfiprintf_r+0x176>
 800df36:	9105      	str	r1, [sp, #20]
 800df38:	e7c3      	b.n	800dec2 <_vfiprintf_r+0x176>
 800df3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800df3e:	4604      	mov	r4, r0
 800df40:	2301      	movs	r3, #1
 800df42:	e7f0      	b.n	800df26 <_vfiprintf_r+0x1da>
 800df44:	ab03      	add	r3, sp, #12
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	462a      	mov	r2, r5
 800df4a:	4b16      	ldr	r3, [pc, #88]	; (800dfa4 <_vfiprintf_r+0x258>)
 800df4c:	a904      	add	r1, sp, #16
 800df4e:	4630      	mov	r0, r6
 800df50:	f7fd fcb4 	bl	800b8bc <_printf_float>
 800df54:	4607      	mov	r7, r0
 800df56:	1c78      	adds	r0, r7, #1
 800df58:	d1d6      	bne.n	800df08 <_vfiprintf_r+0x1bc>
 800df5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df5c:	07d9      	lsls	r1, r3, #31
 800df5e:	d405      	bmi.n	800df6c <_vfiprintf_r+0x220>
 800df60:	89ab      	ldrh	r3, [r5, #12]
 800df62:	059a      	lsls	r2, r3, #22
 800df64:	d402      	bmi.n	800df6c <_vfiprintf_r+0x220>
 800df66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df68:	f7fd fb5c 	bl	800b624 <__retarget_lock_release_recursive>
 800df6c:	89ab      	ldrh	r3, [r5, #12]
 800df6e:	065b      	lsls	r3, r3, #25
 800df70:	f53f af12 	bmi.w	800dd98 <_vfiprintf_r+0x4c>
 800df74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df76:	e711      	b.n	800dd9c <_vfiprintf_r+0x50>
 800df78:	ab03      	add	r3, sp, #12
 800df7a:	9300      	str	r3, [sp, #0]
 800df7c:	462a      	mov	r2, r5
 800df7e:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <_vfiprintf_r+0x258>)
 800df80:	a904      	add	r1, sp, #16
 800df82:	4630      	mov	r0, r6
 800df84:	f7fd ff3e 	bl	800be04 <_printf_i>
 800df88:	e7e4      	b.n	800df54 <_vfiprintf_r+0x208>
 800df8a:	bf00      	nop
 800df8c:	0800fcc8 	.word	0x0800fcc8
 800df90:	0800fce8 	.word	0x0800fce8
 800df94:	0800fca8 	.word	0x0800fca8
 800df98:	0800ff2c 	.word	0x0800ff2c
 800df9c:	0800ff36 	.word	0x0800ff36
 800dfa0:	0800b8bd 	.word	0x0800b8bd
 800dfa4:	0800dd29 	.word	0x0800dd29
 800dfa8:	0800ff32 	.word	0x0800ff32

0800dfac <__swbuf_r>:
 800dfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfae:	460e      	mov	r6, r1
 800dfb0:	4614      	mov	r4, r2
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	b118      	cbz	r0, 800dfbe <__swbuf_r+0x12>
 800dfb6:	6983      	ldr	r3, [r0, #24]
 800dfb8:	b90b      	cbnz	r3, 800dfbe <__swbuf_r+0x12>
 800dfba:	f7fd fa6f 	bl	800b49c <__sinit>
 800dfbe:	4b21      	ldr	r3, [pc, #132]	; (800e044 <__swbuf_r+0x98>)
 800dfc0:	429c      	cmp	r4, r3
 800dfc2:	d12b      	bne.n	800e01c <__swbuf_r+0x70>
 800dfc4:	686c      	ldr	r4, [r5, #4]
 800dfc6:	69a3      	ldr	r3, [r4, #24]
 800dfc8:	60a3      	str	r3, [r4, #8]
 800dfca:	89a3      	ldrh	r3, [r4, #12]
 800dfcc:	071a      	lsls	r2, r3, #28
 800dfce:	d52f      	bpl.n	800e030 <__swbuf_r+0x84>
 800dfd0:	6923      	ldr	r3, [r4, #16]
 800dfd2:	b36b      	cbz	r3, 800e030 <__swbuf_r+0x84>
 800dfd4:	6923      	ldr	r3, [r4, #16]
 800dfd6:	6820      	ldr	r0, [r4, #0]
 800dfd8:	1ac0      	subs	r0, r0, r3
 800dfda:	6963      	ldr	r3, [r4, #20]
 800dfdc:	b2f6      	uxtb	r6, r6
 800dfde:	4283      	cmp	r3, r0
 800dfe0:	4637      	mov	r7, r6
 800dfe2:	dc04      	bgt.n	800dfee <__swbuf_r+0x42>
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	f7ff f842 	bl	800d070 <_fflush_r>
 800dfec:	bb30      	cbnz	r0, 800e03c <__swbuf_r+0x90>
 800dfee:	68a3      	ldr	r3, [r4, #8]
 800dff0:	3b01      	subs	r3, #1
 800dff2:	60a3      	str	r3, [r4, #8]
 800dff4:	6823      	ldr	r3, [r4, #0]
 800dff6:	1c5a      	adds	r2, r3, #1
 800dff8:	6022      	str	r2, [r4, #0]
 800dffa:	701e      	strb	r6, [r3, #0]
 800dffc:	6963      	ldr	r3, [r4, #20]
 800dffe:	3001      	adds	r0, #1
 800e000:	4283      	cmp	r3, r0
 800e002:	d004      	beq.n	800e00e <__swbuf_r+0x62>
 800e004:	89a3      	ldrh	r3, [r4, #12]
 800e006:	07db      	lsls	r3, r3, #31
 800e008:	d506      	bpl.n	800e018 <__swbuf_r+0x6c>
 800e00a:	2e0a      	cmp	r6, #10
 800e00c:	d104      	bne.n	800e018 <__swbuf_r+0x6c>
 800e00e:	4621      	mov	r1, r4
 800e010:	4628      	mov	r0, r5
 800e012:	f7ff f82d 	bl	800d070 <_fflush_r>
 800e016:	b988      	cbnz	r0, 800e03c <__swbuf_r+0x90>
 800e018:	4638      	mov	r0, r7
 800e01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e01c:	4b0a      	ldr	r3, [pc, #40]	; (800e048 <__swbuf_r+0x9c>)
 800e01e:	429c      	cmp	r4, r3
 800e020:	d101      	bne.n	800e026 <__swbuf_r+0x7a>
 800e022:	68ac      	ldr	r4, [r5, #8]
 800e024:	e7cf      	b.n	800dfc6 <__swbuf_r+0x1a>
 800e026:	4b09      	ldr	r3, [pc, #36]	; (800e04c <__swbuf_r+0xa0>)
 800e028:	429c      	cmp	r4, r3
 800e02a:	bf08      	it	eq
 800e02c:	68ec      	ldreq	r4, [r5, #12]
 800e02e:	e7ca      	b.n	800dfc6 <__swbuf_r+0x1a>
 800e030:	4621      	mov	r1, r4
 800e032:	4628      	mov	r0, r5
 800e034:	f000 f81a 	bl	800e06c <__swsetup_r>
 800e038:	2800      	cmp	r0, #0
 800e03a:	d0cb      	beq.n	800dfd4 <__swbuf_r+0x28>
 800e03c:	f04f 37ff 	mov.w	r7, #4294967295
 800e040:	e7ea      	b.n	800e018 <__swbuf_r+0x6c>
 800e042:	bf00      	nop
 800e044:	0800fcc8 	.word	0x0800fcc8
 800e048:	0800fce8 	.word	0x0800fce8
 800e04c:	0800fca8 	.word	0x0800fca8

0800e050 <__ascii_wctomb>:
 800e050:	b149      	cbz	r1, 800e066 <__ascii_wctomb+0x16>
 800e052:	2aff      	cmp	r2, #255	; 0xff
 800e054:	bf85      	ittet	hi
 800e056:	238a      	movhi	r3, #138	; 0x8a
 800e058:	6003      	strhi	r3, [r0, #0]
 800e05a:	700a      	strbls	r2, [r1, #0]
 800e05c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e060:	bf98      	it	ls
 800e062:	2001      	movls	r0, #1
 800e064:	4770      	bx	lr
 800e066:	4608      	mov	r0, r1
 800e068:	4770      	bx	lr
	...

0800e06c <__swsetup_r>:
 800e06c:	4b32      	ldr	r3, [pc, #200]	; (800e138 <__swsetup_r+0xcc>)
 800e06e:	b570      	push	{r4, r5, r6, lr}
 800e070:	681d      	ldr	r5, [r3, #0]
 800e072:	4606      	mov	r6, r0
 800e074:	460c      	mov	r4, r1
 800e076:	b125      	cbz	r5, 800e082 <__swsetup_r+0x16>
 800e078:	69ab      	ldr	r3, [r5, #24]
 800e07a:	b913      	cbnz	r3, 800e082 <__swsetup_r+0x16>
 800e07c:	4628      	mov	r0, r5
 800e07e:	f7fd fa0d 	bl	800b49c <__sinit>
 800e082:	4b2e      	ldr	r3, [pc, #184]	; (800e13c <__swsetup_r+0xd0>)
 800e084:	429c      	cmp	r4, r3
 800e086:	d10f      	bne.n	800e0a8 <__swsetup_r+0x3c>
 800e088:	686c      	ldr	r4, [r5, #4]
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e090:	0719      	lsls	r1, r3, #28
 800e092:	d42c      	bmi.n	800e0ee <__swsetup_r+0x82>
 800e094:	06dd      	lsls	r5, r3, #27
 800e096:	d411      	bmi.n	800e0bc <__swsetup_r+0x50>
 800e098:	2309      	movs	r3, #9
 800e09a:	6033      	str	r3, [r6, #0]
 800e09c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0a0:	81a3      	strh	r3, [r4, #12]
 800e0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a6:	e03e      	b.n	800e126 <__swsetup_r+0xba>
 800e0a8:	4b25      	ldr	r3, [pc, #148]	; (800e140 <__swsetup_r+0xd4>)
 800e0aa:	429c      	cmp	r4, r3
 800e0ac:	d101      	bne.n	800e0b2 <__swsetup_r+0x46>
 800e0ae:	68ac      	ldr	r4, [r5, #8]
 800e0b0:	e7eb      	b.n	800e08a <__swsetup_r+0x1e>
 800e0b2:	4b24      	ldr	r3, [pc, #144]	; (800e144 <__swsetup_r+0xd8>)
 800e0b4:	429c      	cmp	r4, r3
 800e0b6:	bf08      	it	eq
 800e0b8:	68ec      	ldreq	r4, [r5, #12]
 800e0ba:	e7e6      	b.n	800e08a <__swsetup_r+0x1e>
 800e0bc:	0758      	lsls	r0, r3, #29
 800e0be:	d512      	bpl.n	800e0e6 <__swsetup_r+0x7a>
 800e0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0c2:	b141      	cbz	r1, 800e0d6 <__swsetup_r+0x6a>
 800e0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0c8:	4299      	cmp	r1, r3
 800e0ca:	d002      	beq.n	800e0d2 <__swsetup_r+0x66>
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	f7ff fbcf 	bl	800d870 <_free_r>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	6363      	str	r3, [r4, #52]	; 0x34
 800e0d6:	89a3      	ldrh	r3, [r4, #12]
 800e0d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0dc:	81a3      	strh	r3, [r4, #12]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	6063      	str	r3, [r4, #4]
 800e0e2:	6923      	ldr	r3, [r4, #16]
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	89a3      	ldrh	r3, [r4, #12]
 800e0e8:	f043 0308 	orr.w	r3, r3, #8
 800e0ec:	81a3      	strh	r3, [r4, #12]
 800e0ee:	6923      	ldr	r3, [r4, #16]
 800e0f0:	b94b      	cbnz	r3, 800e106 <__swsetup_r+0x9a>
 800e0f2:	89a3      	ldrh	r3, [r4, #12]
 800e0f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0fc:	d003      	beq.n	800e106 <__swsetup_r+0x9a>
 800e0fe:	4621      	mov	r1, r4
 800e100:	4630      	mov	r0, r6
 800e102:	f000 f84d 	bl	800e1a0 <__smakebuf_r>
 800e106:	89a0      	ldrh	r0, [r4, #12]
 800e108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e10c:	f010 0301 	ands.w	r3, r0, #1
 800e110:	d00a      	beq.n	800e128 <__swsetup_r+0xbc>
 800e112:	2300      	movs	r3, #0
 800e114:	60a3      	str	r3, [r4, #8]
 800e116:	6963      	ldr	r3, [r4, #20]
 800e118:	425b      	negs	r3, r3
 800e11a:	61a3      	str	r3, [r4, #24]
 800e11c:	6923      	ldr	r3, [r4, #16]
 800e11e:	b943      	cbnz	r3, 800e132 <__swsetup_r+0xc6>
 800e120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e124:	d1ba      	bne.n	800e09c <__swsetup_r+0x30>
 800e126:	bd70      	pop	{r4, r5, r6, pc}
 800e128:	0781      	lsls	r1, r0, #30
 800e12a:	bf58      	it	pl
 800e12c:	6963      	ldrpl	r3, [r4, #20]
 800e12e:	60a3      	str	r3, [r4, #8]
 800e130:	e7f4      	b.n	800e11c <__swsetup_r+0xb0>
 800e132:	2000      	movs	r0, #0
 800e134:	e7f7      	b.n	800e126 <__swsetup_r+0xba>
 800e136:	bf00      	nop
 800e138:	20000024 	.word	0x20000024
 800e13c:	0800fcc8 	.word	0x0800fcc8
 800e140:	0800fce8 	.word	0x0800fce8
 800e144:	0800fca8 	.word	0x0800fca8

0800e148 <abort>:
 800e148:	b508      	push	{r3, lr}
 800e14a:	2006      	movs	r0, #6
 800e14c:	f000 f898 	bl	800e280 <raise>
 800e150:	2001      	movs	r0, #1
 800e152:	f001 fa47 	bl	800f5e4 <_exit>

0800e156 <__swhatbuf_r>:
 800e156:	b570      	push	{r4, r5, r6, lr}
 800e158:	460e      	mov	r6, r1
 800e15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e15e:	2900      	cmp	r1, #0
 800e160:	b096      	sub	sp, #88	; 0x58
 800e162:	4614      	mov	r4, r2
 800e164:	461d      	mov	r5, r3
 800e166:	da08      	bge.n	800e17a <__swhatbuf_r+0x24>
 800e168:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e16c:	2200      	movs	r2, #0
 800e16e:	602a      	str	r2, [r5, #0]
 800e170:	061a      	lsls	r2, r3, #24
 800e172:	d410      	bmi.n	800e196 <__swhatbuf_r+0x40>
 800e174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e178:	e00e      	b.n	800e198 <__swhatbuf_r+0x42>
 800e17a:	466a      	mov	r2, sp
 800e17c:	f000 f89c 	bl	800e2b8 <_fstat_r>
 800e180:	2800      	cmp	r0, #0
 800e182:	dbf1      	blt.n	800e168 <__swhatbuf_r+0x12>
 800e184:	9a01      	ldr	r2, [sp, #4]
 800e186:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e18a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e18e:	425a      	negs	r2, r3
 800e190:	415a      	adcs	r2, r3
 800e192:	602a      	str	r2, [r5, #0]
 800e194:	e7ee      	b.n	800e174 <__swhatbuf_r+0x1e>
 800e196:	2340      	movs	r3, #64	; 0x40
 800e198:	2000      	movs	r0, #0
 800e19a:	6023      	str	r3, [r4, #0]
 800e19c:	b016      	add	sp, #88	; 0x58
 800e19e:	bd70      	pop	{r4, r5, r6, pc}

0800e1a0 <__smakebuf_r>:
 800e1a0:	898b      	ldrh	r3, [r1, #12]
 800e1a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1a4:	079d      	lsls	r5, r3, #30
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	460c      	mov	r4, r1
 800e1aa:	d507      	bpl.n	800e1bc <__smakebuf_r+0x1c>
 800e1ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	6123      	str	r3, [r4, #16]
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	6163      	str	r3, [r4, #20]
 800e1b8:	b002      	add	sp, #8
 800e1ba:	bd70      	pop	{r4, r5, r6, pc}
 800e1bc:	ab01      	add	r3, sp, #4
 800e1be:	466a      	mov	r2, sp
 800e1c0:	f7ff ffc9 	bl	800e156 <__swhatbuf_r>
 800e1c4:	9900      	ldr	r1, [sp, #0]
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f7fd fa63 	bl	800b694 <_malloc_r>
 800e1ce:	b948      	cbnz	r0, 800e1e4 <__smakebuf_r+0x44>
 800e1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1d4:	059a      	lsls	r2, r3, #22
 800e1d6:	d4ef      	bmi.n	800e1b8 <__smakebuf_r+0x18>
 800e1d8:	f023 0303 	bic.w	r3, r3, #3
 800e1dc:	f043 0302 	orr.w	r3, r3, #2
 800e1e0:	81a3      	strh	r3, [r4, #12]
 800e1e2:	e7e3      	b.n	800e1ac <__smakebuf_r+0xc>
 800e1e4:	4b0d      	ldr	r3, [pc, #52]	; (800e21c <__smakebuf_r+0x7c>)
 800e1e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	6020      	str	r0, [r4, #0]
 800e1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f0:	81a3      	strh	r3, [r4, #12]
 800e1f2:	9b00      	ldr	r3, [sp, #0]
 800e1f4:	6163      	str	r3, [r4, #20]
 800e1f6:	9b01      	ldr	r3, [sp, #4]
 800e1f8:	6120      	str	r0, [r4, #16]
 800e1fa:	b15b      	cbz	r3, 800e214 <__smakebuf_r+0x74>
 800e1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e200:	4630      	mov	r0, r6
 800e202:	f000 f86b 	bl	800e2dc <_isatty_r>
 800e206:	b128      	cbz	r0, 800e214 <__smakebuf_r+0x74>
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	f023 0303 	bic.w	r3, r3, #3
 800e20e:	f043 0301 	orr.w	r3, r3, #1
 800e212:	81a3      	strh	r3, [r4, #12]
 800e214:	89a0      	ldrh	r0, [r4, #12]
 800e216:	4305      	orrs	r5, r0
 800e218:	81a5      	strh	r5, [r4, #12]
 800e21a:	e7cd      	b.n	800e1b8 <__smakebuf_r+0x18>
 800e21c:	0800b435 	.word	0x0800b435

0800e220 <_malloc_usable_size_r>:
 800e220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e224:	1f18      	subs	r0, r3, #4
 800e226:	2b00      	cmp	r3, #0
 800e228:	bfbc      	itt	lt
 800e22a:	580b      	ldrlt	r3, [r1, r0]
 800e22c:	18c0      	addlt	r0, r0, r3
 800e22e:	4770      	bx	lr

0800e230 <_raise_r>:
 800e230:	291f      	cmp	r1, #31
 800e232:	b538      	push	{r3, r4, r5, lr}
 800e234:	4604      	mov	r4, r0
 800e236:	460d      	mov	r5, r1
 800e238:	d904      	bls.n	800e244 <_raise_r+0x14>
 800e23a:	2316      	movs	r3, #22
 800e23c:	6003      	str	r3, [r0, #0]
 800e23e:	f04f 30ff 	mov.w	r0, #4294967295
 800e242:	bd38      	pop	{r3, r4, r5, pc}
 800e244:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e246:	b112      	cbz	r2, 800e24e <_raise_r+0x1e>
 800e248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e24c:	b94b      	cbnz	r3, 800e262 <_raise_r+0x32>
 800e24e:	4620      	mov	r0, r4
 800e250:	f000 f830 	bl	800e2b4 <_getpid_r>
 800e254:	462a      	mov	r2, r5
 800e256:	4601      	mov	r1, r0
 800e258:	4620      	mov	r0, r4
 800e25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e25e:	f000 b817 	b.w	800e290 <_kill_r>
 800e262:	2b01      	cmp	r3, #1
 800e264:	d00a      	beq.n	800e27c <_raise_r+0x4c>
 800e266:	1c59      	adds	r1, r3, #1
 800e268:	d103      	bne.n	800e272 <_raise_r+0x42>
 800e26a:	2316      	movs	r3, #22
 800e26c:	6003      	str	r3, [r0, #0]
 800e26e:	2001      	movs	r0, #1
 800e270:	e7e7      	b.n	800e242 <_raise_r+0x12>
 800e272:	2400      	movs	r4, #0
 800e274:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e278:	4628      	mov	r0, r5
 800e27a:	4798      	blx	r3
 800e27c:	2000      	movs	r0, #0
 800e27e:	e7e0      	b.n	800e242 <_raise_r+0x12>

0800e280 <raise>:
 800e280:	4b02      	ldr	r3, [pc, #8]	; (800e28c <raise+0xc>)
 800e282:	4601      	mov	r1, r0
 800e284:	6818      	ldr	r0, [r3, #0]
 800e286:	f7ff bfd3 	b.w	800e230 <_raise_r>
 800e28a:	bf00      	nop
 800e28c:	20000024 	.word	0x20000024

0800e290 <_kill_r>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	4d07      	ldr	r5, [pc, #28]	; (800e2b0 <_kill_r+0x20>)
 800e294:	2300      	movs	r3, #0
 800e296:	4604      	mov	r4, r0
 800e298:	4608      	mov	r0, r1
 800e29a:	4611      	mov	r1, r2
 800e29c:	602b      	str	r3, [r5, #0]
 800e29e:	f001 f973 	bl	800f588 <_kill>
 800e2a2:	1c43      	adds	r3, r0, #1
 800e2a4:	d102      	bne.n	800e2ac <_kill_r+0x1c>
 800e2a6:	682b      	ldr	r3, [r5, #0]
 800e2a8:	b103      	cbz	r3, 800e2ac <_kill_r+0x1c>
 800e2aa:	6023      	str	r3, [r4, #0]
 800e2ac:	bd38      	pop	{r3, r4, r5, pc}
 800e2ae:	bf00      	nop
 800e2b0:	2000679c 	.word	0x2000679c

0800e2b4 <_getpid_r>:
 800e2b4:	f001 b958 	b.w	800f568 <_getpid>

0800e2b8 <_fstat_r>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4d07      	ldr	r5, [pc, #28]	; (800e2d8 <_fstat_r+0x20>)
 800e2bc:	2300      	movs	r3, #0
 800e2be:	4604      	mov	r4, r0
 800e2c0:	4608      	mov	r0, r1
 800e2c2:	4611      	mov	r1, r2
 800e2c4:	602b      	str	r3, [r5, #0]
 800e2c6:	f001 f947 	bl	800f558 <_fstat>
 800e2ca:	1c43      	adds	r3, r0, #1
 800e2cc:	d102      	bne.n	800e2d4 <_fstat_r+0x1c>
 800e2ce:	682b      	ldr	r3, [r5, #0]
 800e2d0:	b103      	cbz	r3, 800e2d4 <_fstat_r+0x1c>
 800e2d2:	6023      	str	r3, [r4, #0]
 800e2d4:	bd38      	pop	{r3, r4, r5, pc}
 800e2d6:	bf00      	nop
 800e2d8:	2000679c 	.word	0x2000679c

0800e2dc <_isatty_r>:
 800e2dc:	b538      	push	{r3, r4, r5, lr}
 800e2de:	4d06      	ldr	r5, [pc, #24]	; (800e2f8 <_isatty_r+0x1c>)
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	4608      	mov	r0, r1
 800e2e6:	602b      	str	r3, [r5, #0]
 800e2e8:	f001 f946 	bl	800f578 <_isatty>
 800e2ec:	1c43      	adds	r3, r0, #1
 800e2ee:	d102      	bne.n	800e2f6 <_isatty_r+0x1a>
 800e2f0:	682b      	ldr	r3, [r5, #0]
 800e2f2:	b103      	cbz	r3, 800e2f6 <_isatty_r+0x1a>
 800e2f4:	6023      	str	r3, [r4, #0]
 800e2f6:	bd38      	pop	{r3, r4, r5, pc}
 800e2f8:	2000679c 	.word	0x2000679c
 800e2fc:	00000000 	.word	0x00000000

0800e300 <log>:
 800e300:	b538      	push	{r3, r4, r5, lr}
 800e302:	ed2d 8b02 	vpush	{d8}
 800e306:	ec55 4b10 	vmov	r4, r5, d0
 800e30a:	f000 f8a9 	bl	800e460 <__ieee754_log>
 800e30e:	4622      	mov	r2, r4
 800e310:	462b      	mov	r3, r5
 800e312:	4620      	mov	r0, r4
 800e314:	4629      	mov	r1, r5
 800e316:	eeb0 8a40 	vmov.f32	s16, s0
 800e31a:	eef0 8a60 	vmov.f32	s17, s1
 800e31e:	f7f2 fc25 	bl	8000b6c <__aeabi_dcmpun>
 800e322:	b998      	cbnz	r0, 800e34c <log+0x4c>
 800e324:	2200      	movs	r2, #0
 800e326:	2300      	movs	r3, #0
 800e328:	4620      	mov	r0, r4
 800e32a:	4629      	mov	r1, r5
 800e32c:	f7f2 fc14 	bl	8000b58 <__aeabi_dcmpgt>
 800e330:	b960      	cbnz	r0, 800e34c <log+0x4c>
 800e332:	2200      	movs	r2, #0
 800e334:	2300      	movs	r3, #0
 800e336:	4620      	mov	r0, r4
 800e338:	4629      	mov	r1, r5
 800e33a:	f7f2 fbe5 	bl	8000b08 <__aeabi_dcmpeq>
 800e33e:	b160      	cbz	r0, 800e35a <log+0x5a>
 800e340:	f001 f8fc 	bl	800f53c <__errno>
 800e344:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800e370 <log+0x70>
 800e348:	2322      	movs	r3, #34	; 0x22
 800e34a:	6003      	str	r3, [r0, #0]
 800e34c:	eeb0 0a48 	vmov.f32	s0, s16
 800e350:	eef0 0a68 	vmov.f32	s1, s17
 800e354:	ecbd 8b02 	vpop	{d8}
 800e358:	bd38      	pop	{r3, r4, r5, pc}
 800e35a:	f001 f8ef 	bl	800f53c <__errno>
 800e35e:	ecbd 8b02 	vpop	{d8}
 800e362:	2321      	movs	r3, #33	; 0x21
 800e364:	6003      	str	r3, [r0, #0]
 800e366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e36a:	4803      	ldr	r0, [pc, #12]	; (800e378 <log+0x78>)
 800e36c:	f001 b858 	b.w	800f420 <nan>
 800e370:	00000000 	.word	0x00000000
 800e374:	fff00000 	.word	0xfff00000
 800e378:	0800ff78 	.word	0x0800ff78

0800e37c <pow>:
 800e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37e:	ed2d 8b02 	vpush	{d8}
 800e382:	eeb0 8a40 	vmov.f32	s16, s0
 800e386:	eef0 8a60 	vmov.f32	s17, s1
 800e38a:	ec55 4b11 	vmov	r4, r5, d1
 800e38e:	f000 fa23 	bl	800e7d8 <__ieee754_pow>
 800e392:	4622      	mov	r2, r4
 800e394:	462b      	mov	r3, r5
 800e396:	4620      	mov	r0, r4
 800e398:	4629      	mov	r1, r5
 800e39a:	ec57 6b10 	vmov	r6, r7, d0
 800e39e:	f7f2 fbe5 	bl	8000b6c <__aeabi_dcmpun>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	d13b      	bne.n	800e41e <pow+0xa2>
 800e3a6:	ec51 0b18 	vmov	r0, r1, d8
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	f7f2 fbab 	bl	8000b08 <__aeabi_dcmpeq>
 800e3b2:	b1b8      	cbz	r0, 800e3e4 <pow+0x68>
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	4629      	mov	r1, r5
 800e3bc:	f7f2 fba4 	bl	8000b08 <__aeabi_dcmpeq>
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	d146      	bne.n	800e452 <pow+0xd6>
 800e3c4:	ec45 4b10 	vmov	d0, r4, r5
 800e3c8:	f001 f81f 	bl	800f40a <finite>
 800e3cc:	b338      	cbz	r0, 800e41e <pow+0xa2>
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	4629      	mov	r1, r5
 800e3d6:	f7f2 fba1 	bl	8000b1c <__aeabi_dcmplt>
 800e3da:	b300      	cbz	r0, 800e41e <pow+0xa2>
 800e3dc:	f001 f8ae 	bl	800f53c <__errno>
 800e3e0:	2322      	movs	r3, #34	; 0x22
 800e3e2:	e01b      	b.n	800e41c <pow+0xa0>
 800e3e4:	ec47 6b10 	vmov	d0, r6, r7
 800e3e8:	f001 f80f 	bl	800f40a <finite>
 800e3ec:	b9e0      	cbnz	r0, 800e428 <pow+0xac>
 800e3ee:	eeb0 0a48 	vmov.f32	s0, s16
 800e3f2:	eef0 0a68 	vmov.f32	s1, s17
 800e3f6:	f001 f808 	bl	800f40a <finite>
 800e3fa:	b1a8      	cbz	r0, 800e428 <pow+0xac>
 800e3fc:	ec45 4b10 	vmov	d0, r4, r5
 800e400:	f001 f803 	bl	800f40a <finite>
 800e404:	b180      	cbz	r0, 800e428 <pow+0xac>
 800e406:	4632      	mov	r2, r6
 800e408:	463b      	mov	r3, r7
 800e40a:	4630      	mov	r0, r6
 800e40c:	4639      	mov	r1, r7
 800e40e:	f7f2 fbad 	bl	8000b6c <__aeabi_dcmpun>
 800e412:	2800      	cmp	r0, #0
 800e414:	d0e2      	beq.n	800e3dc <pow+0x60>
 800e416:	f001 f891 	bl	800f53c <__errno>
 800e41a:	2321      	movs	r3, #33	; 0x21
 800e41c:	6003      	str	r3, [r0, #0]
 800e41e:	ecbd 8b02 	vpop	{d8}
 800e422:	ec47 6b10 	vmov	d0, r6, r7
 800e426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e428:	2200      	movs	r2, #0
 800e42a:	2300      	movs	r3, #0
 800e42c:	4630      	mov	r0, r6
 800e42e:	4639      	mov	r1, r7
 800e430:	f7f2 fb6a 	bl	8000b08 <__aeabi_dcmpeq>
 800e434:	2800      	cmp	r0, #0
 800e436:	d0f2      	beq.n	800e41e <pow+0xa2>
 800e438:	eeb0 0a48 	vmov.f32	s0, s16
 800e43c:	eef0 0a68 	vmov.f32	s1, s17
 800e440:	f000 ffe3 	bl	800f40a <finite>
 800e444:	2800      	cmp	r0, #0
 800e446:	d0ea      	beq.n	800e41e <pow+0xa2>
 800e448:	ec45 4b10 	vmov	d0, r4, r5
 800e44c:	f000 ffdd 	bl	800f40a <finite>
 800e450:	e7c3      	b.n	800e3da <pow+0x5e>
 800e452:	4f01      	ldr	r7, [pc, #4]	; (800e458 <pow+0xdc>)
 800e454:	2600      	movs	r6, #0
 800e456:	e7e2      	b.n	800e41e <pow+0xa2>
 800e458:	3ff00000 	.word	0x3ff00000
 800e45c:	00000000 	.word	0x00000000

0800e460 <__ieee754_log>:
 800e460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e464:	ec51 0b10 	vmov	r0, r1, d0
 800e468:	ed2d 8b04 	vpush	{d8-d9}
 800e46c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e470:	b083      	sub	sp, #12
 800e472:	460d      	mov	r5, r1
 800e474:	da29      	bge.n	800e4ca <__ieee754_log+0x6a>
 800e476:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e47a:	4303      	orrs	r3, r0
 800e47c:	ee10 2a10 	vmov	r2, s0
 800e480:	d10c      	bne.n	800e49c <__ieee754_log+0x3c>
 800e482:	49cf      	ldr	r1, [pc, #828]	; (800e7c0 <__ieee754_log+0x360>)
 800e484:	2200      	movs	r2, #0
 800e486:	2300      	movs	r3, #0
 800e488:	2000      	movs	r0, #0
 800e48a:	f7f2 f9ff 	bl	800088c <__aeabi_ddiv>
 800e48e:	ec41 0b10 	vmov	d0, r0, r1
 800e492:	b003      	add	sp, #12
 800e494:	ecbd 8b04 	vpop	{d8-d9}
 800e498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e49c:	2900      	cmp	r1, #0
 800e49e:	da05      	bge.n	800e4ac <__ieee754_log+0x4c>
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	f7f1 ff11 	bl	80002c8 <__aeabi_dsub>
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e7ee      	b.n	800e48a <__ieee754_log+0x2a>
 800e4ac:	4bc5      	ldr	r3, [pc, #788]	; (800e7c4 <__ieee754_log+0x364>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f7f2 f8c2 	bl	8000638 <__aeabi_dmul>
 800e4b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800e4b8:	460d      	mov	r5, r1
 800e4ba:	4ac3      	ldr	r2, [pc, #780]	; (800e7c8 <__ieee754_log+0x368>)
 800e4bc:	4295      	cmp	r5, r2
 800e4be:	dd06      	ble.n	800e4ce <__ieee754_log+0x6e>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	f7f1 ff02 	bl	80002cc <__adddf3>
 800e4c8:	e7e1      	b.n	800e48e <__ieee754_log+0x2e>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	e7f5      	b.n	800e4ba <__ieee754_log+0x5a>
 800e4ce:	152c      	asrs	r4, r5, #20
 800e4d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e4d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e4d8:	441c      	add	r4, r3
 800e4da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800e4de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800e4e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800e4ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800e4ee:	ea42 0105 	orr.w	r1, r2, r5
 800e4f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	4bb4      	ldr	r3, [pc, #720]	; (800e7cc <__ieee754_log+0x36c>)
 800e4fa:	f7f1 fee5 	bl	80002c8 <__aeabi_dsub>
 800e4fe:	1cab      	adds	r3, r5, #2
 800e500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e504:	2b02      	cmp	r3, #2
 800e506:	4682      	mov	sl, r0
 800e508:	468b      	mov	fp, r1
 800e50a:	f04f 0200 	mov.w	r2, #0
 800e50e:	dc53      	bgt.n	800e5b8 <__ieee754_log+0x158>
 800e510:	2300      	movs	r3, #0
 800e512:	f7f2 faf9 	bl	8000b08 <__aeabi_dcmpeq>
 800e516:	b1d0      	cbz	r0, 800e54e <__ieee754_log+0xee>
 800e518:	2c00      	cmp	r4, #0
 800e51a:	f000 8122 	beq.w	800e762 <__ieee754_log+0x302>
 800e51e:	4620      	mov	r0, r4
 800e520:	f7f2 f820 	bl	8000564 <__aeabi_i2d>
 800e524:	a390      	add	r3, pc, #576	; (adr r3, 800e768 <__ieee754_log+0x308>)
 800e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52a:	4606      	mov	r6, r0
 800e52c:	460f      	mov	r7, r1
 800e52e:	f7f2 f883 	bl	8000638 <__aeabi_dmul>
 800e532:	a38f      	add	r3, pc, #572	; (adr r3, 800e770 <__ieee754_log+0x310>)
 800e534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e538:	4604      	mov	r4, r0
 800e53a:	460d      	mov	r5, r1
 800e53c:	4630      	mov	r0, r6
 800e53e:	4639      	mov	r1, r7
 800e540:	f7f2 f87a 	bl	8000638 <__aeabi_dmul>
 800e544:	4602      	mov	r2, r0
 800e546:	460b      	mov	r3, r1
 800e548:	4620      	mov	r0, r4
 800e54a:	4629      	mov	r1, r5
 800e54c:	e7ba      	b.n	800e4c4 <__ieee754_log+0x64>
 800e54e:	a38a      	add	r3, pc, #552	; (adr r3, 800e778 <__ieee754_log+0x318>)
 800e550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e554:	4650      	mov	r0, sl
 800e556:	4659      	mov	r1, fp
 800e558:	f7f2 f86e 	bl	8000638 <__aeabi_dmul>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	2000      	movs	r0, #0
 800e562:	499b      	ldr	r1, [pc, #620]	; (800e7d0 <__ieee754_log+0x370>)
 800e564:	f7f1 feb0 	bl	80002c8 <__aeabi_dsub>
 800e568:	4652      	mov	r2, sl
 800e56a:	4606      	mov	r6, r0
 800e56c:	460f      	mov	r7, r1
 800e56e:	465b      	mov	r3, fp
 800e570:	4650      	mov	r0, sl
 800e572:	4659      	mov	r1, fp
 800e574:	f7f2 f860 	bl	8000638 <__aeabi_dmul>
 800e578:	4602      	mov	r2, r0
 800e57a:	460b      	mov	r3, r1
 800e57c:	4630      	mov	r0, r6
 800e57e:	4639      	mov	r1, r7
 800e580:	f7f2 f85a 	bl	8000638 <__aeabi_dmul>
 800e584:	4606      	mov	r6, r0
 800e586:	460f      	mov	r7, r1
 800e588:	b914      	cbnz	r4, 800e590 <__ieee754_log+0x130>
 800e58a:	4632      	mov	r2, r6
 800e58c:	463b      	mov	r3, r7
 800e58e:	e0a2      	b.n	800e6d6 <__ieee754_log+0x276>
 800e590:	4620      	mov	r0, r4
 800e592:	f7f1 ffe7 	bl	8000564 <__aeabi_i2d>
 800e596:	a374      	add	r3, pc, #464	; (adr r3, 800e768 <__ieee754_log+0x308>)
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	4680      	mov	r8, r0
 800e59e:	4689      	mov	r9, r1
 800e5a0:	f7f2 f84a 	bl	8000638 <__aeabi_dmul>
 800e5a4:	a372      	add	r3, pc, #456	; (adr r3, 800e770 <__ieee754_log+0x310>)
 800e5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	460d      	mov	r5, r1
 800e5ae:	4640      	mov	r0, r8
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	f7f2 f841 	bl	8000638 <__aeabi_dmul>
 800e5b6:	e0a7      	b.n	800e708 <__ieee754_log+0x2a8>
 800e5b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e5bc:	f7f1 fe86 	bl	80002cc <__adddf3>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4650      	mov	r0, sl
 800e5c6:	4659      	mov	r1, fp
 800e5c8:	f7f2 f960 	bl	800088c <__aeabi_ddiv>
 800e5cc:	ec41 0b18 	vmov	d8, r0, r1
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f7f1 ffc7 	bl	8000564 <__aeabi_i2d>
 800e5d6:	ec53 2b18 	vmov	r2, r3, d8
 800e5da:	ec41 0b19 	vmov	d9, r0, r1
 800e5de:	ec51 0b18 	vmov	r0, r1, d8
 800e5e2:	f7f2 f829 	bl	8000638 <__aeabi_dmul>
 800e5e6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e5ea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e5ee:	9301      	str	r3, [sp, #4]
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	4680      	mov	r8, r0
 800e5f6:	4689      	mov	r9, r1
 800e5f8:	f7f2 f81e 	bl	8000638 <__aeabi_dmul>
 800e5fc:	a360      	add	r3, pc, #384	; (adr r3, 800e780 <__ieee754_log+0x320>)
 800e5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e602:	4606      	mov	r6, r0
 800e604:	460f      	mov	r7, r1
 800e606:	f7f2 f817 	bl	8000638 <__aeabi_dmul>
 800e60a:	a35f      	add	r3, pc, #380	; (adr r3, 800e788 <__ieee754_log+0x328>)
 800e60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e610:	f7f1 fe5c 	bl	80002cc <__adddf3>
 800e614:	4632      	mov	r2, r6
 800e616:	463b      	mov	r3, r7
 800e618:	f7f2 f80e 	bl	8000638 <__aeabi_dmul>
 800e61c:	a35c      	add	r3, pc, #368	; (adr r3, 800e790 <__ieee754_log+0x330>)
 800e61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e622:	f7f1 fe53 	bl	80002cc <__adddf3>
 800e626:	4632      	mov	r2, r6
 800e628:	463b      	mov	r3, r7
 800e62a:	f7f2 f805 	bl	8000638 <__aeabi_dmul>
 800e62e:	a35a      	add	r3, pc, #360	; (adr r3, 800e798 <__ieee754_log+0x338>)
 800e630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e634:	f7f1 fe4a 	bl	80002cc <__adddf3>
 800e638:	4642      	mov	r2, r8
 800e63a:	464b      	mov	r3, r9
 800e63c:	f7f1 fffc 	bl	8000638 <__aeabi_dmul>
 800e640:	a357      	add	r3, pc, #348	; (adr r3, 800e7a0 <__ieee754_log+0x340>)
 800e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e646:	4680      	mov	r8, r0
 800e648:	4689      	mov	r9, r1
 800e64a:	4630      	mov	r0, r6
 800e64c:	4639      	mov	r1, r7
 800e64e:	f7f1 fff3 	bl	8000638 <__aeabi_dmul>
 800e652:	a355      	add	r3, pc, #340	; (adr r3, 800e7a8 <__ieee754_log+0x348>)
 800e654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e658:	f7f1 fe38 	bl	80002cc <__adddf3>
 800e65c:	4632      	mov	r2, r6
 800e65e:	463b      	mov	r3, r7
 800e660:	f7f1 ffea 	bl	8000638 <__aeabi_dmul>
 800e664:	a352      	add	r3, pc, #328	; (adr r3, 800e7b0 <__ieee754_log+0x350>)
 800e666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66a:	f7f1 fe2f 	bl	80002cc <__adddf3>
 800e66e:	4632      	mov	r2, r6
 800e670:	463b      	mov	r3, r7
 800e672:	f7f1 ffe1 	bl	8000638 <__aeabi_dmul>
 800e676:	460b      	mov	r3, r1
 800e678:	4602      	mov	r2, r0
 800e67a:	4649      	mov	r1, r9
 800e67c:	4640      	mov	r0, r8
 800e67e:	f7f1 fe25 	bl	80002cc <__adddf3>
 800e682:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e686:	9b01      	ldr	r3, [sp, #4]
 800e688:	3551      	adds	r5, #81	; 0x51
 800e68a:	431d      	orrs	r5, r3
 800e68c:	2d00      	cmp	r5, #0
 800e68e:	4680      	mov	r8, r0
 800e690:	4689      	mov	r9, r1
 800e692:	dd48      	ble.n	800e726 <__ieee754_log+0x2c6>
 800e694:	4b4e      	ldr	r3, [pc, #312]	; (800e7d0 <__ieee754_log+0x370>)
 800e696:	2200      	movs	r2, #0
 800e698:	4650      	mov	r0, sl
 800e69a:	4659      	mov	r1, fp
 800e69c:	f7f1 ffcc 	bl	8000638 <__aeabi_dmul>
 800e6a0:	4652      	mov	r2, sl
 800e6a2:	465b      	mov	r3, fp
 800e6a4:	f7f1 ffc8 	bl	8000638 <__aeabi_dmul>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	460f      	mov	r7, r1
 800e6b0:	4640      	mov	r0, r8
 800e6b2:	4649      	mov	r1, r9
 800e6b4:	f7f1 fe0a 	bl	80002cc <__adddf3>
 800e6b8:	ec53 2b18 	vmov	r2, r3, d8
 800e6bc:	f7f1 ffbc 	bl	8000638 <__aeabi_dmul>
 800e6c0:	4680      	mov	r8, r0
 800e6c2:	4689      	mov	r9, r1
 800e6c4:	b964      	cbnz	r4, 800e6e0 <__ieee754_log+0x280>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	4639      	mov	r1, r7
 800e6ce:	f7f1 fdfb 	bl	80002c8 <__aeabi_dsub>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	4650      	mov	r0, sl
 800e6d8:	4659      	mov	r1, fp
 800e6da:	f7f1 fdf5 	bl	80002c8 <__aeabi_dsub>
 800e6de:	e6d6      	b.n	800e48e <__ieee754_log+0x2e>
 800e6e0:	a321      	add	r3, pc, #132	; (adr r3, 800e768 <__ieee754_log+0x308>)
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	ec51 0b19 	vmov	r0, r1, d9
 800e6ea:	f7f1 ffa5 	bl	8000638 <__aeabi_dmul>
 800e6ee:	a320      	add	r3, pc, #128	; (adr r3, 800e770 <__ieee754_log+0x310>)
 800e6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	460d      	mov	r5, r1
 800e6f8:	ec51 0b19 	vmov	r0, r1, d9
 800e6fc:	f7f1 ff9c 	bl	8000638 <__aeabi_dmul>
 800e700:	4642      	mov	r2, r8
 800e702:	464b      	mov	r3, r9
 800e704:	f7f1 fde2 	bl	80002cc <__adddf3>
 800e708:	4602      	mov	r2, r0
 800e70a:	460b      	mov	r3, r1
 800e70c:	4630      	mov	r0, r6
 800e70e:	4639      	mov	r1, r7
 800e710:	f7f1 fdda 	bl	80002c8 <__aeabi_dsub>
 800e714:	4652      	mov	r2, sl
 800e716:	465b      	mov	r3, fp
 800e718:	f7f1 fdd6 	bl	80002c8 <__aeabi_dsub>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	4620      	mov	r0, r4
 800e722:	4629      	mov	r1, r5
 800e724:	e7d9      	b.n	800e6da <__ieee754_log+0x27a>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	4650      	mov	r0, sl
 800e72c:	4659      	mov	r1, fp
 800e72e:	f7f1 fdcb 	bl	80002c8 <__aeabi_dsub>
 800e732:	ec53 2b18 	vmov	r2, r3, d8
 800e736:	f7f1 ff7f 	bl	8000638 <__aeabi_dmul>
 800e73a:	4606      	mov	r6, r0
 800e73c:	460f      	mov	r7, r1
 800e73e:	2c00      	cmp	r4, #0
 800e740:	f43f af23 	beq.w	800e58a <__ieee754_log+0x12a>
 800e744:	a308      	add	r3, pc, #32	; (adr r3, 800e768 <__ieee754_log+0x308>)
 800e746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74a:	ec51 0b19 	vmov	r0, r1, d9
 800e74e:	f7f1 ff73 	bl	8000638 <__aeabi_dmul>
 800e752:	a307      	add	r3, pc, #28	; (adr r3, 800e770 <__ieee754_log+0x310>)
 800e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e758:	4604      	mov	r4, r0
 800e75a:	460d      	mov	r5, r1
 800e75c:	ec51 0b19 	vmov	r0, r1, d9
 800e760:	e727      	b.n	800e5b2 <__ieee754_log+0x152>
 800e762:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800e7b8 <__ieee754_log+0x358>
 800e766:	e694      	b.n	800e492 <__ieee754_log+0x32>
 800e768:	fee00000 	.word	0xfee00000
 800e76c:	3fe62e42 	.word	0x3fe62e42
 800e770:	35793c76 	.word	0x35793c76
 800e774:	3dea39ef 	.word	0x3dea39ef
 800e778:	55555555 	.word	0x55555555
 800e77c:	3fd55555 	.word	0x3fd55555
 800e780:	df3e5244 	.word	0xdf3e5244
 800e784:	3fc2f112 	.word	0x3fc2f112
 800e788:	96cb03de 	.word	0x96cb03de
 800e78c:	3fc74664 	.word	0x3fc74664
 800e790:	94229359 	.word	0x94229359
 800e794:	3fd24924 	.word	0x3fd24924
 800e798:	55555593 	.word	0x55555593
 800e79c:	3fe55555 	.word	0x3fe55555
 800e7a0:	d078c69f 	.word	0xd078c69f
 800e7a4:	3fc39a09 	.word	0x3fc39a09
 800e7a8:	1d8e78af 	.word	0x1d8e78af
 800e7ac:	3fcc71c5 	.word	0x3fcc71c5
 800e7b0:	9997fa04 	.word	0x9997fa04
 800e7b4:	3fd99999 	.word	0x3fd99999
	...
 800e7c0:	c3500000 	.word	0xc3500000
 800e7c4:	43500000 	.word	0x43500000
 800e7c8:	7fefffff 	.word	0x7fefffff
 800e7cc:	3ff00000 	.word	0x3ff00000
 800e7d0:	3fe00000 	.word	0x3fe00000
 800e7d4:	00000000 	.word	0x00000000

0800e7d8 <__ieee754_pow>:
 800e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7dc:	ed2d 8b06 	vpush	{d8-d10}
 800e7e0:	b089      	sub	sp, #36	; 0x24
 800e7e2:	ed8d 1b00 	vstr	d1, [sp]
 800e7e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e7ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e7ee:	ea58 0102 	orrs.w	r1, r8, r2
 800e7f2:	ec57 6b10 	vmov	r6, r7, d0
 800e7f6:	d115      	bne.n	800e824 <__ieee754_pow+0x4c>
 800e7f8:	19b3      	adds	r3, r6, r6
 800e7fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e7fe:	4152      	adcs	r2, r2
 800e800:	4299      	cmp	r1, r3
 800e802:	4b89      	ldr	r3, [pc, #548]	; (800ea28 <__ieee754_pow+0x250>)
 800e804:	4193      	sbcs	r3, r2
 800e806:	f080 84d2 	bcs.w	800f1ae <__ieee754_pow+0x9d6>
 800e80a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e80e:	4630      	mov	r0, r6
 800e810:	4639      	mov	r1, r7
 800e812:	f7f1 fd5b 	bl	80002cc <__adddf3>
 800e816:	ec41 0b10 	vmov	d0, r0, r1
 800e81a:	b009      	add	sp, #36	; 0x24
 800e81c:	ecbd 8b06 	vpop	{d8-d10}
 800e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e824:	4b81      	ldr	r3, [pc, #516]	; (800ea2c <__ieee754_pow+0x254>)
 800e826:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e82a:	429c      	cmp	r4, r3
 800e82c:	ee10 aa10 	vmov	sl, s0
 800e830:	463d      	mov	r5, r7
 800e832:	dc06      	bgt.n	800e842 <__ieee754_pow+0x6a>
 800e834:	d101      	bne.n	800e83a <__ieee754_pow+0x62>
 800e836:	2e00      	cmp	r6, #0
 800e838:	d1e7      	bne.n	800e80a <__ieee754_pow+0x32>
 800e83a:	4598      	cmp	r8, r3
 800e83c:	dc01      	bgt.n	800e842 <__ieee754_pow+0x6a>
 800e83e:	d10f      	bne.n	800e860 <__ieee754_pow+0x88>
 800e840:	b172      	cbz	r2, 800e860 <__ieee754_pow+0x88>
 800e842:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e846:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e84a:	ea55 050a 	orrs.w	r5, r5, sl
 800e84e:	d1dc      	bne.n	800e80a <__ieee754_pow+0x32>
 800e850:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e854:	18db      	adds	r3, r3, r3
 800e856:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e85a:	4152      	adcs	r2, r2
 800e85c:	429d      	cmp	r5, r3
 800e85e:	e7d0      	b.n	800e802 <__ieee754_pow+0x2a>
 800e860:	2d00      	cmp	r5, #0
 800e862:	da3b      	bge.n	800e8dc <__ieee754_pow+0x104>
 800e864:	4b72      	ldr	r3, [pc, #456]	; (800ea30 <__ieee754_pow+0x258>)
 800e866:	4598      	cmp	r8, r3
 800e868:	dc51      	bgt.n	800e90e <__ieee754_pow+0x136>
 800e86a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e86e:	4598      	cmp	r8, r3
 800e870:	f340 84ac 	ble.w	800f1cc <__ieee754_pow+0x9f4>
 800e874:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e878:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e87c:	2b14      	cmp	r3, #20
 800e87e:	dd0f      	ble.n	800e8a0 <__ieee754_pow+0xc8>
 800e880:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e884:	fa22 f103 	lsr.w	r1, r2, r3
 800e888:	fa01 f303 	lsl.w	r3, r1, r3
 800e88c:	4293      	cmp	r3, r2
 800e88e:	f040 849d 	bne.w	800f1cc <__ieee754_pow+0x9f4>
 800e892:	f001 0101 	and.w	r1, r1, #1
 800e896:	f1c1 0302 	rsb	r3, r1, #2
 800e89a:	9304      	str	r3, [sp, #16]
 800e89c:	b182      	cbz	r2, 800e8c0 <__ieee754_pow+0xe8>
 800e89e:	e05f      	b.n	800e960 <__ieee754_pow+0x188>
 800e8a0:	2a00      	cmp	r2, #0
 800e8a2:	d15b      	bne.n	800e95c <__ieee754_pow+0x184>
 800e8a4:	f1c3 0314 	rsb	r3, r3, #20
 800e8a8:	fa48 f103 	asr.w	r1, r8, r3
 800e8ac:	fa01 f303 	lsl.w	r3, r1, r3
 800e8b0:	4543      	cmp	r3, r8
 800e8b2:	f040 8488 	bne.w	800f1c6 <__ieee754_pow+0x9ee>
 800e8b6:	f001 0101 	and.w	r1, r1, #1
 800e8ba:	f1c1 0302 	rsb	r3, r1, #2
 800e8be:	9304      	str	r3, [sp, #16]
 800e8c0:	4b5c      	ldr	r3, [pc, #368]	; (800ea34 <__ieee754_pow+0x25c>)
 800e8c2:	4598      	cmp	r8, r3
 800e8c4:	d132      	bne.n	800e92c <__ieee754_pow+0x154>
 800e8c6:	f1b9 0f00 	cmp.w	r9, #0
 800e8ca:	f280 8478 	bge.w	800f1be <__ieee754_pow+0x9e6>
 800e8ce:	4959      	ldr	r1, [pc, #356]	; (800ea34 <__ieee754_pow+0x25c>)
 800e8d0:	4632      	mov	r2, r6
 800e8d2:	463b      	mov	r3, r7
 800e8d4:	2000      	movs	r0, #0
 800e8d6:	f7f1 ffd9 	bl	800088c <__aeabi_ddiv>
 800e8da:	e79c      	b.n	800e816 <__ieee754_pow+0x3e>
 800e8dc:	2300      	movs	r3, #0
 800e8de:	9304      	str	r3, [sp, #16]
 800e8e0:	2a00      	cmp	r2, #0
 800e8e2:	d13d      	bne.n	800e960 <__ieee754_pow+0x188>
 800e8e4:	4b51      	ldr	r3, [pc, #324]	; (800ea2c <__ieee754_pow+0x254>)
 800e8e6:	4598      	cmp	r8, r3
 800e8e8:	d1ea      	bne.n	800e8c0 <__ieee754_pow+0xe8>
 800e8ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e8ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e8f2:	ea53 030a 	orrs.w	r3, r3, sl
 800e8f6:	f000 845a 	beq.w	800f1ae <__ieee754_pow+0x9d6>
 800e8fa:	4b4f      	ldr	r3, [pc, #316]	; (800ea38 <__ieee754_pow+0x260>)
 800e8fc:	429c      	cmp	r4, r3
 800e8fe:	dd08      	ble.n	800e912 <__ieee754_pow+0x13a>
 800e900:	f1b9 0f00 	cmp.w	r9, #0
 800e904:	f2c0 8457 	blt.w	800f1b6 <__ieee754_pow+0x9de>
 800e908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e90c:	e783      	b.n	800e816 <__ieee754_pow+0x3e>
 800e90e:	2302      	movs	r3, #2
 800e910:	e7e5      	b.n	800e8de <__ieee754_pow+0x106>
 800e912:	f1b9 0f00 	cmp.w	r9, #0
 800e916:	f04f 0000 	mov.w	r0, #0
 800e91a:	f04f 0100 	mov.w	r1, #0
 800e91e:	f6bf af7a 	bge.w	800e816 <__ieee754_pow+0x3e>
 800e922:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e926:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e92a:	e774      	b.n	800e816 <__ieee754_pow+0x3e>
 800e92c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e930:	d106      	bne.n	800e940 <__ieee754_pow+0x168>
 800e932:	4632      	mov	r2, r6
 800e934:	463b      	mov	r3, r7
 800e936:	4630      	mov	r0, r6
 800e938:	4639      	mov	r1, r7
 800e93a:	f7f1 fe7d 	bl	8000638 <__aeabi_dmul>
 800e93e:	e76a      	b.n	800e816 <__ieee754_pow+0x3e>
 800e940:	4b3e      	ldr	r3, [pc, #248]	; (800ea3c <__ieee754_pow+0x264>)
 800e942:	4599      	cmp	r9, r3
 800e944:	d10c      	bne.n	800e960 <__ieee754_pow+0x188>
 800e946:	2d00      	cmp	r5, #0
 800e948:	db0a      	blt.n	800e960 <__ieee754_pow+0x188>
 800e94a:	ec47 6b10 	vmov	d0, r6, r7
 800e94e:	b009      	add	sp, #36	; 0x24
 800e950:	ecbd 8b06 	vpop	{d8-d10}
 800e954:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e958:	f000 bc6c 	b.w	800f234 <__ieee754_sqrt>
 800e95c:	2300      	movs	r3, #0
 800e95e:	9304      	str	r3, [sp, #16]
 800e960:	ec47 6b10 	vmov	d0, r6, r7
 800e964:	f000 fd48 	bl	800f3f8 <fabs>
 800e968:	ec51 0b10 	vmov	r0, r1, d0
 800e96c:	f1ba 0f00 	cmp.w	sl, #0
 800e970:	d129      	bne.n	800e9c6 <__ieee754_pow+0x1ee>
 800e972:	b124      	cbz	r4, 800e97e <__ieee754_pow+0x1a6>
 800e974:	4b2f      	ldr	r3, [pc, #188]	; (800ea34 <__ieee754_pow+0x25c>)
 800e976:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d123      	bne.n	800e9c6 <__ieee754_pow+0x1ee>
 800e97e:	f1b9 0f00 	cmp.w	r9, #0
 800e982:	da05      	bge.n	800e990 <__ieee754_pow+0x1b8>
 800e984:	4602      	mov	r2, r0
 800e986:	460b      	mov	r3, r1
 800e988:	2000      	movs	r0, #0
 800e98a:	492a      	ldr	r1, [pc, #168]	; (800ea34 <__ieee754_pow+0x25c>)
 800e98c:	f7f1 ff7e 	bl	800088c <__aeabi_ddiv>
 800e990:	2d00      	cmp	r5, #0
 800e992:	f6bf af40 	bge.w	800e816 <__ieee754_pow+0x3e>
 800e996:	9b04      	ldr	r3, [sp, #16]
 800e998:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e99c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e9a0:	4323      	orrs	r3, r4
 800e9a2:	d108      	bne.n	800e9b6 <__ieee754_pow+0x1de>
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	4610      	mov	r0, r2
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	f7f1 fc8c 	bl	80002c8 <__aeabi_dsub>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	e78f      	b.n	800e8d6 <__ieee754_pow+0xfe>
 800e9b6:	9b04      	ldr	r3, [sp, #16]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	f47f af2c 	bne.w	800e816 <__ieee754_pow+0x3e>
 800e9be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	e727      	b.n	800e816 <__ieee754_pow+0x3e>
 800e9c6:	0feb      	lsrs	r3, r5, #31
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	9306      	str	r3, [sp, #24]
 800e9cc:	9a06      	ldr	r2, [sp, #24]
 800e9ce:	9b04      	ldr	r3, [sp, #16]
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	d102      	bne.n	800e9da <__ieee754_pow+0x202>
 800e9d4:	4632      	mov	r2, r6
 800e9d6:	463b      	mov	r3, r7
 800e9d8:	e7e6      	b.n	800e9a8 <__ieee754_pow+0x1d0>
 800e9da:	4b19      	ldr	r3, [pc, #100]	; (800ea40 <__ieee754_pow+0x268>)
 800e9dc:	4598      	cmp	r8, r3
 800e9de:	f340 80fb 	ble.w	800ebd8 <__ieee754_pow+0x400>
 800e9e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e9e6:	4598      	cmp	r8, r3
 800e9e8:	4b13      	ldr	r3, [pc, #76]	; (800ea38 <__ieee754_pow+0x260>)
 800e9ea:	dd0c      	ble.n	800ea06 <__ieee754_pow+0x22e>
 800e9ec:	429c      	cmp	r4, r3
 800e9ee:	dc0f      	bgt.n	800ea10 <__ieee754_pow+0x238>
 800e9f0:	f1b9 0f00 	cmp.w	r9, #0
 800e9f4:	da0f      	bge.n	800ea16 <__ieee754_pow+0x23e>
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	b009      	add	sp, #36	; 0x24
 800e9fa:	ecbd 8b06 	vpop	{d8-d10}
 800e9fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea02:	f000 bcf0 	b.w	800f3e6 <__math_oflow>
 800ea06:	429c      	cmp	r4, r3
 800ea08:	dbf2      	blt.n	800e9f0 <__ieee754_pow+0x218>
 800ea0a:	4b0a      	ldr	r3, [pc, #40]	; (800ea34 <__ieee754_pow+0x25c>)
 800ea0c:	429c      	cmp	r4, r3
 800ea0e:	dd19      	ble.n	800ea44 <__ieee754_pow+0x26c>
 800ea10:	f1b9 0f00 	cmp.w	r9, #0
 800ea14:	dcef      	bgt.n	800e9f6 <__ieee754_pow+0x21e>
 800ea16:	2000      	movs	r0, #0
 800ea18:	b009      	add	sp, #36	; 0x24
 800ea1a:	ecbd 8b06 	vpop	{d8-d10}
 800ea1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea22:	f000 bcd7 	b.w	800f3d4 <__math_uflow>
 800ea26:	bf00      	nop
 800ea28:	fff00000 	.word	0xfff00000
 800ea2c:	7ff00000 	.word	0x7ff00000
 800ea30:	433fffff 	.word	0x433fffff
 800ea34:	3ff00000 	.word	0x3ff00000
 800ea38:	3fefffff 	.word	0x3fefffff
 800ea3c:	3fe00000 	.word	0x3fe00000
 800ea40:	41e00000 	.word	0x41e00000
 800ea44:	4b60      	ldr	r3, [pc, #384]	; (800ebc8 <__ieee754_pow+0x3f0>)
 800ea46:	2200      	movs	r2, #0
 800ea48:	f7f1 fc3e 	bl	80002c8 <__aeabi_dsub>
 800ea4c:	a354      	add	r3, pc, #336	; (adr r3, 800eba0 <__ieee754_pow+0x3c8>)
 800ea4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea52:	4604      	mov	r4, r0
 800ea54:	460d      	mov	r5, r1
 800ea56:	f7f1 fdef 	bl	8000638 <__aeabi_dmul>
 800ea5a:	a353      	add	r3, pc, #332	; (adr r3, 800eba8 <__ieee754_pow+0x3d0>)
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	4606      	mov	r6, r0
 800ea62:	460f      	mov	r7, r1
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f7f1 fde6 	bl	8000638 <__aeabi_dmul>
 800ea6c:	4b57      	ldr	r3, [pc, #348]	; (800ebcc <__ieee754_pow+0x3f4>)
 800ea6e:	4682      	mov	sl, r0
 800ea70:	468b      	mov	fp, r1
 800ea72:	2200      	movs	r2, #0
 800ea74:	4620      	mov	r0, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7f1 fdde 	bl	8000638 <__aeabi_dmul>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	a14b      	add	r1, pc, #300	; (adr r1, 800ebb0 <__ieee754_pow+0x3d8>)
 800ea82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea86:	f7f1 fc1f 	bl	80002c8 <__aeabi_dsub>
 800ea8a:	4622      	mov	r2, r4
 800ea8c:	462b      	mov	r3, r5
 800ea8e:	f7f1 fdd3 	bl	8000638 <__aeabi_dmul>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	2000      	movs	r0, #0
 800ea98:	494d      	ldr	r1, [pc, #308]	; (800ebd0 <__ieee754_pow+0x3f8>)
 800ea9a:	f7f1 fc15 	bl	80002c8 <__aeabi_dsub>
 800ea9e:	4622      	mov	r2, r4
 800eaa0:	4680      	mov	r8, r0
 800eaa2:	4689      	mov	r9, r1
 800eaa4:	462b      	mov	r3, r5
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	f7f1 fdc5 	bl	8000638 <__aeabi_dmul>
 800eaae:	4602      	mov	r2, r0
 800eab0:	460b      	mov	r3, r1
 800eab2:	4640      	mov	r0, r8
 800eab4:	4649      	mov	r1, r9
 800eab6:	f7f1 fdbf 	bl	8000638 <__aeabi_dmul>
 800eaba:	a33f      	add	r3, pc, #252	; (adr r3, 800ebb8 <__ieee754_pow+0x3e0>)
 800eabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac0:	f7f1 fdba 	bl	8000638 <__aeabi_dmul>
 800eac4:	4602      	mov	r2, r0
 800eac6:	460b      	mov	r3, r1
 800eac8:	4650      	mov	r0, sl
 800eaca:	4659      	mov	r1, fp
 800eacc:	f7f1 fbfc 	bl	80002c8 <__aeabi_dsub>
 800ead0:	4602      	mov	r2, r0
 800ead2:	460b      	mov	r3, r1
 800ead4:	4680      	mov	r8, r0
 800ead6:	4689      	mov	r9, r1
 800ead8:	4630      	mov	r0, r6
 800eada:	4639      	mov	r1, r7
 800eadc:	f7f1 fbf6 	bl	80002cc <__adddf3>
 800eae0:	2000      	movs	r0, #0
 800eae2:	4632      	mov	r2, r6
 800eae4:	463b      	mov	r3, r7
 800eae6:	4604      	mov	r4, r0
 800eae8:	460d      	mov	r5, r1
 800eaea:	f7f1 fbed 	bl	80002c8 <__aeabi_dsub>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	4640      	mov	r0, r8
 800eaf4:	4649      	mov	r1, r9
 800eaf6:	f7f1 fbe7 	bl	80002c8 <__aeabi_dsub>
 800eafa:	9b04      	ldr	r3, [sp, #16]
 800eafc:	9a06      	ldr	r2, [sp, #24]
 800eafe:	3b01      	subs	r3, #1
 800eb00:	4313      	orrs	r3, r2
 800eb02:	4682      	mov	sl, r0
 800eb04:	468b      	mov	fp, r1
 800eb06:	f040 81e7 	bne.w	800eed8 <__ieee754_pow+0x700>
 800eb0a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ebc0 <__ieee754_pow+0x3e8>
 800eb0e:	eeb0 8a47 	vmov.f32	s16, s14
 800eb12:	eef0 8a67 	vmov.f32	s17, s15
 800eb16:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eb1a:	2600      	movs	r6, #0
 800eb1c:	4632      	mov	r2, r6
 800eb1e:	463b      	mov	r3, r7
 800eb20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb24:	f7f1 fbd0 	bl	80002c8 <__aeabi_dsub>
 800eb28:	4622      	mov	r2, r4
 800eb2a:	462b      	mov	r3, r5
 800eb2c:	f7f1 fd84 	bl	8000638 <__aeabi_dmul>
 800eb30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb34:	4680      	mov	r8, r0
 800eb36:	4689      	mov	r9, r1
 800eb38:	4650      	mov	r0, sl
 800eb3a:	4659      	mov	r1, fp
 800eb3c:	f7f1 fd7c 	bl	8000638 <__aeabi_dmul>
 800eb40:	4602      	mov	r2, r0
 800eb42:	460b      	mov	r3, r1
 800eb44:	4640      	mov	r0, r8
 800eb46:	4649      	mov	r1, r9
 800eb48:	f7f1 fbc0 	bl	80002cc <__adddf3>
 800eb4c:	4632      	mov	r2, r6
 800eb4e:	463b      	mov	r3, r7
 800eb50:	4680      	mov	r8, r0
 800eb52:	4689      	mov	r9, r1
 800eb54:	4620      	mov	r0, r4
 800eb56:	4629      	mov	r1, r5
 800eb58:	f7f1 fd6e 	bl	8000638 <__aeabi_dmul>
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	4604      	mov	r4, r0
 800eb60:	460d      	mov	r5, r1
 800eb62:	4602      	mov	r2, r0
 800eb64:	4649      	mov	r1, r9
 800eb66:	4640      	mov	r0, r8
 800eb68:	f7f1 fbb0 	bl	80002cc <__adddf3>
 800eb6c:	4b19      	ldr	r3, [pc, #100]	; (800ebd4 <__ieee754_pow+0x3fc>)
 800eb6e:	4299      	cmp	r1, r3
 800eb70:	ec45 4b19 	vmov	d9, r4, r5
 800eb74:	4606      	mov	r6, r0
 800eb76:	460f      	mov	r7, r1
 800eb78:	468b      	mov	fp, r1
 800eb7a:	f340 82f1 	ble.w	800f160 <__ieee754_pow+0x988>
 800eb7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eb82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eb86:	4303      	orrs	r3, r0
 800eb88:	f000 81e4 	beq.w	800ef54 <__ieee754_pow+0x77c>
 800eb8c:	ec51 0b18 	vmov	r0, r1, d8
 800eb90:	2200      	movs	r2, #0
 800eb92:	2300      	movs	r3, #0
 800eb94:	f7f1 ffc2 	bl	8000b1c <__aeabi_dcmplt>
 800eb98:	3800      	subs	r0, #0
 800eb9a:	bf18      	it	ne
 800eb9c:	2001      	movne	r0, #1
 800eb9e:	e72b      	b.n	800e9f8 <__ieee754_pow+0x220>
 800eba0:	60000000 	.word	0x60000000
 800eba4:	3ff71547 	.word	0x3ff71547
 800eba8:	f85ddf44 	.word	0xf85ddf44
 800ebac:	3e54ae0b 	.word	0x3e54ae0b
 800ebb0:	55555555 	.word	0x55555555
 800ebb4:	3fd55555 	.word	0x3fd55555
 800ebb8:	652b82fe 	.word	0x652b82fe
 800ebbc:	3ff71547 	.word	0x3ff71547
 800ebc0:	00000000 	.word	0x00000000
 800ebc4:	bff00000 	.word	0xbff00000
 800ebc8:	3ff00000 	.word	0x3ff00000
 800ebcc:	3fd00000 	.word	0x3fd00000
 800ebd0:	3fe00000 	.word	0x3fe00000
 800ebd4:	408fffff 	.word	0x408fffff
 800ebd8:	4bd5      	ldr	r3, [pc, #852]	; (800ef30 <__ieee754_pow+0x758>)
 800ebda:	402b      	ands	r3, r5
 800ebdc:	2200      	movs	r2, #0
 800ebde:	b92b      	cbnz	r3, 800ebec <__ieee754_pow+0x414>
 800ebe0:	4bd4      	ldr	r3, [pc, #848]	; (800ef34 <__ieee754_pow+0x75c>)
 800ebe2:	f7f1 fd29 	bl	8000638 <__aeabi_dmul>
 800ebe6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ebea:	460c      	mov	r4, r1
 800ebec:	1523      	asrs	r3, r4, #20
 800ebee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ebf2:	4413      	add	r3, r2
 800ebf4:	9305      	str	r3, [sp, #20]
 800ebf6:	4bd0      	ldr	r3, [pc, #832]	; (800ef38 <__ieee754_pow+0x760>)
 800ebf8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ebfc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ec00:	429c      	cmp	r4, r3
 800ec02:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ec06:	dd08      	ble.n	800ec1a <__ieee754_pow+0x442>
 800ec08:	4bcc      	ldr	r3, [pc, #816]	; (800ef3c <__ieee754_pow+0x764>)
 800ec0a:	429c      	cmp	r4, r3
 800ec0c:	f340 8162 	ble.w	800eed4 <__ieee754_pow+0x6fc>
 800ec10:	9b05      	ldr	r3, [sp, #20]
 800ec12:	3301      	adds	r3, #1
 800ec14:	9305      	str	r3, [sp, #20]
 800ec16:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ec1a:	2400      	movs	r4, #0
 800ec1c:	00e3      	lsls	r3, r4, #3
 800ec1e:	9307      	str	r3, [sp, #28]
 800ec20:	4bc7      	ldr	r3, [pc, #796]	; (800ef40 <__ieee754_pow+0x768>)
 800ec22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec26:	ed93 7b00 	vldr	d7, [r3]
 800ec2a:	4629      	mov	r1, r5
 800ec2c:	ec53 2b17 	vmov	r2, r3, d7
 800ec30:	eeb0 9a47 	vmov.f32	s18, s14
 800ec34:	eef0 9a67 	vmov.f32	s19, s15
 800ec38:	4682      	mov	sl, r0
 800ec3a:	f7f1 fb45 	bl	80002c8 <__aeabi_dsub>
 800ec3e:	4652      	mov	r2, sl
 800ec40:	4606      	mov	r6, r0
 800ec42:	460f      	mov	r7, r1
 800ec44:	462b      	mov	r3, r5
 800ec46:	ec51 0b19 	vmov	r0, r1, d9
 800ec4a:	f7f1 fb3f 	bl	80002cc <__adddf3>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	2000      	movs	r0, #0
 800ec54:	49bb      	ldr	r1, [pc, #748]	; (800ef44 <__ieee754_pow+0x76c>)
 800ec56:	f7f1 fe19 	bl	800088c <__aeabi_ddiv>
 800ec5a:	ec41 0b1a 	vmov	d10, r0, r1
 800ec5e:	4602      	mov	r2, r0
 800ec60:	460b      	mov	r3, r1
 800ec62:	4630      	mov	r0, r6
 800ec64:	4639      	mov	r1, r7
 800ec66:	f7f1 fce7 	bl	8000638 <__aeabi_dmul>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec70:	9302      	str	r3, [sp, #8]
 800ec72:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ec76:	46ab      	mov	fp, r5
 800ec78:	106d      	asrs	r5, r5, #1
 800ec7a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ec7e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ec82:	ec41 0b18 	vmov	d8, r0, r1
 800ec86:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	4640      	mov	r0, r8
 800ec8e:	4649      	mov	r1, r9
 800ec90:	4614      	mov	r4, r2
 800ec92:	461d      	mov	r5, r3
 800ec94:	f7f1 fcd0 	bl	8000638 <__aeabi_dmul>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	4639      	mov	r1, r7
 800eca0:	f7f1 fb12 	bl	80002c8 <__aeabi_dsub>
 800eca4:	ec53 2b19 	vmov	r2, r3, d9
 800eca8:	4606      	mov	r6, r0
 800ecaa:	460f      	mov	r7, r1
 800ecac:	4620      	mov	r0, r4
 800ecae:	4629      	mov	r1, r5
 800ecb0:	f7f1 fb0a 	bl	80002c8 <__aeabi_dsub>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	4650      	mov	r0, sl
 800ecba:	4659      	mov	r1, fp
 800ecbc:	f7f1 fb04 	bl	80002c8 <__aeabi_dsub>
 800ecc0:	4642      	mov	r2, r8
 800ecc2:	464b      	mov	r3, r9
 800ecc4:	f7f1 fcb8 	bl	8000638 <__aeabi_dmul>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	460b      	mov	r3, r1
 800eccc:	4630      	mov	r0, r6
 800ecce:	4639      	mov	r1, r7
 800ecd0:	f7f1 fafa 	bl	80002c8 <__aeabi_dsub>
 800ecd4:	ec53 2b1a 	vmov	r2, r3, d10
 800ecd8:	f7f1 fcae 	bl	8000638 <__aeabi_dmul>
 800ecdc:	ec53 2b18 	vmov	r2, r3, d8
 800ece0:	ec41 0b19 	vmov	d9, r0, r1
 800ece4:	ec51 0b18 	vmov	r0, r1, d8
 800ece8:	f7f1 fca6 	bl	8000638 <__aeabi_dmul>
 800ecec:	a37c      	add	r3, pc, #496	; (adr r3, 800eee0 <__ieee754_pow+0x708>)
 800ecee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf2:	4604      	mov	r4, r0
 800ecf4:	460d      	mov	r5, r1
 800ecf6:	f7f1 fc9f 	bl	8000638 <__aeabi_dmul>
 800ecfa:	a37b      	add	r3, pc, #492	; (adr r3, 800eee8 <__ieee754_pow+0x710>)
 800ecfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed00:	f7f1 fae4 	bl	80002cc <__adddf3>
 800ed04:	4622      	mov	r2, r4
 800ed06:	462b      	mov	r3, r5
 800ed08:	f7f1 fc96 	bl	8000638 <__aeabi_dmul>
 800ed0c:	a378      	add	r3, pc, #480	; (adr r3, 800eef0 <__ieee754_pow+0x718>)
 800ed0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed12:	f7f1 fadb 	bl	80002cc <__adddf3>
 800ed16:	4622      	mov	r2, r4
 800ed18:	462b      	mov	r3, r5
 800ed1a:	f7f1 fc8d 	bl	8000638 <__aeabi_dmul>
 800ed1e:	a376      	add	r3, pc, #472	; (adr r3, 800eef8 <__ieee754_pow+0x720>)
 800ed20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed24:	f7f1 fad2 	bl	80002cc <__adddf3>
 800ed28:	4622      	mov	r2, r4
 800ed2a:	462b      	mov	r3, r5
 800ed2c:	f7f1 fc84 	bl	8000638 <__aeabi_dmul>
 800ed30:	a373      	add	r3, pc, #460	; (adr r3, 800ef00 <__ieee754_pow+0x728>)
 800ed32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed36:	f7f1 fac9 	bl	80002cc <__adddf3>
 800ed3a:	4622      	mov	r2, r4
 800ed3c:	462b      	mov	r3, r5
 800ed3e:	f7f1 fc7b 	bl	8000638 <__aeabi_dmul>
 800ed42:	a371      	add	r3, pc, #452	; (adr r3, 800ef08 <__ieee754_pow+0x730>)
 800ed44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed48:	f7f1 fac0 	bl	80002cc <__adddf3>
 800ed4c:	4622      	mov	r2, r4
 800ed4e:	4606      	mov	r6, r0
 800ed50:	460f      	mov	r7, r1
 800ed52:	462b      	mov	r3, r5
 800ed54:	4620      	mov	r0, r4
 800ed56:	4629      	mov	r1, r5
 800ed58:	f7f1 fc6e 	bl	8000638 <__aeabi_dmul>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	4630      	mov	r0, r6
 800ed62:	4639      	mov	r1, r7
 800ed64:	f7f1 fc68 	bl	8000638 <__aeabi_dmul>
 800ed68:	4642      	mov	r2, r8
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	460d      	mov	r5, r1
 800ed6e:	464b      	mov	r3, r9
 800ed70:	ec51 0b18 	vmov	r0, r1, d8
 800ed74:	f7f1 faaa 	bl	80002cc <__adddf3>
 800ed78:	ec53 2b19 	vmov	r2, r3, d9
 800ed7c:	f7f1 fc5c 	bl	8000638 <__aeabi_dmul>
 800ed80:	4622      	mov	r2, r4
 800ed82:	462b      	mov	r3, r5
 800ed84:	f7f1 faa2 	bl	80002cc <__adddf3>
 800ed88:	4642      	mov	r2, r8
 800ed8a:	4682      	mov	sl, r0
 800ed8c:	468b      	mov	fp, r1
 800ed8e:	464b      	mov	r3, r9
 800ed90:	4640      	mov	r0, r8
 800ed92:	4649      	mov	r1, r9
 800ed94:	f7f1 fc50 	bl	8000638 <__aeabi_dmul>
 800ed98:	4b6b      	ldr	r3, [pc, #428]	; (800ef48 <__ieee754_pow+0x770>)
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	4606      	mov	r6, r0
 800ed9e:	460f      	mov	r7, r1
 800eda0:	f7f1 fa94 	bl	80002cc <__adddf3>
 800eda4:	4652      	mov	r2, sl
 800eda6:	465b      	mov	r3, fp
 800eda8:	f7f1 fa90 	bl	80002cc <__adddf3>
 800edac:	2000      	movs	r0, #0
 800edae:	4604      	mov	r4, r0
 800edb0:	460d      	mov	r5, r1
 800edb2:	4602      	mov	r2, r0
 800edb4:	460b      	mov	r3, r1
 800edb6:	4640      	mov	r0, r8
 800edb8:	4649      	mov	r1, r9
 800edba:	f7f1 fc3d 	bl	8000638 <__aeabi_dmul>
 800edbe:	4b62      	ldr	r3, [pc, #392]	; (800ef48 <__ieee754_pow+0x770>)
 800edc0:	4680      	mov	r8, r0
 800edc2:	4689      	mov	r9, r1
 800edc4:	2200      	movs	r2, #0
 800edc6:	4620      	mov	r0, r4
 800edc8:	4629      	mov	r1, r5
 800edca:	f7f1 fa7d 	bl	80002c8 <__aeabi_dsub>
 800edce:	4632      	mov	r2, r6
 800edd0:	463b      	mov	r3, r7
 800edd2:	f7f1 fa79 	bl	80002c8 <__aeabi_dsub>
 800edd6:	4602      	mov	r2, r0
 800edd8:	460b      	mov	r3, r1
 800edda:	4650      	mov	r0, sl
 800eddc:	4659      	mov	r1, fp
 800edde:	f7f1 fa73 	bl	80002c8 <__aeabi_dsub>
 800ede2:	ec53 2b18 	vmov	r2, r3, d8
 800ede6:	f7f1 fc27 	bl	8000638 <__aeabi_dmul>
 800edea:	4622      	mov	r2, r4
 800edec:	4606      	mov	r6, r0
 800edee:	460f      	mov	r7, r1
 800edf0:	462b      	mov	r3, r5
 800edf2:	ec51 0b19 	vmov	r0, r1, d9
 800edf6:	f7f1 fc1f 	bl	8000638 <__aeabi_dmul>
 800edfa:	4602      	mov	r2, r0
 800edfc:	460b      	mov	r3, r1
 800edfe:	4630      	mov	r0, r6
 800ee00:	4639      	mov	r1, r7
 800ee02:	f7f1 fa63 	bl	80002cc <__adddf3>
 800ee06:	4606      	mov	r6, r0
 800ee08:	460f      	mov	r7, r1
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	460b      	mov	r3, r1
 800ee0e:	4640      	mov	r0, r8
 800ee10:	4649      	mov	r1, r9
 800ee12:	f7f1 fa5b 	bl	80002cc <__adddf3>
 800ee16:	a33e      	add	r3, pc, #248	; (adr r3, 800ef10 <__ieee754_pow+0x738>)
 800ee18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	4604      	mov	r4, r0
 800ee20:	460d      	mov	r5, r1
 800ee22:	f7f1 fc09 	bl	8000638 <__aeabi_dmul>
 800ee26:	4642      	mov	r2, r8
 800ee28:	ec41 0b18 	vmov	d8, r0, r1
 800ee2c:	464b      	mov	r3, r9
 800ee2e:	4620      	mov	r0, r4
 800ee30:	4629      	mov	r1, r5
 800ee32:	f7f1 fa49 	bl	80002c8 <__aeabi_dsub>
 800ee36:	4602      	mov	r2, r0
 800ee38:	460b      	mov	r3, r1
 800ee3a:	4630      	mov	r0, r6
 800ee3c:	4639      	mov	r1, r7
 800ee3e:	f7f1 fa43 	bl	80002c8 <__aeabi_dsub>
 800ee42:	a335      	add	r3, pc, #212	; (adr r3, 800ef18 <__ieee754_pow+0x740>)
 800ee44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee48:	f7f1 fbf6 	bl	8000638 <__aeabi_dmul>
 800ee4c:	a334      	add	r3, pc, #208	; (adr r3, 800ef20 <__ieee754_pow+0x748>)
 800ee4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee52:	4606      	mov	r6, r0
 800ee54:	460f      	mov	r7, r1
 800ee56:	4620      	mov	r0, r4
 800ee58:	4629      	mov	r1, r5
 800ee5a:	f7f1 fbed 	bl	8000638 <__aeabi_dmul>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	460b      	mov	r3, r1
 800ee62:	4630      	mov	r0, r6
 800ee64:	4639      	mov	r1, r7
 800ee66:	f7f1 fa31 	bl	80002cc <__adddf3>
 800ee6a:	9a07      	ldr	r2, [sp, #28]
 800ee6c:	4b37      	ldr	r3, [pc, #220]	; (800ef4c <__ieee754_pow+0x774>)
 800ee6e:	4413      	add	r3, r2
 800ee70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee74:	f7f1 fa2a 	bl	80002cc <__adddf3>
 800ee78:	4682      	mov	sl, r0
 800ee7a:	9805      	ldr	r0, [sp, #20]
 800ee7c:	468b      	mov	fp, r1
 800ee7e:	f7f1 fb71 	bl	8000564 <__aeabi_i2d>
 800ee82:	9a07      	ldr	r2, [sp, #28]
 800ee84:	4b32      	ldr	r3, [pc, #200]	; (800ef50 <__ieee754_pow+0x778>)
 800ee86:	4413      	add	r3, r2
 800ee88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee8c:	4606      	mov	r6, r0
 800ee8e:	460f      	mov	r7, r1
 800ee90:	4652      	mov	r2, sl
 800ee92:	465b      	mov	r3, fp
 800ee94:	ec51 0b18 	vmov	r0, r1, d8
 800ee98:	f7f1 fa18 	bl	80002cc <__adddf3>
 800ee9c:	4642      	mov	r2, r8
 800ee9e:	464b      	mov	r3, r9
 800eea0:	f7f1 fa14 	bl	80002cc <__adddf3>
 800eea4:	4632      	mov	r2, r6
 800eea6:	463b      	mov	r3, r7
 800eea8:	f7f1 fa10 	bl	80002cc <__adddf3>
 800eeac:	2000      	movs	r0, #0
 800eeae:	4632      	mov	r2, r6
 800eeb0:	463b      	mov	r3, r7
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	460d      	mov	r5, r1
 800eeb6:	f7f1 fa07 	bl	80002c8 <__aeabi_dsub>
 800eeba:	4642      	mov	r2, r8
 800eebc:	464b      	mov	r3, r9
 800eebe:	f7f1 fa03 	bl	80002c8 <__aeabi_dsub>
 800eec2:	ec53 2b18 	vmov	r2, r3, d8
 800eec6:	f7f1 f9ff 	bl	80002c8 <__aeabi_dsub>
 800eeca:	4602      	mov	r2, r0
 800eecc:	460b      	mov	r3, r1
 800eece:	4650      	mov	r0, sl
 800eed0:	4659      	mov	r1, fp
 800eed2:	e610      	b.n	800eaf6 <__ieee754_pow+0x31e>
 800eed4:	2401      	movs	r4, #1
 800eed6:	e6a1      	b.n	800ec1c <__ieee754_pow+0x444>
 800eed8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ef28 <__ieee754_pow+0x750>
 800eedc:	e617      	b.n	800eb0e <__ieee754_pow+0x336>
 800eede:	bf00      	nop
 800eee0:	4a454eef 	.word	0x4a454eef
 800eee4:	3fca7e28 	.word	0x3fca7e28
 800eee8:	93c9db65 	.word	0x93c9db65
 800eeec:	3fcd864a 	.word	0x3fcd864a
 800eef0:	a91d4101 	.word	0xa91d4101
 800eef4:	3fd17460 	.word	0x3fd17460
 800eef8:	518f264d 	.word	0x518f264d
 800eefc:	3fd55555 	.word	0x3fd55555
 800ef00:	db6fabff 	.word	0xdb6fabff
 800ef04:	3fdb6db6 	.word	0x3fdb6db6
 800ef08:	33333303 	.word	0x33333303
 800ef0c:	3fe33333 	.word	0x3fe33333
 800ef10:	e0000000 	.word	0xe0000000
 800ef14:	3feec709 	.word	0x3feec709
 800ef18:	dc3a03fd 	.word	0xdc3a03fd
 800ef1c:	3feec709 	.word	0x3feec709
 800ef20:	145b01f5 	.word	0x145b01f5
 800ef24:	be3e2fe0 	.word	0xbe3e2fe0
 800ef28:	00000000 	.word	0x00000000
 800ef2c:	3ff00000 	.word	0x3ff00000
 800ef30:	7ff00000 	.word	0x7ff00000
 800ef34:	43400000 	.word	0x43400000
 800ef38:	0003988e 	.word	0x0003988e
 800ef3c:	000bb679 	.word	0x000bb679
 800ef40:	08010088 	.word	0x08010088
 800ef44:	3ff00000 	.word	0x3ff00000
 800ef48:	40080000 	.word	0x40080000
 800ef4c:	080100a8 	.word	0x080100a8
 800ef50:	08010098 	.word	0x08010098
 800ef54:	a3b5      	add	r3, pc, #724	; (adr r3, 800f22c <__ieee754_pow+0xa54>)
 800ef56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5a:	4640      	mov	r0, r8
 800ef5c:	4649      	mov	r1, r9
 800ef5e:	f7f1 f9b5 	bl	80002cc <__adddf3>
 800ef62:	4622      	mov	r2, r4
 800ef64:	ec41 0b1a 	vmov	d10, r0, r1
 800ef68:	462b      	mov	r3, r5
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	4639      	mov	r1, r7
 800ef6e:	f7f1 f9ab 	bl	80002c8 <__aeabi_dsub>
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	ec51 0b1a 	vmov	r0, r1, d10
 800ef7a:	f7f1 fded 	bl	8000b58 <__aeabi_dcmpgt>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	f47f ae04 	bne.w	800eb8c <__ieee754_pow+0x3b4>
 800ef84:	4aa4      	ldr	r2, [pc, #656]	; (800f218 <__ieee754_pow+0xa40>)
 800ef86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	f340 8108 	ble.w	800f1a0 <__ieee754_pow+0x9c8>
 800ef90:	151b      	asrs	r3, r3, #20
 800ef92:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ef96:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ef9a:	fa4a f303 	asr.w	r3, sl, r3
 800ef9e:	445b      	add	r3, fp
 800efa0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800efa4:	4e9d      	ldr	r6, [pc, #628]	; (800f21c <__ieee754_pow+0xa44>)
 800efa6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800efaa:	4116      	asrs	r6, r2
 800efac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800efb0:	2000      	movs	r0, #0
 800efb2:	ea23 0106 	bic.w	r1, r3, r6
 800efb6:	f1c2 0214 	rsb	r2, r2, #20
 800efba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800efbe:	fa4a fa02 	asr.w	sl, sl, r2
 800efc2:	f1bb 0f00 	cmp.w	fp, #0
 800efc6:	4602      	mov	r2, r0
 800efc8:	460b      	mov	r3, r1
 800efca:	4620      	mov	r0, r4
 800efcc:	4629      	mov	r1, r5
 800efce:	bfb8      	it	lt
 800efd0:	f1ca 0a00 	rsblt	sl, sl, #0
 800efd4:	f7f1 f978 	bl	80002c8 <__aeabi_dsub>
 800efd8:	ec41 0b19 	vmov	d9, r0, r1
 800efdc:	4642      	mov	r2, r8
 800efde:	464b      	mov	r3, r9
 800efe0:	ec51 0b19 	vmov	r0, r1, d9
 800efe4:	f7f1 f972 	bl	80002cc <__adddf3>
 800efe8:	a37b      	add	r3, pc, #492	; (adr r3, 800f1d8 <__ieee754_pow+0xa00>)
 800efea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efee:	2000      	movs	r0, #0
 800eff0:	4604      	mov	r4, r0
 800eff2:	460d      	mov	r5, r1
 800eff4:	f7f1 fb20 	bl	8000638 <__aeabi_dmul>
 800eff8:	ec53 2b19 	vmov	r2, r3, d9
 800effc:	4606      	mov	r6, r0
 800effe:	460f      	mov	r7, r1
 800f000:	4620      	mov	r0, r4
 800f002:	4629      	mov	r1, r5
 800f004:	f7f1 f960 	bl	80002c8 <__aeabi_dsub>
 800f008:	4602      	mov	r2, r0
 800f00a:	460b      	mov	r3, r1
 800f00c:	4640      	mov	r0, r8
 800f00e:	4649      	mov	r1, r9
 800f010:	f7f1 f95a 	bl	80002c8 <__aeabi_dsub>
 800f014:	a372      	add	r3, pc, #456	; (adr r3, 800f1e0 <__ieee754_pow+0xa08>)
 800f016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01a:	f7f1 fb0d 	bl	8000638 <__aeabi_dmul>
 800f01e:	a372      	add	r3, pc, #456	; (adr r3, 800f1e8 <__ieee754_pow+0xa10>)
 800f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f024:	4680      	mov	r8, r0
 800f026:	4689      	mov	r9, r1
 800f028:	4620      	mov	r0, r4
 800f02a:	4629      	mov	r1, r5
 800f02c:	f7f1 fb04 	bl	8000638 <__aeabi_dmul>
 800f030:	4602      	mov	r2, r0
 800f032:	460b      	mov	r3, r1
 800f034:	4640      	mov	r0, r8
 800f036:	4649      	mov	r1, r9
 800f038:	f7f1 f948 	bl	80002cc <__adddf3>
 800f03c:	4604      	mov	r4, r0
 800f03e:	460d      	mov	r5, r1
 800f040:	4602      	mov	r2, r0
 800f042:	460b      	mov	r3, r1
 800f044:	4630      	mov	r0, r6
 800f046:	4639      	mov	r1, r7
 800f048:	f7f1 f940 	bl	80002cc <__adddf3>
 800f04c:	4632      	mov	r2, r6
 800f04e:	463b      	mov	r3, r7
 800f050:	4680      	mov	r8, r0
 800f052:	4689      	mov	r9, r1
 800f054:	f7f1 f938 	bl	80002c8 <__aeabi_dsub>
 800f058:	4602      	mov	r2, r0
 800f05a:	460b      	mov	r3, r1
 800f05c:	4620      	mov	r0, r4
 800f05e:	4629      	mov	r1, r5
 800f060:	f7f1 f932 	bl	80002c8 <__aeabi_dsub>
 800f064:	4642      	mov	r2, r8
 800f066:	4606      	mov	r6, r0
 800f068:	460f      	mov	r7, r1
 800f06a:	464b      	mov	r3, r9
 800f06c:	4640      	mov	r0, r8
 800f06e:	4649      	mov	r1, r9
 800f070:	f7f1 fae2 	bl	8000638 <__aeabi_dmul>
 800f074:	a35e      	add	r3, pc, #376	; (adr r3, 800f1f0 <__ieee754_pow+0xa18>)
 800f076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07a:	4604      	mov	r4, r0
 800f07c:	460d      	mov	r5, r1
 800f07e:	f7f1 fadb 	bl	8000638 <__aeabi_dmul>
 800f082:	a35d      	add	r3, pc, #372	; (adr r3, 800f1f8 <__ieee754_pow+0xa20>)
 800f084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f088:	f7f1 f91e 	bl	80002c8 <__aeabi_dsub>
 800f08c:	4622      	mov	r2, r4
 800f08e:	462b      	mov	r3, r5
 800f090:	f7f1 fad2 	bl	8000638 <__aeabi_dmul>
 800f094:	a35a      	add	r3, pc, #360	; (adr r3, 800f200 <__ieee754_pow+0xa28>)
 800f096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09a:	f7f1 f917 	bl	80002cc <__adddf3>
 800f09e:	4622      	mov	r2, r4
 800f0a0:	462b      	mov	r3, r5
 800f0a2:	f7f1 fac9 	bl	8000638 <__aeabi_dmul>
 800f0a6:	a358      	add	r3, pc, #352	; (adr r3, 800f208 <__ieee754_pow+0xa30>)
 800f0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ac:	f7f1 f90c 	bl	80002c8 <__aeabi_dsub>
 800f0b0:	4622      	mov	r2, r4
 800f0b2:	462b      	mov	r3, r5
 800f0b4:	f7f1 fac0 	bl	8000638 <__aeabi_dmul>
 800f0b8:	a355      	add	r3, pc, #340	; (adr r3, 800f210 <__ieee754_pow+0xa38>)
 800f0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0be:	f7f1 f905 	bl	80002cc <__adddf3>
 800f0c2:	4622      	mov	r2, r4
 800f0c4:	462b      	mov	r3, r5
 800f0c6:	f7f1 fab7 	bl	8000638 <__aeabi_dmul>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	4640      	mov	r0, r8
 800f0d0:	4649      	mov	r1, r9
 800f0d2:	f7f1 f8f9 	bl	80002c8 <__aeabi_dsub>
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	460d      	mov	r5, r1
 800f0da:	4602      	mov	r2, r0
 800f0dc:	460b      	mov	r3, r1
 800f0de:	4640      	mov	r0, r8
 800f0e0:	4649      	mov	r1, r9
 800f0e2:	f7f1 faa9 	bl	8000638 <__aeabi_dmul>
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	ec41 0b19 	vmov	d9, r0, r1
 800f0ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	4629      	mov	r1, r5
 800f0f4:	f7f1 f8e8 	bl	80002c8 <__aeabi_dsub>
 800f0f8:	4602      	mov	r2, r0
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	ec51 0b19 	vmov	r0, r1, d9
 800f100:	f7f1 fbc4 	bl	800088c <__aeabi_ddiv>
 800f104:	4632      	mov	r2, r6
 800f106:	4604      	mov	r4, r0
 800f108:	460d      	mov	r5, r1
 800f10a:	463b      	mov	r3, r7
 800f10c:	4640      	mov	r0, r8
 800f10e:	4649      	mov	r1, r9
 800f110:	f7f1 fa92 	bl	8000638 <__aeabi_dmul>
 800f114:	4632      	mov	r2, r6
 800f116:	463b      	mov	r3, r7
 800f118:	f7f1 f8d8 	bl	80002cc <__adddf3>
 800f11c:	4602      	mov	r2, r0
 800f11e:	460b      	mov	r3, r1
 800f120:	4620      	mov	r0, r4
 800f122:	4629      	mov	r1, r5
 800f124:	f7f1 f8d0 	bl	80002c8 <__aeabi_dsub>
 800f128:	4642      	mov	r2, r8
 800f12a:	464b      	mov	r3, r9
 800f12c:	f7f1 f8cc 	bl	80002c8 <__aeabi_dsub>
 800f130:	460b      	mov	r3, r1
 800f132:	4602      	mov	r2, r0
 800f134:	493a      	ldr	r1, [pc, #232]	; (800f220 <__ieee754_pow+0xa48>)
 800f136:	2000      	movs	r0, #0
 800f138:	f7f1 f8c6 	bl	80002c8 <__aeabi_dsub>
 800f13c:	ec41 0b10 	vmov	d0, r0, r1
 800f140:	ee10 3a90 	vmov	r3, s1
 800f144:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f14c:	da2b      	bge.n	800f1a6 <__ieee754_pow+0x9ce>
 800f14e:	4650      	mov	r0, sl
 800f150:	f000 f96e 	bl	800f430 <scalbn>
 800f154:	ec51 0b10 	vmov	r0, r1, d0
 800f158:	ec53 2b18 	vmov	r2, r3, d8
 800f15c:	f7ff bbed 	b.w	800e93a <__ieee754_pow+0x162>
 800f160:	4b30      	ldr	r3, [pc, #192]	; (800f224 <__ieee754_pow+0xa4c>)
 800f162:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f166:	429e      	cmp	r6, r3
 800f168:	f77f af0c 	ble.w	800ef84 <__ieee754_pow+0x7ac>
 800f16c:	4b2e      	ldr	r3, [pc, #184]	; (800f228 <__ieee754_pow+0xa50>)
 800f16e:	440b      	add	r3, r1
 800f170:	4303      	orrs	r3, r0
 800f172:	d009      	beq.n	800f188 <__ieee754_pow+0x9b0>
 800f174:	ec51 0b18 	vmov	r0, r1, d8
 800f178:	2200      	movs	r2, #0
 800f17a:	2300      	movs	r3, #0
 800f17c:	f7f1 fcce 	bl	8000b1c <__aeabi_dcmplt>
 800f180:	3800      	subs	r0, #0
 800f182:	bf18      	it	ne
 800f184:	2001      	movne	r0, #1
 800f186:	e447      	b.n	800ea18 <__ieee754_pow+0x240>
 800f188:	4622      	mov	r2, r4
 800f18a:	462b      	mov	r3, r5
 800f18c:	f7f1 f89c 	bl	80002c8 <__aeabi_dsub>
 800f190:	4642      	mov	r2, r8
 800f192:	464b      	mov	r3, r9
 800f194:	f7f1 fcd6 	bl	8000b44 <__aeabi_dcmpge>
 800f198:	2800      	cmp	r0, #0
 800f19a:	f43f aef3 	beq.w	800ef84 <__ieee754_pow+0x7ac>
 800f19e:	e7e9      	b.n	800f174 <__ieee754_pow+0x99c>
 800f1a0:	f04f 0a00 	mov.w	sl, #0
 800f1a4:	e71a      	b.n	800efdc <__ieee754_pow+0x804>
 800f1a6:	ec51 0b10 	vmov	r0, r1, d0
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	e7d4      	b.n	800f158 <__ieee754_pow+0x980>
 800f1ae:	491c      	ldr	r1, [pc, #112]	; (800f220 <__ieee754_pow+0xa48>)
 800f1b0:	2000      	movs	r0, #0
 800f1b2:	f7ff bb30 	b.w	800e816 <__ieee754_pow+0x3e>
 800f1b6:	2000      	movs	r0, #0
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	f7ff bb2c 	b.w	800e816 <__ieee754_pow+0x3e>
 800f1be:	4630      	mov	r0, r6
 800f1c0:	4639      	mov	r1, r7
 800f1c2:	f7ff bb28 	b.w	800e816 <__ieee754_pow+0x3e>
 800f1c6:	9204      	str	r2, [sp, #16]
 800f1c8:	f7ff bb7a 	b.w	800e8c0 <__ieee754_pow+0xe8>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	f7ff bb64 	b.w	800e89a <__ieee754_pow+0xc2>
 800f1d2:	bf00      	nop
 800f1d4:	f3af 8000 	nop.w
 800f1d8:	00000000 	.word	0x00000000
 800f1dc:	3fe62e43 	.word	0x3fe62e43
 800f1e0:	fefa39ef 	.word	0xfefa39ef
 800f1e4:	3fe62e42 	.word	0x3fe62e42
 800f1e8:	0ca86c39 	.word	0x0ca86c39
 800f1ec:	be205c61 	.word	0xbe205c61
 800f1f0:	72bea4d0 	.word	0x72bea4d0
 800f1f4:	3e663769 	.word	0x3e663769
 800f1f8:	c5d26bf1 	.word	0xc5d26bf1
 800f1fc:	3ebbbd41 	.word	0x3ebbbd41
 800f200:	af25de2c 	.word	0xaf25de2c
 800f204:	3f11566a 	.word	0x3f11566a
 800f208:	16bebd93 	.word	0x16bebd93
 800f20c:	3f66c16c 	.word	0x3f66c16c
 800f210:	5555553e 	.word	0x5555553e
 800f214:	3fc55555 	.word	0x3fc55555
 800f218:	3fe00000 	.word	0x3fe00000
 800f21c:	000fffff 	.word	0x000fffff
 800f220:	3ff00000 	.word	0x3ff00000
 800f224:	4090cbff 	.word	0x4090cbff
 800f228:	3f6f3400 	.word	0x3f6f3400
 800f22c:	652b82fe 	.word	0x652b82fe
 800f230:	3c971547 	.word	0x3c971547

0800f234 <__ieee754_sqrt>:
 800f234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f238:	ec55 4b10 	vmov	r4, r5, d0
 800f23c:	4e55      	ldr	r6, [pc, #340]	; (800f394 <__ieee754_sqrt+0x160>)
 800f23e:	43ae      	bics	r6, r5
 800f240:	ee10 0a10 	vmov	r0, s0
 800f244:	ee10 3a10 	vmov	r3, s0
 800f248:	462a      	mov	r2, r5
 800f24a:	4629      	mov	r1, r5
 800f24c:	d110      	bne.n	800f270 <__ieee754_sqrt+0x3c>
 800f24e:	ee10 2a10 	vmov	r2, s0
 800f252:	462b      	mov	r3, r5
 800f254:	f7f1 f9f0 	bl	8000638 <__aeabi_dmul>
 800f258:	4602      	mov	r2, r0
 800f25a:	460b      	mov	r3, r1
 800f25c:	4620      	mov	r0, r4
 800f25e:	4629      	mov	r1, r5
 800f260:	f7f1 f834 	bl	80002cc <__adddf3>
 800f264:	4604      	mov	r4, r0
 800f266:	460d      	mov	r5, r1
 800f268:	ec45 4b10 	vmov	d0, r4, r5
 800f26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f270:	2d00      	cmp	r5, #0
 800f272:	dc10      	bgt.n	800f296 <__ieee754_sqrt+0x62>
 800f274:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f278:	4330      	orrs	r0, r6
 800f27a:	d0f5      	beq.n	800f268 <__ieee754_sqrt+0x34>
 800f27c:	b15d      	cbz	r5, 800f296 <__ieee754_sqrt+0x62>
 800f27e:	ee10 2a10 	vmov	r2, s0
 800f282:	462b      	mov	r3, r5
 800f284:	ee10 0a10 	vmov	r0, s0
 800f288:	f7f1 f81e 	bl	80002c8 <__aeabi_dsub>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	f7f1 fafc 	bl	800088c <__aeabi_ddiv>
 800f294:	e7e6      	b.n	800f264 <__ieee754_sqrt+0x30>
 800f296:	1512      	asrs	r2, r2, #20
 800f298:	d074      	beq.n	800f384 <__ieee754_sqrt+0x150>
 800f29a:	07d4      	lsls	r4, r2, #31
 800f29c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f2a0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f2a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f2a8:	bf5e      	ittt	pl
 800f2aa:	0fda      	lsrpl	r2, r3, #31
 800f2ac:	005b      	lslpl	r3, r3, #1
 800f2ae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f2b2:	2400      	movs	r4, #0
 800f2b4:	0fda      	lsrs	r2, r3, #31
 800f2b6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f2ba:	107f      	asrs	r7, r7, #1
 800f2bc:	005b      	lsls	r3, r3, #1
 800f2be:	2516      	movs	r5, #22
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f2c6:	1886      	adds	r6, r0, r2
 800f2c8:	428e      	cmp	r6, r1
 800f2ca:	bfde      	ittt	le
 800f2cc:	1b89      	suble	r1, r1, r6
 800f2ce:	18b0      	addle	r0, r6, r2
 800f2d0:	18a4      	addle	r4, r4, r2
 800f2d2:	0049      	lsls	r1, r1, #1
 800f2d4:	3d01      	subs	r5, #1
 800f2d6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f2da:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f2de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2e2:	d1f0      	bne.n	800f2c6 <__ieee754_sqrt+0x92>
 800f2e4:	462a      	mov	r2, r5
 800f2e6:	f04f 0e20 	mov.w	lr, #32
 800f2ea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f2ee:	4281      	cmp	r1, r0
 800f2f0:	eb06 0c05 	add.w	ip, r6, r5
 800f2f4:	dc02      	bgt.n	800f2fc <__ieee754_sqrt+0xc8>
 800f2f6:	d113      	bne.n	800f320 <__ieee754_sqrt+0xec>
 800f2f8:	459c      	cmp	ip, r3
 800f2fa:	d811      	bhi.n	800f320 <__ieee754_sqrt+0xec>
 800f2fc:	f1bc 0f00 	cmp.w	ip, #0
 800f300:	eb0c 0506 	add.w	r5, ip, r6
 800f304:	da43      	bge.n	800f38e <__ieee754_sqrt+0x15a>
 800f306:	2d00      	cmp	r5, #0
 800f308:	db41      	blt.n	800f38e <__ieee754_sqrt+0x15a>
 800f30a:	f100 0801 	add.w	r8, r0, #1
 800f30e:	1a09      	subs	r1, r1, r0
 800f310:	459c      	cmp	ip, r3
 800f312:	bf88      	it	hi
 800f314:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f318:	eba3 030c 	sub.w	r3, r3, ip
 800f31c:	4432      	add	r2, r6
 800f31e:	4640      	mov	r0, r8
 800f320:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f324:	f1be 0e01 	subs.w	lr, lr, #1
 800f328:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f32c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f330:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f334:	d1db      	bne.n	800f2ee <__ieee754_sqrt+0xba>
 800f336:	430b      	orrs	r3, r1
 800f338:	d006      	beq.n	800f348 <__ieee754_sqrt+0x114>
 800f33a:	1c50      	adds	r0, r2, #1
 800f33c:	bf13      	iteet	ne
 800f33e:	3201      	addne	r2, #1
 800f340:	3401      	addeq	r4, #1
 800f342:	4672      	moveq	r2, lr
 800f344:	f022 0201 	bicne.w	r2, r2, #1
 800f348:	1063      	asrs	r3, r4, #1
 800f34a:	0852      	lsrs	r2, r2, #1
 800f34c:	07e1      	lsls	r1, r4, #31
 800f34e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f352:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f356:	bf48      	it	mi
 800f358:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f35c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f360:	4614      	mov	r4, r2
 800f362:	e781      	b.n	800f268 <__ieee754_sqrt+0x34>
 800f364:	0ad9      	lsrs	r1, r3, #11
 800f366:	3815      	subs	r0, #21
 800f368:	055b      	lsls	r3, r3, #21
 800f36a:	2900      	cmp	r1, #0
 800f36c:	d0fa      	beq.n	800f364 <__ieee754_sqrt+0x130>
 800f36e:	02cd      	lsls	r5, r1, #11
 800f370:	d50a      	bpl.n	800f388 <__ieee754_sqrt+0x154>
 800f372:	f1c2 0420 	rsb	r4, r2, #32
 800f376:	fa23 f404 	lsr.w	r4, r3, r4
 800f37a:	1e55      	subs	r5, r2, #1
 800f37c:	4093      	lsls	r3, r2
 800f37e:	4321      	orrs	r1, r4
 800f380:	1b42      	subs	r2, r0, r5
 800f382:	e78a      	b.n	800f29a <__ieee754_sqrt+0x66>
 800f384:	4610      	mov	r0, r2
 800f386:	e7f0      	b.n	800f36a <__ieee754_sqrt+0x136>
 800f388:	0049      	lsls	r1, r1, #1
 800f38a:	3201      	adds	r2, #1
 800f38c:	e7ef      	b.n	800f36e <__ieee754_sqrt+0x13a>
 800f38e:	4680      	mov	r8, r0
 800f390:	e7bd      	b.n	800f30e <__ieee754_sqrt+0xda>
 800f392:	bf00      	nop
 800f394:	7ff00000 	.word	0x7ff00000

0800f398 <with_errno>:
 800f398:	b570      	push	{r4, r5, r6, lr}
 800f39a:	4604      	mov	r4, r0
 800f39c:	460d      	mov	r5, r1
 800f39e:	4616      	mov	r6, r2
 800f3a0:	f000 f8cc 	bl	800f53c <__errno>
 800f3a4:	4629      	mov	r1, r5
 800f3a6:	6006      	str	r6, [r0, #0]
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	bd70      	pop	{r4, r5, r6, pc}

0800f3ac <xflow>:
 800f3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3ae:	4614      	mov	r4, r2
 800f3b0:	461d      	mov	r5, r3
 800f3b2:	b108      	cbz	r0, 800f3b8 <xflow+0xc>
 800f3b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f3b8:	e9cd 2300 	strd	r2, r3, [sp]
 800f3bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	4629      	mov	r1, r5
 800f3c4:	f7f1 f938 	bl	8000638 <__aeabi_dmul>
 800f3c8:	2222      	movs	r2, #34	; 0x22
 800f3ca:	b003      	add	sp, #12
 800f3cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3d0:	f7ff bfe2 	b.w	800f398 <with_errno>

0800f3d4 <__math_uflow>:
 800f3d4:	b508      	push	{r3, lr}
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f3dc:	f7ff ffe6 	bl	800f3ac <xflow>
 800f3e0:	ec41 0b10 	vmov	d0, r0, r1
 800f3e4:	bd08      	pop	{r3, pc}

0800f3e6 <__math_oflow>:
 800f3e6:	b508      	push	{r3, lr}
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f3ee:	f7ff ffdd 	bl	800f3ac <xflow>
 800f3f2:	ec41 0b10 	vmov	d0, r0, r1
 800f3f6:	bd08      	pop	{r3, pc}

0800f3f8 <fabs>:
 800f3f8:	ec51 0b10 	vmov	r0, r1, d0
 800f3fc:	ee10 2a10 	vmov	r2, s0
 800f400:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f404:	ec43 2b10 	vmov	d0, r2, r3
 800f408:	4770      	bx	lr

0800f40a <finite>:
 800f40a:	b082      	sub	sp, #8
 800f40c:	ed8d 0b00 	vstr	d0, [sp]
 800f410:	9801      	ldr	r0, [sp, #4]
 800f412:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f416:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f41a:	0fc0      	lsrs	r0, r0, #31
 800f41c:	b002      	add	sp, #8
 800f41e:	4770      	bx	lr

0800f420 <nan>:
 800f420:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f428 <nan+0x8>
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	00000000 	.word	0x00000000
 800f42c:	7ff80000 	.word	0x7ff80000

0800f430 <scalbn>:
 800f430:	b570      	push	{r4, r5, r6, lr}
 800f432:	ec55 4b10 	vmov	r4, r5, d0
 800f436:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f43a:	4606      	mov	r6, r0
 800f43c:	462b      	mov	r3, r5
 800f43e:	b99a      	cbnz	r2, 800f468 <scalbn+0x38>
 800f440:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f444:	4323      	orrs	r3, r4
 800f446:	d036      	beq.n	800f4b6 <scalbn+0x86>
 800f448:	4b39      	ldr	r3, [pc, #228]	; (800f530 <scalbn+0x100>)
 800f44a:	4629      	mov	r1, r5
 800f44c:	ee10 0a10 	vmov	r0, s0
 800f450:	2200      	movs	r2, #0
 800f452:	f7f1 f8f1 	bl	8000638 <__aeabi_dmul>
 800f456:	4b37      	ldr	r3, [pc, #220]	; (800f534 <scalbn+0x104>)
 800f458:	429e      	cmp	r6, r3
 800f45a:	4604      	mov	r4, r0
 800f45c:	460d      	mov	r5, r1
 800f45e:	da10      	bge.n	800f482 <scalbn+0x52>
 800f460:	a32b      	add	r3, pc, #172	; (adr r3, 800f510 <scalbn+0xe0>)
 800f462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f466:	e03a      	b.n	800f4de <scalbn+0xae>
 800f468:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f46c:	428a      	cmp	r2, r1
 800f46e:	d10c      	bne.n	800f48a <scalbn+0x5a>
 800f470:	ee10 2a10 	vmov	r2, s0
 800f474:	4620      	mov	r0, r4
 800f476:	4629      	mov	r1, r5
 800f478:	f7f0 ff28 	bl	80002cc <__adddf3>
 800f47c:	4604      	mov	r4, r0
 800f47e:	460d      	mov	r5, r1
 800f480:	e019      	b.n	800f4b6 <scalbn+0x86>
 800f482:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f486:	460b      	mov	r3, r1
 800f488:	3a36      	subs	r2, #54	; 0x36
 800f48a:	4432      	add	r2, r6
 800f48c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f490:	428a      	cmp	r2, r1
 800f492:	dd08      	ble.n	800f4a6 <scalbn+0x76>
 800f494:	2d00      	cmp	r5, #0
 800f496:	a120      	add	r1, pc, #128	; (adr r1, 800f518 <scalbn+0xe8>)
 800f498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f49c:	da1c      	bge.n	800f4d8 <scalbn+0xa8>
 800f49e:	a120      	add	r1, pc, #128	; (adr r1, 800f520 <scalbn+0xf0>)
 800f4a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4a4:	e018      	b.n	800f4d8 <scalbn+0xa8>
 800f4a6:	2a00      	cmp	r2, #0
 800f4a8:	dd08      	ble.n	800f4bc <scalbn+0x8c>
 800f4aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4b6:	ec45 4b10 	vmov	d0, r4, r5
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
 800f4bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f4c0:	da19      	bge.n	800f4f6 <scalbn+0xc6>
 800f4c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f4c6:	429e      	cmp	r6, r3
 800f4c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f4cc:	dd0a      	ble.n	800f4e4 <scalbn+0xb4>
 800f4ce:	a112      	add	r1, pc, #72	; (adr r1, 800f518 <scalbn+0xe8>)
 800f4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1e2      	bne.n	800f49e <scalbn+0x6e>
 800f4d8:	a30f      	add	r3, pc, #60	; (adr r3, 800f518 <scalbn+0xe8>)
 800f4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4de:	f7f1 f8ab 	bl	8000638 <__aeabi_dmul>
 800f4e2:	e7cb      	b.n	800f47c <scalbn+0x4c>
 800f4e4:	a10a      	add	r1, pc, #40	; (adr r1, 800f510 <scalbn+0xe0>)
 800f4e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d0b8      	beq.n	800f460 <scalbn+0x30>
 800f4ee:	a10e      	add	r1, pc, #56	; (adr r1, 800f528 <scalbn+0xf8>)
 800f4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4f4:	e7b4      	b.n	800f460 <scalbn+0x30>
 800f4f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4fa:	3236      	adds	r2, #54	; 0x36
 800f4fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f500:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f504:	4620      	mov	r0, r4
 800f506:	4b0c      	ldr	r3, [pc, #48]	; (800f538 <scalbn+0x108>)
 800f508:	2200      	movs	r2, #0
 800f50a:	e7e8      	b.n	800f4de <scalbn+0xae>
 800f50c:	f3af 8000 	nop.w
 800f510:	c2f8f359 	.word	0xc2f8f359
 800f514:	01a56e1f 	.word	0x01a56e1f
 800f518:	8800759c 	.word	0x8800759c
 800f51c:	7e37e43c 	.word	0x7e37e43c
 800f520:	8800759c 	.word	0x8800759c
 800f524:	fe37e43c 	.word	0xfe37e43c
 800f528:	c2f8f359 	.word	0xc2f8f359
 800f52c:	81a56e1f 	.word	0x81a56e1f
 800f530:	43500000 	.word	0x43500000
 800f534:	ffff3cb0 	.word	0xffff3cb0
 800f538:	3c900000 	.word	0x3c900000

0800f53c <__errno>:
 800f53c:	4b01      	ldr	r3, [pc, #4]	; (800f544 <__errno+0x8>)
 800f53e:	6818      	ldr	r0, [r3, #0]
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop
 800f544:	20000024 	.word	0x20000024

0800f548 <_close>:
 800f548:	4b02      	ldr	r3, [pc, #8]	; (800f554 <_close+0xc>)
 800f54a:	2258      	movs	r2, #88	; 0x58
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	f04f 30ff 	mov.w	r0, #4294967295
 800f552:	4770      	bx	lr
 800f554:	2000679c 	.word	0x2000679c

0800f558 <_fstat>:
 800f558:	4b02      	ldr	r3, [pc, #8]	; (800f564 <_fstat+0xc>)
 800f55a:	2258      	movs	r2, #88	; 0x58
 800f55c:	601a      	str	r2, [r3, #0]
 800f55e:	f04f 30ff 	mov.w	r0, #4294967295
 800f562:	4770      	bx	lr
 800f564:	2000679c 	.word	0x2000679c

0800f568 <_getpid>:
 800f568:	4b02      	ldr	r3, [pc, #8]	; (800f574 <_getpid+0xc>)
 800f56a:	2258      	movs	r2, #88	; 0x58
 800f56c:	601a      	str	r2, [r3, #0]
 800f56e:	f04f 30ff 	mov.w	r0, #4294967295
 800f572:	4770      	bx	lr
 800f574:	2000679c 	.word	0x2000679c

0800f578 <_isatty>:
 800f578:	4b02      	ldr	r3, [pc, #8]	; (800f584 <_isatty+0xc>)
 800f57a:	2258      	movs	r2, #88	; 0x58
 800f57c:	601a      	str	r2, [r3, #0]
 800f57e:	2000      	movs	r0, #0
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	2000679c 	.word	0x2000679c

0800f588 <_kill>:
 800f588:	4b02      	ldr	r3, [pc, #8]	; (800f594 <_kill+0xc>)
 800f58a:	2258      	movs	r2, #88	; 0x58
 800f58c:	601a      	str	r2, [r3, #0]
 800f58e:	f04f 30ff 	mov.w	r0, #4294967295
 800f592:	4770      	bx	lr
 800f594:	2000679c 	.word	0x2000679c

0800f598 <_lseek>:
 800f598:	4b02      	ldr	r3, [pc, #8]	; (800f5a4 <_lseek+0xc>)
 800f59a:	2258      	movs	r2, #88	; 0x58
 800f59c:	601a      	str	r2, [r3, #0]
 800f59e:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a2:	4770      	bx	lr
 800f5a4:	2000679c 	.word	0x2000679c

0800f5a8 <_read>:
 800f5a8:	4b02      	ldr	r3, [pc, #8]	; (800f5b4 <_read+0xc>)
 800f5aa:	2258      	movs	r2, #88	; 0x58
 800f5ac:	601a      	str	r2, [r3, #0]
 800f5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b2:	4770      	bx	lr
 800f5b4:	2000679c 	.word	0x2000679c

0800f5b8 <_sbrk>:
 800f5b8:	4a04      	ldr	r2, [pc, #16]	; (800f5cc <_sbrk+0x14>)
 800f5ba:	6811      	ldr	r1, [r2, #0]
 800f5bc:	4603      	mov	r3, r0
 800f5be:	b909      	cbnz	r1, 800f5c4 <_sbrk+0xc>
 800f5c0:	4903      	ldr	r1, [pc, #12]	; (800f5d0 <_sbrk+0x18>)
 800f5c2:	6011      	str	r1, [r2, #0]
 800f5c4:	6810      	ldr	r0, [r2, #0]
 800f5c6:	4403      	add	r3, r0
 800f5c8:	6013      	str	r3, [r2, #0]
 800f5ca:	4770      	bx	lr
 800f5cc:	200067a0 	.word	0x200067a0
 800f5d0:	200067a8 	.word	0x200067a8

0800f5d4 <_write>:
 800f5d4:	4b02      	ldr	r3, [pc, #8]	; (800f5e0 <_write+0xc>)
 800f5d6:	2258      	movs	r2, #88	; 0x58
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	f04f 30ff 	mov.w	r0, #4294967295
 800f5de:	4770      	bx	lr
 800f5e0:	2000679c 	.word	0x2000679c

0800f5e4 <_exit>:
 800f5e4:	e7fe      	b.n	800f5e4 <_exit>
	...

0800f5e8 <_init>:
 800f5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ea:	bf00      	nop
 800f5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ee:	bc08      	pop	{r3}
 800f5f0:	469e      	mov	lr, r3
 800f5f2:	4770      	bx	lr

0800f5f4 <_fini>:
 800f5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f6:	bf00      	nop
 800f5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5fa:	bc08      	pop	{r3}
 800f5fc:	469e      	mov	lr, r3
 800f5fe:	4770      	bx	lr
