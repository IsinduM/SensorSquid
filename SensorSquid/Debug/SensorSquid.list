
SensorSquid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800b388  0800b388  0001b388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ba00  0800ba00  0001ba00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ba04  0800ba04  0001ba04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  0800ba08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006404  20000088  0800ba8c  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000648c  0800ba8c  0002648c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   000351d7  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c7e  00000000  00000000  0005528b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0002156e  00000000  00000000  0005bf09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001f60  00000000  00000000  0007d478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001eb8  00000000  00000000  0007f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002c613  00000000  00000000  00081290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00038ca3  00000000  00000000  000ad8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f7774  00000000  00000000  000e6546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001ddcba  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005e64  00000000  00000000  001ddd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stabstr      000000df  00000000  00000000  001e3b70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b370 	.word	0x0800b370

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800b370 	.word	0x0800b370

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_frsub>:
 8000a5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	e002      	b.n	8000a68 <__addsf3>
 8000a62:	bf00      	nop

08000a64 <__aeabi_fsub>:
 8000a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a68 <__addsf3>:
 8000a68:	0042      	lsls	r2, r0, #1
 8000a6a:	bf1f      	itttt	ne
 8000a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a70:	ea92 0f03 	teqne	r2, r3
 8000a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7c:	d06a      	beq.n	8000b54 <__addsf3+0xec>
 8000a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a86:	bfc1      	itttt	gt
 8000a88:	18d2      	addgt	r2, r2, r3
 8000a8a:	4041      	eorgt	r1, r0
 8000a8c:	4048      	eorgt	r0, r1
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	bfb8      	it	lt
 8000a92:	425b      	neglt	r3, r3
 8000a94:	2b19      	cmp	r3, #25
 8000a96:	bf88      	it	hi
 8000a98:	4770      	bxhi	lr
 8000a9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ab2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4249      	negne	r1, r1
 8000aba:	ea92 0f03 	teq	r2, r3
 8000abe:	d03f      	beq.n	8000b40 <__addsf3+0xd8>
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac8:	eb10 000c 	adds.w	r0, r0, ip
 8000acc:	f1c3 0320 	rsb	r3, r3, #32
 8000ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__addsf3+0x78>
 8000ada:	4249      	negs	r1, r1
 8000adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ae4:	d313      	bcc.n	8000b0e <__addsf3+0xa6>
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aea:	d306      	bcc.n	8000afa <__addsf3+0x92>
 8000aec:	0840      	lsrs	r0, r0, #1
 8000aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af2:	f102 0201 	add.w	r2, r2, #1
 8000af6:	2afe      	cmp	r2, #254	; 0xfe
 8000af8:	d251      	bcs.n	8000b9e <__addsf3+0x136>
 8000afa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	ea40 0003 	orr.w	r0, r0, r3
 8000b0c:	4770      	bx	lr
 8000b0e:	0049      	lsls	r1, r1, #1
 8000b10:	eb40 0000 	adc.w	r0, r0, r0
 8000b14:	3a01      	subs	r2, #1
 8000b16:	bf28      	it	cs
 8000b18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b1c:	d2ed      	bcs.n	8000afa <__addsf3+0x92>
 8000b1e:	fab0 fc80 	clz	ip, r0
 8000b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b26:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b2e:	bfaa      	itet	ge
 8000b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b34:	4252      	neglt	r2, r2
 8000b36:	4318      	orrge	r0, r3
 8000b38:	bfbc      	itt	lt
 8000b3a:	40d0      	lsrlt	r0, r2
 8000b3c:	4318      	orrlt	r0, r3
 8000b3e:	4770      	bx	lr
 8000b40:	f092 0f00 	teq	r2, #0
 8000b44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b48:	bf06      	itte	eq
 8000b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b4e:	3201      	addeq	r2, #1
 8000b50:	3b01      	subne	r3, #1
 8000b52:	e7b5      	b.n	8000ac0 <__addsf3+0x58>
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d021      	beq.n	8000ba8 <__addsf3+0x140>
 8000b64:	ea92 0f03 	teq	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__addsf3+0x10c>
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	bf08      	it	eq
 8000b70:	4608      	moveq	r0, r1
 8000b72:	4770      	bx	lr
 8000b74:	ea90 0f01 	teq	r0, r1
 8000b78:	bf1c      	itt	ne
 8000b7a:	2000      	movne	r0, #0
 8000b7c:	4770      	bxne	lr
 8000b7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b82:	d104      	bne.n	8000b8e <__addsf3+0x126>
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	bf28      	it	cs
 8000b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	4770      	bx	lr
 8000b8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b92:	bf3c      	itt	cc
 8000b94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bxcc	lr
 8000b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	4770      	bx	lr
 8000ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bac:	bf16      	itet	ne
 8000bae:	4608      	movne	r0, r1
 8000bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb4:	4601      	movne	r1, r0
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	bf06      	itte	eq
 8000bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bbe:	ea90 0f01 	teqeq	r0, r1
 8000bc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ui2f>:
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e004      	b.n	8000bd8 <__aeabi_i2f+0x8>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_i2f>:
 8000bd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	bf48      	it	mi
 8000bd6:	4240      	negmi	r0, r0
 8000bd8:	ea5f 0c00 	movs.w	ip, r0
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000be4:	4601      	mov	r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	e01c      	b.n	8000c26 <__aeabi_l2f+0x2a>

08000bec <__aeabi_ul2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <__aeabi_l2f+0x14>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_l2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c08:	d502      	bpl.n	8000c10 <__aeabi_l2f+0x14>
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	ea5f 0c01 	movs.w	ip, r1
 8000c14:	bf02      	ittt	eq
 8000c16:	4684      	moveq	ip, r0
 8000c18:	4601      	moveq	r1, r0
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c20:	bf08      	it	eq
 8000c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c2a:	fabc f28c 	clz	r2, ip
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c34:	db10      	blt.n	8000c58 <__aeabi_l2f+0x5c>
 8000c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f102 0220 	add.w	r2, r2, #32
 8000c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c68:	fa21 f202 	lsr.w	r2, r1, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_Init+0x30>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f86:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f8e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 fb1d 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	2005      	movs	r0, #5
 8000fa0:	f009 f856 	bl	800a050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa4:	f009 f832 	bl	800a00c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000fa8:	2000      	movs	r0, #0
 8000faa:	bd08      	pop	{r3, pc}
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fb0:	4b01      	ldr	r3, [pc, #4]	; (8000fb8 <HAL_GetTick+0x8>)
 8000fb2:	6818      	ldr	r0, [r3, #0]
}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200000a4 	.word	0x200000a4

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff fff6 	bl	8000fb0 <HAL_GetTick>
 8000fc4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000fca:	d002      	beq.n	8000fd2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_Delay+0x24>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	f7ff ffed 	bl	8000fb0 <HAL_GetTick>
 8000fd6:	1b40      	subs	r0, r0, r5
 8000fd8:	42a0      	cmp	r0, r4
 8000fda:	d3fa      	bcc.n	8000fd2 <HAL_Delay+0x16>
  {
  }
}
 8000fdc:	bd38      	pop	{r3, r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <ADC_Init+0x12c>)
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000fec:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	6841      	ldr	r1, [r0, #4]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ff6:	6802      	ldr	r2, [r0, #0]
 8000ff8:	6853      	ldr	r3, [r2, #4]
 8000ffa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ffe:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001000:	6802      	ldr	r2, [r0, #0]
 8001002:	6853      	ldr	r3, [r2, #4]
 8001004:	6901      	ldr	r1, [r0, #16]
 8001006:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800100a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800100c:	6802      	ldr	r2, [r0, #0]
 800100e:	6853      	ldr	r3, [r2, #4]
 8001010:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001014:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001016:	6802      	ldr	r2, [r0, #0]
 8001018:	6853      	ldr	r3, [r2, #4]
 800101a:	6881      	ldr	r1, [r0, #8]
 800101c:	430b      	orrs	r3, r1
 800101e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001020:	6802      	ldr	r2, [r0, #0]
 8001022:	6893      	ldr	r3, [r2, #8]
 8001024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001028:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800102a:	6802      	ldr	r2, [r0, #0]
 800102c:	6893      	ldr	r3, [r2, #8]
 800102e:	68c1      	ldr	r1, [r0, #12]
 8001030:	430b      	orrs	r3, r1
 8001032:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001034:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <ADC_Init+0x130>)
 8001038:	429a      	cmp	r2, r3
 800103a:	d057      	beq.n	80010ec <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800103c:	6802      	ldr	r2, [r0, #0]
 800103e:	6893      	ldr	r3, [r2, #8]
 8001040:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001044:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001046:	6802      	ldr	r2, [r0, #0]
 8001048:	6893      	ldr	r3, [r2, #8]
 800104a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800104c:	430b      	orrs	r3, r1
 800104e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001050:	6802      	ldr	r2, [r0, #0]
 8001052:	6893      	ldr	r3, [r2, #8]
 8001054:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001058:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800105a:	6802      	ldr	r2, [r0, #0]
 800105c:	6893      	ldr	r3, [r2, #8]
 800105e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001060:	430b      	orrs	r3, r1
 8001062:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001064:	6802      	ldr	r2, [r0, #0]
 8001066:	6893      	ldr	r3, [r2, #8]
 8001068:	f023 0302 	bic.w	r3, r3, #2
 800106c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800106e:	6802      	ldr	r2, [r0, #0]
 8001070:	6893      	ldr	r3, [r2, #8]
 8001072:	7e01      	ldrb	r1, [r0, #24]
 8001074:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001078:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800107a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d03f      	beq.n	8001102 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001082:	6802      	ldr	r2, [r0, #0]
 8001084:	6853      	ldr	r3, [r2, #4]
 8001086:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800108a:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800108c:	6802      	ldr	r2, [r0, #0]
 800108e:	6853      	ldr	r3, [r2, #4]
 8001090:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001094:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001096:	6801      	ldr	r1, [r0, #0]
 8001098:	684b      	ldr	r3, [r1, #4]
 800109a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800109c:	3a01      	subs	r2, #1
 800109e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80010a2:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010a4:	6802      	ldr	r2, [r0, #0]
 80010a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80010a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80010ac:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010ae:	6801      	ldr	r1, [r0, #0]
 80010b0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80010b2:	69c2      	ldr	r2, [r0, #28]
 80010b4:	3a01      	subs	r2, #1
 80010b6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80010ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010bc:	6802      	ldr	r2, [r0, #0]
 80010be:	6893      	ldr	r3, [r2, #8]
 80010c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010c4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010c6:	6802      	ldr	r2, [r0, #0]
 80010c8:	6893      	ldr	r3, [r2, #8]
 80010ca:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80010ce:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80010d2:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010d4:	6802      	ldr	r2, [r0, #0]
 80010d6:	6893      	ldr	r3, [r2, #8]
 80010d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010dc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010de:	6802      	ldr	r2, [r0, #0]
 80010e0:	6893      	ldr	r3, [r2, #8]
 80010e2:	6941      	ldr	r1, [r0, #20]
 80010e4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80010e8:	6093      	str	r3, [r2, #8]
}
 80010ea:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010ec:	6802      	ldr	r2, [r0, #0]
 80010ee:	6893      	ldr	r3, [r2, #8]
 80010f0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80010f4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010f6:	6802      	ldr	r2, [r0, #0]
 80010f8:	6893      	ldr	r3, [r2, #8]
 80010fa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80010fe:	6093      	str	r3, [r2, #8]
 8001100:	e7b0      	b.n	8001064 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001102:	6802      	ldr	r2, [r0, #0]
 8001104:	6853      	ldr	r3, [r2, #4]
 8001106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800110a:	6053      	str	r3, [r2, #4]
 800110c:	e7ca      	b.n	80010a4 <ADC_Init+0xc0>
 800110e:	bf00      	nop
 8001110:	40012300 	.word	0x40012300
 8001114:	0f000001 	.word	0x0f000001

08001118 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001118:	b338      	cbz	r0, 800116a <HAL_ADC_Init+0x52>
{
 800111a:	b510      	push	{r4, lr}
 800111c:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800111e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001120:	b143      	cbz	r3, 8001134 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001124:	f013 0f10 	tst.w	r3, #16
 8001128:	d00b      	beq.n	8001142 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800112a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800112c:	2300      	movs	r3, #0
 800112e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001132:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001134:	f008 f84e 	bl	80091d4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001138:	2300      	movs	r3, #0
 800113a:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800113c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001140:	e7ef      	b.n	8001122 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001144:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001148:	f023 0302 	bic.w	r3, r3, #2
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8001152:	4620      	mov	r0, r4
 8001154:	f7ff ff46 	bl	8000fe4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001158:	2000      	movs	r0, #0
 800115a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800115c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800115e:	f023 0303 	bic.w	r3, r3, #3
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6423      	str	r3, [r4, #64]	; 0x40
 8001168:	e7e0      	b.n	800112c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800116a:	2001      	movs	r0, #1
}
 800116c:	4770      	bx	lr
	...

08001170 <HAL_ADC_ConfigChannel>:
{
 8001170:	b430      	push	{r4, r5}
 8001172:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001178:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800117c:	2b01      	cmp	r3, #1
 800117e:	f000 80c0 	beq.w	8001302 <HAL_ADC_ConfigChannel+0x192>
 8001182:	2301      	movs	r3, #1
 8001184:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001188:	680b      	ldr	r3, [r1, #0]
 800118a:	2b09      	cmp	r3, #9
 800118c:	d941      	bls.n	8001212 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800118e:	6804      	ldr	r4, [r0, #0]
 8001190:	68e2      	ldr	r2, [r4, #12]
 8001192:	b29b      	uxth	r3, r3
 8001194:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001198:	3b1e      	subs	r3, #30
 800119a:	f04f 0c07 	mov.w	ip, #7
 800119e:	fa0c f303 	lsl.w	r3, ip, r3
 80011a2:	ea22 0303 	bic.w	r3, r2, r3
 80011a6:	60e3      	str	r3, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011a8:	6804      	ldr	r4, [r0, #0]
 80011aa:	68e2      	ldr	r2, [r4, #12]
 80011ac:	880b      	ldrh	r3, [r1, #0]
 80011ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011b2:	3b1e      	subs	r3, #30
 80011b4:	688d      	ldr	r5, [r1, #8]
 80011b6:	fa05 f303 	lsl.w	r3, r5, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80011be:	684b      	ldr	r3, [r1, #4]
 80011c0:	2b06      	cmp	r3, #6
 80011c2:	d83d      	bhi.n	8001240 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011c4:	6804      	ldr	r4, [r0, #0]
 80011c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80011c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011cc:	3b05      	subs	r3, #5
 80011ce:	f04f 0c1f 	mov.w	ip, #31
 80011d2:	fa0c f303 	lsl.w	r3, ip, r3
 80011d6:	ea22 0303 	bic.w	r3, r2, r3
 80011da:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011dc:	6804      	ldr	r4, [r0, #0]
 80011de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80011e0:	684b      	ldr	r3, [r1, #4]
 80011e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011e6:	3b05      	subs	r3, #5
 80011e8:	f8b1 c000 	ldrh.w	ip, [r1]
 80011ec:	fa0c f303 	lsl.w	r3, ip, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011f4:	6802      	ldr	r2, [r0, #0]
 80011f6:	4b44      	ldr	r3, [pc, #272]	; (8001308 <HAL_ADC_ConfigChannel+0x198>)
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d051      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011fc:	6802      	ldr	r2, [r0, #0]
 80011fe:	4b42      	ldr	r3, [pc, #264]	; (8001308 <HAL_ADC_ConfigChannel+0x198>)
 8001200:	429a      	cmp	r2, r3
 8001202:	d05a      	beq.n	80012ba <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8001204:	2300      	movs	r3, #0
 8001206:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800120a:	4618      	mov	r0, r3
}
 800120c:	b002      	add	sp, #8
 800120e:	bc30      	pop	{r4, r5}
 8001210:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001212:	6804      	ldr	r4, [r0, #0]
 8001214:	6922      	ldr	r2, [r4, #16]
 8001216:	b29b      	uxth	r3, r3
 8001218:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800121c:	f04f 0c07 	mov.w	ip, #7
 8001220:	fa0c f303 	lsl.w	r3, ip, r3
 8001224:	ea22 0303 	bic.w	r3, r2, r3
 8001228:	6123      	str	r3, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800122a:	6804      	ldr	r4, [r0, #0]
 800122c:	6922      	ldr	r2, [r4, #16]
 800122e:	880b      	ldrh	r3, [r1, #0]
 8001230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001234:	688d      	ldr	r5, [r1, #8]
 8001236:	fa05 f303 	lsl.w	r3, r5, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	6123      	str	r3, [r4, #16]
 800123e:	e7be      	b.n	80011be <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13U)
 8001240:	2b0c      	cmp	r3, #12
 8001242:	d816      	bhi.n	8001272 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001244:	6805      	ldr	r5, [r0, #0]
 8001246:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001248:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800124c:	3b23      	subs	r3, #35	; 0x23
 800124e:	241f      	movs	r4, #31
 8001250:	fa04 f303 	lsl.w	r3, r4, r3
 8001254:	ea22 0303 	bic.w	r3, r2, r3
 8001258:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800125a:	6805      	ldr	r5, [r0, #0]
 800125c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800125e:	684b      	ldr	r3, [r1, #4]
 8001260:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001264:	3b23      	subs	r3, #35	; 0x23
 8001266:	880c      	ldrh	r4, [r1, #0]
 8001268:	fa04 f303 	lsl.w	r3, r4, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	632b      	str	r3, [r5, #48]	; 0x30
 8001270:	e7c0      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001272:	6805      	ldr	r5, [r0, #0]
 8001274:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001276:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800127a:	3b41      	subs	r3, #65	; 0x41
 800127c:	241f      	movs	r4, #31
 800127e:	fa04 f303 	lsl.w	r3, r4, r3
 8001282:	ea22 0303 	bic.w	r3, r2, r3
 8001286:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001288:	6805      	ldr	r5, [r0, #0]
 800128a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800128c:	684b      	ldr	r3, [r1, #4]
 800128e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001292:	3b41      	subs	r3, #65	; 0x41
 8001294:	880c      	ldrh	r4, [r1, #0]
 8001296:	fa04 f303 	lsl.w	r3, r4, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800129e:	e7a9      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x84>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012a0:	680b      	ldr	r3, [r1, #0]
 80012a2:	2b12      	cmp	r3, #18
 80012a4:	d1aa      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x8c>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_ADC_ConfigChannel+0x19c>)
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80012ae:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	e7a0      	b.n	80011fc <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012ba:	680b      	ldr	r3, [r1, #0]
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <HAL_ADC_ConfigChannel+0x1a0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d001      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x156>
 80012c2:	2b11      	cmp	r3, #17
 80012c4:	d19e      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x94>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_ADC_ConfigChannel+0x19c>)
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80012ce:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012d6:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d8:	680a      	ldr	r2, [r1, #0]
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_ADC_ConfigChannel+0x1a0>)
 80012dc:	429a      	cmp	r2, r3
 80012de:	d191      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x94>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_ADC_ConfigChannel+0x1a4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <HAL_ADC_ConfigChannel+0x1a8>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	0c9b      	lsrs	r3, r3, #18
 80012ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80012f4:	9b01      	ldr	r3, [sp, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d084      	beq.n	8001204 <HAL_ADC_ConfigChannel+0x94>
        counter--;
 80012fa:	9b01      	ldr	r3, [sp, #4]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	e7f8      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001302:	2002      	movs	r0, #2
 8001304:	e782      	b.n	800120c <HAL_ADC_ConfigChannel+0x9c>
 8001306:	bf00      	nop
 8001308:	40012000 	.word	0x40012000
 800130c:	40012300 	.word	0x40012300
 8001310:	10000012 	.word	0x10000012
 8001314:	2000001c 	.word	0x2000001c
 8001318:	431bde83 	.word	0x431bde83

0800131c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800131c:	2800      	cmp	r0, #0
 800131e:	f000 80a1 	beq.w	8001464 <HAL_CAN_Init+0x148>
{
 8001322:	b538      	push	{r3, r4, r5, lr}
 8001324:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001326:	f890 3020 	ldrb.w	r3, [r0, #32]
 800132a:	b1d3      	cbz	r3, 8001362 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800132c:	6822      	ldr	r2, [r4, #0]
 800132e:	6813      	ldr	r3, [r2, #0]
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001336:	f7ff fe3b 	bl	8000fb0 <HAL_GetTick>
 800133a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	f012 0f01 	tst.w	r2, #1
 8001344:	d110      	bne.n	8001368 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001346:	f7ff fe33 	bl	8000fb0 <HAL_GetTick>
 800134a:	1b40      	subs	r0, r0, r5
 800134c:	280a      	cmp	r0, #10
 800134e:	d9f5      	bls.n	800133c <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001356:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001358:	2305      	movs	r3, #5
 800135a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800135e:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001360:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001362:	f008 f849 	bl	80093f8 <HAL_CAN_MspInit>
 8001366:	e7e1      	b.n	800132c <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	f022 0202 	bic.w	r2, r2, #2
 800136e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001370:	f7ff fe1e 	bl	8000fb0 <HAL_GetTick>
 8001374:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	f012 0f02 	tst.w	r2, #2
 800137e:	d00d      	beq.n	800139c <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001380:	f7ff fe16 	bl	8000fb0 <HAL_GetTick>
 8001384:	1b40      	subs	r0, r0, r5
 8001386:	280a      	cmp	r0, #10
 8001388:	d9f5      	bls.n	8001376 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800138a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001392:	2305      	movs	r3, #5
 8001394:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001398:	2001      	movs	r0, #1
 800139a:	e7e1      	b.n	8001360 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800139c:	7e22      	ldrb	r2, [r4, #24]
 800139e:	2a01      	cmp	r2, #1
 80013a0:	d03d      	beq.n	800141e <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80013aa:	7e63      	ldrb	r3, [r4, #25]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d03b      	beq.n	8001428 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013b0:	6822      	ldr	r2, [r4, #0]
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013b8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013ba:	7ea3      	ldrb	r3, [r4, #26]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d039      	beq.n	8001434 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013c0:	6822      	ldr	r2, [r4, #0]
 80013c2:	6813      	ldr	r3, [r2, #0]
 80013c4:	f023 0320 	bic.w	r3, r3, #32
 80013c8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013ca:	7ee3      	ldrb	r3, [r4, #27]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d037      	beq.n	8001440 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013d0:	6822      	ldr	r2, [r4, #0]
 80013d2:	6813      	ldr	r3, [r2, #0]
 80013d4:	f043 0310 	orr.w	r3, r3, #16
 80013d8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013da:	7f23      	ldrb	r3, [r4, #28]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d035      	beq.n	800144c <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013e0:	6822      	ldr	r2, [r4, #0]
 80013e2:	6813      	ldr	r3, [r2, #0]
 80013e4:	f023 0308 	bic.w	r3, r3, #8
 80013e8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013ea:	7f63      	ldrb	r3, [r4, #29]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d033      	beq.n	8001458 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f0:	6822      	ldr	r2, [r4, #0]
 80013f2:	6813      	ldr	r3, [r2, #0]
 80013f4:	f023 0304 	bic.w	r3, r3, #4
 80013f8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013fa:	68a3      	ldr	r3, [r4, #8]
 80013fc:	68e2      	ldr	r2, [r4, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	6922      	ldr	r2, [r4, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	6962      	ldr	r2, [r4, #20]
 8001406:	4313      	orrs	r3, r2
 8001408:	6862      	ldr	r2, [r4, #4]
 800140a:	3a01      	subs	r2, #1
 800140c:	6821      	ldr	r1, [r4, #0]
 800140e:	4313      	orrs	r3, r2
 8001410:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001412:	2000      	movs	r0, #0
 8001414:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001416:	2301      	movs	r3, #1
 8001418:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 800141c:	e7a0      	b.n	8001360 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e7c0      	b.n	80013aa <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001428:	6822      	ldr	r2, [r4, #0]
 800142a:	6813      	ldr	r3, [r2, #0]
 800142c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e7c2      	b.n	80013ba <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001434:	6822      	ldr	r2, [r4, #0]
 8001436:	6813      	ldr	r3, [r2, #0]
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e7c4      	b.n	80013ca <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001440:	6822      	ldr	r2, [r4, #0]
 8001442:	6813      	ldr	r3, [r2, #0]
 8001444:	f023 0310 	bic.w	r3, r3, #16
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e7c6      	b.n	80013da <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	6813      	ldr	r3, [r2, #0]
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e7c8      	b.n	80013ea <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001458:	6822      	ldr	r2, [r4, #0]
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e7ca      	b.n	80013fa <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8001464:	2001      	movs	r0, #1
}
 8001466:	4770      	bx	lr

08001468 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001468:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800146c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001470:	fa5f fc8c 	uxtb.w	ip, ip
 8001474:	f1bc 0f01 	cmp.w	ip, #1
 8001478:	f200 8095 	bhi.w	80015a6 <HAL_CAN_GetRxMessage+0x13e>
{
 800147c:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800147e:	b951      	cbnz	r1, 8001496 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001480:	6804      	ldr	r4, [r0, #0]
 8001482:	68e4      	ldr	r4, [r4, #12]
 8001484:	f014 0f03 	tst.w	r4, #3
 8001488:	d110      	bne.n	80014ac <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800148a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800148c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001490:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8001492:	2001      	movs	r0, #1
 8001494:	e077      	b.n	8001586 <HAL_CAN_GetRxMessage+0x11e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001496:	6804      	ldr	r4, [r0, #0]
 8001498:	6924      	ldr	r4, [r4, #16]
 800149a:	f014 0f03 	tst.w	r4, #3
 800149e:	d105      	bne.n	80014ac <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a6:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80014a8:	2001      	movs	r0, #1
 80014aa:	e06c      	b.n	8001586 <HAL_CAN_GetRxMessage+0x11e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014ac:	f101 041b 	add.w	r4, r1, #27
 80014b0:	0124      	lsls	r4, r4, #4
 80014b2:	6805      	ldr	r5, [r0, #0]
 80014b4:	592c      	ldr	r4, [r5, r4]
 80014b6:	f004 0404 	and.w	r4, r4, #4
 80014ba:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014bc:	2c00      	cmp	r4, #0
 80014be:	d164      	bne.n	800158a <HAL_CAN_GetRxMessage+0x122>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014c0:	f101 041b 	add.w	r4, r1, #27
 80014c4:	0124      	lsls	r4, r4, #4
 80014c6:	6805      	ldr	r5, [r0, #0]
 80014c8:	592c      	ldr	r4, [r5, r4]
 80014ca:	0d64      	lsrs	r4, r4, #21
 80014cc:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014ce:	6804      	ldr	r4, [r0, #0]
 80014d0:	f101 0c1b 	add.w	ip, r1, #27
 80014d4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80014d8:	f854 400c 	ldr.w	r4, [r4, ip]
 80014dc:	f004 0402 	and.w	r4, r4, #2
 80014e0:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014e2:	6804      	ldr	r4, [r0, #0]
 80014e4:	4464      	add	r4, ip
 80014e6:	6864      	ldr	r4, [r4, #4]
 80014e8:	f004 040f 	and.w	r4, r4, #15
 80014ec:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014ee:	6804      	ldr	r4, [r0, #0]
 80014f0:	4464      	add	r4, ip
 80014f2:	6864      	ldr	r4, [r4, #4]
 80014f4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80014f8:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014fa:	6804      	ldr	r4, [r0, #0]
 80014fc:	4464      	add	r4, ip
 80014fe:	6864      	ldr	r4, [r4, #4]
 8001500:	0c24      	lsrs	r4, r4, #16
 8001502:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001504:	6802      	ldr	r2, [r0, #0]
 8001506:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800150a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800150e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001510:	6802      	ldr	r2, [r0, #0]
 8001512:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001516:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800151a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800151e:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001520:	6802      	ldr	r2, [r0, #0]
 8001522:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001526:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800152a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800152e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001536:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800153a:	0e12      	lsrs	r2, r2, #24
 800153c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800153e:	6802      	ldr	r2, [r0, #0]
 8001540:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001544:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001548:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800154a:	6802      	ldr	r2, [r0, #0]
 800154c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001550:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001554:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001558:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800155a:	6802      	ldr	r2, [r0, #0]
 800155c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001560:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001564:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001568:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800156a:	6802      	ldr	r2, [r0, #0]
 800156c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001570:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001574:	0e12      	lsrs	r2, r2, #24
 8001576:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001578:	b979      	cbnz	r1, 800159a <HAL_CAN_GetRxMessage+0x132>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800157a:	6802      	ldr	r2, [r0, #0]
 800157c:	68d3      	ldr	r3, [r2, #12]
 800157e:	f043 0320 	orr.w	r3, r3, #32
 8001582:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8001584:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8001586:	bc30      	pop	{r4, r5}
 8001588:	4770      	bx	lr
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800158a:	f101 041b 	add.w	r4, r1, #27
 800158e:	0124      	lsls	r4, r4, #4
 8001590:	6805      	ldr	r5, [r0, #0]
 8001592:	592c      	ldr	r4, [r5, r4]
 8001594:	08e4      	lsrs	r4, r4, #3
 8001596:	6054      	str	r4, [r2, #4]
 8001598:	e799      	b.n	80014ce <HAL_CAN_GetRxMessage+0x66>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800159a:	6802      	ldr	r2, [r0, #0]
 800159c:	6913      	ldr	r3, [r2, #16]
 800159e:	f043 0320 	orr.w	r3, r3, #32
 80015a2:	6113      	str	r3, [r2, #16]
 80015a4:	e7ee      	b.n	8001584 <HAL_CAN_GetRxMessage+0x11c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
}
 80015b0:	4770      	bx	lr

080015b2 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015b2:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d901      	bls.n	80015c2 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 80015be:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 80015c0:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 80015c2:	b921      	cbnz	r1, 80015ce <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80015c4:	6803      	ldr	r3, [r0, #0]
 80015c6:	68d8      	ldr	r0, [r3, #12]
 80015c8:	f000 0003 	and.w	r0, r0, #3
 80015cc:	4770      	bx	lr
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80015ce:	6803      	ldr	r3, [r0, #0]
 80015d0:	6918      	ldr	r0, [r3, #16]
 80015d2:	f000 0003 	and.w	r0, r0, #3
 80015d6:	4770      	bx	lr

080015d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015da:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015e0:	041b      	lsls	r3, r3, #16
 80015e2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	0200      	lsls	r0, r0, #8
 80015e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ea:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80015f4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_NVIC_SetPriority+0x68>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001606:	f1c3 0c07 	rsb	ip, r3, #7
 800160a:	f1bc 0f04 	cmp.w	ip, #4
 800160e:	bf28      	it	cs
 8001610:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001614:	f103 0e04 	add.w	lr, r3, #4
 8001618:	f1be 0f06 	cmp.w	lr, #6
 800161c:	d918      	bls.n	8001650 <HAL_NVIC_SetPriority+0x54>
 800161e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 3eff 	mov.w	lr, #4294967295
 8001624:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001628:	ea21 010c 	bic.w	r1, r1, ip
 800162c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162e:	fa0e f303 	lsl.w	r3, lr, r3
 8001632:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001636:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001638:	2800      	cmp	r0, #0
 800163a:	db0b      	blt.n	8001654 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	0109      	lsls	r1, r1, #4
 800163e:	b2c9      	uxtb	r1, r1
 8001640:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001644:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001648:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800164c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001650:	2300      	movs	r3, #0
 8001652:	e7e5      	b.n	8001620 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	f000 000f 	and.w	r0, r0, #15
 8001658:	0109      	lsls	r1, r1, #4
 800165a:	b2c9      	uxtb	r1, r1
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_NVIC_SetPriority+0x6c>)
 800165e:	5419      	strb	r1, [r3, r0]
 8001660:	e7f4      	b.n	800164c <HAL_NVIC_SetPriority+0x50>
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00
 8001668:	e000ed14 	.word	0xe000ed14

0800166c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800166c:	2800      	cmp	r0, #0
 800166e:	db07      	blt.n	8001680 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001670:	f000 021f 	and.w	r2, r0, #31
 8001674:	0940      	lsrs	r0, r0, #5
 8001676:	2301      	movs	r3, #1
 8001678:	4093      	lsls	r3, r2
 800167a:	4a02      	ldr	r2, [pc, #8]	; (8001684 <HAL_NVIC_EnableIRQ+0x18>)
 800167c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001688:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800168a:	6805      	ldr	r5, [r0, #0]
 800168c:	682c      	ldr	r4, [r5, #0]
 800168e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001692:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001694:	6804      	ldr	r4, [r0, #0]
 8001696:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001698:	6883      	ldr	r3, [r0, #8]
 800169a:	2b40      	cmp	r3, #64	; 0x40
 800169c:	d005      	beq.n	80016aa <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800169e:	6803      	ldr	r3, [r0, #0]
 80016a0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80016a2:	6803      	ldr	r3, [r0, #0]
 80016a4:	60da      	str	r2, [r3, #12]
  }
}
 80016a6:	bc30      	pop	{r4, r5}
 80016a8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80016aa:	6803      	ldr	r3, [r0, #0]
 80016ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80016ae:	6803      	ldr	r3, [r0, #0]
 80016b0:	60d9      	str	r1, [r3, #12]
 80016b2:	e7f8      	b.n	80016a6 <DMA_SetConfig+0x1e>

080016b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016b4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016b6:	6803      	ldr	r3, [r0, #0]
 80016b8:	b2d9      	uxtb	r1, r3
 80016ba:	3910      	subs	r1, #16
 80016bc:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <DMA_CalcBaseAndBitshift+0x3c>)
 80016be:	fba2 4201 	umull	r4, r2, r2, r1
 80016c2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016c4:	4c0b      	ldr	r4, [pc, #44]	; (80016f4 <DMA_CalcBaseAndBitshift+0x40>)
 80016c6:	5ca2      	ldrb	r2, [r4, r2]
 80016c8:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016ca:	295f      	cmp	r1, #95	; 0x5f
 80016cc:	d909      	bls.n	80016e2 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016d2:	f023 0303 	bic.w	r3, r3, #3
 80016d6:	3304      	adds	r3, #4
 80016d8:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80016da:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80016dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016e0:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016e6:	f023 0303 	bic.w	r3, r3, #3
 80016ea:	6583      	str	r3, [r0, #88]	; 0x58
 80016ec:	e7f5      	b.n	80016da <DMA_CalcBaseAndBitshift+0x26>
 80016ee:	bf00      	nop
 80016f0:	aaaaaaab 	.word	0xaaaaaaab
 80016f4:	0800b388 	.word	0x0800b388

080016f8 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016fa:	6982      	ldr	r2, [r0, #24]
 80016fc:	b992      	cbnz	r2, 8001724 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d00a      	beq.n	8001718 <DMA_CheckFifoParam+0x20>
 8001702:	2b02      	cmp	r3, #2
 8001704:	d002      	beq.n	800170c <DMA_CheckFifoParam+0x14>
 8001706:	b10b      	cbz	r3, 800170c <DMA_CheckFifoParam+0x14>
 8001708:	2000      	movs	r0, #0
 800170a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800170c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800170e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001712:	d128      	bne.n	8001766 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001714:	2000      	movs	r0, #0
 8001716:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001718:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800171a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800171e:	d024      	beq.n	800176a <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001720:	2000      	movs	r0, #0
 8001722:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001724:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001728:	d009      	beq.n	800173e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800172a:	2b02      	cmp	r3, #2
 800172c:	d925      	bls.n	800177a <DMA_CheckFifoParam+0x82>
 800172e:	2b03      	cmp	r3, #3
 8001730:	d125      	bne.n	800177e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001732:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001734:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001738:	d123      	bne.n	8001782 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800173a:	2000      	movs	r0, #0
 800173c:	4770      	bx	lr
    switch (tmp)
 800173e:	2b03      	cmp	r3, #3
 8001740:	d803      	bhi.n	800174a <DMA_CheckFifoParam+0x52>
 8001742:	e8df f003 	tbb	[pc, r3]
 8001746:	0414      	.short	0x0414
 8001748:	0a14      	.short	0x0a14
 800174a:	2000      	movs	r0, #0
 800174c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800174e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001750:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001754:	d10d      	bne.n	8001772 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001756:	2000      	movs	r0, #0
 8001758:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800175a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800175c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001760:	d009      	beq.n	8001776 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001762:	2000      	movs	r0, #0
 8001764:	4770      	bx	lr
        status = HAL_ERROR;
 8001766:	2001      	movs	r0, #1
 8001768:	4770      	bx	lr
        status = HAL_ERROR;
 800176a:	2001      	movs	r0, #1
 800176c:	4770      	bx	lr
      status = HAL_ERROR;
 800176e:	2001      	movs	r0, #1
 8001770:	4770      	bx	lr
        status = HAL_ERROR;
 8001772:	2001      	movs	r0, #1
 8001774:	4770      	bx	lr
        status = HAL_ERROR;
 8001776:	2001      	movs	r0, #1
 8001778:	4770      	bx	lr
      status = HAL_ERROR;
 800177a:	2001      	movs	r0, #1
 800177c:	4770      	bx	lr
    switch (tmp)
 800177e:	2000      	movs	r0, #0
 8001780:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001782:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001784:	4770      	bx	lr
	...

08001788 <HAL_DMA_Init>:
{
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff fc10 	bl	8000fb0 <HAL_GetTick>
  if(hdma == NULL)
 8001790:	2c00      	cmp	r4, #0
 8001792:	d05b      	beq.n	800184c <HAL_DMA_Init+0xc4>
 8001794:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001796:	2302      	movs	r3, #2
 8001798:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800179c:	2300      	movs	r3, #0
 800179e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80017a2:	6822      	ldr	r2, [r4, #0]
 80017a4:	6813      	ldr	r3, [r2, #0]
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f012 0f01 	tst.w	r2, #1
 80017b4:	d00a      	beq.n	80017cc <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b6:	f7ff fbfb 	bl	8000fb0 <HAL_GetTick>
 80017ba:	1b43      	subs	r3, r0, r5
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d9f5      	bls.n	80017ac <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c0:	2320      	movs	r3, #32
 80017c2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017c4:	2003      	movs	r0, #3
 80017c6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80017cc:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ce:	4820      	ldr	r0, [pc, #128]	; (8001850 <HAL_DMA_Init+0xc8>)
 80017d0:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d2:	6861      	ldr	r1, [r4, #4]
 80017d4:	68a2      	ldr	r2, [r4, #8]
 80017d6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d8:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017da:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017dc:	6921      	ldr	r1, [r4, #16]
 80017de:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e0:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e4:	69a1      	ldr	r1, [r4, #24]
 80017e6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e8:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ea:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ec:	6a21      	ldr	r1, [r4, #32]
 80017ee:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f0:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017f4:	2904      	cmp	r1, #4
 80017f6:	d01e      	beq.n	8001836 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80017f8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80017fa:	6826      	ldr	r6, [r4, #0]
 80017fc:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017fe:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001804:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001806:	2b04      	cmp	r3, #4
 8001808:	d107      	bne.n	800181a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800180a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800180c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800180e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001810:	b11b      	cbz	r3, 800181a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff ff70 	bl	80016f8 <DMA_CheckFifoParam>
 8001818:	b990      	cbnz	r0, 8001840 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800181a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff ff49 	bl	80016b4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001822:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001824:	233f      	movs	r3, #63	; 0x3f
 8001826:	4093      	lsls	r3, r2
 8001828:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182a:	2000      	movs	r0, #0
 800182c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800182e:	2301      	movs	r3, #1
 8001830:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001834:	e7c9      	b.n	80017ca <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001836:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001838:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800183a:	4301      	orrs	r1, r0
 800183c:	430a      	orrs	r2, r1
 800183e:	e7db      	b.n	80017f8 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001840:	2340      	movs	r3, #64	; 0x40
 8001842:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001844:	2001      	movs	r0, #1
 8001846:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800184a:	e7be      	b.n	80017ca <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800184c:	2001      	movs	r0, #1
 800184e:	e7bc      	b.n	80017ca <HAL_DMA_Init+0x42>
 8001850:	f010803f 	.word	0xf010803f

08001854 <HAL_DMA_Start_IT>:
{
 8001854:	b538      	push	{r3, r4, r5, lr}
 8001856:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001858:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800185a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800185e:	2801      	cmp	r0, #1
 8001860:	d02b      	beq.n	80018ba <HAL_DMA_Start_IT+0x66>
 8001862:	2001      	movs	r0, #1
 8001864:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001868:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 800186c:	b2c0      	uxtb	r0, r0
 800186e:	2801      	cmp	r0, #1
 8001870:	d004      	beq.n	800187c <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001872:	2300      	movs	r3, #0
 8001874:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001878:	2002      	movs	r0, #2
}
 800187a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800187c:	2002      	movs	r0, #2
 800187e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001882:	2000      	movs	r0, #0
 8001884:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff fefe 	bl	8001688 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800188e:	233f      	movs	r3, #63	; 0x3f
 8001890:	4093      	lsls	r3, r2
 8001892:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001894:	6822      	ldr	r2, [r4, #0]
 8001896:	6813      	ldr	r3, [r2, #0]
 8001898:	f043 0316 	orr.w	r3, r3, #22
 800189c:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800189e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018a0:	b123      	cbz	r3, 80018ac <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80018a2:	6822      	ldr	r2, [r4, #0]
 80018a4:	6813      	ldr	r3, [r2, #0]
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018b6:	2000      	movs	r0, #0
 80018b8:	e7df      	b.n	800187a <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80018ba:	2002      	movs	r0, #2
 80018bc:	e7dd      	b.n	800187a <HAL_DMA_Start_IT+0x26>

080018be <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018be:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d003      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80018cc:	2001      	movs	r0, #1
 80018ce:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80018d0:	2305      	movs	r3, #5
 80018d2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80018d6:	6802      	ldr	r2, [r0, #0]
 80018d8:	6813      	ldr	r3, [r2, #0]
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80018e0:	2000      	movs	r0, #0
}
 80018e2:	4770      	bx	lr

080018e4 <HAL_DMA_IRQHandler>:
{
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	b083      	sub	sp, #12
 80018e8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018ee:	4b72      	ldr	r3, [pc, #456]	; (8001ab8 <HAL_DMA_IRQHandler+0x1d4>)
 80018f0:	681d      	ldr	r5, [r3, #0]
 80018f2:	4b72      	ldr	r3, [pc, #456]	; (8001abc <HAL_DMA_IRQHandler+0x1d8>)
 80018f4:	fba3 3505 	umull	r3, r5, r3, r5
 80018f8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018fa:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80018fc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001900:	2308      	movs	r3, #8
 8001902:	4093      	lsls	r3, r2
 8001904:	4233      	tst	r3, r6
 8001906:	d010      	beq.n	800192a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001908:	6803      	ldr	r3, [r0, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	f012 0f04 	tst.w	r2, #4
 8001910:	d00b      	beq.n	800192a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	f022 0204 	bic.w	r2, r2, #4
 8001918:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800191a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800191c:	2308      	movs	r3, #8
 800191e:	4093      	lsls	r3, r2
 8001920:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001922:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800192a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800192c:	2301      	movs	r3, #1
 800192e:	4093      	lsls	r3, r2
 8001930:	4233      	tst	r3, r6
 8001932:	d009      	beq.n	8001948 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	6952      	ldr	r2, [r2, #20]
 8001938:	f012 0f80 	tst.w	r2, #128	; 0x80
 800193c:	d004      	beq.n	8001948 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800193e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001940:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001948:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800194a:	2304      	movs	r3, #4
 800194c:	4093      	lsls	r3, r2
 800194e:	4233      	tst	r3, r6
 8001950:	d009      	beq.n	8001966 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001952:	6822      	ldr	r2, [r4, #0]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	f012 0f02 	tst.w	r2, #2
 800195a:	d004      	beq.n	8001966 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800195c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800195e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001966:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001968:	2310      	movs	r3, #16
 800196a:	4093      	lsls	r3, r2
 800196c:	4233      	tst	r3, r6
 800196e:	d024      	beq.n	80019ba <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001970:	6822      	ldr	r2, [r4, #0]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	f012 0f08 	tst.w	r2, #8
 8001978:	d01f      	beq.n	80019ba <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800197a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001984:	d00d      	beq.n	80019a2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800198c:	d104      	bne.n	8001998 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800198e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001990:	b19b      	cbz	r3, 80019ba <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001992:	4620      	mov	r0, r4
 8001994:	4798      	blx	r3
 8001996:	e010      	b.n	80019ba <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001998:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800199a:	b173      	cbz	r3, 80019ba <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800199c:	4620      	mov	r0, r4
 800199e:	4798      	blx	r3
 80019a0:	e00b      	b.n	80019ba <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80019a8:	d103      	bne.n	80019b2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	f022 0208 	bic.w	r2, r2, #8
 80019b0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80019b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019b4:	b10b      	cbz	r3, 80019ba <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80019b6:	4620      	mov	r0, r4
 80019b8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019bc:	2320      	movs	r3, #32
 80019be:	4093      	lsls	r3, r2
 80019c0:	4233      	tst	r3, r6
 80019c2:	d055      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019c4:	6822      	ldr	r2, [r4, #0]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	f012 0f10 	tst.w	r2, #16
 80019cc:	d050      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ce:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d00e      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80019e2:	d033      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80019ea:	d12a      	bne.n	8001a42 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80019ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d03e      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80019f2:	4620      	mov	r0, r4
 80019f4:	4798      	blx	r3
 80019f6:	e03b      	b.n	8001a70 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f8:	6822      	ldr	r2, [r4, #0]
 80019fa:	6813      	ldr	r3, [r2, #0]
 80019fc:	f023 0316 	bic.w	r3, r3, #22
 8001a00:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a02:	6822      	ldr	r2, [r4, #0]
 8001a04:	6953      	ldr	r3, [r2, #20]
 8001a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a0a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a0e:	b1a3      	cbz	r3, 8001a3a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a10:	6822      	ldr	r2, [r4, #0]
 8001a12:	6813      	ldr	r3, [r2, #0]
 8001a14:	f023 0308 	bic.w	r3, r3, #8
 8001a18:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a1c:	233f      	movs	r3, #63	; 0x3f
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001a2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d03f      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001a34:	4620      	mov	r0, r4
 8001a36:	4798      	blx	r3
        return;
 8001a38:	e03c      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e7      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x12c>
 8001a40:	e7eb      	b.n	8001a1a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001a42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a44:	b1a3      	cbz	r3, 8001a70 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001a46:	4620      	mov	r0, r4
 8001a48:	4798      	blx	r3
 8001a4a:	e011      	b.n	8001a70 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001a52:	d109      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	f022 0210 	bic.w	r2, r2, #16
 8001a5a:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001a62:	2300      	movs	r3, #0
 8001a64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001a68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a6a:	b10b      	cbz	r3, 8001a70 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a72:	b1fb      	cbz	r3, 8001ab4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a76:	f013 0f01 	tst.w	r3, #1
 8001a7a:	d017      	beq.n	8001aac <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a82:	6822      	ldr	r2, [r4, #0]
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001a8c:	9b01      	ldr	r3, [sp, #4]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	42ab      	cmp	r3, r5
 8001a94:	d804      	bhi.n	8001aa0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f013 0f01 	tst.w	r3, #1
 8001a9e:	d1f5      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001aac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001aae:	b10b      	cbz	r3, 8001ab4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	4798      	blx	r3
}
 8001ab4:	b003      	add	sp, #12
 8001ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab8:	2000001c 	.word	0x2000001c
 8001abc:	1b4e81b5 	.word	0x1b4e81b5

08001ac0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001ac0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	f200 80de 	bhi.w	8001c88 <HAL_GPIO_Init+0x1c4>
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	e060      	b.n	8001b94 <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	005e      	lsls	r6, r3, #1
 8001ad6:	2403      	movs	r4, #3
 8001ad8:	40b4      	lsls	r4, r6
 8001ada:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ade:	68cc      	ldr	r4, [r1, #12]
 8001ae0:	40b4      	lsls	r4, r6
 8001ae2:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001ae4:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae6:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aec:	684c      	ldr	r4, [r1, #4]
 8001aee:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001af2:	409a      	lsls	r2, r3
 8001af4:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001af6:	6042      	str	r2, [r0, #4]
 8001af8:	e05a      	b.n	8001bb0 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afa:	08dc      	lsrs	r4, r3, #3
 8001afc:	3408      	adds	r4, #8
 8001afe:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b02:	f003 0207 	and.w	r2, r3, #7
 8001b06:	0095      	lsls	r5, r2, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	40aa      	lsls	r2, r5
 8001b0c:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b10:	690a      	ldr	r2, [r1, #16]
 8001b12:	40aa      	lsls	r2, r5
 8001b14:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001b18:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001b1c:	e05c      	b.n	8001bd8 <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1e:	2206      	movs	r2, #6
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x60>
 8001b22:	2200      	movs	r2, #0
 8001b24:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b28:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2a:	3402      	adds	r4, #2
 8001b2c:	4d57      	ldr	r5, [pc, #348]	; (8001c8c <HAL_GPIO_Init+0x1c8>)
 8001b2e:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b32:	4a57      	ldr	r2, [pc, #348]	; (8001c90 <HAL_GPIO_Init+0x1cc>)
 8001b34:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	ea6f 020c 	mvn.w	r2, ip
 8001b3a:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3e:	684e      	ldr	r6, [r1, #4]
 8001b40:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001b44:	d001      	beq.n	8001b4a <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8001b46:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001b4a:	4c51      	ldr	r4, [pc, #324]	; (8001c90 <HAL_GPIO_Init+0x1cc>)
 8001b4c:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001b4e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b54:	684e      	ldr	r6, [r1, #4]
 8001b56:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001b5a:	d001      	beq.n	8001b60 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8001b5c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001b60:	4c4b      	ldr	r4, [pc, #300]	; (8001c90 <HAL_GPIO_Init+0x1cc>)
 8001b62:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001b64:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b6a:	684e      	ldr	r6, [r1, #4]
 8001b6c:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001b70:	d001      	beq.n	8001b76 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8001b72:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001b76:	4c46      	ldr	r4, [pc, #280]	; (8001c90 <HAL_GPIO_Init+0x1cc>)
 8001b78:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7a:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b7e:	684d      	ldr	r5, [r1, #4]
 8001b80:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8001b84:	d001      	beq.n	8001b8a <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8001b86:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001b8a:	4c41      	ldr	r4, [pc, #260]	; (8001c90 <HAL_GPIO_Init+0x1cc>)
 8001b8c:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	3301      	adds	r3, #1
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d877      	bhi.n	8001c84 <HAL_GPIO_Init+0x1c0>
    ioposition = 0x01U << position;
 8001b94:	2201      	movs	r2, #1
 8001b96:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b98:	680c      	ldr	r4, [r1, #0]
 8001b9a:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001b9e:	ea32 0404 	bics.w	r4, r2, r4
 8001ba2:	d1f4      	bne.n	8001b8e <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba4:	684c      	ldr	r4, [r1, #4]
 8001ba6:	f004 0403 	and.w	r4, r4, #3
 8001baa:	3c01      	subs	r4, #1
 8001bac:	2c01      	cmp	r4, #1
 8001bae:	d990      	bls.n	8001ad2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb0:	684a      	ldr	r2, [r1, #4]
 8001bb2:	f002 0203 	and.w	r2, r2, #3
 8001bb6:	2a03      	cmp	r2, #3
 8001bb8:	d009      	beq.n	8001bce <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 8001bba:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bbc:	005d      	lsls	r5, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	40aa      	lsls	r2, r5
 8001bc2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc6:	688a      	ldr	r2, [r1, #8]
 8001bc8:	40aa      	lsls	r2, r5
 8001bca:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001bcc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bce:	684a      	ldr	r2, [r1, #4]
 8001bd0:	f002 0203 	and.w	r2, r2, #3
 8001bd4:	2a02      	cmp	r2, #2
 8001bd6:	d090      	beq.n	8001afa <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001bd8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bda:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f20e 	lsl.w	r2, r2, lr
 8001be4:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	684a      	ldr	r2, [r1, #4]
 8001bea:	f002 0203 	and.w	r2, r2, #3
 8001bee:	fa02 f20e 	lsl.w	r2, r2, lr
 8001bf2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001bf4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf6:	684a      	ldr	r2, [r1, #4]
 8001bf8:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001bfc:	d0c7      	beq.n	8001b8e <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2200      	movs	r2, #0
 8001c00:	9201      	str	r2, [sp, #4]
 8001c02:	4a24      	ldr	r2, [pc, #144]	; (8001c94 <HAL_GPIO_Init+0x1d0>)
 8001c04:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001c06:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001c0a:	6454      	str	r4, [r2, #68]	; 0x44
 8001c0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c0e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c12:	9201      	str	r2, [sp, #4]
 8001c14:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c16:	089c      	lsrs	r4, r3, #2
 8001c18:	1ca5      	adds	r5, r4, #2
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_GPIO_Init+0x1c8>)
 8001c1c:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c2e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c32:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_GPIO_Init+0x1d4>)
 8001c34:	4290      	cmp	r0, r2
 8001c36:	f43f af74 	beq.w	8001b22 <HAL_GPIO_Init+0x5e>
 8001c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c3e:	4290      	cmp	r0, r2
 8001c40:	d016      	beq.n	8001c70 <HAL_GPIO_Init+0x1ac>
 8001c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c46:	4290      	cmp	r0, r2
 8001c48:	d014      	beq.n	8001c74 <HAL_GPIO_Init+0x1b0>
 8001c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c4e:	4290      	cmp	r0, r2
 8001c50:	d012      	beq.n	8001c78 <HAL_GPIO_Init+0x1b4>
 8001c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c56:	4290      	cmp	r0, r2
 8001c58:	d010      	beq.n	8001c7c <HAL_GPIO_Init+0x1b8>
 8001c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c5e:	4290      	cmp	r0, r2
 8001c60:	d00e      	beq.n	8001c80 <HAL_GPIO_Init+0x1bc>
 8001c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c66:	4290      	cmp	r0, r2
 8001c68:	f43f af59 	beq.w	8001b1e <HAL_GPIO_Init+0x5a>
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	e759      	b.n	8001b24 <HAL_GPIO_Init+0x60>
 8001c70:	2201      	movs	r2, #1
 8001c72:	e757      	b.n	8001b24 <HAL_GPIO_Init+0x60>
 8001c74:	2202      	movs	r2, #2
 8001c76:	e755      	b.n	8001b24 <HAL_GPIO_Init+0x60>
 8001c78:	2203      	movs	r2, #3
 8001c7a:	e753      	b.n	8001b24 <HAL_GPIO_Init+0x60>
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	e751      	b.n	8001b24 <HAL_GPIO_Init+0x60>
 8001c80:	2205      	movs	r2, #5
 8001c82:	e74f      	b.n	8001b24 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8001c84:	b002      	add	sp, #8
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40013c00 	.word	0x40013c00
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000

08001c9c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c9c:	6903      	ldr	r3, [r0, #16]
 8001c9e:	4219      	tst	r1, r3
 8001ca0:	d001      	beq.n	8001ca6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cac:	b510      	push	{r4, lr}
 8001cae:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_PWREx_EnableOverDrive+0x70>)
 8001cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_PWREx_EnableOverDrive+0x74>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cce:	f7ff f96f 	bl	8000fb0 <HAL_GetTick>
 8001cd2:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_PWREx_EnableOverDrive+0x78>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001cdc:	d108      	bne.n	8001cf0 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cde:	f7ff f967 	bl	8000fb0 <HAL_GetTick>
 8001ce2:	1b00      	subs	r0, r0, r4
 8001ce4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ce8:	d9f4      	bls.n	8001cd4 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001cea:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001cec:	b002      	add	sp, #8
 8001cee:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_PWREx_EnableOverDrive+0x74>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8001cf6:	f7ff f95b 	bl	8000fb0 <HAL_GetTick>
 8001cfa:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_PWREx_EnableOverDrive+0x78>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d04:	d107      	bne.n	8001d16 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d06:	f7ff f953 	bl	8000fb0 <HAL_GetTick>
 8001d0a:	1b00      	subs	r0, r0, r4
 8001d0c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001d10:	d9f4      	bls.n	8001cfc <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8001d12:	2003      	movs	r0, #3
 8001d14:	e7ea      	b.n	8001cec <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001d16:	2000      	movs	r0, #0
 8001d18:	e7e8      	b.n	8001cec <HAL_PWREx_EnableOverDrive+0x40>
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	420e0000 	.word	0x420e0000
 8001d24:	40007000 	.word	0x40007000

08001d28 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	f000 809b 	beq.w	8001e64 <HAL_RCC_ClockConfig+0x13c>
{
 8001d2e:	b570      	push	{r4, r5, r6, lr}
 8001d30:	460d      	mov	r5, r1
 8001d32:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <HAL_RCC_ClockConfig+0x14c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	428b      	cmp	r3, r1
 8001d3e:	d208      	bcs.n	8001d52 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d40:	b2cb      	uxtb	r3, r1
 8001d42:	4a4c      	ldr	r2, [pc, #304]	; (8001e74 <HAL_RCC_ClockConfig+0x14c>)
 8001d44:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	f040 808b 	bne.w	8001e68 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	f013 0f02 	tst.w	r3, #2
 8001d58:	d017      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5a:	f013 0f04 	tst.w	r3, #4
 8001d5e:	d004      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4a45      	ldr	r2, [pc, #276]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001d62:	6893      	ldr	r3, [r2, #8]
 8001d64:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d68:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f013 0f08 	tst.w	r3, #8
 8001d70:	d004      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d72:	4a41      	ldr	r2, [pc, #260]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001d74:	6893      	ldr	r3, [r2, #8]
 8001d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7c:	4a3e      	ldr	r2, [pc, #248]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001d7e:	6893      	ldr	r3, [r2, #8]
 8001d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d84:	68a1      	ldr	r1, [r4, #8]
 8001d86:	430b      	orrs	r3, r1
 8001d88:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	f013 0f01 	tst.w	r3, #1
 8001d90:	d032      	beq.n	8001df8 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	6863      	ldr	r3, [r4, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d021      	beq.n	8001ddc <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d98:	1e9a      	subs	r2, r3, #2
 8001d9a:	2a01      	cmp	r2, #1
 8001d9c:	d925      	bls.n	8001dea <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4a36      	ldr	r2, [pc, #216]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	f012 0f02 	tst.w	r2, #2
 8001da6:	d061      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da8:	4933      	ldr	r1, [pc, #204]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001daa:	688a      	ldr	r2, [r1, #8]
 8001dac:	f022 0203 	bic.w	r2, r2, #3
 8001db0:	4313      	orrs	r3, r2
 8001db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db4:	f7ff f8fc 	bl	8000fb0 <HAL_GetTick>
 8001db8:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	6862      	ldr	r2, [r4, #4]
 8001dc4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dc8:	d016      	beq.n	8001df8 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dca:	f7ff f8f1 	bl	8000fb0 <HAL_GetTick>
 8001dce:	1b80      	subs	r0, r0, r6
 8001dd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dd4:	4298      	cmp	r0, r3
 8001dd6:	d9f0      	bls.n	8001dba <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8001dd8:	2003      	movs	r0, #3
 8001dda:	e042      	b.n	8001e62 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ddc:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001de4:	d1e0      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001de6:	2001      	movs	r0, #1
 8001de8:	e03b      	b.n	8001e62 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001df2:	d1d9      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
 8001df6:	e034      	b.n	8001e62 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_RCC_ClockConfig+0x14c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	42ab      	cmp	r3, r5
 8001e02:	d907      	bls.n	8001e14 <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e04:	b2ea      	uxtb	r2, r5
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_ClockConfig+0x14c>)
 8001e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	42ab      	cmp	r3, r5
 8001e12:	d12d      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	f013 0f04 	tst.w	r3, #4
 8001e1a:	d006      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4a16      	ldr	r2, [pc, #88]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001e1e:	6893      	ldr	r3, [r2, #8]
 8001e20:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001e24:	68e1      	ldr	r1, [r4, #12]
 8001e26:	430b      	orrs	r3, r1
 8001e28:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	f013 0f08 	tst.w	r3, #8
 8001e30:	d007      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001e34:	6893      	ldr	r3, [r2, #8]
 8001e36:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e3a:	6921      	ldr	r1, [r4, #16]
 8001e3c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e40:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e42:	f000 fa9f 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_RCC_ClockConfig+0x150>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <HAL_RCC_ClockConfig+0x154>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	40d8      	lsrs	r0, r3
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_ClockConfig+0x158>)
 8001e56:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_ClockConfig+0x15c>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	f008 f8f8 	bl	800a050 <HAL_InitTick>

  return HAL_OK;
 8001e60:	2000      	movs	r0, #0
}
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001e64:	2001      	movs	r0, #1
}
 8001e66:	4770      	bx	lr
      return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
 8001e6a:	e7fa      	b.n	8001e62 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	e7f8      	b.n	8001e62 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001e70:	2001      	movs	r0, #1
 8001e72:	e7f6      	b.n	8001e62 <HAL_RCC_ClockConfig+0x13a>
 8001e74:	40023c00 	.word	0x40023c00
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	0800b83c 	.word	0x0800b83c
 8001e80:	2000001c 	.word	0x2000001c
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001e88:	4b01      	ldr	r3, [pc, #4]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000001c 	.word	0x2000001c

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e96:	f7ff fff7 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ea2:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ea6:	40d8      	lsrs	r0, r3
 8001ea8:	bd08      	pop	{r3, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	0800b84c 	.word	0x0800b84c

08001eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001eb6:	f7ff ffe7 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001ec2:	4a03      	ldr	r2, [pc, #12]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ec4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ec6:	40d8      	lsrs	r0, r3
 8001ec8:	bd08      	pop	{r3, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	0800b84c 	.word	0x0800b84c

08001ed4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_GetClockConfig+0x34>)
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	f002 0203 	and.w	r2, r2, #3
 8001ee0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001ee8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001ef0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	08db      	lsrs	r3, r3, #3
 8001ef6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001efa:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_RCC_GetClockConfig+0x38>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	600b      	str	r3, [r1, #0]
}
 8001f06:	4770      	bx	lr
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	b083      	sub	sp, #12
 8001f14:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001f16:	6806      	ldr	r6, [r0, #0]
 8001f18:	f016 0601 	ands.w	r6, r6, #1
 8001f1c:	d00d      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001f1e:	4a96      	ldr	r2, [pc, #600]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f20:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001f24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001f28:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001f30:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 809b 	beq.w	800206e <HAL_RCCEx_PeriphCLKConfig+0x15e>
  uint32_t plli2sused = 0U;
 8001f38:	2600      	movs	r6, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	f013 0f02 	tst.w	r3, #2
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001f42:	4a8d      	ldr	r2, [pc, #564]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f44:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001f48:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8001f4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f56:	b903      	cbnz	r3, 8001f5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 8001f58:	2601      	movs	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f5a:	6825      	ldr	r5, [r4, #0]
 8001f5c:	f015 0504 	ands.w	r5, r5, #4
 8001f60:	d00f      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f62:	4a85      	ldr	r2, [pc, #532]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f64:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001f68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f7a:	d07a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d07a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x166>
  uint32_t pllsaiused = 0U;
 8001f80:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	f013 0f08 	tst.w	r3, #8
 8001f88:	d00e      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f8a:	4a7b      	ldr	r2, [pc, #492]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001f8c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001f90:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f96:	430b      	orrs	r3, r1
 8001f98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa2:	d06a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fa4:	b903      	cbnz	r3, 8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      pllsaiused = 1U;
 8001fa6:	2501      	movs	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	f013 0f20 	tst.w	r3, #32
 8001fae:	d166      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	f013 0f10 	tst.w	r3, #16
 8001fb6:	d004      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fb8:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8001fbc:	4b6f      	ldr	r3, [pc, #444]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001fbe:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001fc8:	d008      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001fca:	4a6b      	ldr	r2, [pc, #428]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001fcc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001fd0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fd4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001fd6:	430b      	orrs	r3, r1
 8001fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fe4:	4a64      	ldr	r2, [pc, #400]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001fe6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001fea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ffc:	d00d      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ffe:	4a5e      	ldr	r2, [pc, #376]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002000:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002004:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002008:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800200a:	430b      	orrs	r3, r1
 800200c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002010:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002016:	f000 809b 	beq.w	8002150 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002020:	d008      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002022:	4a55      	ldr	r2, [pc, #340]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002024:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800202e:	430b      	orrs	r3, r1
 8002030:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800203a:	d00c      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800203c:	4a4e      	ldr	r2, [pc, #312]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800203e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002042:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002046:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002048:	430b      	orrs	r3, r1
 800204a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800204e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002054:	d07e      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x244>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002056:	2e00      	cmp	r6, #0
 8002058:	d17c      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002060:	d078      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x244>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002062:	2d01      	cmp	r5, #1
 8002064:	f000 8125 	beq.w	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002068:	2000      	movs	r0, #0
}
 800206a:	b003      	add	sp, #12
 800206c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1U;
 800206e:	2601      	movs	r6, #1
 8002070:	e763      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1U;
 8002072:	2601      	movs	r6, #1
 8002074:	e782      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x6c>
      pllsaiused = 1U;
 8002076:	2501      	movs	r5, #1
 8002078:	e783      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      plli2sused = 1U;
 800207a:	2601      	movs	r6, #1
 800207c:	e792      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002086:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002096:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002098:	6813      	ldr	r3, [r2, #0]
 800209a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80020a0:	f7fe ff86 	bl	8000fb0 <HAL_GetTick>
 80020a4:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020ae:	d106      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020b0:	f7fe ff7e 	bl	8000fb0 <HAL_GetTick>
 80020b4:	1bc0      	subs	r0, r0, r7
 80020b6:	2802      	cmp	r0, #2
 80020b8:	d9f5      	bls.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
        return HAL_TIMEOUT;
 80020ba:	2003      	movs	r0, #3
 80020bc:	e7d5      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020c2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80020c6:	d014      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80020c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020ca:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d00f      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80020da:	492a      	ldr	r1, [pc, #168]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80020dc:	2001      	movs	r0, #1
 80020de:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020e2:	2000      	movs	r0, #0
 80020e4:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80020e8:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	f013 0f01 	tst.w	r3, #1
 80020f0:	d112      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020f4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80020f8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80020fc:	d01d      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80020fe:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002100:	6893      	ldr	r3, [r2, #8]
 8002102:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002106:	6093      	str	r3, [r2, #8]
 8002108:	491b      	ldr	r1, [pc, #108]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800210a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800210c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800210e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002112:	4313      	orrs	r3, r2
 8002114:	670b      	str	r3, [r1, #112]	; 0x70
 8002116:	e74b      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        tickstart = HAL_GetTick();
 8002118:	f7fe ff4a 	bl	8000fb0 <HAL_GetTick>
 800211c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	f013 0f02 	tst.w	r3, #2
 8002126:	d1e4      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe ff42 	bl	8000fb0 <HAL_GetTick>
 800212c:	1bc0      	subs	r0, r0, r7
 800212e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002132:	4298      	cmp	r0, r3
 8002134:	d9f3      	bls.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x20e>
            return HAL_TIMEOUT;
 8002136:	2003      	movs	r0, #3
 8002138:	e797      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213a:	490f      	ldr	r1, [pc, #60]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800213c:	688a      	ldr	r2, [r1, #8]
 800213e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002142:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
 800214e:	e7db      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      pllsaiused = 1U;
 8002150:	2501      	movs	r5, #1
 8002152:	e762      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_PLLI2S_DISABLE();
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002156:	2200      	movs	r2, #0
 8002158:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800215a:	f7fe ff29 	bl	8000fb0 <HAL_GetTick>
 800215e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002168:	d00e      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800216a:	f7fe ff21 	bl	8000fb0 <HAL_GetTick>
 800216e:	1b80      	subs	r0, r0, r6
 8002170:	2802      	cmp	r0, #2
 8002172:	d9f5      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x250>
        return HAL_TIMEOUT;
 8002174:	2003      	movs	r0, #3
 8002176:	e778      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002178:	40023800 	.word	0x40023800
 800217c:	42471000 	.word	0x42471000
 8002180:	40007000 	.word	0x40007000
 8002184:	42470000 	.word	0x42470000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	f013 0f01 	tst.w	r3, #1
 800218e:	d001      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002190:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002192:	b122      	cbz	r2, 800219e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002194:	f013 0f02 	tst.w	r3, #2
 8002198:	d015      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800219a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800219c:	b99b      	cbnz	r3, 80021c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800219e:	4a77      	ldr	r2, [pc, #476]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80021a0:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021a4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80021a8:	6863      	ldr	r3, [r4, #4]
 80021aa:	68a6      	ldr	r6, [r4, #8]
 80021ac:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80021b0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80021b4:	4303      	orrs	r3, r0
 80021b6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80021ba:	430b      	orrs	r3, r1
 80021bc:	6961      	ldr	r1, [r4, #20]
 80021be:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80021c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	f013 0f04 	tst.w	r3, #4
 80021cc:	d003      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 80021ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80021d0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80021d4:	d006      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80021d6:	f013 0f08 	tst.w	r3, #8
 80021da:	d020      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x30e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e2:	d11c      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80021e4:	4a65      	ldr	r2, [pc, #404]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80021e6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021ea:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80021ee:	6863      	ldr	r3, [r4, #4]
 80021f0:	68a6      	ldr	r6, [r4, #8]
 80021f2:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80021f6:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80021fa:	4303      	orrs	r3, r0
 80021fc:	6920      	ldr	r0, [r4, #16]
 80021fe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002202:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002206:	430b      	orrs	r3, r1
 8002208:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800220c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002210:	f023 031f 	bic.w	r3, r3, #31
 8002214:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002216:	3901      	subs	r1, #1
 8002218:	430b      	orrs	r3, r1
 800221a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002224:	d003      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8002226:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800222c:	d028      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x370>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002234:	d011      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002236:	6863      	ldr	r3, [r4, #4]
 8002238:	68a2      	ldr	r2, [r4, #8]
 800223a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800223e:	68e2      	ldr	r2, [r4, #12]
 8002240:	0852      	lsrs	r2, r2, #1
 8002242:	3a01      	subs	r2, #1
 8002244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002248:	6922      	ldr	r2, [r4, #16]
 800224a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800224e:	6962      	ldr	r2, [r4, #20]
 8002250:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002254:	4a49      	ldr	r2, [pc, #292]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002256:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800225c:	2201      	movs	r2, #1
 800225e:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002260:	f7fe fea6 	bl	8000fb0 <HAL_GetTick>
 8002264:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002266:	4b45      	ldr	r3, [pc, #276]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800226e:	f47f aef8 	bne.w	8002062 <HAL_RCCEx_PeriphCLKConfig+0x152>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002272:	f7fe fe9d 	bl	8000fb0 <HAL_GetTick>
 8002276:	1b80      	subs	r0, r0, r6
 8002278:	2802      	cmp	r0, #2
 800227a:	d9f4      	bls.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x356>
        return HAL_TIMEOUT;
 800227c:	2003      	movs	r0, #3
 800227e:	e6f4      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002280:	483e      	ldr	r0, [pc, #248]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002282:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002286:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800228a:	1c5a      	adds	r2, r3, #1
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800228c:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002290:	6863      	ldr	r3, [r4, #4]
 8002292:	68a1      	ldr	r1, [r4, #8]
 8002294:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002298:	68e1      	ldr	r1, [r4, #12]
 800229a:	0849      	lsrs	r1, r1, #1
 800229c:	3901      	subs	r1, #1
 800229e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80022a2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80022a6:	f006 42e0 	and.w	r2, r6, #1879048192	; 0x70000000
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80022b0:	e7bd      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_PLLSAI_DISABLE();
 80022b2:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 80022b8:	f7fe fe7a 	bl	8000fb0 <HAL_GetTick>
 80022bc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022be:	4b2f      	ldr	r3, [pc, #188]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80022c6:	d006      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80022c8:	f7fe fe72 	bl	8000fb0 <HAL_GetTick>
 80022cc:	1b40      	subs	r0, r0, r5
 80022ce:	2802      	cmp	r0, #2
 80022d0:	d9f5      	bls.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        return HAL_TIMEOUT;
 80022d2:	2003      	movs	r0, #3
 80022d4:	e6c9      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	f013 0f04 	tst.w	r3, #4
 80022dc:	d001      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80022de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022e0:	b122      	cbz	r2, 80022ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80022e2:	f013 0f08 	tst.w	r3, #8
 80022e6:	d01a      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x40e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022ea:	b9c3      	cbnz	r3, 800231e <HAL_RCCEx_PeriphCLKConfig+0x40e>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80022ec:	4a23      	ldr	r2, [pc, #140]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80022ee:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80022f2:	69a3      	ldr	r3, [r4, #24]
 80022f4:	69e0      	ldr	r0, [r4, #28]
 80022f6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80022fa:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 80022fe:	430b      	orrs	r3, r1
 8002300:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002302:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002306:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800230a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800230e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002312:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002314:	3901      	subs	r1, #1
 8002316:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800231a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002324:	d003      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8002326:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800232c:	d011      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x442>
    __HAL_RCC_PLLSAI_ENABLE();
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002330:	2201      	movs	r2, #1
 8002332:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8002334:	f7fe fe3c 	bl	8000fb0 <HAL_GetTick>
 8002338:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002342:	d118      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x466>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002344:	f7fe fe34 	bl	8000fb0 <HAL_GetTick>
 8002348:	1b00      	subs	r0, r0, r4
 800234a:	2802      	cmp	r0, #2
 800234c:	d9f5      	bls.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x42a>
        return HAL_TIMEOUT;
 800234e:	2003      	movs	r0, #3
 8002350:	e68b      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002352:	480a      	ldr	r0, [pc, #40]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002354:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002358:	69a3      	ldr	r3, [r4, #24]
 800235a:	69e2      	ldr	r2, [r4, #28]
 800235c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002360:	6a22      	ldr	r2, [r4, #32]
 8002362:	0852      	lsrs	r2, r2, #1
 8002364:	3a01      	subs	r2, #1
 8002366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800236a:	f001 6270 	and.w	r2, r1, #251658240	; 0xf000000
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8002374:	e7db      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  return HAL_OK;
 8002376:	2000      	movs	r0, #0
 8002378:	e677      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	42470000 	.word	0x42470000

08002384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x174>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b08      	cmp	r3, #8
 8002390:	d007      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x1e>
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d05b      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0xca>
 8002396:	2b04      	cmp	r3, #4
 8002398:	d001      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x1a>
 800239a:	4858      	ldr	r0, [pc, #352]	; (80024fc <HAL_RCC_GetSysClockFreq+0x178>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800239c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800239e:	4858      	ldr	r0, [pc, #352]	; (8002500 <HAL_RCC_GetSysClockFreq+0x17c>)
 80023a0:	e7fc      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a2:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x174>)
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80023b0:	d02a      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b2:	4b51      	ldr	r3, [pc, #324]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x174>)
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80023ba:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80023be:	ebb1 000c 	subs.w	r0, r1, ip
 80023c2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80023c6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80023ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023ce:	0181      	lsls	r1, r0, #6
 80023d0:	1a09      	subs	r1, r1, r0
 80023d2:	eb63 030e 	sbc.w	r3, r3, lr
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023dc:	00c9      	lsls	r1, r1, #3
 80023de:	eb11 0c0c 	adds.w	ip, r1, ip
 80023e2:	f143 0300 	adc.w	r3, r3, #0
 80023e6:	0259      	lsls	r1, r3, #9
 80023e8:	2300      	movs	r3, #0
 80023ea:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80023ee:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80023f2:	f7fe fc41 	bl	8000c78 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023f6:	4b40      	ldr	r3, [pc, #256]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x174>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80023fe:	3301      	adds	r3, #1
 8002400:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002402:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002406:	e7c9      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002408:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x174>)
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002410:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002414:	ebb1 000c 	subs.w	r0, r1, ip
 8002418:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800241c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002420:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002424:	0181      	lsls	r1, r0, #6
 8002426:	1a09      	subs	r1, r1, r0
 8002428:	eb63 030e 	sbc.w	r3, r3, lr
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002432:	00c9      	lsls	r1, r1, #3
 8002434:	eb11 0c0c 	adds.w	ip, r1, ip
 8002438:	f143 0300 	adc.w	r3, r3, #0
 800243c:	0299      	lsls	r1, r3, #10
 800243e:	2300      	movs	r3, #0
 8002440:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002444:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002448:	f7fe fc16 	bl	8000c78 <__aeabi_uldivmod>
 800244c:	e7d3      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x72>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800244e:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x174>)
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800245c:	d028      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x174>)
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002466:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800246a:	ebb1 000c 	subs.w	r0, r1, ip
 800246e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002472:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002476:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800247a:	0181      	lsls	r1, r0, #6
 800247c:	1a09      	subs	r1, r1, r0
 800247e:	eb63 030e 	sbc.w	r3, r3, lr
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002488:	00c9      	lsls	r1, r1, #3
 800248a:	eb11 0c0c 	adds.w	ip, r1, ip
 800248e:	f143 0300 	adc.w	r3, r3, #0
 8002492:	0259      	lsls	r1, r3, #9
 8002494:	2300      	movs	r3, #0
 8002496:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800249a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800249e:	f7fe fbeb 	bl	8000c78 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x174>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 80024aa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80024ae:	e775      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x174>)
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80024b8:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80024bc:	ebb1 000c 	subs.w	r0, r1, ip
 80024c0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80024c4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80024c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024cc:	0181      	lsls	r1, r0, #6
 80024ce:	1a09      	subs	r1, r1, r0
 80024d0:	eb63 030e 	sbc.w	r3, r3, lr
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024da:	00c9      	lsls	r1, r1, #3
 80024dc:	eb11 0c0c 	adds.w	ip, r1, ip
 80024e0:	f143 0300 	adc.w	r3, r3, #0
 80024e4:	0299      	lsls	r1, r3, #10
 80024e6:	2300      	movs	r3, #0
 80024e8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80024ec:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80024f0:	f7fe fbc2 	bl	8000c78 <__aeabi_uldivmod>
 80024f4:	e7d5      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x11e>
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	007a1200 	.word	0x007a1200

08002504 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002504:	2800      	cmp	r0, #0
 8002506:	f000 8201 	beq.w	800290c <HAL_RCC_OscConfig+0x408>
{
 800250a:	b570      	push	{r4, r5, r6, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002510:	6803      	ldr	r3, [r0, #0]
 8002512:	f013 0f01 	tst.w	r3, #1
 8002516:	d041      	beq.n	800259c <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002518:	4b99      	ldr	r3, [pc, #612]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b04      	cmp	r3, #4
 8002522:	d032      	beq.n	800258a <HAL_RCC_OscConfig+0x86>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002524:	4b96      	ldr	r3, [pc, #600]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800252c:	2b08      	cmp	r3, #8
 800252e:	d027      	beq.n	8002580 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002530:	4b93      	ldr	r3, [pc, #588]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002538:	2b0c      	cmp	r3, #12
 800253a:	d059      	beq.n	80025f0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253c:	6863      	ldr	r3, [r4, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d05b      	beq.n	80025fc <HAL_RCC_OscConfig+0xf8>
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	d05e      	beq.n	8002608 <HAL_RCC_OscConfig+0x104>
 800254a:	4b8d      	ldr	r3, [pc, #564]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800255a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800255c:	6863      	ldr	r3, [r4, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d05c      	beq.n	800261c <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe fd25 	bl	8000fb0 <HAL_GetTick>
 8002566:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002568:	4b85      	ldr	r3, [pc, #532]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002570:	d114      	bne.n	800259c <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002572:	f7fe fd1d 	bl	8000fb0 <HAL_GetTick>
 8002576:	1b40      	subs	r0, r0, r5
 8002578:	2864      	cmp	r0, #100	; 0x64
 800257a:	d9f5      	bls.n	8002568 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 800257c:	2003      	movs	r0, #3
 800257e:	e1cc      	b.n	800291a <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002580:	4b7f      	ldr	r3, [pc, #508]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002588:	d0d2      	beq.n	8002530 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258a:	4b7d      	ldr	r3, [pc, #500]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002592:	d003      	beq.n	800259c <HAL_RCC_OscConfig+0x98>
 8002594:	6863      	ldr	r3, [r4, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 81ba 	beq.w	8002910 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	f013 0f02 	tst.w	r3, #2
 80025a2:	d060      	beq.n	8002666 <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025a4:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f013 0f0c 	tst.w	r3, #12
 80025ac:	d04a      	beq.n	8002644 <HAL_RCC_OscConfig+0x140>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ae:	4b74      	ldr	r3, [pc, #464]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d03f      	beq.n	800263a <HAL_RCC_OscConfig+0x136>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ba:	4b71      	ldr	r3, [pc, #452]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d069      	beq.n	800269a <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025c6:	68e3      	ldr	r3, [r4, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d075      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025cc:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <HAL_RCC_OscConfig+0x280>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7fe fced 	bl	8000fb0 <HAL_GetTick>
 80025d6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b69      	ldr	r3, [pc, #420]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f013 0f02 	tst.w	r3, #2
 80025e0:	d161      	bne.n	80026a6 <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e2:	f7fe fce5 	bl	8000fb0 <HAL_GetTick>
 80025e6:	1b40      	subs	r0, r0, r5
 80025e8:	2802      	cmp	r0, #2
 80025ea:	d9f5      	bls.n	80025d8 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80025ec:	2003      	movs	r0, #3
 80025ee:	e194      	b.n	800291a <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f0:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80025f8:	d0a0      	beq.n	800253c <HAL_RCC_OscConfig+0x38>
 80025fa:	e7c6      	b.n	800258a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fc:	4a60      	ldr	r2, [pc, #384]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 80025fe:	6813      	ldr	r3, [r2, #0]
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e7a9      	b.n	800255c <HAL_RCC_OscConfig+0x58>
 8002608:	4b5d      	ldr	r3, [pc, #372]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e79f      	b.n	800255c <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 800261c:	f7fe fcc8 	bl	8000fb0 <HAL_GetTick>
 8002620:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	4b57      	ldr	r3, [pc, #348]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800262a:	d0b7      	beq.n	800259c <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe fcc0 	bl	8000fb0 <HAL_GetTick>
 8002630:	1b40      	subs	r0, r0, r5
 8002632:	2864      	cmp	r0, #100	; 0x64
 8002634:	d9f5      	bls.n	8002622 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002636:	2003      	movs	r0, #3
 8002638:	e16f      	b.n	800291a <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800263a:	4b51      	ldr	r3, [pc, #324]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002642:	d1ba      	bne.n	80025ba <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002644:	4b4e      	ldr	r3, [pc, #312]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f013 0f02 	tst.w	r3, #2
 800264c:	d003      	beq.n	8002656 <HAL_RCC_OscConfig+0x152>
 800264e:	68e3      	ldr	r3, [r4, #12]
 8002650:	2b01      	cmp	r3, #1
 8002652:	f040 815f 	bne.w	8002914 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002658:	6813      	ldr	r3, [r2, #0]
 800265a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800265e:	6921      	ldr	r1, [r4, #16]
 8002660:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002664:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	f013 0f08 	tst.w	r3, #8
 800266c:	d049      	beq.n	8002702 <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266e:	6963      	ldr	r3, [r4, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d033      	beq.n	80026dc <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002674:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCC_OscConfig+0x280>)
 8002676:	2201      	movs	r2, #1
 8002678:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe fc98 	bl	8000fb0 <HAL_GetTick>
 8002680:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002686:	f013 0f02 	tst.w	r3, #2
 800268a:	d13a      	bne.n	8002702 <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268c:	f7fe fc90 	bl	8000fb0 <HAL_GetTick>
 8002690:	1b40      	subs	r0, r0, r5
 8002692:	2802      	cmp	r0, #2
 8002694:	d9f5      	bls.n	8002682 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8002696:	2003      	movs	r0, #3
 8002698:	e13f      	b.n	800291a <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269a:	4b39      	ldr	r3, [pc, #228]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80026a2:	d190      	bne.n	80025c6 <HAL_RCC_OscConfig+0xc2>
 80026a4:	e7ce      	b.n	8002644 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4a36      	ldr	r2, [pc, #216]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 80026a8:	6813      	ldr	r3, [r2, #0]
 80026aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026ae:	6921      	ldr	r1, [r4, #16]
 80026b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e7d6      	b.n	8002666 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCC_OscConfig+0x280>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026be:	f7fe fc77 	bl	8000fb0 <HAL_GetTick>
 80026c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c4:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f013 0f02 	tst.w	r3, #2
 80026cc:	d0cb      	beq.n	8002666 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ce:	f7fe fc6f 	bl	8000fb0 <HAL_GetTick>
 80026d2:	1b40      	subs	r0, r0, r5
 80026d4:	2802      	cmp	r0, #2
 80026d6:	d9f5      	bls.n	80026c4 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 80026d8:	2003      	movs	r0, #3
 80026da:	e11e      	b.n	800291a <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_OscConfig+0x280>)
 80026de:	2200      	movs	r2, #0
 80026e0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe fc64 	bl	8000fb0 <HAL_GetTick>
 80026e8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ea:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 80026ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ee:	f013 0f02 	tst.w	r3, #2
 80026f2:	d006      	beq.n	8002702 <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f4:	f7fe fc5c 	bl	8000fb0 <HAL_GetTick>
 80026f8:	1b40      	subs	r0, r0, r5
 80026fa:	2802      	cmp	r0, #2
 80026fc:	d9f5      	bls.n	80026ea <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 80026fe:	2003      	movs	r0, #3
 8002700:	e10b      	b.n	800291a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	f013 0f04 	tst.w	r3, #4
 8002708:	d076      	beq.n	80027f8 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002712:	d133      	bne.n	800277c <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 800271a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800272c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_RCC_OscConfig+0x284>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002736:	d029      	beq.n	800278c <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	68a3      	ldr	r3, [r4, #8]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d03a      	beq.n	80027b4 <HAL_RCC_OscConfig+0x2b0>
 800273e:	2b05      	cmp	r3, #5
 8002740:	d03e      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2bc>
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002744:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	671a      	str	r2, [r3, #112]	; 0x70
 800274c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800274e:	f022 0204 	bic.w	r2, r2, #4
 8002752:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002754:	68a3      	ldr	r3, [r4, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d03c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7fe fc29 	bl	8000fb0 <HAL_GetTick>
 800275e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <HAL_RCC_OscConfig+0x27c>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f013 0f02 	tst.w	r3, #2
 8002768:	d145      	bne.n	80027f6 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fc21 	bl	8000fb0 <HAL_GetTick>
 800276e:	1b80      	subs	r0, r0, r6
 8002770:	f241 3388 	movw	r3, #5000	; 0x1388
 8002774:	4298      	cmp	r0, r3
 8002776:	d9f3      	bls.n	8002760 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8002778:	2003      	movs	r0, #3
 800277a:	e0ce      	b.n	800291a <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800277c:	2500      	movs	r5, #0
 800277e:	e7d6      	b.n	800272e <HAL_RCC_OscConfig+0x22a>
 8002780:	40023800 	.word	0x40023800
 8002784:	42470000 	.word	0x42470000
 8002788:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278c:	4a6b      	ldr	r2, [pc, #428]	; (800293c <HAL_RCC_OscConfig+0x438>)
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002796:	f7fe fc0b 	bl	8000fb0 <HAL_GetTick>
 800279a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_OscConfig+0x438>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027a4:	d1c8      	bne.n	8002738 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a6:	f7fe fc03 	bl	8000fb0 <HAL_GetTick>
 80027aa:	1b80      	subs	r0, r0, r6
 80027ac:	2802      	cmp	r0, #2
 80027ae:	d9f5      	bls.n	800279c <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 80027b0:	2003      	movs	r0, #3
 80027b2:	e0b2      	b.n	800291a <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b4:	4a62      	ldr	r2, [pc, #392]	; (8002940 <HAL_RCC_OscConfig+0x43c>)
 80027b6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	e7c9      	b.n	8002754 <HAL_RCC_OscConfig+0x250>
 80027c0:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <HAL_RCC_OscConfig+0x43c>)
 80027c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027c4:	f042 0204 	orr.w	r2, r2, #4
 80027c8:	671a      	str	r2, [r3, #112]	; 0x70
 80027ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	671a      	str	r2, [r3, #112]	; 0x70
 80027d2:	e7bf      	b.n	8002754 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe fbec 	bl	8000fb0 <HAL_GetTick>
 80027d8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027da:	4b59      	ldr	r3, [pc, #356]	; (8002940 <HAL_RCC_OscConfig+0x43c>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	f013 0f02 	tst.w	r3, #2
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fbe4 	bl	8000fb0 <HAL_GetTick>
 80027e8:	1b80      	subs	r0, r0, r6
 80027ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80027ee:	4298      	cmp	r0, r3
 80027f0:	d9f3      	bls.n	80027da <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80027f2:	2003      	movs	r0, #3
 80027f4:	e091      	b.n	800291a <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f6:	b9ed      	cbnz	r5, 8002834 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f8:	69a3      	ldr	r3, [r4, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 808c 	beq.w	8002918 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002800:	4a4f      	ldr	r2, [pc, #316]	; (8002940 <HAL_RCC_OscConfig+0x43c>)
 8002802:	6892      	ldr	r2, [r2, #8]
 8002804:	f002 020c 	and.w	r2, r2, #12
 8002808:	2a08      	cmp	r2, #8
 800280a:	d054      	beq.n	80028b6 <HAL_RCC_OscConfig+0x3b2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280c:	2b02      	cmp	r3, #2
 800280e:	d017      	beq.n	8002840 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b4c      	ldr	r3, [pc, #304]	; (8002944 <HAL_RCC_OscConfig+0x440>)
 8002812:	2200      	movs	r2, #0
 8002814:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fbcb 	bl	8000fb0 <HAL_GetTick>
 800281a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281c:	4b48      	ldr	r3, [pc, #288]	; (8002940 <HAL_RCC_OscConfig+0x43c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002824:	d045      	beq.n	80028b2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fbc3 	bl	8000fb0 <HAL_GetTick>
 800282a:	1b00      	subs	r0, r0, r4
 800282c:	2802      	cmp	r0, #2
 800282e:	d9f5      	bls.n	800281c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8002830:	2003      	movs	r0, #3
 8002832:	e072      	b.n	800291a <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002834:	4a42      	ldr	r2, [pc, #264]	; (8002940 <HAL_RCC_OscConfig+0x43c>)
 8002836:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
 800283e:	e7db      	b.n	80027f8 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <HAL_RCC_OscConfig+0x440>)
 8002842:	2200      	movs	r2, #0
 8002844:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002846:	f7fe fbb3 	bl	8000fb0 <HAL_GetTick>
 800284a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284c:	4b3c      	ldr	r3, [pc, #240]	; (8002940 <HAL_RCC_OscConfig+0x43c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002854:	d006      	beq.n	8002864 <HAL_RCC_OscConfig+0x360>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe fbab 	bl	8000fb0 <HAL_GetTick>
 800285a:	1b40      	subs	r0, r0, r5
 800285c:	2802      	cmp	r0, #2
 800285e:	d9f5      	bls.n	800284c <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8002860:	2003      	movs	r0, #3
 8002862:	e05a      	b.n	800291a <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002864:	69e3      	ldr	r3, [r4, #28]
 8002866:	6a22      	ldr	r2, [r4, #32]
 8002868:	4313      	orrs	r3, r2
 800286a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800286c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002870:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002872:	0852      	lsrs	r2, r2, #1
 8002874:	3a01      	subs	r2, #1
 8002876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800287a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800287c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002880:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002882:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002886:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <HAL_RCC_OscConfig+0x43c>)
 8002888:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800288a:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <HAL_RCC_OscConfig+0x440>)
 800288c:	2201      	movs	r2, #1
 800288e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002890:	f7fe fb8e 	bl	8000fb0 <HAL_GetTick>
 8002894:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_RCC_OscConfig+0x43c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fb86 	bl	8000fb0 <HAL_GetTick>
 80028a4:	1b00      	subs	r0, r0, r4
 80028a6:	2802      	cmp	r0, #2
 80028a8:	d9f5      	bls.n	8002896 <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 80028aa:	2003      	movs	r0, #3
 80028ac:	e035      	b.n	800291a <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80028ae:	2000      	movs	r0, #0
 80028b0:	e033      	b.n	800291a <HAL_RCC_OscConfig+0x416>
 80028b2:	2000      	movs	r0, #0
 80028b4:	e031      	b.n	800291a <HAL_RCC_OscConfig+0x416>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d031      	beq.n	800291e <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCC_OscConfig+0x43c>)
 80028bc:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80028c2:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c4:	4291      	cmp	r1, r2
 80028c6:	d12c      	bne.n	8002922 <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028cc:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	428a      	cmp	r2, r1
 80028d0:	d129      	bne.n	8002926 <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80028d8:	401a      	ands	r2, r3
 80028da:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80028de:	d124      	bne.n	800292a <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80028e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028e6:	0852      	lsrs	r2, r2, #1
 80028e8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ea:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80028ee:	d11e      	bne.n	800292e <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f6:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80028fa:	d11a      	bne.n	8002932 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028fc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002900:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002902:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8002906:	d116      	bne.n	8002936 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8002908:	2000      	movs	r0, #0
 800290a:	e006      	b.n	800291a <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 800290c:	2001      	movs	r0, #1
}
 800290e:	4770      	bx	lr
        return HAL_ERROR;
 8002910:	2001      	movs	r0, #1
 8002912:	e002      	b.n	800291a <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8002914:	2001      	movs	r0, #1
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8002918:	2000      	movs	r0, #0
}
 800291a:	b002      	add	sp, #8
 800291c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800291e:	2001      	movs	r0, #1
 8002920:	e7fb      	b.n	800291a <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8002922:	2001      	movs	r0, #1
 8002924:	e7f9      	b.n	800291a <HAL_RCC_OscConfig+0x416>
 8002926:	2001      	movs	r0, #1
 8002928:	e7f7      	b.n	800291a <HAL_RCC_OscConfig+0x416>
 800292a:	2001      	movs	r0, #1
 800292c:	e7f5      	b.n	800291a <HAL_RCC_OscConfig+0x416>
 800292e:	2001      	movs	r0, #1
 8002930:	e7f3      	b.n	800291a <HAL_RCC_OscConfig+0x416>
 8002932:	2001      	movs	r0, #1
 8002934:	e7f1      	b.n	800291a <HAL_RCC_OscConfig+0x416>
 8002936:	2001      	movs	r0, #1
 8002938:	e7ef      	b.n	800291a <HAL_RCC_OscConfig+0x416>
 800293a:	bf00      	nop
 800293c:	40007000 	.word	0x40007000
 8002940:	40023800 	.word	0x40023800
 8002944:	42470000 	.word	0x42470000

08002948 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800294c:	6802      	ldr	r2, [r0, #0]
 800294e:	68d3      	ldr	r3, [r2, #12]
 8002950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002954:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002956:	f7fe fb2b 	bl	8000fb0 <HAL_GetTick>
 800295a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f013 0f20 	tst.w	r3, #32
 8002964:	d107      	bne.n	8002976 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002966:	f7fe fb23 	bl	8000fb0 <HAL_GetTick>
 800296a:	1b40      	subs	r0, r0, r5
 800296c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002970:	d9f4      	bls.n	800295c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002972:	2003      	movs	r0, #3
 8002974:	e000      	b.n	8002978 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8002976:	2000      	movs	r0, #0
}
 8002978:	bd38      	pop	{r3, r4, r5, pc}

0800297a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800297a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800297c:	6803      	ldr	r3, [r0, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002984:	d002      	beq.n	800298c <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8002988:	4628      	mov	r0, r5
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002994:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002996:	f7fe fb0b 	bl	8000fb0 <HAL_GetTick>
 800299a:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029a6:	d1ef      	bne.n	8002988 <RTC_EnterInitMode+0xe>
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	d1ed      	bne.n	8002988 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029ac:	f7fe fb00 	bl	8000fb0 <HAL_GetTick>
 80029b0:	1b83      	subs	r3, r0, r6
 80029b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b6:	d9f2      	bls.n	800299e <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029b8:	2304      	movs	r3, #4
 80029ba:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 80029bc:	2501      	movs	r5, #1
 80029be:	e7ee      	b.n	800299e <RTC_EnterInitMode+0x24>

080029c0 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029c0:	6802      	ldr	r2, [r0, #0]
 80029c2:	68d3      	ldr	r3, [r2, #12]
 80029c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c8:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80029ca:	6803      	ldr	r3, [r0, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f013 0f20 	tst.w	r3, #32
 80029d2:	d001      	beq.n	80029d8 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80029d4:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80029d6:	4770      	bx	lr
{
 80029d8:	b510      	push	{r4, lr}
 80029da:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029dc:	f7ff ffb4 	bl	8002948 <HAL_RTC_WaitForSynchro>
 80029e0:	b110      	cbz	r0, 80029e8 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029e2:	2304      	movs	r3, #4
 80029e4:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80029e6:	2001      	movs	r0, #1
}
 80029e8:	bd10      	pop	{r4, pc}

080029ea <HAL_RTC_Init>:
  if (hrtc == NULL)
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d041      	beq.n	8002a72 <HAL_RTC_Init+0x88>
{
 80029ee:	b510      	push	{r4, lr}
 80029f0:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029f2:	7f43      	ldrb	r3, [r0, #29]
 80029f4:	b1e3      	cbz	r3, 8002a30 <HAL_RTC_Init+0x46>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029f6:	2302      	movs	r3, #2
 80029f8:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	22ca      	movs	r2, #202	; 0xca
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	2253      	movs	r2, #83	; 0x53
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7ff ffb7 	bl	800297a <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002a0c:	b1a0      	cbz	r0, 8002a38 <HAL_RTC_Init+0x4e>
  if (status == HAL_OK)
 8002a0e:	b958      	cbnz	r0, 8002a28 <HAL_RTC_Init+0x3e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002a10:	6822      	ldr	r2, [r4, #0]
 8002a12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a1a:	6822      	ldr	r2, [r4, #0]
 8002a1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a1e:	69a1      	ldr	r1, [r4, #24]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 8002a24:	2301      	movs	r3, #1
 8002a26:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	22ff      	movs	r2, #255	; 0xff
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002a2e:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002a30:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002a32:	f006 fec1 	bl	80097b8 <HAL_RTC_MspInit>
 8002a36:	e7de      	b.n	80029f6 <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a38:	6822      	ldr	r2, [r4, #0]
 8002a3a:	6893      	ldr	r3, [r2, #8]
 8002a3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a44:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a46:	6821      	ldr	r1, [r4, #0]
 8002a48:	688a      	ldr	r2, [r1, #8]
 8002a4a:	6863      	ldr	r3, [r4, #4]
 8002a4c:	6920      	ldr	r0, [r4, #16]
 8002a4e:	4303      	orrs	r3, r0
 8002a50:	6960      	ldr	r0, [r4, #20]
 8002a52:	4303      	orrs	r3, r0
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	68e2      	ldr	r2, [r4, #12]
 8002a5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	6913      	ldr	r3, [r2, #16]
 8002a62:	68a1      	ldr	r1, [r4, #8]
 8002a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002a68:	6113      	str	r3, [r2, #16]
    status = RTC_ExitInitMode(hrtc);
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7ff ffa8 	bl	80029c0 <RTC_ExitInitMode>
 8002a70:	e7cd      	b.n	8002a0e <HAL_RTC_Init+0x24>
    return HAL_ERROR;
 8002a72:	2001      	movs	r0, #1
}
 8002a74:	4770      	bx	lr

08002a76 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;
 8002a76:	2300      	movs	r3, #0

  while (number >= 10U)
 8002a78:	e003      	b.n	8002a82 <RTC_ByteToBcd2+0xc>
  {
    bcdhigh++;
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
    number -= 10U;
 8002a7e:	380a      	subs	r0, #10
 8002a80:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 8002a82:	2809      	cmp	r0, #9
 8002a84:	d8f9      	bhi.n	8002a7a <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	b2db      	uxtb	r3, r3
}
 8002a8a:	4318      	orrs	r0, r3
 8002a8c:	4770      	bx	lr

08002a8e <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8002a8e:	7f03      	ldrb	r3, [r0, #28]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d059      	beq.n	8002b48 <HAL_RTC_SetTime+0xba>
{
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	4604      	mov	r4, r0
 8002a98:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 8002aa2:	bb4a      	cbnz	r2, 8002af8 <HAL_RTC_SetTime+0x6a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002aa4:	6803      	ldr	r3, [r0, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002aac:	d101      	bne.n	8002ab2 <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002ab2:	7830      	ldrb	r0, [r6, #0]
 8002ab4:	f7ff ffdf 	bl	8002a76 <RTC_ByteToBcd2>
 8002ab8:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002aba:	7870      	ldrb	r0, [r6, #1]
 8002abc:	f7ff ffdb 	bl	8002a76 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002ac0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002ac4:	78b0      	ldrb	r0, [r6, #2]
 8002ac6:	f7ff ffd6 	bl	8002a76 <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002aca:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002acc:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002ace:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	22ca      	movs	r2, #202	; 0xca
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	2253      	movs	r2, #83	; 0x53
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff ff4b 	bl	800297a <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002ae4:	b1d0      	cbz	r0, 8002b1c <HAL_RTC_SetTime+0x8e>
  if (status == HAL_OK)
 8002ae6:	b908      	cbnz	r0, 8002aec <HAL_RTC_SetTime+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	22ff      	movs	r2, #255	; 0xff
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8002af2:	2300      	movs	r3, #0
 8002af4:	7723      	strb	r3, [r4, #28]
}
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002af8:	6803      	ldr	r3, [r0, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b00:	d101      	bne.n	8002b06 <HAL_RTC_SetTime+0x78>
      sTime->TimeFormat = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b06:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002b08:	7875      	ldrb	r5, [r6, #1]
 8002b0a:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b0c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 8002b10:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002b12:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b14:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b16:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
 8002b1a:	e7da      	b.n	8002ad2 <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002b22:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002b26:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002b28:	6822      	ldr	r2, [r4, #0]
 8002b2a:	6893      	ldr	r3, [r2, #8]
 8002b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b30:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b32:	6821      	ldr	r1, [r4, #0]
 8002b34:	688b      	ldr	r3, [r1, #8]
 8002b36:	68f2      	ldr	r2, [r6, #12]
 8002b38:	6930      	ldr	r0, [r6, #16]
 8002b3a:	4302      	orrs	r2, r0
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8002b40:	4620      	mov	r0, r4
 8002b42:	f7ff ff3d 	bl	80029c0 <RTC_ExitInitMode>
 8002b46:	e7ce      	b.n	8002ae6 <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 8002b48:	2002      	movs	r0, #2
}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8002b4c:	7f03      	ldrb	r3, [r0, #28]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d048      	beq.n	8002be4 <HAL_RTC_SetDate+0x98>
{
 8002b52:	b570      	push	{r4, r5, r6, lr}
 8002b54:	4604      	mov	r4, r0
 8002b56:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8002b58:	2301      	movs	r3, #1
 8002b5a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002b60:	b93a      	cbnz	r2, 8002b72 <HAL_RTC_SetDate+0x26>
 8002b62:	784b      	ldrb	r3, [r1, #1]
 8002b64:	f013 0f10 	tst.w	r3, #16
 8002b68:	d003      	beq.n	8002b72 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002b6a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002b6e:	330a      	adds	r3, #10
 8002b70:	704b      	strb	r3, [r1, #1]
  if (Format == RTC_FORMAT_BIN)
 8002b72:	bb12      	cbnz	r2, 8002bba <HAL_RTC_SetDate+0x6e>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b74:	78f0      	ldrb	r0, [r6, #3]
 8002b76:	f7ff ff7e 	bl	8002a76 <RTC_ByteToBcd2>
 8002b7a:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b7c:	7870      	ldrb	r0, [r6, #1]
 8002b7e:	f7ff ff7a 	bl	8002a76 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b82:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002b86:	78b0      	ldrb	r0, [r6, #2]
 8002b88:	f7ff ff75 	bl	8002a76 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b8c:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002b8e:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b90:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	22ca      	movs	r2, #202	; 0xca
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	2253      	movs	r2, #83	; 0x53
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7ff feea 	bl	800297a <RTC_EnterInitMode>
  if (status == HAL_OK)
 8002ba6:	b198      	cbz	r0, 8002bd0 <HAL_RTC_SetDate+0x84>
  if (status == HAL_OK)
 8002ba8:	b908      	cbnz	r0, 8002bae <HAL_RTC_SetDate+0x62>
    hrtc->State = HAL_RTC_STATE_READY;
 8002baa:	2301      	movs	r3, #1
 8002bac:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	22ff      	movs	r2, #255	; 0xff
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	7723      	strb	r3, [r4, #28]
}
 8002bb8:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002bba:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002bbc:	7875      	ldrb	r5, [r6, #1]
 8002bbe:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002bc0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 8002bc4:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002bc6:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002bc8:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002bca:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 8002bce:	e7e1      	b.n	8002b94 <HAL_RTC_SetDate+0x48>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002bd6:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002bda:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff feef 	bl	80029c0 <RTC_ExitInitMode>
 8002be2:	e7e1      	b.n	8002ba8 <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 8002be4:	2002      	movs	r0, #2
}
 8002be6:	4770      	bx	lr

08002be8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint8_t tmp = 0U;
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002be8:	0903      	lsrs	r3, r0, #4
 8002bea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 8002bee:	f000 000f 	and.w	r0, r0, #15
 8002bf2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8002bf6:	b2c0      	uxtb	r0, r0
 8002bf8:	4770      	bx	lr

08002bfa <HAL_RTC_GetTime>:
{
 8002bfa:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002bfc:	6803      	ldr	r3, [r0, #0]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c02:	6803      	ldr	r3, [r0, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002c0a:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002c0c:	6803      	ldr	r3, [r0, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002c10:	f3c3 4005 	ubfx	r0, r3, #16, #6
 8002c14:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002c16:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002c1a:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002c1c:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 8002c20:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002c22:	f3c3 5380 	ubfx	r3, r3, #22, #1
 8002c26:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8002c28:	b95a      	cbnz	r2, 8002c42 <HAL_RTC_GetTime+0x48>
 8002c2a:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002c2c:	f7ff ffdc 	bl	8002be8 <RTC_Bcd2ToByte>
 8002c30:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c32:	4630      	mov	r0, r6
 8002c34:	f7ff ffd8 	bl	8002be8 <RTC_Bcd2ToByte>
 8002c38:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f7ff ffd4 	bl	8002be8 <RTC_Bcd2ToByte>
 8002c40:	70a0      	strb	r0, [r4, #2]
}
 8002c42:	2000      	movs	r0, #0
 8002c44:	bd70      	pop	{r4, r5, r6, pc}

08002c46 <SD_DMATransmitCplt>:
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002c46:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c50:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002c52:	4770      	bx	lr

08002c54 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002c5e:	6800      	ldr	r0, [r0, #0]
 8002c60:	f001 fc27 	bl	80044b2 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c64:	4605      	mov	r5, r0
 8002c66:	b110      	cbz	r0, 8002c6e <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8002c68:	4628      	mov	r0, r5
 8002c6a:	b002      	add	sp, #8
 8002c6c:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002c6e:	6820      	ldr	r0, [r4, #0]
 8002c70:	f001 ff18 	bl	8004aa4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c74:	b938      	cbnz	r0, 8002c86 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002c76:	2301      	movs	r3, #1
 8002c78:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002c7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d00b      	beq.n	8002c98 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002c80:	462e      	mov	r6, r5
 8002c82:	4628      	mov	r0, r5
 8002c84:	e014      	b.n	8002cb0 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002c86:	2300      	movs	r3, #0
 8002c88:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002c8a:	6820      	ldr	r0, [r4, #0]
 8002c8c:	f001 fc11 	bl	80044b2 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d0f2      	beq.n	8002c7a <SD_PowerON+0x26>
      return errorstate;
 8002c94:	4605      	mov	r5, r0
 8002c96:	e7e7      	b.n	8002c68 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002c98:	2100      	movs	r1, #0
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	f001 fd70 	bl	8004780 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d0ed      	beq.n	8002c80 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ca4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002ca8:	e7de      	b.n	8002c68 <SD_PowerON+0x14>
    count++;
 8002caa:	9b01      	ldr	r3, [sp, #4]
 8002cac:	3301      	adds	r3, #1
 8002cae:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002cb0:	9a01      	ldr	r2, [sp, #4]
 8002cb2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d813      	bhi.n	8002ce2 <SD_PowerON+0x8e>
 8002cba:	b996      	cbnz	r6, 8002ce2 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	6820      	ldr	r0, [r4, #0]
 8002cc0:	f001 fd5e 	bl	8004780 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cc4:	b9e0      	cbnz	r0, 8002d00 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002cc6:	4912      	ldr	r1, [pc, #72]	; (8002d10 <SD_PowerON+0xbc>)
 8002cc8:	6820      	ldr	r0, [r4, #0]
 8002cca:	f001 fe37 	bl	800493c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cce:	4606      	mov	r6, r0
 8002cd0:	b9c0      	cbnz	r0, 8002d04 <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	6820      	ldr	r0, [r4, #0]
 8002cd6:	f001 fbd7 	bl	8004488 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002cda:	0fc3      	lsrs	r3, r0, #31
 8002cdc:	d0e5      	beq.n	8002caa <SD_PowerON+0x56>
 8002cde:	461e      	mov	r6, r3
 8002ce0:	e7e3      	b.n	8002caa <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002ce2:	9a01      	ldr	r2, [sp, #4]
 8002ce4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d80e      	bhi.n	8002d0a <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002cec:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8002cf0:	d002      	beq.n	8002cf8 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	6463      	str	r3, [r4, #68]	; 0x44
 8002cf6:	e7b7      	b.n	8002c68 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8002cfc:	461d      	mov	r5, r3
 8002cfe:	e7b3      	b.n	8002c68 <SD_PowerON+0x14>
      return errorstate;
 8002d00:	4605      	mov	r5, r0
 8002d02:	e7b1      	b.n	8002c68 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002d08:	e7ae      	b.n	8002c68 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002d0a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8002d0e:	e7ab      	b.n	8002c68 <SD_PowerON+0x14>
 8002d10:	c1100000 	.word	0xc1100000

08002d14 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8002d16:	6a84      	ldr	r4, [r0, #40]	; 0x28
  dataremaining = hsd->RxXferSize;
 8002d18:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

  if (dataremaining > 0U)
 8002d1a:	b9a6      	cbnz	r6, 8002d46 <SD_Read_IT+0x32>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize = dataremaining;
  }
}
 8002d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      data = SDIO_ReadFIFO(hsd->Instance);
 8002d1e:	6838      	ldr	r0, [r7, #0]
 8002d20:	f001 fb8d 	bl	800443e <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8002d24:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002d26:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002d2a:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002d2c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8002d30:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002d32:	0e00      	lsrs	r0, r0, #24
 8002d34:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8002d36:	3404      	adds	r4, #4
      dataremaining--;
 8002d38:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 8002d3a:	3501      	adds	r5, #1
 8002d3c:	2d07      	cmp	r5, #7
 8002d3e:	d9ee      	bls.n	8002d1e <SD_Read_IT+0xa>
    hsd->pRxBuffPtr = tmp;
 8002d40:	62bc      	str	r4, [r7, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8002d42:	62fe      	str	r6, [r7, #44]	; 0x2c
}
 8002d44:	e7ea      	b.n	8002d1c <SD_Read_IT+0x8>
 8002d46:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8002d48:	2500      	movs	r5, #0
 8002d4a:	e7f7      	b.n	8002d3c <SD_Read_IT+0x28>

08002d4c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4e:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8002d50:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 8002d52:	6a46      	ldr	r6, [r0, #36]	; 0x24

  if (dataremaining > 0U)
 8002d54:	b9de      	cbnz	r6, 8002d8e <SD_Write_IT+0x42>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
  }
}
 8002d56:	b003      	add	sp, #12
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = (uint32_t)(*tmp);
 8002d5a:	7823      	ldrb	r3, [r4, #0]
 8002d5c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8002d5e:	7862      	ldrb	r2, [r4, #1]
 8002d60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d64:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8002d66:	78a2      	ldrb	r2, [r4, #2]
 8002d68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d6c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8002d6e:	78e2      	ldrb	r2, [r4, #3]
 8002d70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d74:	9301      	str	r3, [sp, #4]
      tmp++;
 8002d76:	3404      	adds	r4, #4
      dataremaining--;
 8002d78:	3e04      	subs	r6, #4
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002d7a:	a901      	add	r1, sp, #4
 8002d7c:	6838      	ldr	r0, [r7, #0]
 8002d7e:	f001 fb61 	bl	8004444 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8002d82:	3501      	adds	r5, #1
 8002d84:	2d07      	cmp	r5, #7
 8002d86:	d9e8      	bls.n	8002d5a <SD_Write_IT+0xe>
    hsd->pTxBuffPtr = tmp;
 8002d88:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 8002d8a:	627e      	str	r6, [r7, #36]	; 0x24
}
 8002d8c:	e7e3      	b.n	8002d56 <SD_Write_IT+0xa>
 8002d8e:	4607      	mov	r7, r0
    for(count = 0U; count < 8U; count++)
 8002d90:	2500      	movs	r5, #0
 8002d92:	e7f7      	b.n	8002d84 <SD_Write_IT+0x38>

08002d94 <SD_FindSCR>:
{
 8002d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	4604      	mov	r4, r0
 8002d9a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	f7fe f908 	bl	8000fb0 <HAL_GetTick>
 8002da0:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0U, 0U};
 8002da2:	2300      	movs	r3, #0
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002da8:	2108      	movs	r1, #8
 8002daa:	6820      	ldr	r0, [r4, #0]
 8002dac:	f001 fc3e 	bl	800462c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002db0:	4605      	mov	r5, r0
 8002db2:	b110      	cbz	r0, 8002dba <SD_FindSCR+0x26>
}
 8002db4:	4628      	mov	r0, r5
 8002db6:	b009      	add	sp, #36	; 0x24
 8002db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002dba:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002dbc:	0409      	lsls	r1, r1, #16
 8002dbe:	6820      	ldr	r0, [r4, #0]
 8002dc0:	f001 fcde 	bl	8004780 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d1f4      	bne.n	8002db4 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002dd4:	2330      	movs	r3, #48	; 0x30
 8002dd6:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002de0:	2301      	movs	r3, #1
 8002de2:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002de4:	a902      	add	r1, sp, #8
 8002de6:	6820      	ldr	r0, [r4, #0]
 8002de8:	f001 fb51 	bl	800448e <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	f001 fcf7 	bl	80047e0 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002df2:	4605      	mov	r5, r0
 8002df4:	b158      	cbz	r0, 8002e0e <SD_FindSCR+0x7a>
 8002df6:	e7dd      	b.n	8002db4 <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002df8:	f001 fb21 	bl	800443e <SDIO_ReadFIFO>
 8002dfc:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 8002e00:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002e02:	f7fe f8d5 	bl	8000fb0 <HAL_GetTick>
 8002e06:	1b83      	subs	r3, r0, r6
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d03f      	beq.n	8002e8e <SD_FindSCR+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002e0e:	6820      	ldr	r0, [r4, #0]
 8002e10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e12:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 8002e16:	d107      	bne.n	8002e28 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002e18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e1a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002e1e:	d1eb      	bne.n	8002df8 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002e20:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e22:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002e26:	d1ec      	bne.n	8002e02 <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002e28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e2a:	f013 0f08 	tst.w	r3, #8
 8002e2e:	d125      	bne.n	8002e7c <SD_FindSCR+0xe8>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002e30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e32:	f013 0f02 	tst.w	r3, #2
 8002e36:	d124      	bne.n	8002e82 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002e38:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8002e3a:	f015 0520 	ands.w	r5, r5, #32
 8002e3e:	d123      	bne.n	8002e88 <SD_FindSCR+0xf4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002e40:	f240 533a 	movw	r3, #1338	; 0x53a
 8002e44:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002e46:	9a01      	ldr	r2, [sp, #4]
 8002e48:	0213      	lsls	r3, r2, #8
 8002e4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002e52:	0a11      	lsrs	r1, r2, #8
 8002e54:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002e58:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002e5a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002e5e:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002e60:	9a00      	ldr	r2, [sp, #0]
 8002e62:	0213      	lsls	r3, r2, #8
 8002e64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002e6c:	0a11      	lsrs	r1, r2, #8
 8002e6e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002e72:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002e74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002e78:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8002e7a:	e79b      	b.n	8002db4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002e7c:	2508      	movs	r5, #8
 8002e7e:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002e80:	e798      	b.n	8002db4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002e82:	2502      	movs	r5, #2
 8002e84:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002e86:	e795      	b.n	8002db4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002e88:	2520      	movs	r5, #32
 8002e8a:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8002e8c:	e792      	b.n	8002db4 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8002e8e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8002e92:	e78f      	b.n	8002db4 <SD_FindSCR+0x20>

08002e94 <SD_WideBus_Enable>:
{
 8002e94:	b510      	push	{r4, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	9100      	str	r1, [sp, #0]
 8002e9e:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002ea0:	6800      	ldr	r0, [r0, #0]
 8002ea2:	f001 faf1 	bl	8004488 <SDIO_GetResponse>
 8002ea6:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002eaa:	d113      	bne.n	8002ed4 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8002eac:	4669      	mov	r1, sp
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f7ff ff70 	bl	8002d94 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002eb4:	b980      	cbnz	r0, 8002ed8 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002eb6:	9b01      	ldr	r3, [sp, #4]
 8002eb8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002ebc:	d00e      	beq.n	8002edc <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ebe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002ec0:	0409      	lsls	r1, r1, #16
 8002ec2:	6820      	ldr	r0, [r4, #0]
 8002ec4:	f001 fc5c 	bl	8004780 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ec8:	b930      	cbnz	r0, 8002ed8 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002eca:	2102      	movs	r1, #2
 8002ecc:	6820      	ldr	r0, [r4, #0]
 8002ece:	f001 fc6f 	bl	80047b0 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ed2:	e001      	b.n	8002ed8 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002ed4:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002edc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002ee0:	e7fa      	b.n	8002ed8 <SD_WideBus_Enable+0x44>

08002ee2 <SD_WideBus_Disable>:
{
 8002ee2:	b510      	push	{r4, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8002ee8:	2100      	movs	r1, #0
 8002eea:	9100      	str	r1, [sp, #0]
 8002eec:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002eee:	6800      	ldr	r0, [r0, #0]
 8002ef0:	f001 faca 	bl	8004488 <SDIO_GetResponse>
 8002ef4:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002ef8:	d113      	bne.n	8002f22 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8002efa:	4669      	mov	r1, sp
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7ff ff49 	bl	8002d94 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f02:	b980      	cbnz	r0, 8002f26 <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002f04:	9b01      	ldr	r3, [sp, #4]
 8002f06:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002f0a:	d00e      	beq.n	8002f2a <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f0c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002f0e:	0409      	lsls	r1, r1, #16
 8002f10:	6820      	ldr	r0, [r4, #0]
 8002f12:	f001 fc35 	bl	8004780 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f16:	b930      	cbnz	r0, 8002f26 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002f18:	2100      	movs	r1, #0
 8002f1a:	6820      	ldr	r0, [r4, #0]
 8002f1c:	f001 fc48 	bl	80047b0 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f20:	e001      	b.n	8002f26 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002f22:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8002f26:	b002      	add	sp, #8
 8002f28:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002f2a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002f2e:	e7fa      	b.n	8002f26 <SD_WideBus_Disable+0x44>

08002f30 <SD_SendStatus>:
{
 8002f30:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8002f32:	b181      	cbz	r1, 8002f56 <SD_SendStatus+0x26>
 8002f34:	4604      	mov	r4, r0
 8002f36:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f38:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002f3a:	0409      	lsls	r1, r1, #16
 8002f3c:	6800      	ldr	r0, [r0, #0]
 8002f3e:	f001 fc67 	bl	8004810 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f42:	4605      	mov	r5, r0
 8002f44:	b108      	cbz	r0, 8002f4a <SD_SendStatus+0x1a>
}
 8002f46:	4628      	mov	r0, r5
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	6820      	ldr	r0, [r4, #0]
 8002f4e:	f001 fa9b 	bl	8004488 <SDIO_GetResponse>
 8002f52:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8002f54:	e7f7      	b.n	8002f46 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8002f56:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8002f5a:	e7f4      	b.n	8002f46 <SD_SendStatus+0x16>

08002f5c <HAL_SD_ReadBlocks_DMA>:
{
 8002f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f60:	b087      	sub	sp, #28
 8002f62:	4604      	mov	r4, r0
  if(NULL == pData)
 8002f64:	b191      	cbz	r1, 8002f8c <HAL_SD_ReadBlocks_DMA+0x30>
 8002f66:	4616      	mov	r6, r2
 8002f68:	461f      	mov	r7, r3
 8002f6a:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8002f6c:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8002f70:	b2ed      	uxtb	r5, r5
 8002f72:	2d01      	cmp	r5, #1
 8002f74:	d17d      	bne.n	8003072 <HAL_SD_ReadBlocks_DMA+0x116>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f7a:	19f0      	adds	r0, r6, r7
 8002f7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f7e:	4298      	cmp	r0, r3
 8002f80:	d90a      	bls.n	8002f98 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f88:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8002f8a:	e073      	b.n	8003074 <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002f8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f92:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8002f94:	2501      	movs	r5, #1
 8002f96:	e06d      	b.n	8003074 <HAL_SD_ReadBlocks_DMA+0x118>
    hsd->State = HAL_SD_STATE_BUSY;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8002f9e:	6821      	ldr	r1, [r4, #0]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62cb      	str	r3, [r1, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002fa4:	6820      	ldr	r0, [r4, #0]
 8002fa6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002fa8:	f441 7195 	orr.w	r1, r1, #298	; 0x12a
 8002fac:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002fae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002fb0:	4833      	ldr	r0, [pc, #204]	; (8003080 <HAL_SD_ReadBlocks_DMA+0x124>)
 8002fb2:	63c8      	str	r0, [r1, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002fb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002fb6:	4833      	ldr	r0, [pc, #204]	; (8003084 <HAL_SD_ReadBlocks_DMA+0x128>)
 8002fb8:	64c8      	str	r0, [r1, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8002fba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002fbc:	650b      	str	r3, [r1, #80]	; 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002fc0:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002fc2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002fc4:	6801      	ldr	r1, [r0, #0]
 8002fc6:	680b      	ldr	r3, [r1, #0]
 8002fc8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fcc:	6880      	ldr	r0, [r0, #8]
 8002fce:	4303      	orrs	r3, r0
 8002fd0:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002fd2:	6821      	ldr	r1, [r4, #0]
 8002fd4:	ea4f 2947 	mov.w	r9, r7, lsl #9
 8002fd8:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8002fdc:	3180      	adds	r1, #128	; 0x80
 8002fde:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002fe0:	f7fe fc38 	bl	8001854 <HAL_DMA_Start_IT>
 8002fe4:	4680      	mov	r8, r0
 8002fe6:	bb68      	cbnz	r0, 8003044 <HAL_SD_ReadBlocks_DMA+0xe8>
      __HAL_SD_DMA_ENABLE(hsd);
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ff0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d000      	beq.n	8002ff8 <HAL_SD_ReadBlocks_DMA+0x9c>
        add *= 512U;
 8002ff6:	0276      	lsls	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002ffe:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003002:	2390      	movs	r3, #144	; 0x90
 8003004:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003006:	2302      	movs	r3, #2
 8003008:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800300a:	2300      	movs	r3, #0
 800300c:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800300e:	2301      	movs	r3, #1
 8003010:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003012:	4669      	mov	r1, sp
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	f001 fa3a 	bl	800448e <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 800301a:	2f01      	cmp	r7, #1
 800301c:	d922      	bls.n	8003064 <HAL_SD_ReadBlocks_DMA+0x108>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800301e:	2382      	movs	r3, #130	; 0x82
 8003020:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003022:	4631      	mov	r1, r6
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	f001 fb31 	bl	800468c <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 800302a:	b338      	cbz	r0, 800307c <HAL_SD_ReadBlocks_DMA+0x120>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <HAL_SD_ReadBlocks_DMA+0x130>)
 8003030:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003032:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003034:	4318      	orrs	r0, r3
 8003036:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003038:	2301      	movs	r3, #1
 800303a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800303e:	2300      	movs	r3, #0
 8003040:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8003042:	e017      	b.n	8003074 <HAL_SD_ReadBlocks_DMA+0x118>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003044:	6822      	ldr	r2, [r4, #0]
 8003046:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003048:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 800304c:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_SD_ReadBlocks_DMA+0x130>)
 8003052:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003056:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800305a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800305c:	2301      	movs	r3, #1
 800305e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8003062:	e007      	b.n	8003074 <HAL_SD_ReadBlocks_DMA+0x118>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003064:	2381      	movs	r3, #129	; 0x81
 8003066:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003068:	4631      	mov	r1, r6
 800306a:	6820      	ldr	r0, [r4, #0]
 800306c:	f001 faf6 	bl	800465c <SDMMC_CmdReadSingleBlock>
 8003070:	e7db      	b.n	800302a <HAL_SD_ReadBlocks_DMA+0xce>
    return HAL_BUSY;
 8003072:	2502      	movs	r5, #2
}
 8003074:	4628      	mov	r0, r5
 8003076:	b007      	add	sp, #28
 8003078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 800307c:	4645      	mov	r5, r8
 800307e:	e7f9      	b.n	8003074 <HAL_SD_ReadBlocks_DMA+0x118>
 8003080:	080031c3 	.word	0x080031c3
 8003084:	080036ad 	.word	0x080036ad
 8003088:	42258000 	.word	0x42258000
 800308c:	004005ff 	.word	0x004005ff

08003090 <HAL_SD_WriteBlocks_DMA>:
{
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b087      	sub	sp, #28
 8003094:	4604      	mov	r4, r0
  if(NULL == pData)
 8003096:	2900      	cmp	r1, #0
 8003098:	d038      	beq.n	800310c <HAL_SD_WriteBlocks_DMA+0x7c>
 800309a:	461e      	mov	r6, r3
 800309c:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 800309e:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 80030a2:	b2ed      	uxtb	r5, r5
 80030a4:	2d01      	cmp	r5, #1
 80030a6:	d17f      	bne.n	80031a8 <HAL_SD_WriteBlocks_DMA+0x118>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030ac:	1993      	adds	r3, r2, r6
 80030ae:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80030b0:	428b      	cmp	r3, r1
 80030b2:	d831      	bhi.n	8003118 <HAL_SD_WriteBlocks_DMA+0x88>
    hsd->State = HAL_SD_STATE_BUSY;
 80030b4:	2303      	movs	r3, #3
 80030b6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80030ba:	6803      	ldr	r3, [r0, #0]
 80030bc:	2100      	movs	r1, #0
 80030be:	62d9      	str	r1, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80030c0:	6800      	ldr	r0, [r0, #0]
 80030c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80030c4:	f043 031a 	orr.w	r3, r3, #26
 80030c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80030ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030cc:	4838      	ldr	r0, [pc, #224]	; (80031b0 <HAL_SD_WriteBlocks_DMA+0x120>)
 80030ce:	63d8      	str	r0, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80030d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030d2:	4838      	ldr	r0, [pc, #224]	; (80031b4 <HAL_SD_WriteBlocks_DMA+0x124>)
 80030d4:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 80030d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030d8:	6519      	str	r1, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d000      	beq.n	80030e2 <HAL_SD_WriteBlocks_DMA+0x52>
      add *= 512U;
 80030e0:	0252      	lsls	r2, r2, #9
    if(NumberOfBlocks > 1U)
 80030e2:	2e01      	cmp	r6, #1
 80030e4:	d91d      	bls.n	8003122 <HAL_SD_WriteBlocks_DMA+0x92>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80030e6:	23a0      	movs	r3, #160	; 0xa0
 80030e8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80030ea:	4611      	mov	r1, r2
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	f001 fafd 	bl	80046ec <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80030f2:	b1e8      	cbz	r0, 8003130 <HAL_SD_WriteBlocks_DMA+0xa0>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <HAL_SD_WriteBlocks_DMA+0x128>)
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80030fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030fc:	4318      	orrs	r0, r3
 80030fe:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003100:	2301      	movs	r3, #1
 8003102:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003106:	2300      	movs	r3, #0
 8003108:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800310a:	e04e      	b.n	80031aa <HAL_SD_WriteBlocks_DMA+0x11a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800310c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800310e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003112:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8003114:	2501      	movs	r5, #1
 8003116:	e048      	b.n	80031aa <HAL_SD_WriteBlocks_DMA+0x11a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003118:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800311a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800311e:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8003120:	e043      	b.n	80031aa <HAL_SD_WriteBlocks_DMA+0x11a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003122:	2390      	movs	r3, #144	; 0x90
 8003124:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003126:	4611      	mov	r1, r2
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	f001 fac7 	bl	80046bc <SDMMC_CmdWriteSingleBlock>
 800312e:	e7e0      	b.n	80030f2 <HAL_SD_WriteBlocks_DMA+0x62>
    __HAL_SD_DMA_ENABLE(hsd);
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <HAL_SD_WriteBlocks_DMA+0x12c>)
 8003132:	2201      	movs	r2, #1
 8003134:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003138:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800313a:	2240      	movs	r2, #64	; 0x40
 800313c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800313e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003140:	680a      	ldr	r2, [r1, #0]
 8003142:	6813      	ldr	r3, [r2, #0]
 8003144:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003148:	6889      	ldr	r1, [r1, #8]
 800314a:	430b      	orrs	r3, r1
 800314c:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	0276      	lsls	r6, r6, #9
 8003152:	08b3      	lsrs	r3, r6, #2
 8003154:	3280      	adds	r2, #128	; 0x80
 8003156:	4639      	mov	r1, r7
 8003158:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800315a:	f7fe fb7b 	bl	8001854 <HAL_DMA_Start_IT>
 800315e:	4607      	mov	r7, r0
 8003160:	b188      	cbz	r0, 8003186 <HAL_SD_WriteBlocks_DMA+0xf6>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8003162:	6822      	ldr	r2, [r4, #0]
 8003164:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003166:	f023 031a 	bic.w	r3, r3, #26
 800316a:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <HAL_SD_WriteBlocks_DMA+0x128>)
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003178:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800317a:	2301      	movs	r3, #1
 800317c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003180:	2300      	movs	r3, #0
 8003182:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8003184:	e011      	b.n	80031aa <HAL_SD_WriteBlocks_DMA+0x11a>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800318c:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800318e:	2390      	movs	r3, #144	; 0x90
 8003190:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003192:	2300      	movs	r3, #0
 8003194:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003196:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003198:	2301      	movs	r3, #1
 800319a:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800319c:	4669      	mov	r1, sp
 800319e:	6820      	ldr	r0, [r4, #0]
 80031a0:	f001 f975 	bl	800448e <SDIO_ConfigData>
      return HAL_OK;
 80031a4:	463d      	mov	r5, r7
 80031a6:	e000      	b.n	80031aa <HAL_SD_WriteBlocks_DMA+0x11a>
    return HAL_BUSY;
 80031a8:	2502      	movs	r5, #2
}
 80031aa:	4628      	mov	r0, r5
 80031ac:	b007      	add	sp, #28
 80031ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b0:	08002c47 	.word	0x08002c47
 80031b4:	080036ad 	.word	0x080036ad
 80031b8:	004005ff 	.word	0x004005ff
 80031bc:	42258000 	.word	0x42258000

080031c0 <HAL_SD_ErrorCallback>:
}
 80031c0:	4770      	bx	lr

080031c2 <SD_DMAReceiveCplt>:
{
 80031c2:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031c4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80031c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031c8:	2b82      	cmp	r3, #130	; 0x82
 80031ca:	d011      	beq.n	80031f0 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80031cc:	6822      	ldr	r2, [r4, #0]
 80031ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80031d0:	f023 0308 	bic.w	r3, r3, #8
 80031d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80031de:	2301      	movs	r3, #1
 80031e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 80031e8:	4620      	mov	r0, r4
 80031ea:	f006 f8a6 	bl	800933a <HAL_SD_RxCpltCallback>
}
 80031ee:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031f0:	6820      	ldr	r0, [r4, #0]
 80031f2:	f001 fa93 	bl	800471c <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80031f6:	4603      	mov	r3, r0
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d0e7      	beq.n	80031cc <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 80031fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031fe:	4313      	orrs	r3, r2
 8003200:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8003202:	4620      	mov	r0, r4
 8003204:	f7ff ffdc 	bl	80031c0 <HAL_SD_ErrorCallback>
 8003208:	e7e0      	b.n	80031cc <SD_DMAReceiveCplt+0xa>
	...

0800320c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800320c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800320e:	0f9b      	lsrs	r3, r3, #30
 8003210:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003212:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003214:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8003218:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800321a:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003224:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8003228:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800322a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 800322e:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003230:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8003234:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003236:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003238:	0d1b      	lsrs	r3, r3, #20
 800323a:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800323c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003246:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003248:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800324c:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800324e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003250:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8003254:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003256:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003258:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800325c:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800325e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003260:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8003264:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003266:	2300      	movs	r3, #0
 8003268:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800326a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 8086 	bne.w	800337e <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003272:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003274:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003278:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800327c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800327e:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8003282:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003284:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003286:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 800328a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800328c:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003296:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003298:	f3c3 5342 	ubfx	r3, r3, #21, #3
 800329c:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800329e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80032a0:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80032a4:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80032a6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80032a8:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80032ac:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80032ae:	690b      	ldr	r3, [r1, #16]
 80032b0:	3301      	adds	r3, #1
 80032b2:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80032b4:	7e0a      	ldrb	r2, [r1, #24]
 80032b6:	f002 0207 	and.w	r2, r2, #7
 80032ba:	3202      	adds	r2, #2
 80032bc:	4093      	lsls	r3, r2
 80032be:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80032c0:	7a0a      	ldrb	r2, [r1, #8]
 80032c2:	f002 0c0f 	and.w	ip, r2, #15
 80032c6:	2201      	movs	r2, #1
 80032c8:	fa02 f20c 	lsl.w	r2, r2, ip
 80032cc:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80032ce:	0a52      	lsrs	r2, r2, #9
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80032d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032da:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80032dc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80032de:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80032e2:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80032e4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80032e6:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80032ea:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80032ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80032ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032f2:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80032f4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80032f6:	0fdb      	lsrs	r3, r3, #31
 80032f8:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80032fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80032fc:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8003300:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003302:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003304:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8003308:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800330a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800330c:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8003310:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003312:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003314:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8003318:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003322:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8003326:	f002 0201 	and.w	r2, r2, #1
 800332a:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800332e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003330:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8003334:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003338:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800333a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800333e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003342:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003344:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003348:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800334c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800334e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8003352:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003356:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003358:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800335c:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003360:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003362:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8003366:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800336a:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800336c:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8003370:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003374:	2201      	movs	r2, #1
 8003376:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 800337a:	4618      	mov	r0, r3
}
 800337c:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800337e:	2b01      	cmp	r3, #1
 8003380:	d111      	bne.n	80033a6 <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003382:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800338a:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 800338e:	4313      	orrs	r3, r2
 8003390:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003392:	690b      	ldr	r3, [r1, #16]
 8003394:	3301      	adds	r3, #1
 8003396:	029b      	lsls	r3, r3, #10
 8003398:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800339a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800339c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a0:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80033a2:	6603      	str	r3, [r0, #96]	; 0x60
 80033a4:	e79a      	b.n	80032dc <HAL_SD_GetCardCSD+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033a6:	6803      	ldr	r3, [r0, #0]
 80033a8:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <HAL_SD_GetCardCSD+0x1b4>)
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80033ba:	4618      	mov	r0, r3
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	004005ff 	.word	0x004005ff

080033c4 <SD_InitCard>:
{
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	b090      	sub	sp, #64	; 0x40
 80033c8:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80033d0:	6800      	ldr	r0, [r0, #0]
 80033d2:	f001 f840 	bl	8004456 <SDIO_GetPowerState>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d06c      	beq.n	80034b4 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d145      	bne.n	800346c <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d15d      	bne.n	80034a2 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d01d      	beq.n	8003428 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80033ec:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80033f0:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033f2:	0409      	lsls	r1, r1, #16
 80033f4:	6820      	ldr	r0, [r4, #0]
 80033f6:	f001 fa66 	bl	80048c6 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80033fa:	4605      	mov	r5, r0
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d15b      	bne.n	80034b8 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003400:	2100      	movs	r1, #0
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	f001 f840 	bl	8004488 <SDIO_GetResponse>
 8003408:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800340a:	2104      	movs	r1, #4
 800340c:	6820      	ldr	r0, [r4, #0]
 800340e:	f001 f83b 	bl	8004488 <SDIO_GetResponse>
 8003412:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003414:	2108      	movs	r1, #8
 8003416:	6820      	ldr	r0, [r4, #0]
 8003418:	f001 f836 	bl	8004488 <SDIO_GetResponse>
 800341c:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800341e:	210c      	movs	r1, #12
 8003420:	6820      	ldr	r0, [r4, #0]
 8003422:	f001 f831 	bl	8004488 <SDIO_GetResponse>
 8003426:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003428:	2104      	movs	r1, #4
 800342a:	6820      	ldr	r0, [r4, #0]
 800342c:	f001 f82c 	bl	8004488 <SDIO_GetResponse>
 8003430:	0d00      	lsrs	r0, r0, #20
 8003432:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003434:	a905      	add	r1, sp, #20
 8003436:	4620      	mov	r0, r4
 8003438:	f7ff fee8 	bl	800320c <HAL_SD_GetCardCSD>
 800343c:	2800      	cmp	r0, #0
 800343e:	d13e      	bne.n	80034be <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003440:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003442:	0412      	lsls	r2, r2, #16
 8003444:	2300      	movs	r3, #0
 8003446:	6820      	ldr	r0, [r4, #0]
 8003448:	f001 f982 	bl	8004750 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800344c:	4605      	mov	r5, r0
 800344e:	bb98      	cbnz	r0, 80034b8 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003450:	4623      	mov	r3, r4
 8003452:	f853 6b10 	ldr.w	r6, [r3], #16
 8003456:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800345a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800345e:	3404      	adds	r4, #4
 8003460:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003464:	4630      	mov	r0, r6
 8003466:	f000 ffd1 	bl	800440c <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 800346a:	e025      	b.n	80034b8 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	f001 fa15 	bl	800489c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003472:	4605      	mov	r5, r0
 8003474:	bb00      	cbnz	r0, 80034b8 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003476:	2100      	movs	r1, #0
 8003478:	6820      	ldr	r0, [r4, #0]
 800347a:	f001 f805 	bl	8004488 <SDIO_GetResponse>
 800347e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003480:	2104      	movs	r1, #4
 8003482:	6820      	ldr	r0, [r4, #0]
 8003484:	f001 f800 	bl	8004488 <SDIO_GetResponse>
 8003488:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800348a:	2108      	movs	r1, #8
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	f000 fffb 	bl	8004488 <SDIO_GetResponse>
 8003492:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003494:	210c      	movs	r1, #12
 8003496:	6820      	ldr	r0, [r4, #0]
 8003498:	f000 fff6 	bl	8004488 <SDIO_GetResponse>
 800349c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80034a0:	e79e      	b.n	80033e0 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80034a2:	f10d 0112 	add.w	r1, sp, #18
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	f001 fab2 	bl	8004a10 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80034ac:	4605      	mov	r5, r0
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d099      	beq.n	80033e6 <SD_InitCard+0x22>
 80034b2:	e001      	b.n	80034b8 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034b4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 80034b8:	4628      	mov	r0, r5
 80034ba:	b010      	add	sp, #64	; 0x40
 80034bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034be:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80034c2:	e7f9      	b.n	80034b8 <SD_InitCard+0xf4>

080034c4 <HAL_SD_InitCard>:
{
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80034ca:	2300      	movs	r3, #0
 80034cc:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80034ce:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80034d0:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80034d2:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80034d4:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80034d6:	2376      	movs	r3, #118	; 0x76
 80034d8:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 80034da:	ab0a      	add	r3, sp, #40	; 0x28
 80034dc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80034e0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80034e4:	ab04      	add	r3, sp, #16
 80034e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034e8:	6820      	ldr	r0, [r4, #0]
 80034ea:	f000 ff8f 	bl	800440c <SDIO_Init>
  if(status != HAL_OK)
 80034ee:	b118      	cbz	r0, 80034f8 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 80034f0:	2501      	movs	r5, #1
}
 80034f2:	4628      	mov	r0, r5
 80034f4:	b00a      	add	sp, #40	; 0x28
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
 80034f8:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 80034fa:	4e1a      	ldr	r6, [pc, #104]	; (8003564 <HAL_SD_InitCard+0xa0>)
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	f000 ffa3 	bl	800444e <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8003508:	2301      	movs	r3, #1
 800350a:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  HAL_Delay(2);
 800350e:	2002      	movs	r0, #2
 8003510:	f7fd fd54 	bl	8000fbc <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff fb9d 	bl	8002c54 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 800351a:	b130      	cbz	r0, 800352a <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 800351c:	2501      	movs	r5, #1
 800351e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003522:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003524:	4303      	orrs	r3, r0
 8003526:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003528:	e7e3      	b.n	80034f2 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 800352a:	4620      	mov	r0, r4
 800352c:	f7ff ff4a 	bl	80033c4 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003530:	b130      	cbz	r0, 8003540 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8003532:	2501      	movs	r5, #1
 8003534:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800353a:	4303      	orrs	r3, r0
 800353c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800353e:	e7d8      	b.n	80034f2 <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	f001 f871 	bl	800462c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800354a:	2800      	cmp	r0, #0
 800354c:	d0d1      	beq.n	80034f2 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	4905      	ldr	r1, [pc, #20]	; (8003568 <HAL_SD_InitCard+0xa4>)
 8003552:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003556:	4303      	orrs	r3, r0
 8003558:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800355a:	2501      	movs	r5, #1
 800355c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8003560:	e7c7      	b.n	80034f2 <HAL_SD_InitCard+0x2e>
 8003562:	bf00      	nop
 8003564:	42258000 	.word	0x42258000
 8003568:	004005ff 	.word	0x004005ff

0800356c <HAL_SD_Init>:
  if(hsd == NULL)
 800356c:	b1a8      	cbz	r0, 800359a <HAL_SD_Init+0x2e>
{
 800356e:	b510      	push	{r4, lr}
 8003570:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8003572:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003576:	b163      	cbz	r3, 8003592 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8003578:	2303      	movs	r3, #3
 800357a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800357e:	4620      	mov	r0, r4
 8003580:	f7ff ffa0 	bl	80034c4 <HAL_SD_InitCard>
 8003584:	b958      	cbnz	r0, 800359e <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003586:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003588:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800358a:	2301      	movs	r3, #1
 800358c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003590:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8003592:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003594:	f006 fc3c 	bl	8009e10 <HAL_SD_MspInit>
 8003598:	e7ee      	b.n	8003578 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 800359a:	2001      	movs	r0, #1
}
 800359c:	4770      	bx	lr
    return HAL_ERROR;
 800359e:	2001      	movs	r0, #1
 80035a0:	e7f6      	b.n	8003590 <HAL_SD_Init+0x24>

080035a2 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80035a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80035a4:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80035a6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80035a8:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80035aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80035ac:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80035ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80035b0:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80035b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80035b4:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80035b6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80035b8:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80035ba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80035bc:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80035be:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80035c0:	61cb      	str	r3, [r1, #28]
}
 80035c2:	2000      	movs	r0, #0
 80035c4:	4770      	bx	lr
	...

080035c8 <HAL_SD_ConfigWideBusOperation>:
{
 80035c8:	b530      	push	{r4, r5, lr}
 80035ca:	b08b      	sub	sp, #44	; 0x2c
 80035cc:	4604      	mov	r4, r0
 80035ce:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80035d0:	2303      	movs	r3, #3
 80035d2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80035d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d01c      	beq.n	8003616 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80035dc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80035e0:	d008      	beq.n	80035f4 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80035e2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80035e6:	d00a      	beq.n	80035fe <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80035e8:	b179      	cbz	r1, 800360a <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80035ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035f0:	6383      	str	r3, [r0, #56]	; 0x38
 80035f2:	e014      	b.n	800361e <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80035f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fa:	6383      	str	r3, [r0, #56]	; 0x38
 80035fc:	e00f      	b.n	800361e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 80035fe:	f7ff fc49 	bl	8002e94 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8003602:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003604:	4303      	orrs	r3, r0
 8003606:	63a3      	str	r3, [r4, #56]	; 0x38
 8003608:	e009      	b.n	800361e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800360a:	f7ff fc6a 	bl	8002ee2 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 800360e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003610:	4303      	orrs	r3, r0
 8003612:	63a3      	str	r3, [r4, #56]	; 0x38
 8003614:	e003      	b.n	800361e <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003616:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361c:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800361e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003620:	b1c3      	cbz	r3, 8003654 <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	4a17      	ldr	r2, [pc, #92]	; (8003684 <HAL_SD_ConfigWideBusOperation+0xbc>)
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003628:	2501      	movs	r5, #1
 800362a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800362e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	f000 fffa 	bl	800462c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003638:	b130      	cbz	r0, 8003648 <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	4911      	ldr	r1, [pc, #68]	; (8003684 <HAL_SD_ConfigWideBusOperation+0xbc>)
 800363e:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003642:	4303      	orrs	r3, r0
 8003644:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8003646:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8003648:	2301      	movs	r3, #1
 800364a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800364e:	4628      	mov	r0, r5
 8003650:	b00b      	add	sp, #44	; 0x2c
 8003652:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003654:	6863      	ldr	r3, [r4, #4]
 8003656:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003658:	68a3      	ldr	r3, [r4, #8]
 800365a:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800365c:	68e3      	ldr	r3, [r4, #12]
 800365e:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8003660:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003662:	6963      	ldr	r3, [r4, #20]
 8003664:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003666:	69a3      	ldr	r3, [r4, #24]
 8003668:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 800366a:	ab0a      	add	r3, sp, #40	; 0x28
 800366c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003670:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003674:	ab04      	add	r3, sp, #16
 8003676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003678:	6820      	ldr	r0, [r4, #0]
 800367a:	f000 fec7 	bl	800440c <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2500      	movs	r5, #0
 8003680:	e7d5      	b.n	800362e <HAL_SD_ConfigWideBusOperation+0x66>
 8003682:	bf00      	nop
 8003684:	004005ff 	.word	0x004005ff

08003688 <HAL_SD_GetCardState>:
{
 8003688:	b510      	push	{r4, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8003692:	a901      	add	r1, sp, #4
 8003694:	f7ff fc4c 	bl	8002f30 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003698:	b110      	cbz	r0, 80036a0 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 800369a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800369c:	4303      	orrs	r3, r0
 800369e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80036a0:	9801      	ldr	r0, [sp, #4]
 80036a2:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80036a6:	b002      	add	sp, #8
 80036a8:	bd10      	pop	{r4, pc}
	...

080036ac <SD_DMAError>:
{
 80036ac:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80036ae:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80036b0:	f7fe fa06 	bl	8001ac0 <HAL_DMA_GetError>
 80036b4:	2802      	cmp	r0, #2
 80036b6:	d00a      	beq.n	80036ce <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80036b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80036bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80036be:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d005      	beq.n	80036d0 <SD_DMAError+0x24>
 80036c4:	2a01      	cmp	r2, #1
 80036c6:	d003      	beq.n	80036d0 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7ff fd79 	bl	80031c0 <HAL_SD_ErrorCallback>
}
 80036ce:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <SD_DMAError+0x64>)
 80036d4:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80036d6:	6822      	ldr	r2, [r4, #0]
 80036d8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80036da:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 80036de:	63d3      	str	r3, [r2, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80036e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036e6:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80036e8:	4620      	mov	r0, r4
 80036ea:	f7ff ffcd 	bl	8003688 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80036ee:	3805      	subs	r0, #5
 80036f0:	2801      	cmp	r0, #1
 80036f2:	d905      	bls.n	8003700 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	6323      	str	r3, [r4, #48]	; 0x30
 80036fe:	e7e3      	b.n	80036c8 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	f001 f80b 	bl	800471c <SDMMC_CmdStopTransfer>
 8003706:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003708:	4303      	orrs	r3, r0
 800370a:	63a3      	str	r3, [r4, #56]	; 0x38
 800370c:	e7f2      	b.n	80036f4 <SD_DMAError+0x48>
 800370e:	bf00      	nop
 8003710:	004005ff 	.word	0x004005ff

08003714 <SD_DMATxAbort>:
{
 8003714:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003716:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	f240 523a 	movw	r2, #1338	; 0x53a
 800371e:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003720:	4620      	mov	r0, r4
 8003722:	f7ff ffb1 	bl	8003688 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8003726:	2301      	movs	r3, #1
 8003728:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800372c:	2300      	movs	r3, #0
 800372e:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003730:	3805      	subs	r0, #5
 8003732:	2801      	cmp	r0, #1
 8003734:	d905      	bls.n	8003742 <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003738:	b953      	cbnz	r3, 8003750 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 800373a:	4620      	mov	r0, r4
 800373c:	f005 fdf5 	bl	800932a <HAL_SD_AbortCallback>
}
 8003740:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003742:	6820      	ldr	r0, [r4, #0]
 8003744:	f000 ffea 	bl	800471c <SDMMC_CmdStopTransfer>
 8003748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800374a:	4303      	orrs	r3, r0
 800374c:	63a3      	str	r3, [r4, #56]	; 0x38
 800374e:	e7f2      	b.n	8003736 <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003750:	4620      	mov	r0, r4
 8003752:	f7ff fd35 	bl	80031c0 <HAL_SD_ErrorCallback>
}
 8003756:	e7f3      	b.n	8003740 <SD_DMATxAbort+0x2c>

08003758 <SD_DMARxAbort>:
{
 8003758:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800375a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8003764:	4620      	mov	r0, r4
 8003766:	f7ff ff8f 	bl	8003688 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 800376a:	2301      	movs	r3, #1
 800376c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003770:	2300      	movs	r3, #0
 8003772:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003774:	3805      	subs	r0, #5
 8003776:	2801      	cmp	r0, #1
 8003778:	d905      	bls.n	8003786 <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800377a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800377c:	b953      	cbnz	r3, 8003794 <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 800377e:	4620      	mov	r0, r4
 8003780:	f005 fdd3 	bl	800932a <HAL_SD_AbortCallback>
}
 8003784:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003786:	6820      	ldr	r0, [r4, #0]
 8003788:	f000 ffc8 	bl	800471c <SDMMC_CmdStopTransfer>
 800378c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800378e:	4303      	orrs	r3, r0
 8003790:	63a3      	str	r3, [r4, #56]	; 0x38
 8003792:	e7f2      	b.n	800377a <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff fd13 	bl	80031c0 <HAL_SD_ErrorCallback>
}
 800379a:	e7f3      	b.n	8003784 <SD_DMARxAbort+0x2c>

0800379c <HAL_SD_IRQHandler>:
{
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 80037a0:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80037a2:	6803      	ldr	r3, [r0, #0]
 80037a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80037aa:	d002      	beq.n	80037b2 <HAL_SD_IRQHandler+0x16>
 80037ac:	f015 0f08 	tst.w	r5, #8
 80037b0:	d128      	bne.n	8003804 <HAL_SD_IRQHandler+0x68>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80037b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80037b8:	d05a      	beq.n	8003870 <HAL_SD_IRQHandler+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80037ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80037c0:	6822      	ldr	r2, [r4, #0]
 80037c2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80037c4:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80037c8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80037cc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 80037d8:	f015 0f08 	tst.w	r5, #8
 80037dc:	d026      	beq.n	800382c <HAL_SD_IRQHandler+0x90>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80037de:	f015 0f22 	tst.w	r5, #34	; 0x22
 80037e2:	d112      	bne.n	800380a <HAL_SD_IRQHandler+0x6e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80037f6:	f015 0f03 	tst.w	r5, #3
 80037fa:	d013      	beq.n	8003824 <HAL_SD_IRQHandler+0x88>
        HAL_SD_RxCpltCallback(hsd);
 80037fc:	4620      	mov	r0, r4
 80037fe:	f005 fd9c 	bl	800933a <HAL_SD_RxCpltCallback>
 8003802:	e001      	b.n	8003808 <HAL_SD_IRQHandler+0x6c>
    SD_Read_IT(hsd);
 8003804:	f7ff fa86 	bl	8002d14 <SD_Read_IT>
}
 8003808:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800380a:	6820      	ldr	r0, [r4, #0]
 800380c:	f000 ff86 	bl	800471c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003810:	4603      	mov	r3, r0
 8003812:	2800      	cmp	r0, #0
 8003814:	d0e6      	beq.n	80037e4 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8003816:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003818:	4313      	orrs	r3, r2
 800381a:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800381c:	4620      	mov	r0, r4
 800381e:	f7ff fccf 	bl	80031c0 <HAL_SD_ErrorCallback>
 8003822:	e7df      	b.n	80037e4 <HAL_SD_IRQHandler+0x48>
        HAL_SD_TxCpltCallback(hsd);
 8003824:	4620      	mov	r0, r4
 8003826:	f005 fd84 	bl	8009332 <HAL_SD_TxCpltCallback>
 800382a:	e7ed      	b.n	8003808 <HAL_SD_IRQHandler+0x6c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800382c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003830:	d0ea      	beq.n	8003808 <HAL_SD_IRQHandler+0x6c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003832:	f015 0f20 	tst.w	r5, #32
 8003836:	d10e      	bne.n	8003856 <HAL_SD_IRQHandler+0xba>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003838:	f015 0f03 	tst.w	r5, #3
 800383c:	d1e4      	bne.n	8003808 <HAL_SD_IRQHandler+0x6c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800383e:	6822      	ldr	r2, [r4, #0]
 8003840:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003842:	f023 0308 	bic.w	r3, r3, #8
 8003846:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003848:	2301      	movs	r3, #1
 800384a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800384e:	4620      	mov	r0, r4
 8003850:	f005 fd6f 	bl	8009332 <HAL_SD_TxCpltCallback>
 8003854:	e7d8      	b.n	8003808 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003856:	6820      	ldr	r0, [r4, #0]
 8003858:	f000 ff60 	bl	800471c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800385c:	4603      	mov	r3, r0
 800385e:	2800      	cmp	r0, #0
 8003860:	d0ea      	beq.n	8003838 <HAL_SD_IRQHandler+0x9c>
          hsd->ErrorCode |= errorstate;
 8003862:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003864:	4313      	orrs	r3, r2
 8003866:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff fca9 	bl	80031c0 <HAL_SD_ErrorCallback>
 800386e:	e7e3      	b.n	8003838 <HAL_SD_IRQHandler+0x9c>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003872:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003876:	d002      	beq.n	800387e <HAL_SD_IRQHandler+0xe2>
 8003878:	f015 0f08 	tst.w	r5, #8
 800387c:	d14a      	bne.n	8003914 <HAL_SD_IRQHandler+0x178>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800387e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003880:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 8003884:	d0c0      	beq.n	8003808 <HAL_SD_IRQHandler+0x6c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003888:	f012 0f02 	tst.w	r2, #2
 800388c:	d003      	beq.n	8003896 <HAL_SD_IRQHandler+0xfa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800388e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003890:	f042 0202 	orr.w	r2, r2, #2
 8003894:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003898:	f012 0f08 	tst.w	r2, #8
 800389c:	d003      	beq.n	80038a6 <HAL_SD_IRQHandler+0x10a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800389e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80038a0:	f042 0208 	orr.w	r2, r2, #8
 80038a4:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80038a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a8:	f012 0f20 	tst.w	r2, #32
 80038ac:	d003      	beq.n	80038b6 <HAL_SD_IRQHandler+0x11a>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80038ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80038b0:	f042 0220 	orr.w	r2, r2, #32
 80038b4:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80038b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b8:	f012 0f10 	tst.w	r2, #16
 80038bc:	d003      	beq.n	80038c6 <HAL_SD_IRQHandler+0x12a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80038be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80038c0:	f042 0210 	orr.w	r2, r2, #16
 80038c4:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80038c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80038d0:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 80038d4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	f000 ff20 	bl	800471c <SDMMC_CmdStopTransfer>
 80038dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038de:	4303      	orrs	r3, r0
 80038e0:	63a3      	str	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80038e2:	f015 0f08 	tst.w	r5, #8
 80038e6:	d119      	bne.n	800391c <HAL_SD_IRQHandler+0x180>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80038e8:	f015 0f80 	tst.w	r5, #128	; 0x80
 80038ec:	d08c      	beq.n	8003808 <HAL_SD_IRQHandler+0x6c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80038ee:	f015 0f30 	tst.w	r5, #48	; 0x30
 80038f2:	d11c      	bne.n	800392e <HAL_SD_IRQHandler+0x192>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80038f4:	f015 0f03 	tst.w	r5, #3
 80038f8:	d026      	beq.n	8003948 <HAL_SD_IRQHandler+0x1ac>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80038fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038fc:	4a17      	ldr	r2, [pc, #92]	; (800395c <HAL_SD_IRQHandler+0x1c0>)
 80038fe:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003900:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003902:	f7fd ffdc 	bl	80018be <HAL_DMA_Abort_IT>
 8003906:	2800      	cmp	r0, #0
 8003908:	f43f af7e 	beq.w	8003808 <HAL_SD_IRQHandler+0x6c>
          SD_DMARxAbort(hsd->hdmarx);
 800390c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800390e:	f7ff ff23 	bl	8003758 <SD_DMARxAbort>
 8003912:	e779      	b.n	8003808 <HAL_SD_IRQHandler+0x6c>
    SD_Write_IT(hsd);
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff fa19 	bl	8002d4c <SD_Write_IT>
 800391a:	e775      	b.n	8003808 <HAL_SD_IRQHandler+0x6c>
      hsd->State = HAL_SD_STATE_READY;
 800391c:	2301      	movs	r3, #1
 800391e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003922:	2300      	movs	r3, #0
 8003924:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003926:	4620      	mov	r0, r4
 8003928:	f7ff fc4a 	bl	80031c0 <HAL_SD_ErrorCallback>
 800392c:	e76c      	b.n	8003808 <HAL_SD_IRQHandler+0x6c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800392e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003930:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <HAL_SD_IRQHandler+0x1c4>)
 8003932:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003934:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003936:	f7fd ffc2 	bl	80018be <HAL_DMA_Abort_IT>
 800393a:	2800      	cmp	r0, #0
 800393c:	f43f af64 	beq.w	8003808 <HAL_SD_IRQHandler+0x6c>
          SD_DMATxAbort(hsd->hdmatx);
 8003940:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003942:	f7ff fee7 	bl	8003714 <SD_DMATxAbort>
 8003946:	e75f      	b.n	8003808 <HAL_SD_IRQHandler+0x6c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003948:	2300      	movs	r3, #0
 800394a:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800394c:	2201      	movs	r2, #1
 800394e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003952:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003954:	4620      	mov	r0, r4
 8003956:	f005 fce8 	bl	800932a <HAL_SD_AbortCallback>
}
 800395a:	e755      	b.n	8003808 <HAL_SD_IRQHandler+0x6c>
 800395c:	08003759 	.word	0x08003759
 8003960:	08003715 	.word	0x08003715

08003964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003964:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003966:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003968:	6a04      	ldr	r4, [r0, #32]
 800396a:	f024 0401 	bic.w	r4, r4, #1
 800396e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003970:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003972:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003976:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800397e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003980:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003982:	6203      	str	r3, [r0, #32]
}
 8003984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003988:	4770      	bx	lr

0800398a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800398a:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800398c:	6a04      	ldr	r4, [r0, #32]
 800398e:	f024 0410 	bic.w	r4, r4, #16
 8003992:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003994:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003996:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003998:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800399c:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a0:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039a4:	031b      	lsls	r3, r3, #12
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ac:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039b0:	0109      	lsls	r1, r1, #4
 80039b2:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 80039b6:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039b8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80039ba:	6201      	str	r1, [r0, #32]
}
 80039bc:	bc30      	pop	{r4, r5}
 80039be:	4770      	bx	lr

080039c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c2:	6a04      	ldr	r4, [r0, #32]
 80039c4:	f024 0410 	bic.w	r4, r4, #16
 80039c8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ca:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80039cc:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ce:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039d2:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80039da:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039de:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80039e0:	6203      	str	r3, [r0, #32]
}
 80039e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039e8:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039ea:	6a04      	ldr	r4, [r0, #32]
 80039ec:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80039f0:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039f2:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80039f4:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039f6:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80039fa:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039fe:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a0a:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a0e:	0209      	lsls	r1, r1, #8
 8003a10:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8003a14:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a16:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8003a18:	6201      	str	r1, [r0, #32]
}
 8003a1a:	bc30      	pop	{r4, r5}
 8003a1c:	4770      	bx	lr

08003a1e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a1e:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a20:	6a04      	ldr	r4, [r0, #32]
 8003a22:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003a26:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a28:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003a2a:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a2c:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a30:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a34:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a38:	031b      	lsls	r3, r3, #12
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a40:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a44:	0309      	lsls	r1, r1, #12
 8003a46:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8003a4a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a4c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003a4e:	6201      	str	r1, [r0, #32]
}
 8003a50:	bc30      	pop	{r4, r5}
 8003a52:	4770      	bx	lr

08003a54 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a54:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a60:	6083      	str	r3, [r0, #8]
}
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003a64:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d137      	bne.n	8003ade <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a74:	6802      	ldr	r2, [r0, #0]
 8003a76:	68d3      	ldr	r3, [r2, #12]
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7e:	6803      	ldr	r3, [r0, #0]
 8003a80:	4a19      	ldr	r2, [pc, #100]	; (8003ae8 <HAL_TIM_Base_Start_IT+0x84>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d020      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x64>
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8a:	d01d      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x64>
 8003a8c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d019      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x64>
 8003a94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d015      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x64>
 8003a9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d011      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x64>
 8003aa4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x64>
 8003aac:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x64>
 8003ab4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d005      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ace:	2a06      	cmp	r2, #6
 8003ad0:	d007      	beq.n	8003ae2 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ada:	2000      	movs	r0, #0
 8003adc:	4770      	bx	lr
    return HAL_ERROR;
 8003ade:	2001      	movs	r0, #1
 8003ae0:	4770      	bx	lr
  return HAL_OK;
 8003ae2:	2000      	movs	r0, #0
}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40010000 	.word	0x40010000

08003aec <HAL_TIM_PeriodElapsedCallback>:
}
 8003aec:	4770      	bx	lr

08003aee <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003af0:	4770      	bx	lr

08003af2 <HAL_TIM_TriggerCallback>:
}
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_IRQHandler>:
{
 8003af4:	b510      	push	{r4, lr}
 8003af6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003af8:	6803      	ldr	r3, [r0, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	f012 0f02 	tst.w	r2, #2
 8003b00:	d011      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	f012 0f02 	tst.w	r2, #2
 8003b08:	d00d      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b0a:	f06f 0202 	mvn.w	r2, #2
 8003b0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b10:	2301      	movs	r3, #1
 8003b12:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b14:	6803      	ldr	r3, [r0, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f013 0f03 	tst.w	r3, #3
 8003b1c:	d070      	beq.n	8003c00 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	f006 feb7 	bl	800a890 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	2300      	movs	r3, #0
 8003b24:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	f012 0f04 	tst.w	r2, #4
 8003b2e:	d012      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	f012 0f04 	tst.w	r2, #4
 8003b36:	d00e      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b38:	f06f 0204 	mvn.w	r2, #4
 8003b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003b4a:	d05f      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f006 fe9f 	bl	800a890 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	2300      	movs	r3, #0
 8003b54:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	f012 0f08 	tst.w	r2, #8
 8003b5e:	d012      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	f012 0f08 	tst.w	r2, #8
 8003b66:	d00e      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b68:	f06f 0208 	mvn.w	r2, #8
 8003b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b6e:	2304      	movs	r3, #4
 8003b70:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f013 0f03 	tst.w	r3, #3
 8003b7a:	d04e      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f006 fe87 	bl	800a890 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	2300      	movs	r3, #0
 8003b84:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	f012 0f10 	tst.w	r2, #16
 8003b8e:	d012      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	f012 0f10 	tst.w	r2, #16
 8003b96:	d00e      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b98:	f06f 0210 	mvn.w	r2, #16
 8003b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003baa:	d03d      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bac:	4620      	mov	r0, r4
 8003bae:	f006 fe6f 	bl	800a890 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	f012 0f01 	tst.w	r2, #1
 8003bbe:	d003      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	f012 0f01 	tst.w	r2, #1
 8003bc6:	d136      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003bd8:	d134      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003be2:	d003      	beq.n	8003bec <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003bea:	d132      	bne.n	8003c52 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	f012 0f20 	tst.w	r2, #32
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	f012 0f20 	tst.w	r2, #32
 8003bfc:	d130      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x16c>
}
 8003bfe:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c00:	f7ff ff75 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	4620      	mov	r0, r4
 8003c06:	f7ff ff73 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c0a:	e78a      	b.n	8003b22 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7ff ff6e 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7ff ff6c 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c18:	e79b      	b.n	8003b52 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff ff67 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7ff ff65 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c26:	e7ac      	b.n	8003b82 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7ff ff60 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff ff5e 	bl	8003af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c34:	e7bd      	b.n	8003bb2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c36:	f06f 0201 	mvn.w	r2, #1
 8003c3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7ff ff55 	bl	8003aec <HAL_TIM_PeriodElapsedCallback>
 8003c42:	e7c1      	b.n	8003bc8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f000 fb09 	bl	8004262 <HAL_TIMEx_BreakCallback>
 8003c50:	e7c3      	b.n	8003bda <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c56:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f7ff ff4a 	bl	8003af2 <HAL_TIM_TriggerCallback>
 8003c5e:	e7c5      	b.n	8003bec <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c60:	f06f 0220 	mvn.w	r2, #32
 8003c64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003c66:	4620      	mov	r0, r4
 8003c68:	f000 fafa 	bl	8004260 <HAL_TIMEx_CommutCallback>
}
 8003c6c:	e7c7      	b.n	8003bfe <HAL_TIM_IRQHandler+0x10a>
	...

08003c70 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003c70:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c72:	4a30      	ldr	r2, [pc, #192]	; (8003d34 <TIM_Base_SetConfig+0xc4>)
 8003c74:	4290      	cmp	r0, r2
 8003c76:	d012      	beq.n	8003c9e <TIM_Base_SetConfig+0x2e>
 8003c78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c7c:	d00f      	beq.n	8003c9e <TIM_Base_SetConfig+0x2e>
 8003c7e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003c82:	4290      	cmp	r0, r2
 8003c84:	d00b      	beq.n	8003c9e <TIM_Base_SetConfig+0x2e>
 8003c86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c8a:	4290      	cmp	r0, r2
 8003c8c:	d007      	beq.n	8003c9e <TIM_Base_SetConfig+0x2e>
 8003c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c92:	4290      	cmp	r0, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_Base_SetConfig+0x2e>
 8003c96:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003c9a:	4290      	cmp	r0, r2
 8003c9c:	d103      	bne.n	8003ca6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ca2:	684a      	ldr	r2, [r1, #4]
 8003ca4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca6:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <TIM_Base_SetConfig+0xc4>)
 8003ca8:	4290      	cmp	r0, r2
 8003caa:	d02a      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003cac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003cb0:	d027      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003cb2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003cb6:	4290      	cmp	r0, r2
 8003cb8:	d023      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cbe:	4290      	cmp	r0, r2
 8003cc0:	d01f      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cc6:	4290      	cmp	r0, r2
 8003cc8:	d01b      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003cca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003cce:	4290      	cmp	r0, r2
 8003cd0:	d017      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003cd2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003cd6:	4290      	cmp	r0, r2
 8003cd8:	d013      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cde:	4290      	cmp	r0, r2
 8003ce0:	d00f      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ce6:	4290      	cmp	r0, r2
 8003ce8:	d00b      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003cea:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003cee:	4290      	cmp	r0, r2
 8003cf0:	d007      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cf6:	4290      	cmp	r0, r2
 8003cf8:	d003      	beq.n	8003d02 <TIM_Base_SetConfig+0x92>
 8003cfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cfe:	4290      	cmp	r0, r2
 8003d00:	d103      	bne.n	8003d0a <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d06:	68ca      	ldr	r2, [r1, #12]
 8003d08:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0e:	694a      	ldr	r2, [r1, #20]
 8003d10:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d12:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	688b      	ldr	r3, [r1, #8]
 8003d16:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d18:	680b      	ldr	r3, [r1, #0]
 8003d1a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <TIM_Base_SetConfig+0xc4>)
 8003d1e:	4298      	cmp	r0, r3
 8003d20:	d003      	beq.n	8003d2a <TIM_Base_SetConfig+0xba>
 8003d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d26:	4298      	cmp	r0, r3
 8003d28:	d101      	bne.n	8003d2e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8003d2a:	690b      	ldr	r3, [r1, #16]
 8003d2c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	6143      	str	r3, [r0, #20]
}
 8003d32:	4770      	bx	lr
 8003d34:	40010000 	.word	0x40010000

08003d38 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003d38:	b340      	cbz	r0, 8003d8c <HAL_TIM_Base_Init+0x54>
{
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d42:	b1f3      	cbz	r3, 8003d82 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	2302      	movs	r3, #2
 8003d46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d50:	f7ff ff8e 	bl	8003c70 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003d5e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003d62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003d66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003d7e:	2000      	movs	r0, #0
}
 8003d80:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d86:	f006 fb49 	bl	800a41c <HAL_TIM_Base_MspInit>
 8003d8a:	e7db      	b.n	8003d44 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003d8c:	2001      	movs	r0, #1
}
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003d90:	b340      	cbz	r0, 8003de4 <HAL_TIM_IC_Init+0x54>
{
 8003d92:	b510      	push	{r4, lr}
 8003d94:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d9a:	b1f3      	cbz	r3, 8003dda <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da2:	4621      	mov	r1, r4
 8003da4:	f851 0b04 	ldr.w	r0, [r1], #4
 8003da8:	f7ff ff62 	bl	8003c70 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003db6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003dba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003dbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003dce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003dd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003dd6:	2000      	movs	r0, #0
}
 8003dd8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003dda:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003dde:	f006 fba3 	bl	800a528 <HAL_TIM_IC_MspInit>
 8003de2:	e7db      	b.n	8003d9c <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8003de4:	2001      	movs	r0, #1
}
 8003de6:	4770      	bx	lr

08003de8 <TIM_TI1_SetConfig>:
{
 8003de8:	b470      	push	{r4, r5, r6}
 8003dea:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dec:	6a04      	ldr	r4, [r0, #32]
 8003dee:	f024 0401 	bic.w	r4, r4, #1
 8003df2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df4:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003df6:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003df8:	4d18      	ldr	r5, [pc, #96]	; (8003e5c <TIM_TI1_SetConfig+0x74>)
 8003dfa:	42a8      	cmp	r0, r5
 8003dfc:	d01c      	beq.n	8003e38 <TIM_TI1_SetConfig+0x50>
 8003dfe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e02:	d019      	beq.n	8003e38 <TIM_TI1_SetConfig+0x50>
 8003e04:	4a16      	ldr	r2, [pc, #88]	; (8003e60 <TIM_TI1_SetConfig+0x78>)
 8003e06:	4290      	cmp	r0, r2
 8003e08:	d016      	beq.n	8003e38 <TIM_TI1_SetConfig+0x50>
 8003e0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e0e:	4290      	cmp	r0, r2
 8003e10:	d012      	beq.n	8003e38 <TIM_TI1_SetConfig+0x50>
 8003e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e16:	4290      	cmp	r0, r2
 8003e18:	d00e      	beq.n	8003e38 <TIM_TI1_SetConfig+0x50>
 8003e1a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003e1e:	4290      	cmp	r0, r2
 8003e20:	d00a      	beq.n	8003e38 <TIM_TI1_SetConfig+0x50>
 8003e22:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003e26:	4290      	cmp	r0, r2
 8003e28:	d006      	beq.n	8003e38 <TIM_TI1_SetConfig+0x50>
 8003e2a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e2e:	4290      	cmp	r0, r2
 8003e30:	d002      	beq.n	8003e38 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e32:	f044 0201 	orr.w	r2, r4, #1
 8003e36:	e003      	b.n	8003e40 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e38:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003e3c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e40:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e4a:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e4e:	f001 010a 	and.w	r1, r1, #10
 8003e52:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8003e54:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e56:	6201      	str	r1, [r0, #32]
}
 8003e58:	bc70      	pop	{r4, r5, r6}
 8003e5a:	4770      	bx	lr
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40000400 	.word	0x40000400

08003e64 <HAL_TIM_IC_ConfigChannel>:
{
 8003e64:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003e66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d05a      	beq.n	8003f24 <HAL_TIM_IC_ConfigChannel+0xc0>
 8003e6e:	4604      	mov	r4, r0
 8003e70:	460d      	mov	r5, r1
 8003e72:	2301      	movs	r3, #1
 8003e74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8003e78:	b152      	cbz	r2, 8003e90 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 8003e7a:	2a04      	cmp	r2, #4
 8003e7c:	d01a      	beq.n	8003eb4 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8003e7e:	2a08      	cmp	r2, #8
 8003e80:	d02b      	beq.n	8003eda <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 8003e82:	2a0c      	cmp	r2, #12
 8003e84:	d03b      	beq.n	8003efe <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 8003e86:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8003e90:	68cb      	ldr	r3, [r1, #12]
 8003e92:	684a      	ldr	r2, [r1, #4]
 8003e94:	6809      	ldr	r1, [r1, #0]
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	f7ff ffa6 	bl	8003de8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	6993      	ldr	r3, [r2, #24]
 8003ea0:	f023 030c 	bic.w	r3, r3, #12
 8003ea4:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ea6:	6822      	ldr	r2, [r4, #0]
 8003ea8:	6993      	ldr	r3, [r2, #24]
 8003eaa:	68a9      	ldr	r1, [r5, #8]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	e7e9      	b.n	8003e88 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8003eb4:	68cb      	ldr	r3, [r1, #12]
 8003eb6:	684a      	ldr	r2, [r1, #4]
 8003eb8:	6809      	ldr	r1, [r1, #0]
 8003eba:	6800      	ldr	r0, [r0, #0]
 8003ebc:	f7ff fd65 	bl	800398a <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	6993      	ldr	r3, [r2, #24]
 8003ec4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ec8:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	6993      	ldr	r3, [r2, #24]
 8003ece:	68a9      	ldr	r1, [r5, #8]
 8003ed0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ed4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e7d6      	b.n	8003e88 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8003eda:	68cb      	ldr	r3, [r1, #12]
 8003edc:	684a      	ldr	r2, [r1, #4]
 8003ede:	6809      	ldr	r1, [r1, #0]
 8003ee0:	6800      	ldr	r0, [r0, #0]
 8003ee2:	f7ff fd81 	bl	80039e8 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ee6:	6822      	ldr	r2, [r4, #0]
 8003ee8:	69d3      	ldr	r3, [r2, #28]
 8003eea:	f023 030c 	bic.w	r3, r3, #12
 8003eee:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ef0:	6822      	ldr	r2, [r4, #0]
 8003ef2:	69d3      	ldr	r3, [r2, #28]
 8003ef4:	68a9      	ldr	r1, [r5, #8]
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003efa:	2000      	movs	r0, #0
 8003efc:	e7c4      	b.n	8003e88 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8003efe:	68cb      	ldr	r3, [r1, #12]
 8003f00:	684a      	ldr	r2, [r1, #4]
 8003f02:	6809      	ldr	r1, [r1, #0]
 8003f04:	6800      	ldr	r0, [r0, #0]
 8003f06:	f7ff fd8a 	bl	8003a1e <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	69d3      	ldr	r3, [r2, #28]
 8003f0e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f12:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f14:	6822      	ldr	r2, [r4, #0]
 8003f16:	69d3      	ldr	r3, [r2, #28]
 8003f18:	68a9      	ldr	r1, [r5, #8]
 8003f1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f1e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003f20:	2000      	movs	r0, #0
 8003f22:	e7b1      	b.n	8003e88 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8003f24:	2002      	movs	r0, #2
 8003f26:	e7b2      	b.n	8003e8e <HAL_TIM_IC_ConfigChannel+0x2a>

08003f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f28:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f2c:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f30:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003f34:	430a      	orrs	r2, r1
 8003f36:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3a:	6082      	str	r2, [r0, #8]
}
 8003f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003f42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d078      	beq.n	800403c <HAL_TIM_ConfigClockSource+0xfa>
{
 8003f4a:	b510      	push	{r4, lr}
 8003f4c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	2302      	movs	r3, #2
 8003f56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003f5a:	6802      	ldr	r2, [r0, #0]
 8003f5c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003f66:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f68:	680b      	ldr	r3, [r1, #0]
 8003f6a:	2b60      	cmp	r3, #96	; 0x60
 8003f6c:	d04c      	beq.n	8004008 <HAL_TIM_ConfigClockSource+0xc6>
 8003f6e:	d829      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x82>
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d054      	beq.n	800401e <HAL_TIM_ConfigClockSource+0xdc>
 8003f74:	d90c      	bls.n	8003f90 <HAL_TIM_ConfigClockSource+0x4e>
 8003f76:	2b50      	cmp	r3, #80	; 0x50
 8003f78:	d122      	bne.n	8003fc0 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	68ca      	ldr	r2, [r1, #12]
 8003f7c:	6849      	ldr	r1, [r1, #4]
 8003f7e:	6800      	ldr	r0, [r0, #0]
 8003f80:	f7ff fcf0 	bl	8003964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f84:	2150      	movs	r1, #80	; 0x50
 8003f86:	6820      	ldr	r0, [r4, #0]
 8003f88:	f7ff fd64 	bl	8003a54 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f8c:	2000      	movs	r0, #0
      break;
 8003f8e:	e005      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d00d      	beq.n	8003fb0 <HAL_TIM_ConfigClockSource+0x6e>
 8003f94:	d909      	bls.n	8003faa <HAL_TIM_ConfigClockSource+0x68>
 8003f96:	2b30      	cmp	r3, #48	; 0x30
 8003f98:	d00a      	beq.n	8003fb0 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8003f9a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003fa8:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003faa:	b10b      	cbz	r3, 8003fb0 <HAL_TIM_ConfigClockSource+0x6e>
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d105      	bne.n	8003fbc <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	6820      	ldr	r0, [r4, #0]
 8003fb4:	f7ff fd4e 	bl	8003a54 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2000      	movs	r0, #0
      break;
 8003fba:	e7ef      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	e7ed      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x5a>
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	e7eb      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc8:	d034      	beq.n	8004034 <HAL_TIM_ConfigClockSource+0xf2>
 8003fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fce:	d10c      	bne.n	8003fea <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8003fd0:	68cb      	ldr	r3, [r1, #12]
 8003fd2:	684a      	ldr	r2, [r1, #4]
 8003fd4:	6889      	ldr	r1, [r1, #8]
 8003fd6:	6800      	ldr	r0, [r0, #0]
 8003fd8:	f7ff ffa6 	bl	8003f28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fdc:	6822      	ldr	r2, [r4, #0]
 8003fde:	6893      	ldr	r3, [r2, #8]
 8003fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe6:	2000      	movs	r0, #0
      break;
 8003fe8:	e7d8      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003fea:	2b70      	cmp	r3, #112	; 0x70
 8003fec:	d124      	bne.n	8004038 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003fee:	68cb      	ldr	r3, [r1, #12]
 8003ff0:	684a      	ldr	r2, [r1, #4]
 8003ff2:	6889      	ldr	r1, [r1, #8]
 8003ff4:	6800      	ldr	r0, [r0, #0]
 8003ff6:	f7ff ff97 	bl	8003f28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ffa:	6822      	ldr	r2, [r4, #0]
 8003ffc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ffe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004002:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004004:	2000      	movs	r0, #0
      break;
 8004006:	e7c9      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004008:	68ca      	ldr	r2, [r1, #12]
 800400a:	6849      	ldr	r1, [r1, #4]
 800400c:	6800      	ldr	r0, [r0, #0]
 800400e:	f7ff fcd7 	bl	80039c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004012:	2160      	movs	r1, #96	; 0x60
 8004014:	6820      	ldr	r0, [r4, #0]
 8004016:	f7ff fd1d 	bl	8003a54 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2000      	movs	r0, #0
      break;
 800401c:	e7be      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401e:	68ca      	ldr	r2, [r1, #12]
 8004020:	6849      	ldr	r1, [r1, #4]
 8004022:	6800      	ldr	r0, [r0, #0]
 8004024:	f7ff fc9e 	bl	8003964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004028:	2140      	movs	r1, #64	; 0x40
 800402a:	6820      	ldr	r0, [r4, #0]
 800402c:	f7ff fd12 	bl	8003a54 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	2000      	movs	r0, #0
      break;
 8004032:	e7b3      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004034:	2000      	movs	r0, #0
 8004036:	e7b1      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004038:	2001      	movs	r0, #1
 800403a:	e7af      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800403c:	2002      	movs	r0, #2
}
 800403e:	4770      	bx	lr

08004040 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004040:	f001 011f 	and.w	r1, r1, #31
 8004044:	2301      	movs	r3, #1
 8004046:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800404a:	6a03      	ldr	r3, [r0, #32]
 800404c:	ea23 030c 	bic.w	r3, r3, ip
 8004050:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004052:	6a03      	ldr	r3, [r0, #32]
 8004054:	fa02 f101 	lsl.w	r1, r2, r1
 8004058:	430b      	orrs	r3, r1
 800405a:	6203      	str	r3, [r0, #32]
}
 800405c:	4770      	bx	lr
	...

08004060 <HAL_TIM_IC_Start_IT>:
{
 8004060:	b510      	push	{r4, lr}
 8004062:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004064:	460b      	mov	r3, r1
 8004066:	bb09      	cbnz	r1, 80040ac <HAL_TIM_IC_Start_IT+0x4c>
 8004068:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800406c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800406e:	bb6b      	cbnz	r3, 80040cc <HAL_TIM_IC_Start_IT+0x6c>
 8004070:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8004074:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004076:	2801      	cmp	r0, #1
 8004078:	f040 80a4 	bne.w	80041c4 <HAL_TIM_IC_Start_IT+0x164>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800407c:	2a01      	cmp	r2, #1
 800407e:	f040 80a2 	bne.w	80041c6 <HAL_TIM_IC_Start_IT+0x166>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004082:	bb9b      	cbnz	r3, 80040ec <HAL_TIM_IC_Start_IT+0x8c>
 8004084:	2102      	movs	r1, #2
 8004086:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800408a:	2b00      	cmp	r3, #0
 800408c:	d13e      	bne.n	800410c <HAL_TIM_IC_Start_IT+0xac>
 800408e:	2102      	movs	r1, #2
 8004090:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  switch (Channel)
 8004094:	2b0c      	cmp	r3, #12
 8004096:	f200 8097 	bhi.w	80041c8 <HAL_TIM_IC_Start_IT+0x168>
 800409a:	e8df f003 	tbb	[pc, r3]
 800409e:	9547      	.short	0x9547
 80040a0:	95769595 	.word	0x95769595
 80040a4:	957c9595 	.word	0x957c9595
 80040a8:	9595      	.short	0x9595
 80040aa:	82          	.byte	0x82
 80040ab:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040ac:	2904      	cmp	r1, #4
 80040ae:	d005      	beq.n	80040bc <HAL_TIM_IC_Start_IT+0x5c>
 80040b0:	2908      	cmp	r1, #8
 80040b2:	d007      	beq.n	80040c4 <HAL_TIM_IC_Start_IT+0x64>
 80040b4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 80040b8:	b2c0      	uxtb	r0, r0
 80040ba:	e7d8      	b.n	800406e <HAL_TIM_IC_Start_IT+0xe>
 80040bc:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 80040c0:	b2c0      	uxtb	r0, r0
 80040c2:	e7d4      	b.n	800406e <HAL_TIM_IC_Start_IT+0xe>
 80040c4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80040c8:	b2c0      	uxtb	r0, r0
 80040ca:	e7d0      	b.n	800406e <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d005      	beq.n	80040dc <HAL_TIM_IC_Start_IT+0x7c>
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d007      	beq.n	80040e4 <HAL_TIM_IC_Start_IT+0x84>
 80040d4:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	e7cc      	b.n	8004076 <HAL_TIM_IC_Start_IT+0x16>
 80040dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	e7c8      	b.n	8004076 <HAL_TIM_IC_Start_IT+0x16>
 80040e4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	e7c4      	b.n	8004076 <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d005      	beq.n	80040fc <HAL_TIM_IC_Start_IT+0x9c>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d007      	beq.n	8004104 <HAL_TIM_IC_Start_IT+0xa4>
 80040f4:	2102      	movs	r1, #2
 80040f6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 80040fa:	e7c6      	b.n	800408a <HAL_TIM_IC_Start_IT+0x2a>
 80040fc:	2102      	movs	r1, #2
 80040fe:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 8004102:	e7c2      	b.n	800408a <HAL_TIM_IC_Start_IT+0x2a>
 8004104:	2102      	movs	r1, #2
 8004106:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 800410a:	e7be      	b.n	800408a <HAL_TIM_IC_Start_IT+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800410c:	2b04      	cmp	r3, #4
 800410e:	d005      	beq.n	800411c <HAL_TIM_IC_Start_IT+0xbc>
 8004110:	2b08      	cmp	r3, #8
 8004112:	d007      	beq.n	8004124 <HAL_TIM_IC_Start_IT+0xc4>
 8004114:	2102      	movs	r1, #2
 8004116:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800411a:	e7bb      	b.n	8004094 <HAL_TIM_IC_Start_IT+0x34>
 800411c:	2102      	movs	r1, #2
 800411e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004122:	e7b7      	b.n	8004094 <HAL_TIM_IC_Start_IT+0x34>
 8004124:	2102      	movs	r1, #2
 8004126:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 800412a:	e7b3      	b.n	8004094 <HAL_TIM_IC_Start_IT+0x34>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800412c:	6821      	ldr	r1, [r4, #0]
 800412e:	68ca      	ldr	r2, [r1, #12]
 8004130:	f042 0202 	orr.w	r2, r2, #2
 8004134:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004136:	2201      	movs	r2, #1
 8004138:	4619      	mov	r1, r3
 800413a:	6820      	ldr	r0, [r4, #0]
 800413c:	f7ff ff80 	bl	8004040 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	4a23      	ldr	r2, [pc, #140]	; (80041d0 <HAL_TIM_IC_Start_IT+0x170>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d032      	beq.n	80041ae <HAL_TIM_IC_Start_IT+0x14e>
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414c:	d02f      	beq.n	80041ae <HAL_TIM_IC_Start_IT+0x14e>
 800414e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004152:	4293      	cmp	r3, r2
 8004154:	d02b      	beq.n	80041ae <HAL_TIM_IC_Start_IT+0x14e>
 8004156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800415a:	4293      	cmp	r3, r2
 800415c:	d027      	beq.n	80041ae <HAL_TIM_IC_Start_IT+0x14e>
 800415e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004162:	4293      	cmp	r3, r2
 8004164:	d023      	beq.n	80041ae <HAL_TIM_IC_Start_IT+0x14e>
 8004166:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800416a:	4293      	cmp	r3, r2
 800416c:	d01f      	beq.n	80041ae <HAL_TIM_IC_Start_IT+0x14e>
 800416e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004172:	4293      	cmp	r3, r2
 8004174:	d01b      	beq.n	80041ae <HAL_TIM_IC_Start_IT+0x14e>
 8004176:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800417a:	4293      	cmp	r3, r2
 800417c:	d017      	beq.n	80041ae <HAL_TIM_IC_Start_IT+0x14e>
      __HAL_TIM_ENABLE(htim);
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	f042 0201 	orr.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	2000      	movs	r0, #0
 8004188:	e01d      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x166>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800418a:	6821      	ldr	r1, [r4, #0]
 800418c:	68ca      	ldr	r2, [r1, #12]
 800418e:	f042 0204 	orr.w	r2, r2, #4
 8004192:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004194:	e7cf      	b.n	8004136 <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004196:	6821      	ldr	r1, [r4, #0]
 8004198:	68ca      	ldr	r2, [r1, #12]
 800419a:	f042 0208 	orr.w	r2, r2, #8
 800419e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80041a0:	e7c9      	b.n	8004136 <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041a2:	6821      	ldr	r1, [r4, #0]
 80041a4:	68ca      	ldr	r2, [r1, #12]
 80041a6:	f042 0210 	orr.w	r2, r2, #16
 80041aa:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 80041ac:	e7c3      	b.n	8004136 <HAL_TIM_IC_Start_IT+0xd6>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b4:	2a06      	cmp	r2, #6
 80041b6:	d009      	beq.n	80041cc <HAL_TIM_IC_Start_IT+0x16c>
        __HAL_TIM_ENABLE(htim);
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	2000      	movs	r0, #0
 80041c2:	e000      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x166>
    return HAL_ERROR;
 80041c4:	2001      	movs	r0, #1
}
 80041c6:	bd10      	pop	{r4, pc}
  switch (Channel)
 80041c8:	4610      	mov	r0, r2
 80041ca:	e7fc      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x166>
 80041cc:	2000      	movs	r0, #0
 80041ce:	e7fa      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x166>
 80041d0:	40010000 	.word	0x40010000

080041d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d03d      	beq.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 80041dc:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80041de:	2301      	movs	r3, #1
 80041e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	2302      	movs	r3, #2
 80041e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041ea:	6803      	ldr	r3, [r0, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ee:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f0:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f4:	680a      	ldr	r2, [r1, #0]
 80041f6:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fc:	6803      	ldr	r3, [r0, #0]
 80041fe:	4a17      	ldr	r2, [pc, #92]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d01a      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004208:	d017      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800420a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004212:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004216:	4293      	cmp	r3, r2
 8004218:	d00f      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800421a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800421e:	4293      	cmp	r3, r2
 8004220:	d00b      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004222:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004226:	4293      	cmp	r3, r2
 8004228:	d007      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800422a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004232:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004236:	4293      	cmp	r3, r2
 8004238:	d104      	bne.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800423a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800423e:	684a      	ldr	r2, [r1, #4]
 8004240:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004242:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004244:	2301      	movs	r3, #1
 8004246:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800424a:	2300      	movs	r3, #0
 800424c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004250:	4618      	mov	r0, r3
}
 8004252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004256:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004258:	2002      	movs	r0, #2
}
 800425a:	4770      	bx	lr
 800425c:	40010000 	.word	0x40010000

08004260 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004260:	4770      	bx	lr

08004262 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004262:	4770      	bx	lr

08004264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004268:	6802      	ldr	r2, [r0, #0]
 800426a:	6913      	ldr	r3, [r2, #16]
 800426c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004270:	68c1      	ldr	r1, [r0, #12]
 8004272:	430b      	orrs	r3, r1
 8004274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004276:	6883      	ldr	r3, [r0, #8]
 8004278:	6902      	ldr	r2, [r0, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	6942      	ldr	r2, [r0, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	69c2      	ldr	r2, [r0, #28]
 8004282:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004284:	6801      	ldr	r1, [r0, #0]
 8004286:	68cb      	ldr	r3, [r1, #12]
 8004288:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800428c:	f023 030c 	bic.w	r3, r3, #12
 8004290:	4313      	orrs	r3, r2
 8004292:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004294:	6802      	ldr	r2, [r0, #0]
 8004296:	6953      	ldr	r3, [r2, #20]
 8004298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429c:	6981      	ldr	r1, [r0, #24]
 800429e:	430b      	orrs	r3, r1
 80042a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042a2:	6803      	ldr	r3, [r0, #0]
 80042a4:	4a31      	ldr	r2, [pc, #196]	; (800436c <UART_SetConfig+0x108>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d006      	beq.n	80042b8 <UART_SetConfig+0x54>
 80042aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d002      	beq.n	80042b8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042b2:	f7fd fdef 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80042b6:	e001      	b.n	80042bc <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80042b8:	f7fd fdfc 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042bc:	69e3      	ldr	r3, [r4, #28]
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c2:	d029      	beq.n	8004318 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c4:	2100      	movs	r1, #0
 80042c6:	1803      	adds	r3, r0, r0
 80042c8:	4149      	adcs	r1, r1
 80042ca:	181b      	adds	r3, r3, r0
 80042cc:	f141 0100 	adc.w	r1, r1, #0
 80042d0:	00c9      	lsls	r1, r1, #3
 80042d2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	1818      	adds	r0, r3, r0
 80042da:	6863      	ldr	r3, [r4, #4]
 80042dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80042e0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80042e4:	f141 0100 	adc.w	r1, r1, #0
 80042e8:	f7fc fcc6 	bl	8000c78 <__aeabi_uldivmod>
 80042ec:	4d20      	ldr	r5, [pc, #128]	; (8004370 <UART_SetConfig+0x10c>)
 80042ee:	fba5 3200 	umull	r3, r2, r5, r0
 80042f2:	0951      	lsrs	r1, r2, #5
 80042f4:	2364      	movs	r3, #100	; 0x64
 80042f6:	fb03 0311 	mls	r3, r3, r1, r0
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	3332      	adds	r3, #50	; 0x32
 80042fe:	fba5 2303 	umull	r2, r3, r5, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004308:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	6821      	ldr	r1, [r4, #0]
 8004312:	4413      	add	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }
}
 8004316:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004318:	2300      	movs	r3, #0
 800431a:	1802      	adds	r2, r0, r0
 800431c:	eb43 0103 	adc.w	r1, r3, r3
 8004320:	1812      	adds	r2, r2, r0
 8004322:	f141 0100 	adc.w	r1, r1, #0
 8004326:	00c9      	lsls	r1, r1, #3
 8004328:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800432c:	00d2      	lsls	r2, r2, #3
 800432e:	1810      	adds	r0, r2, r0
 8004330:	f141 0100 	adc.w	r1, r1, #0
 8004334:	6862      	ldr	r2, [r4, #4]
 8004336:	1892      	adds	r2, r2, r2
 8004338:	415b      	adcs	r3, r3
 800433a:	f7fc fc9d 	bl	8000c78 <__aeabi_uldivmod>
 800433e:	4d0c      	ldr	r5, [pc, #48]	; (8004370 <UART_SetConfig+0x10c>)
 8004340:	fba5 3200 	umull	r3, r2, r5, r0
 8004344:	0951      	lsrs	r1, r2, #5
 8004346:	2364      	movs	r3, #100	; 0x64
 8004348:	fb03 0311 	mls	r3, r3, r1, r0
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	3332      	adds	r3, #50	; 0x32
 8004350:	fba5 2303 	umull	r2, r3, r5, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	005a      	lsls	r2, r3, #1
 8004358:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800435c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	6821      	ldr	r1, [r4, #0]
 8004366:	4413      	add	r3, r2
 8004368:	608b      	str	r3, [r1, #8]
 800436a:	e7d4      	b.n	8004316 <UART_SetConfig+0xb2>
 800436c:	40011000 	.word	0x40011000
 8004370:	51eb851f 	.word	0x51eb851f

08004374 <HAL_UART_Init>:
  if (huart == NULL)
 8004374:	b358      	cbz	r0, 80043ce <HAL_UART_Init+0x5a>
{
 8004376:	b510      	push	{r4, lr}
 8004378:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800437a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800437e:	b30b      	cbz	r3, 80043c4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004380:	2324      	movs	r3, #36	; 0x24
 8004382:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004386:	6822      	ldr	r2, [r4, #0]
 8004388:	68d3      	ldr	r3, [r2, #12]
 800438a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800438e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004390:	4620      	mov	r0, r4
 8004392:	f7ff ff67 	bl	8004264 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004396:	6822      	ldr	r2, [r4, #0]
 8004398:	6913      	ldr	r3, [r2, #16]
 800439a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800439e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	6953      	ldr	r3, [r2, #20]
 80043a4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80043a8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	68d3      	ldr	r3, [r2, #12]
 80043ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043b2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b4:	2000      	movs	r0, #0
 80043b6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043b8:	2320      	movs	r3, #32
 80043ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80043c2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80043c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80043c8:	f006 f942 	bl	800a650 <HAL_UART_MspInit>
 80043cc:	e7d8      	b.n	8004380 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80043ce:	2001      	movs	r0, #1
}
 80043d0:	4770      	bx	lr
	...

080043d4 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <SDMMC_GetCmdError+0x30>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <SDMMC_GetCmdError+0x34>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	0a5b      	lsrs	r3, r3, #9
 80043e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 80043e8:	461a      	mov	r2, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b13a      	cbz	r2, 80043fe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80043ee:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80043f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80043f4:	d0f8      	beq.n	80043e8 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043f6:	23c5      	movs	r3, #197	; 0xc5
 80043f8:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80043fa:	2000      	movs	r0, #0
 80043fc:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80043fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004402:	4770      	bx	lr
 8004404:	2000001c 	.word	0x2000001c
 8004408:	10624dd3 	.word	0x10624dd3

0800440c <SDIO_Init>:
{
 800440c:	b084      	sub	sp, #16
 800440e:	f10d 0c04 	add.w	ip, sp, #4
 8004412:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800441a:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 800441c:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800441e:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8004420:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8004422:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8004424:	4313      	orrs	r3, r2
             Init.ClockDiv
 8004426:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 8004428:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800442a:	6842      	ldr	r2, [r0, #4]
 800442c:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8004430:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004434:	4313      	orrs	r3, r2
 8004436:	6043      	str	r3, [r0, #4]
}
 8004438:	2000      	movs	r0, #0
 800443a:	b004      	add	sp, #16
 800443c:	4770      	bx	lr

0800443e <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 800443e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8004442:	4770      	bx	lr

08004444 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8004444:	680b      	ldr	r3, [r1, #0]
 8004446:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800444a:	2000      	movs	r0, #0
 800444c:	4770      	bx	lr

0800444e <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800444e:	2303      	movs	r3, #3
 8004450:	6003      	str	r3, [r0, #0]
}
 8004452:	2000      	movs	r0, #0
 8004454:	4770      	bx	lr

08004456 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004456:	6800      	ldr	r0, [r0, #0]
}
 8004458:	f000 0003 	and.w	r0, r0, #3
 800445c:	4770      	bx	lr

0800445e <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 800445e:	680b      	ldr	r3, [r1, #0]
 8004460:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004462:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8004464:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004466:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8004468:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 800446a:	4313      	orrs	r3, r2
                       Command->CPSM);
 800446c:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 800446e:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004470:	68c2      	ldr	r2, [r0, #12]
 8004472:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004476:	f022 020f 	bic.w	r2, r2, #15
 800447a:	4313      	orrs	r3, r2
 800447c:	60c3      	str	r3, [r0, #12]
}
 800447e:	2000      	movs	r0, #0
 8004480:	4770      	bx	lr

08004482 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8004482:	6900      	ldr	r0, [r0, #16]
}
 8004484:	b2c0      	uxtb	r0, r0
 8004486:	4770      	bx	lr

08004488 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004488:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800448a:	5840      	ldr	r0, [r0, r1]
}  
 800448c:	4770      	bx	lr

0800448e <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 800448e:	680b      	ldr	r3, [r1, #0]
 8004490:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8004492:	684b      	ldr	r3, [r1, #4]
 8004494:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004496:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8004498:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800449a:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800449c:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 800449e:	4313      	orrs	r3, r2
                       Data->DPSM);
 80044a0:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 80044a2:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80044a4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80044a6:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 80044aa:	4313      	orrs	r3, r2
 80044ac:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80044ae:	2000      	movs	r0, #0
 80044b0:	4770      	bx	lr

080044b2 <SDMMC_CmdGoIdleState>:
{
 80044b2:	b510      	push	{r4, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80044bc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80044be:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044c0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044c6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044c8:	a901      	add	r1, sp, #4
 80044ca:	f7ff ffc8 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 80044ce:	4620      	mov	r0, r4
 80044d0:	f7ff ff80 	bl	80043d4 <SDMMC_GetCmdError>
}
 80044d4:	b006      	add	sp, #24
 80044d6:	bd10      	pop	{r4, pc}

080044d8 <SDMMC_GetCmdResp1>:
{
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4604      	mov	r4, r0
 80044dc:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80044de:	4b50      	ldr	r3, [pc, #320]	; (8004620 <SDMMC_GetCmdResp1+0x148>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4950      	ldr	r1, [pc, #320]	; (8004624 <SDMMC_GetCmdResp1+0x14c>)
 80044e4:	fba1 1303 	umull	r1, r3, r1, r3
 80044e8:	0a5b      	lsrs	r3, r3, #9
 80044ea:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80044ee:	4613      	mov	r3, r2
 80044f0:	3a01      	subs	r2, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d05d      	beq.n	80045b2 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 80044f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80044f8:	f013 0f45 	tst.w	r3, #69	; 0x45
 80044fc:	d0f7      	beq.n	80044ee <SDMMC_GetCmdResp1+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044fe:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004502:	d1f4      	bne.n	80044ee <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004504:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004506:	f013 0f04 	tst.w	r3, #4
 800450a:	d106      	bne.n	800451a <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800450c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800450e:	f013 0f01 	tst.w	r3, #1
 8004512:	d005      	beq.n	8004520 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004514:	2001      	movs	r0, #1
 8004516:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004518:	e04d      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800451a:	2004      	movs	r0, #4
 800451c:	63a0      	str	r0, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800451e:	e04a      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004520:	23c5      	movs	r3, #197	; 0xc5
 8004522:	63a3      	str	r3, [r4, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004524:	4620      	mov	r0, r4
 8004526:	f7ff ffac 	bl	8004482 <SDIO_GetCommandResponse>
 800452a:	42a8      	cmp	r0, r5
 800452c:	d001      	beq.n	8004532 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800452e:	2001      	movs	r0, #1
 8004530:	e041      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004532:	2100      	movs	r1, #0
 8004534:	4620      	mov	r0, r4
 8004536:	f7ff ffa7 	bl	8004488 <SDIO_GetResponse>
 800453a:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800453c:	483a      	ldr	r0, [pc, #232]	; (8004628 <SDMMC_GetCmdResp1+0x150>)
 800453e:	4018      	ands	r0, r3
 8004540:	b3c8      	cbz	r0, 80045b6 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004542:	2b00      	cmp	r3, #0
 8004544:	db38      	blt.n	80045b8 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004546:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800454a:	d138      	bne.n	80045be <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800454c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004550:	d137      	bne.n	80045c2 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004552:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004556:	d136      	bne.n	80045c6 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004558:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800455c:	d136      	bne.n	80045cc <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800455e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8004562:	d136      	bne.n	80045d2 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004564:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004568:	d136      	bne.n	80045d8 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800456a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800456e:	d136      	bne.n	80045de <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004570:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004574:	d136      	bne.n	80045e4 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004576:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800457a:	d136      	bne.n	80045ea <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800457c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004580:	d136      	bne.n	80045f0 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004582:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004586:	d136      	bne.n	80045f6 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004588:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800458c:	d136      	bne.n	80045fc <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800458e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004592:	d136      	bne.n	8004602 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004594:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004598:	d136      	bne.n	8004608 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800459a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800459e:	d136      	bne.n	800460e <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80045a0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80045a4:	d136      	bne.n	8004614 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80045a6:	f013 0f08 	tst.w	r3, #8
 80045aa:	d036      	beq.n	800461a <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80045ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80045b0:	e001      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 80045b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80045b8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80045bc:	e7fb      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80045be:	2040      	movs	r0, #64	; 0x40
 80045c0:	e7f9      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80045c2:	2080      	movs	r0, #128	; 0x80
 80045c4:	e7f7      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80045c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80045ca:	e7f4      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80045cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80045d0:	e7f1      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80045d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80045d6:	e7ee      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80045d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80045dc:	e7eb      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80045de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80045e2:	e7e8      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80045e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80045e8:	e7e5      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80045ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80045ee:	e7e2      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 80045f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80045f4:	e7df      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80045f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80045fa:	e7dc      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80045fc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004600:	e7d9      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004602:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004606:	e7d6      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004608:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800460c:	e7d3      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800460e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004612:	e7d0      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8004614:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004618:	e7cd      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800461a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800461e:	e7ca      	b.n	80045b6 <SDMMC_GetCmdResp1+0xde>
 8004620:	2000001c 	.word	0x2000001c
 8004624:	10624dd3 	.word	0x10624dd3
 8004628:	fdffe008 	.word	0xfdffe008

0800462c <SDMMC_CmdBlockLength>:
{
 800462c:	b530      	push	{r4, r5, lr}
 800462e:	b087      	sub	sp, #28
 8004630:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004632:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004634:	2510      	movs	r5, #16
 8004636:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004638:	2340      	movs	r3, #64	; 0x40
 800463a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800463c:	2300      	movs	r3, #0
 800463e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004644:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004646:	a901      	add	r1, sp, #4
 8004648:	f7ff ff09 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4629      	mov	r1, r5
 8004652:	4620      	mov	r0, r4
 8004654:	f7ff ff40 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 8004658:	b007      	add	sp, #28
 800465a:	bd30      	pop	{r4, r5, pc}

0800465c <SDMMC_CmdReadSingleBlock>:
{
 800465c:	b530      	push	{r4, r5, lr}
 800465e:	b087      	sub	sp, #28
 8004660:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004662:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004664:	2511      	movs	r5, #17
 8004666:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004668:	2340      	movs	r3, #64	; 0x40
 800466a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800466c:	2300      	movs	r3, #0
 800466e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004674:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004676:	a901      	add	r1, sp, #4
 8004678:	f7ff fef1 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800467c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004680:	4629      	mov	r1, r5
 8004682:	4620      	mov	r0, r4
 8004684:	f7ff ff28 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 8004688:	b007      	add	sp, #28
 800468a:	bd30      	pop	{r4, r5, pc}

0800468c <SDMMC_CmdReadMultiBlock>:
{
 800468c:	b530      	push	{r4, r5, lr}
 800468e:	b087      	sub	sp, #28
 8004690:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004692:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004694:	2512      	movs	r5, #18
 8004696:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004698:	2340      	movs	r3, #64	; 0x40
 800469a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800469c:	2300      	movs	r3, #0
 800469e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046a6:	a901      	add	r1, sp, #4
 80046a8:	f7ff fed9 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4629      	mov	r1, r5
 80046b2:	4620      	mov	r0, r4
 80046b4:	f7ff ff10 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 80046b8:	b007      	add	sp, #28
 80046ba:	bd30      	pop	{r4, r5, pc}

080046bc <SDMMC_CmdWriteSingleBlock>:
{
 80046bc:	b530      	push	{r4, r5, lr}
 80046be:	b087      	sub	sp, #28
 80046c0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80046c2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80046c4:	2518      	movs	r5, #24
 80046c6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046c8:	2340      	movs	r3, #64	; 0x40
 80046ca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046cc:	2300      	movs	r3, #0
 80046ce:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046d6:	a901      	add	r1, sp, #4
 80046d8:	f7ff fec1 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4629      	mov	r1, r5
 80046e2:	4620      	mov	r0, r4
 80046e4:	f7ff fef8 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 80046e8:	b007      	add	sp, #28
 80046ea:	bd30      	pop	{r4, r5, pc}

080046ec <SDMMC_CmdWriteMultiBlock>:
{
 80046ec:	b530      	push	{r4, r5, lr}
 80046ee:	b087      	sub	sp, #28
 80046f0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80046f2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80046f4:	2519      	movs	r5, #25
 80046f6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046f8:	2340      	movs	r3, #64	; 0x40
 80046fa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046fc:	2300      	movs	r3, #0
 80046fe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004704:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004706:	a901      	add	r1, sp, #4
 8004708:	f7ff fea9 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4629      	mov	r1, r5
 8004712:	4620      	mov	r0, r4
 8004714:	f7ff fee0 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 8004718:	b007      	add	sp, #28
 800471a:	bd30      	pop	{r4, r5, pc}

0800471c <SDMMC_CmdStopTransfer>:
{
 800471c:	b530      	push	{r4, r5, lr}
 800471e:	b087      	sub	sp, #28
 8004720:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004726:	250c      	movs	r5, #12
 8004728:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800472a:	2240      	movs	r2, #64	; 0x40
 800472c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800472e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004734:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004736:	a901      	add	r1, sp, #4
 8004738:	f7ff fe91 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800473c:	4a03      	ldr	r2, [pc, #12]	; (800474c <SDMMC_CmdStopTransfer+0x30>)
 800473e:	4629      	mov	r1, r5
 8004740:	4620      	mov	r0, r4
 8004742:	f7ff fec9 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 8004746:	b007      	add	sp, #28
 8004748:	bd30      	pop	{r4, r5, pc}
 800474a:	bf00      	nop
 800474c:	05f5e100 	.word	0x05f5e100

08004750 <SDMMC_CmdSelDesel>:
{
 8004750:	b530      	push	{r4, r5, lr}
 8004752:	b087      	sub	sp, #28
 8004754:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004756:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004758:	2507      	movs	r5, #7
 800475a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800475c:	2340      	movs	r3, #64	; 0x40
 800475e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004760:	2300      	movs	r3, #0
 8004762:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004768:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800476a:	a901      	add	r1, sp, #4
 800476c:	f7ff fe77 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4629      	mov	r1, r5
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff feae 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 800477c:	b007      	add	sp, #28
 800477e:	bd30      	pop	{r4, r5, pc}

08004780 <SDMMC_CmdAppCommand>:
{
 8004780:	b530      	push	{r4, r5, lr}
 8004782:	b087      	sub	sp, #28
 8004784:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004786:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004788:	2537      	movs	r5, #55	; 0x37
 800478a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800478c:	2340      	movs	r3, #64	; 0x40
 800478e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004790:	2300      	movs	r3, #0
 8004792:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004798:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800479a:	a901      	add	r1, sp, #4
 800479c:	f7ff fe5f 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80047a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a4:	4629      	mov	r1, r5
 80047a6:	4620      	mov	r0, r4
 80047a8:	f7ff fe96 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 80047ac:	b007      	add	sp, #28
 80047ae:	bd30      	pop	{r4, r5, pc}

080047b0 <SDMMC_CmdBusWidth>:
{
 80047b0:	b530      	push	{r4, r5, lr}
 80047b2:	b087      	sub	sp, #28
 80047b4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80047b6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80047b8:	2506      	movs	r5, #6
 80047ba:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047bc:	2340      	movs	r3, #64	; 0x40
 80047be:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047c0:	2300      	movs	r3, #0
 80047c2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047c8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047ca:	a901      	add	r1, sp, #4
 80047cc:	f7ff fe47 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80047d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d4:	4629      	mov	r1, r5
 80047d6:	4620      	mov	r0, r4
 80047d8:	f7ff fe7e 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 80047dc:	b007      	add	sp, #28
 80047de:	bd30      	pop	{r4, r5, pc}

080047e0 <SDMMC_CmdSendSCR>:
{
 80047e0:	b530      	push	{r4, r5, lr}
 80047e2:	b087      	sub	sp, #28
 80047e4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80047ea:	2533      	movs	r5, #51	; 0x33
 80047ec:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047ee:	2240      	movs	r2, #64	; 0x40
 80047f0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047f2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047fa:	a901      	add	r1, sp, #4
 80047fc:	f7ff fe2f 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4629      	mov	r1, r5
 8004806:	4620      	mov	r0, r4
 8004808:	f7ff fe66 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 800480c:	b007      	add	sp, #28
 800480e:	bd30      	pop	{r4, r5, pc}

08004810 <SDMMC_CmdSendStatus>:
{
 8004810:	b530      	push	{r4, r5, lr}
 8004812:	b087      	sub	sp, #28
 8004814:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004816:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004818:	250d      	movs	r5, #13
 800481a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800481c:	2340      	movs	r3, #64	; 0x40
 800481e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004820:	2300      	movs	r3, #0
 8004822:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004828:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800482a:	a901      	add	r1, sp, #4
 800482c:	f7ff fe17 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004830:	f241 3288 	movw	r2, #5000	; 0x1388
 8004834:	4629      	mov	r1, r5
 8004836:	4620      	mov	r0, r4
 8004838:	f7ff fe4e 	bl	80044d8 <SDMMC_GetCmdResp1>
}
 800483c:	b007      	add	sp, #28
 800483e:	bd30      	pop	{r4, r5, pc}

08004840 <SDMMC_GetCmdResp2>:
{
 8004840:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <SDMMC_GetCmdResp2+0x54>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a14      	ldr	r2, [pc, #80]	; (8004898 <SDMMC_GetCmdResp2+0x58>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	0a5b      	lsrs	r3, r3, #9
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004856:	461a      	mov	r2, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b1ba      	cbz	r2, 800488c <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 800485c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800485e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004862:	d0f8      	beq.n	8004856 <SDMMC_GetCmdResp2+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004864:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004868:	d1f5      	bne.n	8004856 <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800486a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800486c:	f013 0f04 	tst.w	r3, #4
 8004870:	d106      	bne.n	8004880 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004872:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004874:	f010 0001 	ands.w	r0, r0, #1
 8004878:	d105      	bne.n	8004886 <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800487a:	23c5      	movs	r3, #197	; 0xc5
 800487c:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800487e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004880:	2004      	movs	r0, #4
 8004882:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004884:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004886:	2001      	movs	r0, #1
 8004888:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800488a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800488c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	2000001c 	.word	0x2000001c
 8004898:	10624dd3 	.word	0x10624dd3

0800489c <SDMMC_CmdSendCID>:
{
 800489c:	b510      	push	{r4, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80048a6:	2202      	movs	r2, #2
 80048a8:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80048aa:	22c0      	movs	r2, #192	; 0xc0
 80048ac:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ae:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048b6:	a901      	add	r1, sp, #4
 80048b8:	f7ff fdd1 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80048bc:	4620      	mov	r0, r4
 80048be:	f7ff ffbf 	bl	8004840 <SDMMC_GetCmdResp2>
}
 80048c2:	b006      	add	sp, #24
 80048c4:	bd10      	pop	{r4, pc}

080048c6 <SDMMC_CmdSendCSD>:
{
 80048c6:	b510      	push	{r4, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80048cc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80048ce:	2309      	movs	r3, #9
 80048d0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80048d2:	23c0      	movs	r3, #192	; 0xc0
 80048d4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048d6:	2300      	movs	r3, #0
 80048d8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048de:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048e0:	a901      	add	r1, sp, #4
 80048e2:	f7ff fdbc 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7ff ffaa 	bl	8004840 <SDMMC_GetCmdResp2>
}
 80048ec:	b006      	add	sp, #24
 80048ee:	bd10      	pop	{r4, pc}

080048f0 <SDMMC_GetCmdResp3>:
{
 80048f0:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <SDMMC_GetCmdResp3+0x44>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <SDMMC_GetCmdResp3+0x48>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	0a5b      	lsrs	r3, r3, #9
 80048fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004902:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004906:	461a      	mov	r2, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b182      	cbz	r2, 800492e <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 800490c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800490e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004912:	d0f8      	beq.n	8004906 <SDMMC_GetCmdResp3+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004914:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004918:	d1f5      	bne.n	8004906 <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800491a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800491c:	f010 0004 	ands.w	r0, r0, #4
 8004920:	d102      	bne.n	8004928 <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004922:	23c5      	movs	r3, #197	; 0xc5
 8004924:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004926:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004928:	2004      	movs	r0, #4
 800492a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800492c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800492e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004932:	4770      	bx	lr
 8004934:	2000001c 	.word	0x2000001c
 8004938:	10624dd3 	.word	0x10624dd3

0800493c <SDMMC_CmdAppOperCommand>:
{
 800493c:	b510      	push	{r4, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004942:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004946:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800494a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800494c:	2329      	movs	r3, #41	; 0x29
 800494e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004950:	2340      	movs	r3, #64	; 0x40
 8004952:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004954:	2300      	movs	r3, #0
 8004956:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800495e:	a901      	add	r1, sp, #4
 8004960:	f7ff fd7d 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff ffc3 	bl	80048f0 <SDMMC_GetCmdResp3>
}
 800496a:	b006      	add	sp, #24
 800496c:	bd10      	pop	{r4, pc}
	...

08004970 <SDMMC_GetCmdResp6>:
{
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	4605      	mov	r5, r0
 8004974:	460e      	mov	r6, r1
 8004976:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004978:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <SDMMC_GetCmdResp6+0x98>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a23      	ldr	r2, [pc, #140]	; (8004a0c <SDMMC_GetCmdResp6+0x9c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	0a5b      	lsrs	r3, r3, #9
 8004984:	f241 3288 	movw	r2, #5000	; 0x1388
 8004988:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800498c:	461a      	mov	r2, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b38a      	cbz	r2, 80049f6 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 8004992:	6b6c      	ldr	r4, [r5, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004994:	f014 0f45 	tst.w	r4, #69	; 0x45
 8004998:	d0f8      	beq.n	800498c <SDMMC_GetCmdResp6+0x1c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800499a:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800499e:	d1f5      	bne.n	800498c <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80049a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80049a2:	f013 0f04 	tst.w	r3, #4
 80049a6:	d106      	bne.n	80049b6 <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80049a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80049aa:	f013 0f01 	tst.w	r3, #1
 80049ae:	d005      	beq.n	80049bc <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80049b0:	2001      	movs	r0, #1
 80049b2:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049b4:	e021      	b.n	80049fa <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80049b6:	2004      	movs	r0, #4
 80049b8:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80049ba:	e01e      	b.n	80049fa <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80049bc:	4628      	mov	r0, r5
 80049be:	f7ff fd60 	bl	8004482 <SDIO_GetCommandResponse>
 80049c2:	42b0      	cmp	r0, r6
 80049c4:	d001      	beq.n	80049ca <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049c6:	2001      	movs	r0, #1
 80049c8:	e017      	b.n	80049fa <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80049ca:	23c5      	movs	r3, #197	; 0xc5
 80049cc:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80049ce:	2100      	movs	r1, #0
 80049d0:	4628      	mov	r0, r5
 80049d2:	f7ff fd59 	bl	8004488 <SDIO_GetResponse>
 80049d6:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80049d8:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 80049dc:	d008      	beq.n	80049f0 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80049de:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80049e2:	d10b      	bne.n	80049fc <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80049e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80049e8:	d00b      	beq.n	8004a02 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80049ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80049ee:	e004      	b.n	80049fa <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 80049f4:	e001      	b.n	80049fa <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 80049f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80049fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 80049fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004a00:	e7fb      	b.n	80049fa <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a02:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a06:	e7f8      	b.n	80049fa <SDMMC_GetCmdResp6+0x8a>
 8004a08:	2000001c 	.word	0x2000001c
 8004a0c:	10624dd3 	.word	0x10624dd3

08004a10 <SDMMC_CmdSetRelAdd>:
{
 8004a10:	b570      	push	{r4, r5, r6, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	4604      	mov	r4, r0
 8004a16:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004a1c:	2603      	movs	r6, #3
 8004a1e:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a20:	2240      	movs	r2, #64	; 0x40
 8004a22:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a24:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a2a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a2c:	a901      	add	r1, sp, #4
 8004a2e:	f7ff fd16 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004a32:	462a      	mov	r2, r5
 8004a34:	4631      	mov	r1, r6
 8004a36:	4620      	mov	r0, r4
 8004a38:	f7ff ff9a 	bl	8004970 <SDMMC_GetCmdResp6>
}
 8004a3c:	b006      	add	sp, #24
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}

08004a40 <SDMMC_GetCmdResp7>:
{
 8004a40:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a42:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <SDMMC_GetCmdResp7+0x5c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <SDMMC_GetCmdResp7+0x60>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	0a5b      	lsrs	r3, r3, #9
 8004a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004a56:	461a      	mov	r2, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b1e2      	cbz	r2, 8004a96 <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8004a5c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004a5e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004a62:	d0f8      	beq.n	8004a56 <SDMMC_GetCmdResp7+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a64:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004a68:	d1f5      	bne.n	8004a56 <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a6a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004a6c:	f013 0f04 	tst.w	r3, #4
 8004a70:	d10b      	bne.n	8004a8a <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a72:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004a74:	f013 0301 	ands.w	r3, r3, #1
 8004a78:	d10a      	bne.n	8004a90 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004a7a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8004a7c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8004a80:	d00b      	beq.n	8004a9a <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004a82:	2240      	movs	r2, #64	; 0x40
 8004a84:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004a86:	4618      	mov	r0, r3
 8004a88:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a8a:	2004      	movs	r0, #4
 8004a8c:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a8e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a90:	2001      	movs	r0, #1
 8004a92:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a94:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004a96:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004a9a:	4770      	bx	lr
 8004a9c:	2000001c 	.word	0x2000001c
 8004aa0:	10624dd3 	.word	0x10624dd3

08004aa4 <SDMMC_CmdOperCond>:
{
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004aaa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004aae:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ab4:	2340      	movs	r3, #64	; 0x40
 8004ab6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ac2:	a901      	add	r1, sp, #4
 8004ac4:	f7ff fccb 	bl	800445e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7ff ffb9 	bl	8004a40 <SDMMC_GetCmdResp7>
}
 8004ace:	b006      	add	sp, #24
 8004ad0:	bd10      	pop	{r4, pc}
	...

08004ad4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004ad4:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004ad6:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <disk_status+0x14>)
 8004ad8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8004adc:	6852      	ldr	r2, [r2, #4]
 8004ade:	6852      	ldr	r2, [r2, #4]
 8004ae0:	4403      	add	r3, r0
 8004ae2:	7a18      	ldrb	r0, [r3, #8]
 8004ae4:	4790      	blx	r2
  return stat;
}
 8004ae6:	bd08      	pop	{r3, pc}
 8004ae8:	200000d0 	.word	0x200000d0

08004aec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004aec:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <disk_initialize+0x24>)
 8004af0:	5c1b      	ldrb	r3, [r3, r0]
 8004af2:	b953      	cbnz	r3, 8004b0a <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <disk_initialize+0x24>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004afa:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8004afe:	6852      	ldr	r2, [r2, #4]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	4418      	add	r0, r3
 8004b04:	7a00      	ldrb	r0, [r0, #8]
 8004b06:	4790      	blx	r2
  }
  return stat;
}
 8004b08:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	e7fc      	b.n	8004b08 <disk_initialize+0x1c>
 8004b0e:	bf00      	nop
 8004b10:	200000d0 	.word	0x200000d0

08004b14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004b14:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004b16:	4c04      	ldr	r4, [pc, #16]	; (8004b28 <disk_read+0x14>)
 8004b18:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8004b1c:	686d      	ldr	r5, [r5, #4]
 8004b1e:	68ad      	ldr	r5, [r5, #8]
 8004b20:	4404      	add	r4, r0
 8004b22:	7a20      	ldrb	r0, [r4, #8]
 8004b24:	47a8      	blx	r5
  return res;
}
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	200000d0 	.word	0x200000d0

08004b2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004b2c:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004b2e:	4c04      	ldr	r4, [pc, #16]	; (8004b40 <disk_write+0x14>)
 8004b30:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8004b34:	686d      	ldr	r5, [r5, #4]
 8004b36:	68ed      	ldr	r5, [r5, #12]
 8004b38:	4404      	add	r4, r0
 8004b3a:	7a20      	ldrb	r0, [r4, #8]
 8004b3c:	47a8      	blx	r5
  return res;
}
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	200000d0 	.word	0x200000d0

08004b44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004b44:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004b46:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <disk_ioctl+0x14>)
 8004b48:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8004b4c:	6864      	ldr	r4, [r4, #4]
 8004b4e:	6924      	ldr	r4, [r4, #16]
 8004b50:	4403      	add	r3, r0
 8004b52:	7a18      	ldrb	r0, [r3, #8]
 8004b54:	47a0      	blx	r4
  return res;
}
 8004b56:	bd10      	pop	{r4, pc}
 8004b58:	200000d0 	.word	0x200000d0

08004b5c <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8004b5c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8004b5e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8004b60:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8004b64:	4770      	bx	lr

08004b66 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8004b66:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8004b68:	7883      	ldrb	r3, [r0, #2]
 8004b6a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8004b6e:	7843      	ldrb	r3, [r0, #1]
 8004b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8004b74:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8004b76:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004b7a:	4770      	bx	lr

08004b7c <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004b7c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8004b7e:	0a09      	lsrs	r1, r1, #8
 8004b80:	7041      	strb	r1, [r0, #1]
}
 8004b82:	4770      	bx	lr

08004b84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004b84:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b86:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004b8a:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b8c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004b90:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004b92:	0e09      	lsrs	r1, r1, #24
 8004b94:	70c1      	strb	r1, [r0, #3]
}
 8004b96:	4770      	bx	lr

08004b98 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8004b98:	4694      	mov	ip, r2
 8004b9a:	b132      	cbz	r2, 8004baa <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8004b9c:	780a      	ldrb	r2, [r1, #0]
 8004b9e:	3101      	adds	r1, #1
 8004ba0:	7002      	strb	r2, [r0, #0]
 8004ba2:	3001      	adds	r0, #1
		} while (--cnt);
 8004ba4:	f1bc 0c01 	subs.w	ip, ip, #1
 8004ba8:	d1f8      	bne.n	8004b9c <mem_cpy+0x4>
	}
}
 8004baa:	4770      	bx	lr

08004bac <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8004bac:	7001      	strb	r1, [r0, #0]
 8004bae:	3001      	adds	r0, #1
	} while (--cnt);
 8004bb0:	3a01      	subs	r2, #1
 8004bb2:	d1fb      	bne.n	8004bac <mem_set>
}
 8004bb4:	4770      	bx	lr

08004bb6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004bb6:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8004bb8:	f89c 0000 	ldrb.w	r0, [ip]
 8004bbc:	f10c 0c01 	add.w	ip, ip, #1
 8004bc0:	780b      	ldrb	r3, [r1, #0]
 8004bc2:	3101      	adds	r1, #1
 8004bc4:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8004bc6:	3a01      	subs	r2, #1
 8004bc8:	d001      	beq.n	8004bce <mem_cmp+0x18>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d0f4      	beq.n	8004bb8 <mem_cmp+0x2>

	return r;
}
 8004bce:	4770      	bx	lr

08004bd0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004bd0:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8004bd2:	e000      	b.n	8004bd6 <chk_chr+0x6>
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	7818      	ldrb	r0, [r3, #0]
 8004bd8:	b108      	cbz	r0, 8004bde <chk_chr+0xe>
 8004bda:	4288      	cmp	r0, r1
 8004bdc:	d1fa      	bne.n	8004bd4 <chk_chr+0x4>
	return *str;
}
 8004bde:	4770      	bx	lr

08004be0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004be0:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004be2:	2500      	movs	r5, #0
 8004be4:	462b      	mov	r3, r5
 8004be6:	e001      	b.n	8004bec <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8004be8:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004bea:	3301      	adds	r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d815      	bhi.n	8004c1c <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8004bf0:	011a      	lsls	r2, r3, #4
 8004bf2:	4c17      	ldr	r4, [pc, #92]	; (8004c50 <chk_lock+0x70>)
 8004bf4:	58a2      	ldr	r2, [r4, r2]
 8004bf6:	2a00      	cmp	r2, #0
 8004bf8:	d0f6      	beq.n	8004be8 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004bfa:	6804      	ldr	r4, [r0, #0]
 8004bfc:	42a2      	cmp	r2, r4
 8004bfe:	d1f4      	bne.n	8004bea <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8004c00:	4a13      	ldr	r2, [pc, #76]	; (8004c50 <chk_lock+0x70>)
 8004c02:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004c06:	6854      	ldr	r4, [r2, #4]
 8004c08:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c0a:	4294      	cmp	r4, r2
 8004c0c:	d1ed      	bne.n	8004bea <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8004c0e:	4a10      	ldr	r2, [pc, #64]	; (8004c50 <chk_lock+0x70>)
 8004c10:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004c14:	6894      	ldr	r4, [r2, #8]
 8004c16:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8004c18:	4294      	cmp	r4, r2
 8004c1a:	d1e6      	bne.n	8004bea <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d00a      	beq.n	8004c36 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c20:	b9a1      	cbnz	r1, 8004c4c <chk_lock+0x6c>
 8004c22:	4a0b      	ldr	r2, [pc, #44]	; (8004c50 <chk_lock+0x70>)
 8004c24:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8004c28:	899b      	ldrh	r3, [r3, #12]
 8004c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2e:	d00b      	beq.n	8004c48 <chk_lock+0x68>
 8004c30:	2000      	movs	r0, #0
}
 8004c32:	bc30      	pop	{r4, r5}
 8004c34:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004c36:	b92d      	cbnz	r5, 8004c44 <chk_lock+0x64>
 8004c38:	2902      	cmp	r1, #2
 8004c3a:	d001      	beq.n	8004c40 <chk_lock+0x60>
 8004c3c:	2012      	movs	r0, #18
 8004c3e:	e7f8      	b.n	8004c32 <chk_lock+0x52>
 8004c40:	2000      	movs	r0, #0
 8004c42:	e7f6      	b.n	8004c32 <chk_lock+0x52>
 8004c44:	2000      	movs	r0, #0
 8004c46:	e7f4      	b.n	8004c32 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c48:	2010      	movs	r0, #16
 8004c4a:	e7f2      	b.n	8004c32 <chk_lock+0x52>
 8004c4c:	2010      	movs	r0, #16
 8004c4e:	e7f0      	b.n	8004c32 <chk_lock+0x52>
 8004c50:	200000a8 	.word	0x200000a8

08004c54 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c54:	2000      	movs	r0, #0
 8004c56:	e000      	b.n	8004c5a <enq_lock+0x6>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	2801      	cmp	r0, #1
 8004c5c:	d804      	bhi.n	8004c68 <enq_lock+0x14>
 8004c5e:	0103      	lsls	r3, r0, #4
 8004c60:	4a03      	ldr	r2, [pc, #12]	; (8004c70 <enq_lock+0x1c>)
 8004c62:	58d3      	ldr	r3, [r2, r3]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f7      	bne.n	8004c58 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8004c68:	3802      	subs	r0, #2
 8004c6a:	bf18      	it	ne
 8004c6c:	2001      	movne	r0, #1
 8004c6e:	4770      	bx	lr
 8004c70:	200000a8 	.word	0x200000a8

08004c74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004c74:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004c76:	2300      	movs	r3, #0
 8004c78:	e000      	b.n	8004c7c <inc_lock+0x8>
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d813      	bhi.n	8004ca8 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8004c80:	011a      	lsls	r2, r3, #4
 8004c82:	4c24      	ldr	r4, [pc, #144]	; (8004d14 <inc_lock+0xa0>)
 8004c84:	58a4      	ldr	r4, [r4, r2]
 8004c86:	6802      	ldr	r2, [r0, #0]
 8004c88:	4294      	cmp	r4, r2
 8004c8a:	d1f6      	bne.n	8004c7a <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8004c8c:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <inc_lock+0xa0>)
 8004c8e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004c92:	6854      	ldr	r4, [r2, #4]
 8004c94:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004c96:	4294      	cmp	r4, r2
 8004c98:	d1ef      	bne.n	8004c7a <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	; (8004d14 <inc_lock+0xa0>)
 8004c9c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004ca0:	6894      	ldr	r4, [r2, #8]
 8004ca2:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8004ca4:	4294      	cmp	r4, r2
 8004ca6:	d1e8      	bne.n	8004c7a <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d00d      	beq.n	8004cc8 <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004cac:	b121      	cbz	r1, 8004cb8 <inc_lock+0x44>
 8004cae:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <inc_lock+0xa0>)
 8004cb0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004cb4:	8992      	ldrh	r2, [r2, #12]
 8004cb6:	bb52      	cbnz	r2, 8004d0e <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004cb8:	b9f1      	cbnz	r1, 8004cf8 <inc_lock+0x84>
 8004cba:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <inc_lock+0xa0>)
 8004cbc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004cc0:	8991      	ldrh	r1, [r2, #12]
 8004cc2:	3101      	adds	r1, #1
 8004cc4:	b289      	uxth	r1, r1
 8004cc6:	e019      	b.n	8004cfc <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d805      	bhi.n	8004cda <inc_lock+0x66>
 8004cce:	011a      	lsls	r2, r3, #4
 8004cd0:	4c10      	ldr	r4, [pc, #64]	; (8004d14 <inc_lock+0xa0>)
 8004cd2:	58a2      	ldr	r2, [r4, r2]
 8004cd4:	b10a      	cbz	r2, 8004cda <inc_lock+0x66>
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	e7f7      	b.n	8004cca <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d015      	beq.n	8004d0a <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 8004cde:	4d0d      	ldr	r5, [pc, #52]	; (8004d14 <inc_lock+0xa0>)
 8004ce0:	011c      	lsls	r4, r3, #4
 8004ce2:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8004ce6:	6806      	ldr	r6, [r0, #0]
 8004ce8:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8004cea:	6884      	ldr	r4, [r0, #8]
 8004cec:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8004cee:	6940      	ldr	r0, [r0, #20]
 8004cf0:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	8190      	strh	r0, [r2, #12]
 8004cf6:	e7d9      	b.n	8004cac <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cfc:	4a05      	ldr	r2, [pc, #20]	; (8004d14 <inc_lock+0xa0>)
 8004cfe:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004d02:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8004d04:	1c58      	adds	r0, r3, #1
}
 8004d06:	bc70      	pop	{r4, r5, r6}
 8004d08:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e7fb      	b.n	8004d06 <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d0e:	2000      	movs	r0, #0
 8004d10:	e7f9      	b.n	8004d06 <inc_lock+0x92>
 8004d12:	bf00      	nop
 8004d14:	200000a8 	.word	0x200000a8

08004d18 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004d18:	3801      	subs	r0, #1
 8004d1a:	2801      	cmp	r0, #1
 8004d1c:	d815      	bhi.n	8004d4a <dec_lock+0x32>
		n = Files[i].ctr;
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <dec_lock+0x3c>)
 8004d20:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8004d24:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2a:	d003      	beq.n	8004d34 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8004d2c:	b11b      	cbz	r3, 8004d36 <dec_lock+0x1e>
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	e000      	b.n	8004d36 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004d34:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8004d36:	4a07      	ldr	r2, [pc, #28]	; (8004d54 <dec_lock+0x3c>)
 8004d38:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8004d3c:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004d3e:	b933      	cbnz	r3, 8004d4e <dec_lock+0x36>
 8004d40:	0103      	lsls	r3, r0, #4
 8004d42:	2000      	movs	r0, #0
 8004d44:	4a03      	ldr	r2, [pc, #12]	; (8004d54 <dec_lock+0x3c>)
 8004d46:	50d0      	str	r0, [r2, r3]
 8004d48:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004d4a:	2002      	movs	r0, #2
 8004d4c:	4770      	bx	lr
		res = FR_OK;
 8004d4e:	2000      	movs	r0, #0
	}
	return res;
}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	200000a8 	.word	0x200000a8

08004d58 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e003      	b.n	8004d64 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8004d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d60:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8004d62:	3301      	adds	r3, #1
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d811      	bhi.n	8004d8c <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d68:	011a      	lsls	r2, r3, #4
 8004d6a:	4909      	ldr	r1, [pc, #36]	; (8004d90 <clear_lock+0x38>)
 8004d6c:	588a      	ldr	r2, [r1, r2]
 8004d6e:	4282      	cmp	r2, r0
 8004d70:	d1f7      	bne.n	8004d62 <clear_lock+0xa>
{
 8004d72:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d74:	011a      	lsls	r2, r3, #4
 8004d76:	2400      	movs	r4, #0
 8004d78:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d8ed      	bhi.n	8004d5c <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d80:	011a      	lsls	r2, r3, #4
 8004d82:	4903      	ldr	r1, [pc, #12]	; (8004d90 <clear_lock+0x38>)
 8004d84:	588a      	ldr	r2, [r1, r2]
 8004d86:	4282      	cmp	r2, r0
 8004d88:	d1f7      	bne.n	8004d7a <clear_lock+0x22>
 8004d8a:	e7f3      	b.n	8004d74 <clear_lock+0x1c>
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	200000a8 	.word	0x200000a8

08004d94 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8004d94:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004d96:	6a03      	ldr	r3, [r0, #32]
 8004d98:	3b02      	subs	r3, #2
 8004d9a:	428b      	cmp	r3, r1
 8004d9c:	d904      	bls.n	8004da8 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8004d9e:	8943      	ldrh	r3, [r0, #10]
 8004da0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8004da2:	fb01 0003 	mla	r0, r1, r3, r0
 8004da6:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004da8:	2000      	movs	r0, #0
}
 8004daa:	4770      	bx	lr

08004dac <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004dac:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004dae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004db0:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004db2:	0a49      	lsrs	r1, r1, #9
 8004db4:	8952      	ldrh	r2, [r2, #10]
 8004db6:	fbb1 f1f2 	udiv	r1, r1, r2
 8004dba:	e001      	b.n	8004dc0 <clmt_clust+0x14>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 8004dbc:	1a09      	subs	r1, r1, r0
 8004dbe:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004dc0:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004dc2:	b118      	cbz	r0, 8004dcc <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8004dc4:	4281      	cmp	r1, r0
 8004dc6:	d2f9      	bcs.n	8004dbc <clmt_clust+0x10>
	}
	return cl + *tbl;	/* Return the cluster number */
 8004dc8:	6858      	ldr	r0, [r3, #4]
 8004dca:	4408      	add	r0, r1
}
 8004dcc:	4770      	bx	lr

08004dce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004dce:	b570      	push	{r4, r5, r6, lr}
 8004dd0:	4606      	mov	r6, r0
 8004dd2:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004dd4:	f101 001a 	add.w	r0, r1, #26
 8004dd8:	f7ff fec0 	bl	8004b5c <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8004ddc:	7833      	ldrb	r3, [r6, #0]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d000      	beq.n	8004de4 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004de6:	f105 0014 	add.w	r0, r5, #20
 8004dea:	f7ff feb7 	bl	8004b5c <ld_word>
 8004dee:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8004df2:	e7f6      	b.n	8004de2 <ld_clust+0x14>

08004df4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004df4:	b570      	push	{r4, r5, r6, lr}
 8004df6:	4606      	mov	r6, r0
 8004df8:	460c      	mov	r4, r1
 8004dfa:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004dfc:	b291      	uxth	r1, r2
 8004dfe:	f104 001a 	add.w	r0, r4, #26
 8004e02:	f7ff febb 	bl	8004b7c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004e06:	7833      	ldrb	r3, [r6, #0]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d000      	beq.n	8004e0e <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004e0e:	0c29      	lsrs	r1, r5, #16
 8004e10:	f104 0014 	add.w	r0, r4, #20
 8004e14:	f7ff feb2 	bl	8004b7c <st_word>
}
 8004e18:	e7f8      	b.n	8004e0c <st_clust+0x18>
	...

08004e1c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e20:	4680      	mov	r8, r0
 8004e22:	460f      	mov	r7, r1
 8004e24:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004e26:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004e28:	230f      	movs	r3, #15
 8004e2a:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8004e2c:	2400      	movs	r4, #0
 8004e2e:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8004e30:	4621      	mov	r1, r4
 8004e32:	f107 001a 	add.w	r0, r7, #26
 8004e36:	f7ff fea1 	bl	8004b7c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004e3a:	f109 36ff 	add.w	r6, r9, #4294967295
 8004e3e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8004e42:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8004e46:	4625      	mov	r5, r4
 8004e48:	e002      	b.n	8004e50 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 8004e4a:	3401      	adds	r4, #1
 8004e4c:	2c0c      	cmp	r4, #12
 8004e4e:	d811      	bhi.n	8004e74 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e54:	429d      	cmp	r5, r3
 8004e56:	d002      	beq.n	8004e5e <put_lfn+0x42>
 8004e58:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8004e5c:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <put_lfn+0x74>)
 8004e60:	5d18      	ldrb	r0, [r3, r4]
 8004e62:	4629      	mov	r1, r5
 8004e64:	4438      	add	r0, r7
 8004e66:	f7ff fe89 	bl	8004b7c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004e6a:	2d00      	cmp	r5, #0
 8004e6c:	d1ed      	bne.n	8004e4a <put_lfn+0x2e>
 8004e6e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004e72:	e7ea      	b.n	8004e4a <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e78:	429d      	cmp	r5, r3
 8004e7a:	d002      	beq.n	8004e82 <put_lfn+0x66>
 8004e7c:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8004e80:	b90b      	cbnz	r3, 8004e86 <put_lfn+0x6a>
 8004e82:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004e86:	f887 9000 	strb.w	r9, [r7]
}
 8004e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e8e:	bf00      	nop
 8004e90:	0800b390 	.word	0x0800b390

08004e94 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	4605      	mov	r5, r0
 8004e9a:	4616      	mov	r6, r2
 8004e9c:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004e9e:	220b      	movs	r2, #11
 8004ea0:	f7ff fe7a 	bl	8004b98 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004ea4:	2c05      	cmp	r4, #5
 8004ea6:	d811      	bhi.n	8004ecc <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8004ea8:	2307      	movs	r3, #7
 8004eaa:	e01f      	b.n	8004eec <gen_numname+0x58>
 8004eac:	3101      	adds	r1, #1
 8004eae:	290f      	cmp	r1, #15
 8004eb0:	d80c      	bhi.n	8004ecc <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 8004eb2:	f003 0c01 	and.w	ip, r3, #1
 8004eb6:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 8004eba:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8004ebc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8004ec0:	d0f4      	beq.n	8004eac <gen_numname+0x18>
 8004ec2:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 8004ec6:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 8004eca:	e7ef      	b.n	8004eac <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 8004ecc:	8833      	ldrh	r3, [r6, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0ea      	beq.n	8004ea8 <gen_numname+0x14>
			wc = *lfn++;
 8004ed2:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	e7ea      	b.n	8004eae <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	3308      	adds	r3, #8
 8004edc:	446b      	add	r3, sp
 8004ede:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 8004ee2:	0921      	lsrs	r1, r4, #4
	} while (seq);
 8004ee4:	2c0f      	cmp	r4, #15
 8004ee6:	d90a      	bls.n	8004efe <gen_numname+0x6a>
		ns[i--] = c;
 8004ee8:	4613      	mov	r3, r2
		seq /= 16;
 8004eea:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 8004eec:	f004 020f 	and.w	r2, r4, #15
 8004ef0:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 8004ef4:	2939      	cmp	r1, #57	; 0x39
 8004ef6:	d9ef      	bls.n	8004ed8 <gen_numname+0x44>
 8004ef8:	f102 0137 	add.w	r1, r2, #55	; 0x37
 8004efc:	e7ec      	b.n	8004ed8 <gen_numname+0x44>
	ns[i] = '~';
 8004efe:	217e      	movs	r1, #126	; 0x7e
 8004f00:	f102 0308 	add.w	r3, r2, #8
 8004f04:	446b      	add	r3, sp
 8004f06:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <gen_numname+0x7c>
 8004f0e:	3301      	adds	r3, #1
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d209      	bcs.n	8004f28 <gen_numname+0x94>
 8004f14:	5ce9      	ldrb	r1, [r5, r3]
 8004f16:	2920      	cmp	r1, #32
 8004f18:	d1f9      	bne.n	8004f0e <gen_numname+0x7a>
 8004f1a:	e005      	b.n	8004f28 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004f1c:	2020      	movs	r0, #32
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 8004f22:	2907      	cmp	r1, #7
 8004f24:	d809      	bhi.n	8004f3a <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004f26:	460b      	mov	r3, r1
 8004f28:	2a07      	cmp	r2, #7
 8004f2a:	d8f7      	bhi.n	8004f1c <gen_numname+0x88>
 8004f2c:	f102 0108 	add.w	r1, r2, #8
 8004f30:	4469      	add	r1, sp
 8004f32:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8004f36:	3201      	adds	r2, #1
 8004f38:	e7f1      	b.n	8004f1e <gen_numname+0x8a>
}
 8004f3a:	b002      	add	sp, #8
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}

08004f3e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004f3e:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8004f40:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 8004f44:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004f46:	01c3      	lsls	r3, r0, #7
 8004f48:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8004f4c:	7808      	ldrb	r0, [r1, #0]
 8004f4e:	3101      	adds	r1, #1
 8004f50:	fa50 f383 	uxtab	r3, r0, r3
 8004f54:	b2d8      	uxtb	r0, r3
	} while (--n);
 8004f56:	f1bc 0c01 	subs.w	ip, ip, #1
 8004f5a:	d1f4      	bne.n	8004f46 <sum_sfn+0x8>
	return sum;
}
 8004f5c:	4770      	bx	lr

08004f5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004f5e:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004f60:	6800      	ldr	r0, [r0, #0]
 8004f62:	b138      	cbz	r0, 8004f74 <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004f64:	4602      	mov	r2, r0
 8004f66:	7813      	ldrb	r3, [r2, #0]
 8004f68:	2b1f      	cmp	r3, #31
 8004f6a:	d906      	bls.n	8004f7a <get_ldnumber+0x1c>
 8004f6c:	2b3a      	cmp	r3, #58	; 0x3a
 8004f6e:	d004      	beq.n	8004f7a <get_ldnumber+0x1c>
 8004f70:	3201      	adds	r2, #1
 8004f72:	e7f8      	b.n	8004f66 <get_ldnumber+0x8>
	int vol = -1;
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004f7a:	2b3a      	cmp	r3, #58	; 0x3a
 8004f7c:	d001      	beq.n	8004f82 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004f7e:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8004f80:	4770      	bx	lr
{
 8004f82:	b410      	push	{r4}
			i = *tp++ - '0';
 8004f84:	4603      	mov	r3, r0
 8004f86:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004f8a:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004f8c:	2809      	cmp	r0, #9
 8004f8e:	d808      	bhi.n	8004fa2 <get_ldnumber+0x44>
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d002      	beq.n	8004f9a <get_ldnumber+0x3c>
	int vol = -1;
 8004f94:	f04f 30ff 	mov.w	r0, #4294967295
 8004f98:	e005      	b.n	8004fa6 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004f9a:	b938      	cbnz	r0, 8004fac <get_ldnumber+0x4e>
					*path = ++tt;
 8004f9c:	3201      	adds	r2, #1
 8004f9e:	600a      	str	r2, [r1, #0]
 8004fa0:	e001      	b.n	8004fa6 <get_ldnumber+0x48>
	int vol = -1;
 8004fa2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004faa:	4770      	bx	lr
	int vol = -1;
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 8004fb0:	e7f9      	b.n	8004fa6 <get_ldnumber+0x48>

08004fb2 <putc_init>:
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
 8004fb2:	6001      	str	r1, [r0, #0]
	pb->nchr = pb->idx = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	6043      	str	r3, [r0, #4]
 8004fb8:	6083      	str	r3, [r0, #8]
}
 8004fba:	4770      	bx	lr

08004fbc <lock_fs>:
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004fbc:	b130      	cbz	r0, 8004fcc <lock_fs+0x10>
{
 8004fbe:	b508      	push	{r3, lr}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004fc0:	6900      	ldr	r0, [r0, #16]
 8004fc2:	f001 ff78 	bl	8006eb6 <ff_req_grant>
 8004fc6:	b100      	cbz	r0, 8004fca <lock_fs+0xe>
 8004fc8:	2001      	movs	r0, #1
}
 8004fca:	bd08      	pop	{r3, pc}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004fcc:	2000      	movs	r0, #0
}
 8004fce:	4770      	bx	lr

08004fd0 <sync_window>:
{
 8004fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004fd4:	78c5      	ldrb	r5, [r0, #3]
 8004fd6:	b915      	cbnz	r5, 8004fde <sync_window+0xe>
}
 8004fd8:	4628      	mov	r0, r5
 8004fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fde:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8004fe0:	6b87      	ldr	r7, [r0, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004fe2:	f100 083c 	add.w	r8, r0, #60	; 0x3c
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	463a      	mov	r2, r7
 8004fea:	4641      	mov	r1, r8
 8004fec:	7840      	ldrb	r0, [r0, #1]
 8004fee:	f7ff fd9d 	bl	8004b2c <disk_write>
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	b9a0      	cbnz	r0, 8005020 <sync_window+0x50>
			fs->wflag = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ffa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ffc:	1afb      	subs	r3, r7, r3
 8004ffe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005000:	4293      	cmp	r3, r2
 8005002:	d2e9      	bcs.n	8004fd8 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005004:	78a6      	ldrb	r6, [r4, #2]
 8005006:	e008      	b.n	800501a <sync_window+0x4a>
					wsect += fs->fsize;
 8005008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800500a:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800500c:	2301      	movs	r3, #1
 800500e:	463a      	mov	r2, r7
 8005010:	4641      	mov	r1, r8
 8005012:	7860      	ldrb	r0, [r4, #1]
 8005014:	f7ff fd8a 	bl	8004b2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005018:	3e01      	subs	r6, #1
 800501a:	2e01      	cmp	r6, #1
 800501c:	d8f4      	bhi.n	8005008 <sync_window+0x38>
 800501e:	e7db      	b.n	8004fd8 <sync_window+0x8>
			res = FR_DISK_ERR;
 8005020:	2501      	movs	r5, #1
 8005022:	e7d9      	b.n	8004fd8 <sync_window+0x8>

08005024 <move_window>:
{
 8005024:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005026:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005028:	428b      	cmp	r3, r1
 800502a:	d102      	bne.n	8005032 <move_window+0xe>
	FRESULT res = FR_OK;
 800502c:	2600      	movs	r6, #0
}
 800502e:	4630      	mov	r0, r6
 8005030:	bd70      	pop	{r4, r5, r6, pc}
 8005032:	4604      	mov	r4, r0
 8005034:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8005036:	f7ff ffcb 	bl	8004fd0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800503a:	4606      	mov	r6, r0
 800503c:	2800      	cmp	r0, #0
 800503e:	d1f6      	bne.n	800502e <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005040:	2301      	movs	r3, #1
 8005042:	462a      	mov	r2, r5
 8005044:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005048:	7860      	ldrb	r0, [r4, #1]
 800504a:	f7ff fd63 	bl	8004b14 <disk_read>
 800504e:	b110      	cbz	r0, 8005056 <move_window+0x32>
				res = FR_DISK_ERR;
 8005050:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005052:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8005056:	63a5      	str	r5, [r4, #56]	; 0x38
 8005058:	e7e9      	b.n	800502e <move_window+0xa>
	...

0800505c <check_fs>:
{
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005060:	2300      	movs	r3, #0
 8005062:	70c3      	strb	r3, [r0, #3]
 8005064:	f04f 33ff 	mov.w	r3, #4294967295
 8005068:	6383      	str	r3, [r0, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800506a:	f7ff ffdb 	bl	8005024 <move_window>
 800506e:	bb30      	cbnz	r0, 80050be <check_fs+0x62>
 8005070:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005072:	f204 203a 	addw	r0, r4, #570	; 0x23a
 8005076:	f7ff fd71 	bl	8004b5c <ld_word>
 800507a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800507e:	4298      	cmp	r0, r3
 8005080:	d11f      	bne.n	80050c2 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005082:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005086:	2be9      	cmp	r3, #233	; 0xe9
 8005088:	d007      	beq.n	800509a <check_fs+0x3e>
 800508a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800508c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005090:	4a0d      	ldr	r2, [pc, #52]	; (80050c8 <check_fs+0x6c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d001      	beq.n	800509a <check_fs+0x3e>
	return 2;
 8005096:	2502      	movs	r5, #2
 8005098:	e014      	b.n	80050c4 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800509a:	f104 0072 	add.w	r0, r4, #114	; 0x72
 800509e:	f7ff fd62 	bl	8004b66 <ld_dword>
 80050a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <check_fs+0x70>)
 80050a8:	4298      	cmp	r0, r3
 80050aa:	d00b      	beq.n	80050c4 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80050ac:	f104 008e 	add.w	r0, r4, #142	; 0x8e
 80050b0:	f7ff fd59 	bl	8004b66 <ld_dword>
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <check_fs+0x74>)
 80050b6:	4298      	cmp	r0, r3
 80050b8:	d004      	beq.n	80050c4 <check_fs+0x68>
	return 2;
 80050ba:	2502      	movs	r5, #2
 80050bc:	e002      	b.n	80050c4 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80050be:	2504      	movs	r5, #4
 80050c0:	e000      	b.n	80050c4 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80050c2:	2503      	movs	r5, #3
}
 80050c4:	4628      	mov	r0, r5
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	009000eb 	.word	0x009000eb
 80050cc:	00544146 	.word	0x00544146
 80050d0:	33544146 	.word	0x33544146

080050d4 <find_volume>:
{
 80050d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d8:	b085      	sub	sp, #20
 80050da:	460e      	mov	r6, r1
 80050dc:	4617      	mov	r7, r2
	*rfs = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80050e2:	f7ff ff3c 	bl	8004f5e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80050e6:	1e04      	subs	r4, r0, #0
 80050e8:	f2c0 814d 	blt.w	8005386 <find_volume+0x2b2>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80050ec:	4bba      	ldr	r3, [pc, #744]	; (80053d8 <find_volume+0x304>)
 80050ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80050f2:	6a1d      	ldr	r5, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80050f4:	2d00      	cmp	r5, #0
 80050f6:	f000 8148 	beq.w	800538a <find_volume+0x2b6>
	ENTER_FF(fs);						/* Lock the volume */
 80050fa:	4628      	mov	r0, r5
 80050fc:	f7ff ff5e 	bl	8004fbc <lock_fs>
 8005100:	2800      	cmp	r0, #0
 8005102:	f000 8147 	beq.w	8005394 <find_volume+0x2c0>
	*rfs = fs;							/* Return pointer to the file system object */
 8005106:	6035      	str	r5, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005108:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800510c:	782b      	ldrb	r3, [r5, #0]
 800510e:	b173      	cbz	r3, 800512e <find_volume+0x5a>
		stat = disk_status(fs->drv);
 8005110:	7868      	ldrb	r0, [r5, #1]
 8005112:	f7ff fcdf 	bl	8004ad4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005116:	f010 0601 	ands.w	r6, r0, #1
 800511a:	d108      	bne.n	800512e <find_volume+0x5a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800511c:	2f00      	cmp	r7, #0
 800511e:	f000 8135 	beq.w	800538c <find_volume+0x2b8>
 8005122:	f010 0f04 	tst.w	r0, #4
 8005126:	f000 8131 	beq.w	800538c <find_volume+0x2b8>
				return FR_WRITE_PROTECTED;
 800512a:	260a      	movs	r6, #10
 800512c:	e12e      	b.n	800538c <find_volume+0x2b8>
	fs->fs_type = 0;					/* Clear the file system object */
 800512e:	2300      	movs	r3, #0
 8005130:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005132:	b2e0      	uxtb	r0, r4
 8005134:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005136:	f7ff fcd9 	bl	8004aec <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800513a:	f010 0601 	ands.w	r6, r0, #1
 800513e:	f040 812b 	bne.w	8005398 <find_volume+0x2c4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005142:	b11f      	cbz	r7, 800514c <find_volume+0x78>
 8005144:	f010 0f04 	tst.w	r0, #4
 8005148:	f040 8128 	bne.w	800539c <find_volume+0x2c8>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800514c:	2100      	movs	r1, #0
 800514e:	4628      	mov	r0, r5
 8005150:	f7ff ff84 	bl	800505c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005154:	2802      	cmp	r0, #2
 8005156:	f000 80b8 	beq.w	80052ca <find_volume+0x1f6>
	bsect = 0;
 800515a:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800515c:	2804      	cmp	r0, #4
 800515e:	f000 811f 	beq.w	80053a0 <find_volume+0x2cc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005162:	2801      	cmp	r0, #1
 8005164:	f200 811e 	bhi.w	80053a4 <find_volume+0x2d0>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005168:	f105 0047 	add.w	r0, r5, #71	; 0x47
 800516c:	f7ff fcf6 	bl	8004b5c <ld_word>
 8005170:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005174:	f040 8118 	bne.w	80053a8 <find_volume+0x2d4>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005178:	f105 0052 	add.w	r0, r5, #82	; 0x52
 800517c:	f7ff fcee 	bl	8004b5c <ld_word>
 8005180:	4604      	mov	r4, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005182:	b920      	cbnz	r0, 800518e <find_volume+0xba>
 8005184:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8005188:	f7ff fced 	bl	8004b66 <ld_dword>
 800518c:	4604      	mov	r4, r0
		fs->fsize = fasize;
 800518e:	626c      	str	r4, [r5, #36]	; 0x24
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005190:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
 8005194:	70aa      	strb	r2, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005196:	1e53      	subs	r3, r2, #1
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	f200 8106 	bhi.w	80053ac <find_volume+0x2d8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80051a0:	fb04 f802 	mul.w	r8, r4, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80051a4:	f895 9049 	ldrb.w	r9, [r5, #73]	; 0x49
 80051a8:	f8a5 900a 	strh.w	r9, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80051ac:	f1b9 0f00 	cmp.w	r9, #0
 80051b0:	f000 80fe 	beq.w	80053b0 <find_volume+0x2dc>
 80051b4:	f109 33ff 	add.w	r3, r9, #4294967295
 80051b8:	ea19 0f03 	tst.w	r9, r3
 80051bc:	f040 80fa 	bne.w	80053b4 <find_volume+0x2e0>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80051c0:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 80051c4:	f7ff fcca 	bl	8004b5c <ld_word>
 80051c8:	4682      	mov	sl, r0
 80051ca:	8128      	strh	r0, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80051cc:	f010 0f0f 	tst.w	r0, #15
 80051d0:	f040 80f2 	bne.w	80053b8 <find_volume+0x2e4>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80051d4:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 80051d8:	f7ff fcc0 	bl	8004b5c <ld_word>
 80051dc:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80051de:	b920      	cbnz	r0, 80051ea <find_volume+0x116>
 80051e0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80051e4:	f7ff fcbf 	bl	8004b66 <ld_dword>
 80051e8:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80051ea:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 80051ee:	f7ff fcb5 	bl	8004b5c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80051f2:	4602      	mov	r2, r0
 80051f4:	2800      	cmp	r0, #0
 80051f6:	f000 80e1 	beq.w	80053bc <find_volume+0x2e8>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80051fa:	eb00 0308 	add.w	r3, r0, r8
 80051fe:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005202:	459b      	cmp	fp, r3
 8005204:	f0c0 80dc 	bcc.w	80053c0 <find_volume+0x2ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005208:	ebab 0b03 	sub.w	fp, fp, r3
 800520c:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005210:	45cb      	cmp	fp, r9
 8005212:	f0c0 80d7 	bcc.w	80053c4 <find_volume+0x2f0>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005216:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800521a:	4281      	cmp	r1, r0
 800521c:	d96d      	bls.n	80052fa <find_volume+0x226>
		fmt = FS_FAT32;
 800521e:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005222:	f640 70f5 	movw	r0, #4085	; 0xff5
 8005226:	4281      	cmp	r1, r0
 8005228:	d801      	bhi.n	800522e <find_volume+0x15a>
 800522a:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800522e:	f101 0902 	add.w	r9, r1, #2
 8005232:	f8c5 9020 	str.w	r9, [r5, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8005236:	62af      	str	r7, [r5, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005238:	443a      	add	r2, r7
 800523a:	62ea      	str	r2, [r5, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800523c:	443b      	add	r3, r7
 800523e:	636b      	str	r3, [r5, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8005240:	f1bb 0f03 	cmp.w	fp, #3
 8005244:	d05c      	beq.n	8005300 <find_volume+0x22c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005246:	f1ba 0f00 	cmp.w	sl, #0
 800524a:	f000 80c1 	beq.w	80053d0 <find_volume+0x2fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800524e:	4442      	add	r2, r8
 8005250:	632a      	str	r2, [r5, #48]	; 0x30
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005252:	f1bb 0f02 	cmp.w	fp, #2
 8005256:	d064      	beq.n	8005322 <find_volume+0x24e>
 8005258:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800525c:	f009 0901 	and.w	r9, r9, #1
 8005260:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005264:	f209 13ff 	addw	r3, r9, #511	; 0x1ff
 8005268:	ebb4 2f53 	cmp.w	r4, r3, lsr #9
 800526c:	f0c0 80b2 	bcc.w	80053d4 <find_volume+0x300>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005270:	f04f 33ff 	mov.w	r3, #4294967295
 8005274:	61ab      	str	r3, [r5, #24]
 8005276:	616b      	str	r3, [r5, #20]
		fs->fsi_flag = 0x80;
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	712b      	strb	r3, [r5, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800527c:	f1bb 0f03 	cmp.w	fp, #3
 8005280:	d052      	beq.n	8005328 <find_volume+0x254>
	fs->fs_type = fmt;		/* FAT sub-type */
 8005282:	f885 b000 	strb.w	fp, [r5]
	fs->id = ++Fsid;		/* File system mount ID */
 8005286:	4a54      	ldr	r2, [pc, #336]	; (80053d8 <find_volume+0x304>)
 8005288:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 800528a:	3301      	adds	r3, #1
 800528c:	b29b      	uxth	r3, r3
 800528e:	8493      	strh	r3, [r2, #36]	; 0x24
 8005290:	80eb      	strh	r3, [r5, #6]
	fs->cdir = 0;			/* Initialize current directory */
 8005292:	2300      	movs	r3, #0
 8005294:	61eb      	str	r3, [r5, #28]
	clear_lock(fs);
 8005296:	4628      	mov	r0, r5
 8005298:	f7ff fd5e 	bl	8004d58 <clear_lock>
	return FR_OK;
 800529c:	e076      	b.n	800538c <find_volume+0x2b8>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800529e:	2000      	movs	r0, #0
 80052a0:	ab04      	add	r3, sp, #16
 80052a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80052a6:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80052aa:	3401      	adds	r4, #1
 80052ac:	2c03      	cmp	r4, #3
 80052ae:	d80e      	bhi.n	80052ce <find_volume+0x1fa>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80052b0:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 80052b4:	0123      	lsls	r3, r4, #4
 80052b6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80052ba:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80052bc:	7903      	ldrb	r3, [r0, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0ed      	beq.n	800529e <find_volume+0x1ca>
 80052c2:	3008      	adds	r0, #8
 80052c4:	f7ff fc4f 	bl	8004b66 <ld_dword>
 80052c8:	e7ea      	b.n	80052a0 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80052ca:	2400      	movs	r4, #0
 80052cc:	e7ee      	b.n	80052ac <find_volume+0x1d8>
 80052ce:	2400      	movs	r4, #0
 80052d0:	e00a      	b.n	80052e8 <find_volume+0x214>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80052d2:	4639      	mov	r1, r7
 80052d4:	4628      	mov	r0, r5
 80052d6:	f7ff fec1 	bl	800505c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80052da:	2801      	cmp	r0, #1
 80052dc:	f67f af3e 	bls.w	800515c <find_volume+0x88>
 80052e0:	3401      	adds	r4, #1
 80052e2:	2c03      	cmp	r4, #3
 80052e4:	f63f af3a 	bhi.w	800515c <find_volume+0x88>
			bsect = br[i];
 80052e8:	ab04      	add	r3, sp, #16
 80052ea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80052ee:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80052f2:	2f00      	cmp	r7, #0
 80052f4:	d1ed      	bne.n	80052d2 <find_volume+0x1fe>
 80052f6:	2003      	movs	r0, #3
 80052f8:	e7f2      	b.n	80052e0 <find_volume+0x20c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80052fa:	f04f 0b02 	mov.w	fp, #2
 80052fe:	e790      	b.n	8005222 <find_volume+0x14e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005300:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8005304:	f7ff fc2a 	bl	8004b5c <ld_word>
 8005308:	2800      	cmp	r0, #0
 800530a:	d15d      	bne.n	80053c8 <find_volume+0x2f4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800530c:	f1ba 0f00 	cmp.w	sl, #0
 8005310:	d15c      	bne.n	80053cc <find_volume+0x2f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005312:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8005316:	f7ff fc26 	bl	8004b66 <ld_dword>
 800531a:	6328      	str	r0, [r5, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800531c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8005320:	e7a0      	b.n	8005264 <find_volume+0x190>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005322:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8005326:	e79d      	b.n	8005264 <find_volume+0x190>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005328:	f105 006c 	add.w	r0, r5, #108	; 0x6c
 800532c:	f7ff fc16 	bl	8004b5c <ld_word>
 8005330:	2801      	cmp	r0, #1
 8005332:	d1a6      	bne.n	8005282 <find_volume+0x1ae>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005334:	1c79      	adds	r1, r7, #1
 8005336:	4628      	mov	r0, r5
 8005338:	f7ff fe74 	bl	8005024 <move_window>
 800533c:	2800      	cmp	r0, #0
 800533e:	d1a0      	bne.n	8005282 <find_volume+0x1ae>
			fs->fsi_flag = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	712b      	strb	r3, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005344:	f205 203a 	addw	r0, r5, #570	; 0x23a
 8005348:	f7ff fc08 	bl	8004b5c <ld_word>
 800534c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005350:	4298      	cmp	r0, r3
 8005352:	d196      	bne.n	8005282 <find_volume+0x1ae>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005354:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8005358:	f7ff fc05 	bl	8004b66 <ld_dword>
 800535c:	4b1f      	ldr	r3, [pc, #124]	; (80053dc <find_volume+0x308>)
 800535e:	4298      	cmp	r0, r3
 8005360:	d18f      	bne.n	8005282 <find_volume+0x1ae>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005362:	f505 7008 	add.w	r0, r5, #544	; 0x220
 8005366:	f7ff fbfe 	bl	8004b66 <ld_dword>
 800536a:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <find_volume+0x30c>)
 800536c:	4298      	cmp	r0, r3
 800536e:	d188      	bne.n	8005282 <find_volume+0x1ae>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005370:	f505 7009 	add.w	r0, r5, #548	; 0x224
 8005374:	f7ff fbf7 	bl	8004b66 <ld_dword>
 8005378:	61a8      	str	r0, [r5, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800537a:	f505 700a 	add.w	r0, r5, #552	; 0x228
 800537e:	f7ff fbf2 	bl	8004b66 <ld_dword>
 8005382:	6168      	str	r0, [r5, #20]
 8005384:	e77d      	b.n	8005282 <find_volume+0x1ae>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005386:	260b      	movs	r6, #11
 8005388:	e000      	b.n	800538c <find_volume+0x2b8>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800538a:	260c      	movs	r6, #12
}
 800538c:	4630      	mov	r0, r6
 800538e:	b005      	add	sp, #20
 8005390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ENTER_FF(fs);						/* Lock the volume */
 8005394:	260f      	movs	r6, #15
 8005396:	e7f9      	b.n	800538c <find_volume+0x2b8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005398:	2603      	movs	r6, #3
 800539a:	e7f7      	b.n	800538c <find_volume+0x2b8>
		return FR_WRITE_PROTECTED;
 800539c:	260a      	movs	r6, #10
 800539e:	e7f5      	b.n	800538c <find_volume+0x2b8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80053a0:	2601      	movs	r6, #1
 80053a2:	e7f3      	b.n	800538c <find_volume+0x2b8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80053a4:	260d      	movs	r6, #13
 80053a6:	e7f1      	b.n	800538c <find_volume+0x2b8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80053a8:	260d      	movs	r6, #13
 80053aa:	e7ef      	b.n	800538c <find_volume+0x2b8>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80053ac:	260d      	movs	r6, #13
 80053ae:	e7ed      	b.n	800538c <find_volume+0x2b8>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80053b0:	260d      	movs	r6, #13
 80053b2:	e7eb      	b.n	800538c <find_volume+0x2b8>
 80053b4:	260d      	movs	r6, #13
 80053b6:	e7e9      	b.n	800538c <find_volume+0x2b8>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80053b8:	260d      	movs	r6, #13
 80053ba:	e7e7      	b.n	800538c <find_volume+0x2b8>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80053bc:	260d      	movs	r6, #13
 80053be:	e7e5      	b.n	800538c <find_volume+0x2b8>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80053c0:	260d      	movs	r6, #13
 80053c2:	e7e3      	b.n	800538c <find_volume+0x2b8>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80053c4:	260d      	movs	r6, #13
 80053c6:	e7e1      	b.n	800538c <find_volume+0x2b8>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80053c8:	260d      	movs	r6, #13
 80053ca:	e7df      	b.n	800538c <find_volume+0x2b8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80053cc:	260d      	movs	r6, #13
 80053ce:	e7dd      	b.n	800538c <find_volume+0x2b8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80053d0:	260d      	movs	r6, #13
 80053d2:	e7db      	b.n	800538c <find_volume+0x2b8>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80053d4:	260d      	movs	r6, #13
 80053d6:	e7d9      	b.n	800538c <find_volume+0x2b8>
 80053d8:	200000a8 	.word	0x200000a8
 80053dc:	41615252 	.word	0x41615252
 80053e0:	61417272 	.word	0x61417272

080053e4 <put_fat>:
{
 80053e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80053e8:	2901      	cmp	r1, #1
 80053ea:	d97e      	bls.n	80054ea <put_fat+0x106>
 80053ec:	4607      	mov	r7, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	4616      	mov	r6, r2
 80053f2:	6a03      	ldr	r3, [r0, #32]
 80053f4:	428b      	cmp	r3, r1
 80053f6:	d97a      	bls.n	80054ee <put_fat+0x10a>
		switch (fs->fs_type) {
 80053f8:	7803      	ldrb	r3, [r0, #0]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d045      	beq.n	800548a <put_fat+0xa6>
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d057      	beq.n	80054b2 <put_fat+0xce>
 8005402:	2b01      	cmp	r3, #1
 8005404:	d003      	beq.n	800540e <put_fat+0x2a>
 8005406:	2502      	movs	r5, #2
}
 8005408:	4628      	mov	r0, r5
 800540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 800540e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005412:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005414:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8005418:	f7ff fe04 	bl	8005024 <move_window>
			if (res != FR_OK) break;
 800541c:	4605      	mov	r5, r0
 800541e:	2800      	cmp	r0, #0
 8005420:	d1f2      	bne.n	8005408 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 8005422:	f107 0a3c 	add.w	sl, r7, #60	; 0x3c
 8005426:	f108 0901 	add.w	r9, r8, #1
 800542a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800542e:	f014 0401 	ands.w	r4, r4, #1
 8005432:	d01f      	beq.n	8005474 <put_fat+0x90>
 8005434:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	0132      	lsls	r2, r6, #4
 800543e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8005442:	4313      	orrs	r3, r2
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800544a:	2301      	movs	r3, #1
 800544c:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800544e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005450:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8005454:	4638      	mov	r0, r7
 8005456:	f7ff fde5 	bl	8005024 <move_window>
			if (res != FR_OK) break;
 800545a:	4605      	mov	r5, r0
 800545c:	2800      	cmp	r0, #0
 800545e:	d1d3      	bne.n	8005408 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 8005460:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005464:	b144      	cbz	r4, 8005478 <put_fat+0x94>
 8005466:	f3c6 1207 	ubfx	r2, r6, #4, #8
 800546a:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 800546e:	2301      	movs	r3, #1
 8005470:	70fb      	strb	r3, [r7, #3]
			break;
 8005472:	e7c9      	b.n	8005408 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005474:	b2f3      	uxtb	r3, r6
 8005476:	e7e6      	b.n	8005446 <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005478:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 800547c:	f022 020f 	bic.w	r2, r2, #15
 8005480:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8005484:	4332      	orrs	r2, r6
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	e7ef      	b.n	800546a <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800548a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800548c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005490:	f7ff fdc8 	bl	8005024 <move_window>
			if (res != FR_OK) break;
 8005494:	4605      	mov	r5, r0
 8005496:	2800      	cmp	r0, #0
 8005498:	d1b6      	bne.n	8005408 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800549a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800549e:	0064      	lsls	r4, r4, #1
 80054a0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80054a4:	b2b1      	uxth	r1, r6
 80054a6:	4420      	add	r0, r4
 80054a8:	f7ff fb68 	bl	8004b7c <st_word>
			fs->wflag = 1;
 80054ac:	2301      	movs	r3, #1
 80054ae:	70fb      	strb	r3, [r7, #3]
			break;
 80054b0:	e7aa      	b.n	8005408 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80054b2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80054b4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80054b8:	f7ff fdb4 	bl	8005024 <move_window>
			if (res != FR_OK) break;
 80054bc:	4605      	mov	r5, r0
 80054be:	2800      	cmp	r0, #0
 80054c0:	d1a2      	bne.n	8005408 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80054c2:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 80054c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054ca:	00a4      	lsls	r4, r4, #2
 80054cc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80054d0:	441c      	add	r4, r3
 80054d2:	4620      	mov	r0, r4
 80054d4:	f7ff fb47 	bl	8004b66 <ld_dword>
 80054d8:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80054dc:	4331      	orrs	r1, r6
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff fb50 	bl	8004b84 <st_dword>
			fs->wflag = 1;
 80054e4:	2301      	movs	r3, #1
 80054e6:	70fb      	strb	r3, [r7, #3]
			break;
 80054e8:	e78e      	b.n	8005408 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 80054ea:	2502      	movs	r5, #2
 80054ec:	e78c      	b.n	8005408 <put_fat+0x24>
 80054ee:	2502      	movs	r5, #2
 80054f0:	e78a      	b.n	8005408 <put_fat+0x24>

080054f2 <get_fat>:
{
 80054f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 80054f4:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80054f6:	2901      	cmp	r1, #1
 80054f8:	d956      	bls.n	80055a8 <get_fat+0xb6>
 80054fa:	460c      	mov	r4, r1
 80054fc:	6a2b      	ldr	r3, [r5, #32]
 80054fe:	428b      	cmp	r3, r1
 8005500:	d954      	bls.n	80055ac <get_fat+0xba>
		switch (fs->fs_type) {
 8005502:	782b      	ldrb	r3, [r5, #0]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d02d      	beq.n	8005564 <get_fat+0x72>
 8005508:	2b03      	cmp	r3, #3
 800550a:	d03b      	beq.n	8005584 <get_fat+0x92>
 800550c:	2b01      	cmp	r3, #1
 800550e:	d001      	beq.n	8005514 <get_fat+0x22>
 8005510:	2001      	movs	r0, #1
 8005512:	e04a      	b.n	80055aa <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 8005514:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005518:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800551a:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800551e:	4628      	mov	r0, r5
 8005520:	f7ff fd80 	bl	8005024 <move_window>
 8005524:	b110      	cbz	r0, 800552c <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005526:	f04f 30ff 	mov.w	r0, #4294967295
 800552a:	e03e      	b.n	80055aa <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 800552c:	1c77      	adds	r7, r6, #1
 800552e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8005532:	442e      	add	r6, r5
 8005534:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005538:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800553a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800553e:	4628      	mov	r0, r5
 8005540:	f7ff fd70 	bl	8005024 <move_window>
 8005544:	bba0      	cbnz	r0, 80055b0 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005546:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800554a:	443d      	add	r5, r7
 800554c:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
 8005550:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005554:	f014 0f01 	tst.w	r4, #1
 8005558:	d001      	beq.n	800555e <get_fat+0x6c>
 800555a:	0900      	lsrs	r0, r0, #4
 800555c:	e025      	b.n	80055aa <get_fat+0xb8>
 800555e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8005562:	e022      	b.n	80055aa <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005564:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005566:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800556a:	4628      	mov	r0, r5
 800556c:	f7ff fd5a 	bl	8005024 <move_window>
 8005570:	bb08      	cbnz	r0, 80055b6 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005572:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8005576:	0064      	lsls	r4, r4, #1
 8005578:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800557c:	4420      	add	r0, r4
 800557e:	f7ff faed 	bl	8004b5c <ld_word>
			break;
 8005582:	e012      	b.n	80055aa <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005584:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005586:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800558a:	4628      	mov	r0, r5
 800558c:	f7ff fd4a 	bl	8005024 <move_window>
 8005590:	b9a0      	cbnz	r0, 80055bc <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005592:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8005596:	00a4      	lsls	r4, r4, #2
 8005598:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800559c:	4420      	add	r0, r4
 800559e:	f7ff fae2 	bl	8004b66 <ld_dword>
 80055a2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80055a6:	e000      	b.n	80055aa <get_fat+0xb8>
		val = 1;	/* Internal error */
 80055a8:	2001      	movs	r0, #1
}
 80055aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80055ac:	2001      	movs	r0, #1
 80055ae:	e7fc      	b.n	80055aa <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	e7f9      	b.n	80055aa <get_fat+0xb8>
 80055b6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ba:	e7f6      	b.n	80055aa <get_fat+0xb8>
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 80055c0:	e7f3      	b.n	80055aa <get_fat+0xb8>

080055c2 <dir_sdi>:
{
 80055c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80055c6:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80055ca:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80055ce:	d240      	bcs.n	8005652 <dir_sdi+0x90>
 80055d0:	4606      	mov	r6, r0
 80055d2:	460f      	mov	r7, r1
 80055d4:	f011 0f1f 	tst.w	r1, #31
 80055d8:	d13d      	bne.n	8005656 <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
 80055da:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80055dc:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80055de:	b92c      	cbnz	r4, 80055ec <dir_sdi+0x2a>
 80055e0:	f898 3000 	ldrb.w	r3, [r8]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <dir_sdi+0x2a>
		clst = fs->dirbase;
 80055e8:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80055ec:	b9b4      	cbnz	r4, 800561c <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80055ee:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80055f2:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 80055f6:	d930      	bls.n	800565a <dir_sdi+0x98>
		dp->sect = fs->dirbase;
 80055f8:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80055fc:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80055fe:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005600:	69f3      	ldr	r3, [r6, #28]
 8005602:	b393      	cbz	r3, 800566a <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005604:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 8005608:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800560a:	f108 033c 	add.w	r3, r8, #60	; 0x3c
 800560e:	f3c7 0108 	ubfx	r1, r7, #0, #9
 8005612:	4419      	add	r1, r3
 8005614:	6231      	str	r1, [r6, #32]
	return FR_OK;
 8005616:	2000      	movs	r0, #0
}
 8005618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800561c:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8005620:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8005622:	42af      	cmp	r7, r5
 8005624:	d30f      	bcc.n	8005646 <dir_sdi+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005626:	4621      	mov	r1, r4
 8005628:	4630      	mov	r0, r6
 800562a:	f7ff ff62 	bl	80054f2 <get_fat>
 800562e:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005630:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005634:	d013      	beq.n	800565e <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005636:	2801      	cmp	r0, #1
 8005638:	d913      	bls.n	8005662 <dir_sdi+0xa0>
 800563a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800563e:	4283      	cmp	r3, r0
 8005640:	d911      	bls.n	8005666 <dir_sdi+0xa4>
			ofs -= csz;
 8005642:	1b7f      	subs	r7, r7, r5
 8005644:	e7ed      	b.n	8005622 <dir_sdi+0x60>
		dp->sect = clust2sect(fs, clst);
 8005646:	4621      	mov	r1, r4
 8005648:	4640      	mov	r0, r8
 800564a:	f7ff fba3 	bl	8004d94 <clust2sect>
 800564e:	61f0      	str	r0, [r6, #28]
 8005650:	e7d5      	b.n	80055fe <dir_sdi+0x3c>
		return FR_INT_ERR;
 8005652:	2002      	movs	r0, #2
 8005654:	e7e0      	b.n	8005618 <dir_sdi+0x56>
 8005656:	2002      	movs	r0, #2
 8005658:	e7de      	b.n	8005618 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800565a:	2002      	movs	r0, #2
 800565c:	e7dc      	b.n	8005618 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800565e:	2001      	movs	r0, #1
 8005660:	e7da      	b.n	8005618 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005662:	2002      	movs	r0, #2
 8005664:	e7d8      	b.n	8005618 <dir_sdi+0x56>
 8005666:	2002      	movs	r0, #2
 8005668:	e7d6      	b.n	8005618 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 800566a:	2002      	movs	r0, #2
 800566c:	e7d4      	b.n	8005618 <dir_sdi+0x56>

0800566e <create_chain>:
{
 800566e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005672:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8005674:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005676:	460f      	mov	r7, r1
 8005678:	b951      	cbnz	r1, 8005690 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800567a:	f8d6 8014 	ldr.w	r8, [r6, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800567e:	f1b8 0f00 	cmp.w	r8, #0
 8005682:	d012      	beq.n	80056aa <create_chain+0x3c>
 8005684:	6a33      	ldr	r3, [r6, #32]
 8005686:	4543      	cmp	r3, r8
 8005688:	d811      	bhi.n	80056ae <create_chain+0x40>
 800568a:	f04f 0801 	mov.w	r8, #1
 800568e:	e00e      	b.n	80056ae <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005690:	f7ff ff2f 	bl	80054f2 <get_fat>
 8005694:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005696:	2801      	cmp	r0, #1
 8005698:	d947      	bls.n	800572a <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800569a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800569e:	d049      	beq.n	8005734 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80056a0:	6a32      	ldr	r2, [r6, #32]
 80056a2:	4282      	cmp	r2, r0
 80056a4:	d846      	bhi.n	8005734 <create_chain+0xc6>
		scl = clst;
 80056a6:	46b8      	mov	r8, r7
 80056a8:	e001      	b.n	80056ae <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80056aa:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 80056ae:	4644      	mov	r4, r8
 80056b0:	e00c      	b.n	80056cc <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80056b2:	4621      	mov	r1, r4
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7ff ff1c 	bl	80054f2 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 80056ba:	4603      	mov	r3, r0
 80056bc:	b178      	cbz	r0, 80056de <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80056be:	2801      	cmp	r0, #1
 80056c0:	d038      	beq.n	8005734 <create_chain+0xc6>
 80056c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80056c6:	d035      	beq.n	8005734 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 80056c8:	4544      	cmp	r4, r8
 80056ca:	d032      	beq.n	8005732 <create_chain+0xc4>
			ncl++;							/* Next cluster */
 80056cc:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80056ce:	6a33      	ldr	r3, [r6, #32]
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d8ee      	bhi.n	80056b2 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 80056d4:	f1b8 0f01 	cmp.w	r8, #1
 80056d8:	d929      	bls.n	800572e <create_chain+0xc0>
				ncl = 2;
 80056da:	2402      	movs	r4, #2
 80056dc:	e7e9      	b.n	80056b2 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	4621      	mov	r1, r4
 80056e4:	4630      	mov	r0, r6
 80056e6:	f7ff fe7d 	bl	80053e4 <put_fat>
		if (res == FR_OK && clst != 0) {
 80056ea:	4603      	mov	r3, r0
 80056ec:	b900      	cbnz	r0, 80056f0 <create_chain+0x82>
 80056ee:	b977      	cbnz	r7, 800570e <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80056f0:	b9a3      	cbnz	r3, 800571c <create_chain+0xae>
		fs->last_clst = ncl;
 80056f2:	6174      	str	r4, [r6, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80056f4:	69b2      	ldr	r2, [r6, #24]
 80056f6:	6a33      	ldr	r3, [r6, #32]
 80056f8:	3b02      	subs	r3, #2
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d801      	bhi.n	8005702 <create_chain+0x94>
 80056fe:	3a01      	subs	r2, #1
 8005700:	61b2      	str	r2, [r6, #24]
		fs->fsi_flag |= 1;
 8005702:	7933      	ldrb	r3, [r6, #4]
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	7133      	strb	r3, [r6, #4]
 800570a:	4623      	mov	r3, r4
 800570c:	e012      	b.n	8005734 <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800570e:	4622      	mov	r2, r4
 8005710:	4639      	mov	r1, r7
 8005712:	4630      	mov	r0, r6
 8005714:	f7ff fe66 	bl	80053e4 <put_fat>
 8005718:	4603      	mov	r3, r0
 800571a:	e7e9      	b.n	80056f0 <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800571c:	2b01      	cmp	r3, #1
 800571e:	d001      	beq.n	8005724 <create_chain+0xb6>
 8005720:	2301      	movs	r3, #1
 8005722:	e007      	b.n	8005734 <create_chain+0xc6>
 8005724:	f04f 33ff 	mov.w	r3, #4294967295
 8005728:	e004      	b.n	8005734 <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800572a:	2301      	movs	r3, #1
 800572c:	e002      	b.n	8005734 <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 800572e:	2300      	movs	r3, #0
 8005730:	e000      	b.n	8005734 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800573a <remove_chain>:
{
 800573a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573c:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800573e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005740:	2901      	cmp	r1, #1
 8005742:	d92e      	bls.n	80057a2 <remove_chain+0x68>
 8005744:	4606      	mov	r6, r0
 8005746:	4611      	mov	r1, r2
 8005748:	6a2b      	ldr	r3, [r5, #32]
 800574a:	42a3      	cmp	r3, r4
 800574c:	d92b      	bls.n	80057a6 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800574e:	b14a      	cbz	r2, 8005764 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005750:	f04f 32ff 	mov.w	r2, #4294967295
 8005754:	4628      	mov	r0, r5
 8005756:	f7ff fe45 	bl	80053e4 <put_fat>
		if (res != FR_OK) return res;
 800575a:	4607      	mov	r7, r0
 800575c:	b110      	cbz	r0, 8005764 <remove_chain+0x2a>
 800575e:	e023      	b.n	80057a8 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005760:	42a2      	cmp	r2, r4
 8005762:	d921      	bls.n	80057a8 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005764:	4627      	mov	r7, r4
 8005766:	4621      	mov	r1, r4
 8005768:	4630      	mov	r0, r6
 800576a:	f7ff fec2 	bl	80054f2 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800576e:	4604      	mov	r4, r0
 8005770:	b1e0      	cbz	r0, 80057ac <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005772:	2801      	cmp	r0, #1
 8005774:	d01c      	beq.n	80057b0 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005776:	f1b0 3fff 	cmp.w	r0, #4294967295
 800577a:	d01b      	beq.n	80057b4 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800577c:	2200      	movs	r2, #0
 800577e:	4639      	mov	r1, r7
 8005780:	4628      	mov	r0, r5
 8005782:	f7ff fe2f 	bl	80053e4 <put_fat>
			if (res != FR_OK) return res;
 8005786:	4607      	mov	r7, r0
 8005788:	b970      	cbnz	r0, 80057a8 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800578a:	69ab      	ldr	r3, [r5, #24]
 800578c:	6a2a      	ldr	r2, [r5, #32]
 800578e:	1e91      	subs	r1, r2, #2
 8005790:	428b      	cmp	r3, r1
 8005792:	d2e5      	bcs.n	8005760 <remove_chain+0x26>
			fs->free_clst++;
 8005794:	3301      	adds	r3, #1
 8005796:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 8005798:	792b      	ldrb	r3, [r5, #4]
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	712b      	strb	r3, [r5, #4]
 80057a0:	e7de      	b.n	8005760 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80057a2:	2702      	movs	r7, #2
 80057a4:	e000      	b.n	80057a8 <remove_chain+0x6e>
 80057a6:	2702      	movs	r7, #2
}
 80057a8:	4638      	mov	r0, r7
 80057aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 80057ac:	2700      	movs	r7, #0
 80057ae:	e7fb      	b.n	80057a8 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80057b0:	2702      	movs	r7, #2
 80057b2:	e7f9      	b.n	80057a8 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80057b4:	2701      	movs	r7, #1
 80057b6:	e7f7      	b.n	80057a8 <remove_chain+0x6e>

080057b8 <dir_next>:
{
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 80057bc:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80057be:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80057c0:	69c3      	ldr	r3, [r0, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d06c      	beq.n	80058a0 <dir_next+0xe8>
 80057c6:	4604      	mov	r4, r0
 80057c8:	4688      	mov	r8, r1
 80057ca:	3520      	adds	r5, #32
 80057cc:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80057d0:	d268      	bcs.n	80058a4 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80057d2:	f3c5 0708 	ubfx	r7, r5, #0, #9
 80057d6:	b93f      	cbnz	r7, 80057e8 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 80057d8:	3301      	adds	r3, #1
 80057da:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80057dc:	6981      	ldr	r1, [r0, #24]
 80057de:	b979      	cbnz	r1, 8005800 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80057e0:	8933      	ldrh	r3, [r6, #8]
 80057e2:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80057e6:	d907      	bls.n	80057f8 <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 80057e8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80057ea:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 80057ee:	443b      	add	r3, r7
 80057f0:	6223      	str	r3, [r4, #32]
	return FR_OK;
 80057f2:	2000      	movs	r0, #0
}
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61c3      	str	r3, [r0, #28]
 80057fc:	2004      	movs	r0, #4
 80057fe:	e7f9      	b.n	80057f4 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005800:	8973      	ldrh	r3, [r6, #10]
 8005802:	3b01      	subs	r3, #1
 8005804:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8005808:	d1ee      	bne.n	80057e8 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800580a:	f7ff fe72 	bl	80054f2 <get_fat>
 800580e:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005810:	2801      	cmp	r0, #1
 8005812:	d949      	bls.n	80058a8 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005814:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005818:	d048      	beq.n	80058ac <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800581a:	6a33      	ldr	r3, [r6, #32]
 800581c:	4283      	cmp	r3, r0
 800581e:	d837      	bhi.n	8005890 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8005820:	f1b8 0f00 	cmp.w	r8, #0
 8005824:	d011      	beq.n	800584a <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005826:	69a1      	ldr	r1, [r4, #24]
 8005828:	4620      	mov	r0, r4
 800582a:	f7ff ff20 	bl	800566e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800582e:	4682      	mov	sl, r0
 8005830:	2800      	cmp	r0, #0
 8005832:	d03d      	beq.n	80058b0 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005834:	2801      	cmp	r0, #1
 8005836:	d03d      	beq.n	80058b4 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005838:	f1b0 3fff 	cmp.w	r0, #4294967295
 800583c:	d03c      	beq.n	80058b8 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800583e:	4630      	mov	r0, r6
 8005840:	f7ff fbc6 	bl	8004fd0 <sync_window>
 8005844:	b128      	cbz	r0, 8005852 <dir_next+0x9a>
 8005846:	2001      	movs	r0, #1
 8005848:	e7d4      	b.n	80057f4 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 800584a:	2300      	movs	r3, #0
 800584c:	61e3      	str	r3, [r4, #28]
 800584e:	2004      	movs	r0, #4
 8005850:	e7d0      	b.n	80057f4 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005856:	2100      	movs	r1, #0
 8005858:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 800585c:	f7ff f9a6 	bl	8004bac <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005860:	4651      	mov	r1, sl
 8005862:	4630      	mov	r0, r6
 8005864:	f7ff fa96 	bl	8004d94 <clust2sect>
 8005868:	63b0      	str	r0, [r6, #56]	; 0x38
 800586a:	8973      	ldrh	r3, [r6, #10]
 800586c:	4599      	cmp	r9, r3
 800586e:	d20b      	bcs.n	8005888 <dir_next+0xd0>
						fs->wflag = 1;
 8005870:	2301      	movs	r3, #1
 8005872:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005874:	4630      	mov	r0, r6
 8005876:	f7ff fbab 	bl	8004fd0 <sync_window>
 800587a:	b9f8      	cbnz	r0, 80058bc <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800587c:	f109 0901 	add.w	r9, r9, #1
 8005880:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005882:	3301      	adds	r3, #1
 8005884:	63b3      	str	r3, [r6, #56]	; 0x38
 8005886:	e7f0      	b.n	800586a <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 8005888:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800588a:	eba3 0309 	sub.w	r3, r3, r9
 800588e:	63b3      	str	r3, [r6, #56]	; 0x38
				dp->clust = clst;		/* Initialize data for new cluster */
 8005890:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8005894:	4651      	mov	r1, sl
 8005896:	4630      	mov	r0, r6
 8005898:	f7ff fa7c 	bl	8004d94 <clust2sect>
 800589c:	61e0      	str	r0, [r4, #28]
 800589e:	e7a3      	b.n	80057e8 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80058a0:	2004      	movs	r0, #4
 80058a2:	e7a7      	b.n	80057f4 <dir_next+0x3c>
 80058a4:	2004      	movs	r0, #4
 80058a6:	e7a5      	b.n	80057f4 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80058a8:	2002      	movs	r0, #2
 80058aa:	e7a3      	b.n	80057f4 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80058ac:	2001      	movs	r0, #1
 80058ae:	e7a1      	b.n	80057f4 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80058b0:	2007      	movs	r0, #7
 80058b2:	e79f      	b.n	80057f4 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80058b4:	2002      	movs	r0, #2
 80058b6:	e79d      	b.n	80057f4 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80058b8:	2001      	movs	r0, #1
 80058ba:	e79b      	b.n	80057f4 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80058bc:	2001      	movs	r0, #1
 80058be:	e799      	b.n	80057f4 <dir_next+0x3c>

080058c0 <dir_alloc>:
{
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	4604      	mov	r4, r0
 80058c4:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 80058c6:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 80058c8:	2100      	movs	r1, #0
 80058ca:	f7ff fe7a 	bl	80055c2 <dir_sdi>
	if (res == FR_OK) {
 80058ce:	4602      	mov	r2, r0
 80058d0:	b9c0      	cbnz	r0, 8005904 <dir_alloc+0x44>
		n = 0;
 80058d2:	2500      	movs	r5, #0
 80058d4:	e008      	b.n	80058e8 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80058d6:	3501      	adds	r5, #1
 80058d8:	42b5      	cmp	r5, r6
 80058da:	d013      	beq.n	8005904 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 80058dc:	2101      	movs	r1, #1
 80058de:	4620      	mov	r0, r4
 80058e0:	f7ff ff6a 	bl	80057b8 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80058e4:	4602      	mov	r2, r0
 80058e6:	b968      	cbnz	r0, 8005904 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 80058e8:	69e1      	ldr	r1, [r4, #28]
 80058ea:	4638      	mov	r0, r7
 80058ec:	f7ff fb9a 	bl	8005024 <move_window>
			if (res != FR_OK) break;
 80058f0:	4602      	mov	r2, r0
 80058f2:	b938      	cbnz	r0, 8005904 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80058f4:	6a23      	ldr	r3, [r4, #32]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2be5      	cmp	r3, #229	; 0xe5
 80058fa:	d0ec      	beq.n	80058d6 <dir_alloc+0x16>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0ea      	beq.n	80058d6 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8005900:	2500      	movs	r5, #0
 8005902:	e7eb      	b.n	80058dc <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005904:	2a04      	cmp	r2, #4
 8005906:	d001      	beq.n	800590c <dir_alloc+0x4c>
}
 8005908:	4610      	mov	r0, r2
 800590a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800590c:	2207      	movs	r2, #7
 800590e:	e7fb      	b.n	8005908 <dir_alloc+0x48>

08005910 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005910:	b158      	cbz	r0, 800592a <unlock_fs+0x1a>
{
 8005912:	b508      	push	{r3, lr}
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005914:	290c      	cmp	r1, #12
 8005916:	d003      	beq.n	8005920 <unlock_fs+0x10>
 8005918:	290b      	cmp	r1, #11
 800591a:	d001      	beq.n	8005920 <unlock_fs+0x10>
 800591c:	290f      	cmp	r1, #15
 800591e:	d100      	bne.n	8005922 <unlock_fs+0x12>
}
 8005920:	bd08      	pop	{r3, pc}
		ff_rel_grant(fs->sobj);
 8005922:	6900      	ldr	r0, [r0, #16]
 8005924:	f001 fad1 	bl	8006eca <ff_rel_grant>
}
 8005928:	e7fa      	b.n	8005920 <unlock_fs+0x10>
 800592a:	4770      	bx	lr

0800592c <validate>:
{
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005930:	4604      	mov	r4, r0
 8005932:	b308      	cbz	r0, 8005978 <validate+0x4c>
 8005934:	6800      	ldr	r0, [r0, #0]
 8005936:	b308      	cbz	r0, 800597c <validate+0x50>
 8005938:	7803      	ldrb	r3, [r0, #0]
 800593a:	b313      	cbz	r3, 8005982 <validate+0x56>
 800593c:	88a2      	ldrh	r2, [r4, #4]
 800593e:	88c3      	ldrh	r3, [r0, #6]
 8005940:	429a      	cmp	r2, r3
 8005942:	d003      	beq.n	800594c <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8005944:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005946:	2400      	movs	r4, #0
 8005948:	602c      	str	r4, [r5, #0]
}
 800594a:	bd38      	pop	{r3, r4, r5, pc}
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800594c:	f7ff fb36 	bl	8004fbc <lock_fs>
 8005950:	b910      	cbnz	r0, 8005958 <validate+0x2c>
			res = FR_TIMEOUT;
 8005952:	200f      	movs	r0, #15
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005954:	2400      	movs	r4, #0
 8005956:	e7f7      	b.n	8005948 <validate+0x1c>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	7858      	ldrb	r0, [r3, #1]
 800595c:	f7ff f8ba 	bl	8004ad4 <disk_status>
 8005960:	f010 0001 	ands.w	r0, r0, #1
 8005964:	d101      	bne.n	800596a <validate+0x3e>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005966:	6824      	ldr	r4, [r4, #0]
 8005968:	e7ee      	b.n	8005948 <validate+0x1c>
				unlock_fs(obj->fs, FR_OK);
 800596a:	2100      	movs	r1, #0
 800596c:	6820      	ldr	r0, [r4, #0]
 800596e:	f7ff ffcf 	bl	8005910 <unlock_fs>
	FRESULT res = FR_INVALID_OBJECT;
 8005972:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005974:	2400      	movs	r4, #0
 8005976:	e7e7      	b.n	8005948 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8005978:	2009      	movs	r0, #9
 800597a:	e7e5      	b.n	8005948 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800597c:	4604      	mov	r4, r0
	FRESULT res = FR_INVALID_OBJECT;
 800597e:	2009      	movs	r0, #9
 8005980:	e7e2      	b.n	8005948 <validate+0x1c>
 8005982:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005984:	2400      	movs	r4, #0
 8005986:	e7df      	b.n	8005948 <validate+0x1c>

08005988 <create_name>:
{
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	b083      	sub	sp, #12
 800598e:	4606      	mov	r6, r0
 8005990:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005992:	f8d1 9000 	ldr.w	r9, [r1]
 8005996:	6803      	ldr	r3, [r0, #0]
 8005998:	68dd      	ldr	r5, [r3, #12]
 800599a:	2400      	movs	r4, #0
 800599c:	4623      	mov	r3, r4
 800599e:	e024      	b.n	80059ea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80059a0:	3701      	adds	r7, #1
 80059a2:	f819 3007 	ldrb.w	r3, [r9, r7]
 80059a6:	2b2f      	cmp	r3, #47	; 0x2f
 80059a8:	d0fa      	beq.n	80059a0 <create_name+0x18>
 80059aa:	2b5c      	cmp	r3, #92	; 0x5c
 80059ac:	d0f8      	beq.n	80059a0 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 80059ae:	444f      	add	r7, r9
 80059b0:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80059b4:	281f      	cmp	r0, #31
 80059b6:	d835      	bhi.n	8005a24 <create_name+0x9c>
 80059b8:	f04f 0804 	mov.w	r8, #4
	if ((di == 1 && lfn[di - 1] == '.') ||
 80059bc:	2c01      	cmp	r4, #1
 80059be:	d034      	beq.n	8005a2a <create_name+0xa2>
 80059c0:	2c02      	cmp	r4, #2
 80059c2:	d150      	bne.n	8005a66 <create_name+0xde>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80059c4:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80059c8:	3b01      	subs	r3, #1
 80059ca:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80059ce:	2b2e      	cmp	r3, #46	; 0x2e
 80059d0:	d149      	bne.n	8005a66 <create_name+0xde>
 80059d2:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80059d6:	3b02      	subs	r3, #2
 80059d8:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80059dc:	2b2e      	cmp	r3, #46	; 0x2e
 80059de:	d142      	bne.n	8005a66 <create_name+0xde>
 80059e0:	e02a      	b.n	8005a38 <create_name+0xb0>
		lfn[di++] = w;					/* Store the Unicode character */
 80059e2:	f825 8014 	strh.w	r8, [r5, r4, lsl #1]
 80059e6:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 80059e8:	463b      	mov	r3, r7
 80059ea:	1c5f      	adds	r7, r3, #1
 80059ec:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 80059f0:	281f      	cmp	r0, #31
 80059f2:	d9dc      	bls.n	80059ae <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80059f4:	282f      	cmp	r0, #47	; 0x2f
 80059f6:	d0d4      	beq.n	80059a2 <create_name+0x1a>
 80059f8:	285c      	cmp	r0, #92	; 0x5c
 80059fa:	d0d2      	beq.n	80059a2 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80059fc:	2cfe      	cmp	r4, #254	; 0xfe
 80059fe:	f200 80fd 	bhi.w	8005bfc <create_name+0x274>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005a02:	2101      	movs	r1, #1
 8005a04:	f001 f9d6 	bl	8006db4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005a08:	4680      	mov	r8, r0
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	f000 80f8 	beq.w	8005c00 <create_name+0x278>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005a10:	287f      	cmp	r0, #127	; 0x7f
 8005a12:	d8e6      	bhi.n	80059e2 <create_name+0x5a>
 8005a14:	4601      	mov	r1, r0
 8005a16:	487c      	ldr	r0, [pc, #496]	; (8005c08 <create_name+0x280>)
 8005a18:	f7ff f8da 	bl	8004bd0 <chk_chr>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d0e0      	beq.n	80059e2 <create_name+0x5a>
 8005a20:	2006      	movs	r0, #6
 8005a22:	e0a2      	b.n	8005b6a <create_name+0x1e2>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005a24:	f04f 0800 	mov.w	r8, #0
 8005a28:	e7c8      	b.n	80059bc <create_name+0x34>
	if ((di == 1 && lfn[di - 1] == '.') ||
 8005a2a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8005a34:	2b2e      	cmp	r3, #46	; 0x2e
 8005a36:	d1c3      	bne.n	80059c0 <create_name+0x38>
		lfn[di] = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8005a3e:	e004      	b.n	8005a4a <create_name+0xc2>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8005a40:	2120      	movs	r1, #32
 8005a42:	18f2      	adds	r2, r6, r3
 8005a44:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8005a48:	3301      	adds	r3, #1
 8005a4a:	2b0a      	cmp	r3, #10
 8005a4c:	d803      	bhi.n	8005a56 <create_name+0xce>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8005a4e:	42a3      	cmp	r3, r4
 8005a50:	d2f6      	bcs.n	8005a40 <create_name+0xb8>
 8005a52:	212e      	movs	r1, #46	; 0x2e
 8005a54:	e7f5      	b.n	8005a42 <create_name+0xba>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8005a56:	4433      	add	r3, r6
 8005a58:	f048 0820 	orr.w	r8, r8, #32
 8005a5c:	f883 8024 	strb.w	r8, [r3, #36]	; 0x24
		return FR_OK;
 8005a60:	2000      	movs	r0, #0
 8005a62:	e082      	b.n	8005b6a <create_name+0x1e2>
		di--;
 8005a64:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005a66:	b144      	cbz	r4, 8005a7a <create_name+0xf2>
		w = lfn[di - 1];
 8005a68:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d0f6      	beq.n	8005a64 <create_name+0xdc>
 8005a76:	2b2e      	cmp	r3, #46	; 0x2e
 8005a78:	d0f4      	beq.n	8005a64 <create_name+0xdc>
	lfn[di] = 0;						/* LFN is created */
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005a80:	2c00      	cmp	r4, #0
 8005a82:	f000 80bf 	beq.w	8005c04 <create_name+0x27c>
	mem_set(dp->fn, ' ', 11);
 8005a86:	220b      	movs	r2, #11
 8005a88:	2120      	movs	r1, #32
 8005a8a:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8005a8e:	f7ff f88d 	bl	8004bac <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <create_name+0x110>
 8005a96:	3301      	adds	r3, #1
 8005a98:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8005a9c:	2a20      	cmp	r2, #32
 8005a9e:	d0fa      	beq.n	8005a96 <create_name+0x10e>
 8005aa0:	2a2e      	cmp	r2, #46	; 0x2e
 8005aa2:	d0f8      	beq.n	8005a96 <create_name+0x10e>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005aa4:	b11b      	cbz	r3, 8005aae <create_name+0x126>
 8005aa6:	f048 0803 	orr.w	r8, r8, #3
 8005aaa:	e000      	b.n	8005aae <create_name+0x126>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005aac:	3c01      	subs	r4, #1
 8005aae:	b16c      	cbz	r4, 8005acc <create_name+0x144>
 8005ab0:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 8005ab4:	3a01      	subs	r2, #1
 8005ab6:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8005aba:	2a2e      	cmp	r2, #46	; 0x2e
 8005abc:	d1f6      	bne.n	8005aac <create_name+0x124>
 8005abe:	f04f 0b08 	mov.w	fp, #8
 8005ac2:	f04f 0a00 	mov.w	sl, #0
 8005ac6:	f8cd a004 	str.w	sl, [sp, #4]
 8005aca:	e00a      	b.n	8005ae2 <create_name+0x15a>
 8005acc:	46a2      	mov	sl, r4
 8005ace:	f04f 0b08 	mov.w	fp, #8
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	9201      	str	r2, [sp, #4]
 8005ad6:	e004      	b.n	8005ae2 <create_name+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005ad8:	454c      	cmp	r4, r9
 8005ada:	d00b      	beq.n	8005af4 <create_name+0x16c>
			cf |= NS_LOSS | NS_LFN; continue;
 8005adc:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	f103 0901 	add.w	r9, r3, #1
 8005ae6:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8005aea:	b1ff      	cbz	r7, 8005b2c <create_name+0x1a4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005aec:	2f20      	cmp	r7, #32
 8005aee:	d0f5      	beq.n	8005adc <create_name+0x154>
 8005af0:	2f2e      	cmp	r7, #46	; 0x2e
 8005af2:	d0f1      	beq.n	8005ad8 <create_name+0x150>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005af4:	45da      	cmp	sl, fp
 8005af6:	d210      	bcs.n	8005b1a <create_name+0x192>
 8005af8:	454c      	cmp	r4, r9
 8005afa:	d00e      	beq.n	8005b1a <create_name+0x192>
		if (w >= 0x80) {				/* Non ASCII character */
 8005afc:	2f7f      	cmp	r7, #127	; 0x7f
 8005afe:	d844      	bhi.n	8005b8a <create_name+0x202>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005b00:	2f00      	cmp	r7, #0
 8005b02:	d150      	bne.n	8005ba6 <create_name+0x21e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005b04:	f048 0803 	orr.w	r8, r8, #3
 8005b08:	275f      	movs	r7, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8005b0a:	eb06 030a 	add.w	r3, r6, sl
 8005b0e:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005b12:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 8005b14:	f10a 0a01 	add.w	sl, sl, #1
 8005b18:	e7e3      	b.n	8005ae2 <create_name+0x15a>
			if (ni == 11) {				/* Long extension */
 8005b1a:	f1bb 0f0b 	cmp.w	fp, #11
 8005b1e:	d027      	beq.n	8005b70 <create_name+0x1e8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005b20:	454c      	cmp	r4, r9
 8005b22:	d001      	beq.n	8005b28 <create_name+0x1a0>
 8005b24:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8005b28:	454c      	cmp	r4, r9
 8005b2a:	d224      	bcs.n	8005b76 <create_name+0x1ee>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005b2c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8005b30:	2be5      	cmp	r3, #229	; 0xe5
 8005b32:	d054      	beq.n	8005bde <create_name+0x256>
	if (ni == 8) b <<= 2;
 8005b34:	f1bb 0f08 	cmp.w	fp, #8
 8005b38:	d055      	beq.n	8005be6 <create_name+0x25e>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005b3a:	9b01      	ldr	r3, [sp, #4]
 8005b3c:	f003 020c 	and.w	r2, r3, #12
 8005b40:	2a0c      	cmp	r2, #12
 8005b42:	d003      	beq.n	8005b4c <create_name+0x1c4>
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d101      	bne.n	8005b50 <create_name+0x1c8>
 8005b4c:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005b50:	f018 0f02 	tst.w	r8, #2
 8005b54:	d106      	bne.n	8005b64 <create_name+0x1dc>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005b56:	9b01      	ldr	r3, [sp, #4]
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d047      	beq.n	8005bf0 <create_name+0x268>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005b60:	2a04      	cmp	r2, #4
 8005b62:	d048      	beq.n	8005bf6 <create_name+0x26e>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005b64:	f886 802f 	strb.w	r8, [r6, #47]	; 0x2f
	return FR_OK;
 8005b68:	2000      	movs	r0, #0
}
 8005b6a:	b003      	add	sp, #12
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8005b70:	f048 0803 	orr.w	r8, r8, #3
 8005b74:	e7da      	b.n	8005b2c <create_name+0x1a4>
			b <<= 2; continue;
 8005b76:	9b01      	ldr	r3, [sp, #4]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005b7e:	4623      	mov	r3, r4
 8005b80:	f04f 0b0b 	mov.w	fp, #11
 8005b84:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8005b88:	e7ab      	b.n	8005ae2 <create_name+0x15a>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	f001 f911 	bl	8006db4 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005b92:	4607      	mov	r7, r0
 8005b94:	b120      	cbz	r0, 8005ba0 <create_name+0x218>
 8005b96:	f1a0 0780 	sub.w	r7, r0, #128	; 0x80
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <create_name+0x284>)
 8005b9c:	443b      	add	r3, r7
 8005b9e:	7c1f      	ldrb	r7, [r3, #16]
			cf |= NS_LFN;				/* Force create LFN entry */
 8005ba0:	f048 0802 	orr.w	r8, r8, #2
 8005ba4:	e7ac      	b.n	8005b00 <create_name+0x178>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	4819      	ldr	r0, [pc, #100]	; (8005c10 <create_name+0x288>)
 8005baa:	f7ff f811 	bl	8004bd0 <chk_chr>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d1a8      	bne.n	8005b04 <create_name+0x17c>
				if (IsUpper(w)) {		/* ASCII large capital */
 8005bb2:	f1a7 0341 	sub.w	r3, r7, #65	; 0x41
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b19      	cmp	r3, #25
 8005bba:	d804      	bhi.n	8005bc6 <create_name+0x23e>
					b |= 2;
 8005bbc:	9b01      	ldr	r3, [sp, #4]
 8005bbe:	f043 0302 	orr.w	r3, r3, #2
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	e7a1      	b.n	8005b0a <create_name+0x182>
					if (IsLower(w)) {	/* ASCII small capital */
 8005bc6:	f1a7 0361 	sub.w	r3, r7, #97	; 0x61
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b19      	cmp	r3, #25
 8005bce:	d89c      	bhi.n	8005b0a <create_name+0x182>
						b |= 1; w -= 0x20;
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	9301      	str	r3, [sp, #4]
 8005bd8:	3f20      	subs	r7, #32
 8005bda:	b2bf      	uxth	r7, r7
 8005bdc:	e795      	b.n	8005b0a <create_name+0x182>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005bde:	2305      	movs	r3, #5
 8005be0:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 8005be4:	e7a6      	b.n	8005b34 <create_name+0x1ac>
	if (ni == 8) b <<= 2;
 8005be6:	9b01      	ldr	r3, [sp, #4]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	e7a4      	b.n	8005b3a <create_name+0x1b2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005bf0:	f048 0810 	orr.w	r8, r8, #16
 8005bf4:	e7b4      	b.n	8005b60 <create_name+0x1d8>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005bf6:	f048 0808 	orr.w	r8, r8, #8
 8005bfa:	e7b3      	b.n	8005b64 <create_name+0x1dc>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005bfc:	2006      	movs	r0, #6
 8005bfe:	e7b4      	b.n	8005b6a <create_name+0x1e2>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005c00:	2006      	movs	r0, #6
 8005c02:	e7b2      	b.n	8005b6a <create_name+0x1e2>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005c04:	2006      	movs	r0, #6
 8005c06:	e7b0      	b.n	8005b6a <create_name+0x1e2>
 8005c08:	0800b854 	.word	0x0800b854
 8005c0c:	0800b390 	.word	0x0800b390
 8005c10:	0800b860 	.word	0x0800b860

08005c14 <cmp_lfn>:
{
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	4681      	mov	r9, r0
 8005c1a:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005c1c:	f101 001a 	add.w	r0, r1, #26
 8005c20:	f7fe ff9c 	bl	8004b5c <ld_word>
 8005c24:	bbc8      	cbnz	r0, 8005c9a <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005c26:	783e      	ldrb	r6, [r7, #0]
 8005c28:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8005c2c:	3e01      	subs	r6, #1
 8005c2e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8005c32:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c36:	f04f 0801 	mov.w	r8, #1
 8005c3a:	2500      	movs	r5, #0
 8005c3c:	e006      	b.n	8005c4c <cmp_lfn+0x38>
				return 0;					/* Not matched */
 8005c3e:	2000      	movs	r0, #0
 8005c40:	e02c      	b.n	8005c9c <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c46:	4298      	cmp	r0, r3
 8005c48:	d12a      	bne.n	8005ca0 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c4a:	3501      	adds	r5, #1
 8005c4c:	2d0c      	cmp	r5, #12
 8005c4e:	d818      	bhi.n	8005c82 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005c50:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <cmp_lfn+0x9c>)
 8005c52:	5d58      	ldrb	r0, [r3, r5]
 8005c54:	4438      	add	r0, r7
 8005c56:	f7fe ff81 	bl	8004b5c <ld_word>
 8005c5a:	4604      	mov	r4, r0
		if (wc) {
 8005c5c:	f1b8 0f00 	cmp.w	r8, #0
 8005c60:	d0ef      	beq.n	8005c42 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005c62:	2efe      	cmp	r6, #254	; 0xfe
 8005c64:	d8eb      	bhi.n	8005c3e <cmp_lfn+0x2a>
 8005c66:	f001 f8c3 	bl	8006df0 <ff_wtoupper>
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	f106 0a01 	add.w	sl, r6, #1
 8005c70:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 8005c74:	f001 f8bc 	bl	8006df0 <ff_wtoupper>
 8005c78:	4580      	cmp	r8, r0
 8005c7a:	d1e0      	bne.n	8005c3e <cmp_lfn+0x2a>
			wc = uc;
 8005c7c:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005c7e:	4656      	mov	r6, sl
 8005c80:	e7e3      	b.n	8005c4a <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005c82:	783b      	ldrb	r3, [r7, #0]
 8005c84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c88:	d00c      	beq.n	8005ca4 <cmp_lfn+0x90>
 8005c8a:	f1b8 0f00 	cmp.w	r8, #0
 8005c8e:	d00b      	beq.n	8005ca8 <cmp_lfn+0x94>
 8005c90:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8005c94:	b953      	cbnz	r3, 8005cac <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 8005c96:	2001      	movs	r0, #1
 8005c98:	e000      	b.n	8005c9c <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005c9a:	2000      	movs	r0, #0
}
 8005c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	e7fb      	b.n	8005c9c <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	e7f9      	b.n	8005c9c <cmp_lfn+0x88>
 8005ca8:	2001      	movs	r0, #1
 8005caa:	e7f7      	b.n	8005c9c <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005cac:	2000      	movs	r0, #0
 8005cae:	e7f5      	b.n	8005c9c <cmp_lfn+0x88>
 8005cb0:	0800b390 	.word	0x0800b390

08005cb4 <dir_find>:
{
 8005cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005cba:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	f7ff fc7f 	bl	80055c2 <dir_sdi>
	if (res != FR_OK) return res;
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d164      	bne.n	8005d94 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295
 8005cce:	6323      	str	r3, [r4, #48]	; 0x30
 8005cd0:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8005cd4:	464f      	mov	r7, r9
 8005cd6:	e00a      	b.n	8005cee <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cdc:	6323      	str	r3, [r4, #48]	; 0x30
 8005cde:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f7ff fd68 	bl	80057b8 <dir_next>
	} while (res == FR_OK);
 8005ce8:	4606      	mov	r6, r0
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d152      	bne.n	8005d94 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 8005cee:	69e1      	ldr	r1, [r4, #28]
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	f7ff f997 	bl	8005024 <move_window>
		if (res != FR_OK) break;
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d14b      	bne.n	8005d94 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 8005cfc:	6a25      	ldr	r5, [r4, #32]
 8005cfe:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d046      	beq.n	8005d92 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005d04:	7ae9      	ldrb	r1, [r5, #11]
 8005d06:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 8005d0a:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005d0c:	2be5      	cmp	r3, #229	; 0xe5
 8005d0e:	d0e3      	beq.n	8005cd8 <dir_find+0x24>
 8005d10:	f011 0f08 	tst.w	r1, #8
 8005d14:	d001      	beq.n	8005d1a <dir_find+0x66>
 8005d16:	2a0f      	cmp	r2, #15
 8005d18:	d1de      	bne.n	8005cd8 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005d1a:	2a0f      	cmp	r2, #15
 8005d1c:	d016      	beq.n	8005d4c <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005d1e:	b927      	cbnz	r7, 8005d2a <dir_find+0x76>
 8005d20:	4628      	mov	r0, r5
 8005d22:	f7ff f90c 	bl	8004f3e <sum_sfn>
 8005d26:	4548      	cmp	r0, r9
 8005d28:	d034      	beq.n	8005d94 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005d2a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005d2e:	f013 0f01 	tst.w	r3, #1
 8005d32:	d106      	bne.n	8005d42 <dir_find+0x8e>
 8005d34:	220b      	movs	r2, #11
 8005d36:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7fe ff3b 	bl	8004bb6 <mem_cmp>
 8005d40:	b340      	cbz	r0, 8005d94 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295
 8005d46:	6323      	str	r3, [r4, #48]	; 0x30
 8005d48:	27ff      	movs	r7, #255	; 0xff
 8005d4a:	e7c9      	b.n	8005ce0 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005d4c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8005d50:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005d54:	d1c4      	bne.n	8005ce0 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005d56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d5a:	d006      	beq.n	8005d6a <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 8005d5c:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005d60:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005d64:	6962      	ldr	r2, [r4, #20]
 8005d66:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005d68:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005d6a:	42bb      	cmp	r3, r7
 8005d6c:	d001      	beq.n	8005d72 <dir_find+0xbe>
 8005d6e:	27ff      	movs	r7, #255	; 0xff
 8005d70:	e7b6      	b.n	8005ce0 <dir_find+0x2c>
 8005d72:	7b6b      	ldrb	r3, [r5, #13]
 8005d74:	454b      	cmp	r3, r9
 8005d76:	d001      	beq.n	8005d7c <dir_find+0xc8>
 8005d78:	27ff      	movs	r7, #255	; 0xff
 8005d7a:	e7b1      	b.n	8005ce0 <dir_find+0x2c>
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005d82:	f7ff ff47 	bl	8005c14 <cmp_lfn>
 8005d86:	b110      	cbz	r0, 8005d8e <dir_find+0xda>
 8005d88:	3f01      	subs	r7, #1
 8005d8a:	b2ff      	uxtb	r7, r7
 8005d8c:	e7a8      	b.n	8005ce0 <dir_find+0x2c>
 8005d8e:	27ff      	movs	r7, #255	; 0xff
 8005d90:	e7a6      	b.n	8005ce0 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005d92:	2604      	movs	r6, #4
}
 8005d94:	4630      	mov	r0, r6
 8005d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005d9a <follow_path>:
{
 8005d9a:	b570      	push	{r4, r5, r6, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	4604      	mov	r4, r0
 8005da0:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8005da2:	6805      	ldr	r5, [r0, #0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8005da4:	780b      	ldrb	r3, [r1, #0]
 8005da6:	2b2f      	cmp	r3, #47	; 0x2f
 8005da8:	d006      	beq.n	8005db8 <follow_path+0x1e>
 8005daa:	2b5c      	cmp	r3, #92	; 0x5c
 8005dac:	d004      	beq.n	8005db8 <follow_path+0x1e>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8005dae:	69eb      	ldr	r3, [r5, #28]
 8005db0:	6083      	str	r3, [r0, #8]
 8005db2:	e009      	b.n	8005dc8 <follow_path+0x2e>
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005db4:	3301      	adds	r3, #1
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	9b01      	ldr	r3, [sp, #4]
 8005dba:	781a      	ldrb	r2, [r3, #0]
 8005dbc:	2a2f      	cmp	r2, #47	; 0x2f
 8005dbe:	d0f9      	beq.n	8005db4 <follow_path+0x1a>
 8005dc0:	2a5c      	cmp	r2, #92	; 0x5c
 8005dc2:	d0f7      	beq.n	8005db4 <follow_path+0x1a>
		obj->sclust = 0;					/* Start from root directory */
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005dc8:	9b01      	ldr	r3, [sp, #4]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b1f      	cmp	r3, #31
 8005dce:	d81e      	bhi.n	8005e0e <follow_path+0x74>
		dp->fn[NSFLAG] = NS_NONAME;
 8005dd0:	2380      	movs	r3, #128	; 0x80
 8005dd2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f7ff fbf2 	bl	80055c2 <dir_sdi>
 8005dde:	4606      	mov	r6, r0
 8005de0:	e02d      	b.n	8005e3e <follow_path+0xa4>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005de2:	f013 0f04 	tst.w	r3, #4
 8005de6:	d02f      	beq.n	8005e48 <follow_path+0xae>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005de8:	4606      	mov	r6, r0
 8005dea:	e028      	b.n	8005e3e <follow_path+0xa4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005dec:	f013 0f04 	tst.w	r3, #4
 8005df0:	d12c      	bne.n	8005e4c <follow_path+0xb2>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005df2:	79a3      	ldrb	r3, [r4, #6]
 8005df4:	f013 0f10 	tst.w	r3, #16
 8005df8:	d02a      	beq.n	8005e50 <follow_path+0xb6>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005dfa:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8005dfe:	6961      	ldr	r1, [r4, #20]
 8005e00:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005e04:	4419      	add	r1, r3
 8005e06:	4628      	mov	r0, r5
 8005e08:	f7fe ffe1 	bl	8004dce <ld_clust>
 8005e0c:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e0e:	a901      	add	r1, sp, #4
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7ff fdb9 	bl	8005988 <create_name>
			if (res != FR_OK) break;
 8005e16:	4606      	mov	r6, r0
 8005e18:	b988      	cbnz	r0, 8005e3e <follow_path+0xa4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f7ff ff4a 	bl	8005cb4 <dir_find>
			ns = dp->fn[NSFLAG];
 8005e20:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d0e1      	beq.n	8005dec <follow_path+0x52>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005e28:	2804      	cmp	r0, #4
 8005e2a:	d10b      	bne.n	8005e44 <follow_path+0xaa>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8005e2c:	f013 0f20 	tst.w	r3, #32
 8005e30:	d0d7      	beq.n	8005de2 <follow_path+0x48>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8005e32:	f013 0f04 	tst.w	r3, #4
 8005e36:	d0ea      	beq.n	8005e0e <follow_path+0x74>
						dp->fn[NSFLAG] = NS_NONAME;
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 8005e3e:	4630      	mov	r0, r6
 8005e40:	b002      	add	sp, #8
 8005e42:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_find(dp);				/* Find an object with the segment name */
 8005e44:	4606      	mov	r6, r0
 8005e46:	e7fa      	b.n	8005e3e <follow_path+0xa4>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005e48:	2605      	movs	r6, #5
 8005e4a:	e7f8      	b.n	8005e3e <follow_path+0xa4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	e7f6      	b.n	8005e3e <follow_path+0xa4>
				res = FR_NO_PATH; break;
 8005e50:	2605      	movs	r6, #5
 8005e52:	e7f4      	b.n	8005e3e <follow_path+0xa4>

08005e54 <dir_register>:
{
 8005e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e58:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8005e5a:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005e5c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8005e60:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8005e64:	f040 808e 	bne.w	8005f84 <dir_register+0x130>
 8005e68:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005e6a:	2400      	movs	r4, #0
 8005e6c:	e000      	b.n	8005e70 <dir_register+0x1c>
 8005e6e:	3401      	adds	r4, #1
 8005e70:	68f3      	ldr	r3, [r6, #12]
 8005e72:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1f9      	bne.n	8005e6e <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 8005e7a:	f107 0824 	add.w	r8, r7, #36	; 0x24
 8005e7e:	220c      	movs	r2, #12
 8005e80:	4641      	mov	r1, r8
 8005e82:	a801      	add	r0, sp, #4
 8005e84:	f7fe fe88 	bl	8004b98 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005e88:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005e8c:	f013 0f01 	tst.w	r3, #1
 8005e90:	d01c      	beq.n	8005ecc <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005e92:	2340      	movs	r3, #64	; 0x40
 8005e94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005e98:	2501      	movs	r5, #1
 8005e9a:	e000      	b.n	8005e9e <dir_register+0x4a>
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	2d63      	cmp	r5, #99	; 0x63
 8005ea0:	d80b      	bhi.n	8005eba <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	68f2      	ldr	r2, [r6, #12]
 8005ea6:	a901      	add	r1, sp, #4
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	f7fe fff3 	bl	8004e94 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005eae:	4638      	mov	r0, r7
 8005eb0:	f7ff ff00 	bl	8005cb4 <dir_find>
			if (res != FR_OK) break;
 8005eb4:	4681      	mov	r9, r0
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d0f0      	beq.n	8005e9c <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005eba:	2d64      	cmp	r5, #100	; 0x64
 8005ebc:	d065      	beq.n	8005f8a <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005ebe:	f1b9 0f04 	cmp.w	r9, #4
 8005ec2:	d11b      	bne.n	8005efc <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005ec4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005ec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005ecc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005ed0:	f013 0f02 	tst.w	r3, #2
 8005ed4:	d006      	beq.n	8005ee4 <dir_register+0x90>
 8005ed6:	340c      	adds	r4, #12
 8005ed8:	4b2d      	ldr	r3, [pc, #180]	; (8005f90 <dir_register+0x13c>)
 8005eda:	fba3 3404 	umull	r3, r4, r3, r4
 8005ede:	08a4      	lsrs	r4, r4, #2
 8005ee0:	3401      	adds	r4, #1
 8005ee2:	e000      	b.n	8005ee6 <dir_register+0x92>
 8005ee4:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f7ff fce9 	bl	80058c0 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005eee:	4681      	mov	r9, r0
 8005ef0:	b908      	cbnz	r0, 8005ef6 <dir_register+0xa2>
 8005ef2:	3c01      	subs	r4, #1
 8005ef4:	d106      	bne.n	8005f04 <dir_register+0xb0>
	if (res == FR_OK) {
 8005ef6:	f1b9 0f00 	cmp.w	r9, #0
 8005efa:	d029      	beq.n	8005f50 <dir_register+0xfc>
}
 8005efc:	4648      	mov	r0, r9
 8005efe:	b005      	add	sp, #20
 8005f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005f04:	6979      	ldr	r1, [r7, #20]
 8005f06:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	f7ff fb59 	bl	80055c2 <dir_sdi>
		if (res == FR_OK) {
 8005f10:	4681      	mov	r9, r0
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1ef      	bne.n	8005ef6 <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7ff f811 	bl	8004f3e <sum_sfn>
 8005f1c:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 8005f1e:	69f9      	ldr	r1, [r7, #28]
 8005f20:	4630      	mov	r0, r6
 8005f22:	f7ff f87f 	bl	8005024 <move_window>
				if (res != FR_OK) break;
 8005f26:	4681      	mov	r9, r0
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d1e4      	bne.n	8005ef6 <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	b2e2      	uxtb	r2, r4
 8005f30:	6a39      	ldr	r1, [r7, #32]
 8005f32:	68f0      	ldr	r0, [r6, #12]
 8005f34:	f7fe ff72 	bl	8004e1c <put_lfn>
				fs->wflag = 1;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f7ff fc3a 	bl	80057b8 <dir_next>
			} while (res == FR_OK && --nent);
 8005f44:	4681      	mov	r9, r0
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d1d5      	bne.n	8005ef6 <dir_register+0xa2>
 8005f4a:	3c01      	subs	r4, #1
 8005f4c:	d1e7      	bne.n	8005f1e <dir_register+0xca>
 8005f4e:	e7d2      	b.n	8005ef6 <dir_register+0xa2>
		res = move_window(fs, dp->sect);
 8005f50:	69f9      	ldr	r1, [r7, #28]
 8005f52:	4630      	mov	r0, r6
 8005f54:	f7ff f866 	bl	8005024 <move_window>
		if (res == FR_OK) {
 8005f58:	4681      	mov	r9, r0
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d1ce      	bne.n	8005efc <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005f5e:	2220      	movs	r2, #32
 8005f60:	2100      	movs	r1, #0
 8005f62:	6a38      	ldr	r0, [r7, #32]
 8005f64:	f7fe fe22 	bl	8004bac <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005f68:	220b      	movs	r2, #11
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	6a38      	ldr	r0, [r7, #32]
 8005f6e:	f7fe fe13 	bl	8004b98 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005f72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f76:	6a3a      	ldr	r2, [r7, #32]
 8005f78:	f003 0318 	and.w	r3, r3, #24
 8005f7c:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	70f3      	strb	r3, [r6, #3]
 8005f82:	e7bb      	b.n	8005efc <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005f84:	f04f 0906 	mov.w	r9, #6
 8005f88:	e7b8      	b.n	8005efc <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005f8a:	f04f 0907 	mov.w	r9, #7
 8005f8e:	e7b5      	b.n	8005efc <dir_register+0xa8>
 8005f90:	4ec4ec4f 	.word	0x4ec4ec4f

08005f94 <sync_fs>:
{
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4604      	mov	r4, r0
	res = sync_window(fs);
 8005f98:	f7ff f81a 	bl	8004fd0 <sync_window>
	if (res == FR_OK) {
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	b948      	cbnz	r0, 8005fb4 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005fa0:	7823      	ldrb	r3, [r4, #0]
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d008      	beq.n	8005fb8 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	4611      	mov	r1, r2
 8005faa:	7860      	ldrb	r0, [r4, #1]
 8005fac:	f7fe fdca 	bl	8004b44 <disk_ioctl>
 8005fb0:	b100      	cbz	r0, 8005fb4 <sync_fs+0x20>
 8005fb2:	2501      	movs	r5, #1
}
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005fb8:	7923      	ldrb	r3, [r4, #4]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d1f3      	bne.n	8005fa6 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8005fbe:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8005fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f7fe fdef 	bl	8004bac <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005fce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005fd2:	f204 203a 	addw	r0, r4, #570	; 0x23a
 8005fd6:	f7fe fdd1 	bl	8004b7c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005fda:	490f      	ldr	r1, [pc, #60]	; (8006018 <sync_fs+0x84>)
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7fe fdd1 	bl	8004b84 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005fe2:	490e      	ldr	r1, [pc, #56]	; (800601c <sync_fs+0x88>)
 8005fe4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8005fe8:	f7fe fdcc 	bl	8004b84 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005fec:	69a1      	ldr	r1, [r4, #24]
 8005fee:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8005ff2:	f7fe fdc7 	bl	8004b84 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005ff6:	6961      	ldr	r1, [r4, #20]
 8005ff8:	f504 700a 	add.w	r0, r4, #552	; 0x228
 8005ffc:	f7fe fdc2 	bl	8004b84 <st_dword>
			fs->winsect = fs->volbase + 1;
 8006000:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006002:	3201      	adds	r2, #1
 8006004:	63a2      	str	r2, [r4, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006006:	2301      	movs	r3, #1
 8006008:	4631      	mov	r1, r6
 800600a:	7860      	ldrb	r0, [r4, #1]
 800600c:	f7fe fd8e 	bl	8004b2c <disk_write>
			fs->fsi_flag = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	7123      	strb	r3, [r4, #4]
 8006014:	e7c7      	b.n	8005fa6 <sync_fs+0x12>
 8006016:	bf00      	nop
 8006018:	41615252 	.word	0x41615252
 800601c:	61417272 	.word	0x61417272

08006020 <f_mount>:
{
 8006020:	b570      	push	{r4, r5, r6, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	9001      	str	r0, [sp, #4]
 8006026:	9100      	str	r1, [sp, #0]
 8006028:	4615      	mov	r5, r2
	const TCHAR *rp = path;
 800602a:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800602c:	a803      	add	r0, sp, #12
 800602e:	f7fe ff96 	bl	8004f5e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006032:	1e04      	subs	r4, r0, #0
 8006034:	db2e      	blt.n	8006094 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006036:	4b1b      	ldr	r3, [pc, #108]	; (80060a4 <f_mount+0x84>)
 8006038:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800603c:	6a1e      	ldr	r6, [r3, #32]
	if (cfs) {
 800603e:	b146      	cbz	r6, 8006052 <f_mount+0x32>
		clear_lock(cfs);
 8006040:	4630      	mov	r0, r6
 8006042:	f7fe fe89 	bl	8004d58 <clear_lock>
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8006046:	6930      	ldr	r0, [r6, #16]
 8006048:	f000 ff30 	bl	8006eac <ff_del_syncobj>
 800604c:	b320      	cbz	r0, 8006098 <f_mount+0x78>
		cfs->fs_type = 0;				/* Clear old fs object */
 800604e:	2300      	movs	r3, #0
 8006050:	7033      	strb	r3, [r6, #0]
	if (fs) {
 8006052:	9b01      	ldr	r3, [sp, #4]
 8006054:	b13b      	cbz	r3, 8006066 <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800605a:	9901      	ldr	r1, [sp, #4]
 800605c:	3110      	adds	r1, #16
 800605e:	b2e0      	uxtb	r0, r4
 8006060:	f000 ff14 	bl	8006e8c <ff_cre_syncobj>
 8006064:	b1d0      	cbz	r0, 800609c <f_mount+0x7c>
	FatFs[vol] = fs;					/* Register new fs object */
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	480e      	ldr	r0, [pc, #56]	; (80060a4 <f_mount+0x84>)
 800606a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800606e:	6203      	str	r3, [r0, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006070:	b1b3      	cbz	r3, 80060a0 <f_mount+0x80>
 8006072:	2d01      	cmp	r5, #1
 8006074:	d003      	beq.n	800607e <f_mount+0x5e>
 8006076:	2400      	movs	r4, #0
}
 8006078:	4620      	mov	r0, r4
 800607a:	b004      	add	sp, #16
 800607c:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800607e:	2200      	movs	r2, #0
 8006080:	a901      	add	r1, sp, #4
 8006082:	4668      	mov	r0, sp
 8006084:	f7ff f826 	bl	80050d4 <find_volume>
 8006088:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800608a:	4601      	mov	r1, r0
 800608c:	9801      	ldr	r0, [sp, #4]
 800608e:	f7ff fc3f 	bl	8005910 <unlock_fs>
 8006092:	e7f1      	b.n	8006078 <f_mount+0x58>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006094:	240b      	movs	r4, #11
 8006096:	e7ef      	b.n	8006078 <f_mount+0x58>
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8006098:	2402      	movs	r4, #2
 800609a:	e7ed      	b.n	8006078 <f_mount+0x58>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800609c:	2402      	movs	r4, #2
 800609e:	e7eb      	b.n	8006078 <f_mount+0x58>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80060a0:	2400      	movs	r4, #0
 80060a2:	e7e9      	b.n	8006078 <f_mount+0x58>
 80060a4:	200000a8 	.word	0x200000a8

080060a8 <f_open>:
{
 80060a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060ac:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80060b0:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 80060b2:	2800      	cmp	r0, #0
 80060b4:	f000 8111 	beq.w	80062da <f_open+0x232>
 80060b8:	4615      	mov	r5, r2
 80060ba:	4606      	mov	r6, r0
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80060bc:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80060c0:	463a      	mov	r2, r7
 80060c2:	a983      	add	r1, sp, #524	; 0x20c
 80060c4:	a801      	add	r0, sp, #4
 80060c6:	f7ff f805 	bl	80050d4 <find_volume>
	if (res == FR_OK) {
 80060ca:	4604      	mov	r4, r0
 80060cc:	b158      	cbz	r0, 80060e6 <f_open+0x3e>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80060ce:	b10c      	cbz	r4, 80060d4 <f_open+0x2c>
 80060d0:	2300      	movs	r3, #0
 80060d2:	6033      	str	r3, [r6, #0]
	LEAVE_FF(fs, res);
 80060d4:	4621      	mov	r1, r4
 80060d6:	9883      	ldr	r0, [sp, #524]	; 0x20c
 80060d8:	f7ff fc1a 	bl	8005910 <unlock_fs>
}
 80060dc:	4620      	mov	r0, r4
 80060de:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80060e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 80060e6:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 80060e8:	9384      	str	r3, [sp, #528]	; 0x210
		INIT_NAMBUF(fs);
 80060ea:	aa03      	add	r2, sp, #12
 80060ec:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80060ee:	9901      	ldr	r1, [sp, #4]
 80060f0:	a884      	add	r0, sp, #528	; 0x210
 80060f2:	f7ff fe52 	bl	8005d9a <follow_path>
		if (res == FR_OK) {
 80060f6:	4604      	mov	r4, r0
 80060f8:	b960      	cbnz	r0, 8006114 <f_open+0x6c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80060fa:	f99d 323f 	ldrsb.w	r3, [sp, #575]	; 0x23f
 80060fe:	2b00      	cmp	r3, #0
 8006100:	db50      	blt.n	80061a4 <f_open+0xfc>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006102:	f037 0301 	bics.w	r3, r7, #1
 8006106:	bf14      	ite	ne
 8006108:	2101      	movne	r1, #1
 800610a:	2100      	moveq	r1, #0
 800610c:	a884      	add	r0, sp, #528	; 0x210
 800610e:	f7fe fd67 	bl	8004be0 <chk_lock>
 8006112:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006114:	f015 0f1c 	tst.w	r5, #28
 8006118:	d05a      	beq.n	80061d0 <f_open+0x128>
			if (res != FR_OK) {					/* No file, create new */
 800611a:	2c00      	cmp	r4, #0
 800611c:	d04e      	beq.n	80061bc <f_open+0x114>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800611e:	2c04      	cmp	r4, #4
 8006120:	d042      	beq.n	80061a8 <f_open+0x100>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006122:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006126:	2c00      	cmp	r4, #0
 8006128:	d161      	bne.n	80061ee <f_open+0x146>
 800612a:	f017 0f08 	tst.w	r7, #8
 800612e:	d05e      	beq.n	80061ee <f_open+0x146>
				dw = GET_FATTIME();
 8006130:	f003 f9d0 	bl	80094d4 <get_fattime>
 8006134:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006136:	4601      	mov	r1, r0
 8006138:	988c      	ldr	r0, [sp, #560]	; 0x230
 800613a:	300e      	adds	r0, #14
 800613c:	f7fe fd22 	bl	8004b84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006140:	4629      	mov	r1, r5
 8006142:	988c      	ldr	r0, [sp, #560]	; 0x230
 8006144:	3016      	adds	r0, #22
 8006146:	f7fe fd1d 	bl	8004b84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800614a:	9b8c      	ldr	r3, [sp, #560]	; 0x230
 800614c:	2220      	movs	r2, #32
 800614e:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006150:	f8dd 820c 	ldr.w	r8, [sp, #524]	; 0x20c
 8006154:	f8dd 9230 	ldr.w	r9, [sp, #560]	; 0x230
 8006158:	4649      	mov	r1, r9
 800615a:	4640      	mov	r0, r8
 800615c:	f7fe fe37 	bl	8004dce <ld_clust>
 8006160:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006162:	2200      	movs	r2, #0
 8006164:	4649      	mov	r1, r9
 8006166:	4640      	mov	r0, r8
 8006168:	f7fe fe44 	bl	8004df4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800616c:	2100      	movs	r1, #0
 800616e:	988c      	ldr	r0, [sp, #560]	; 0x230
 8006170:	301c      	adds	r0, #28
 8006172:	f7fe fd07 	bl	8004b84 <st_dword>
					fs->wflag = 1;
 8006176:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006178:	2201      	movs	r2, #1
 800617a:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800617c:	b3bd      	cbz	r5, 80061ee <f_open+0x146>
						dw = fs->winsect;
 800617e:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006180:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
 8006184:	2200      	movs	r2, #0
 8006186:	4629      	mov	r1, r5
 8006188:	a884      	add	r0, sp, #528	; 0x210
 800618a:	f7ff fad6 	bl	800573a <remove_chain>
						if (res == FR_OK) {
 800618e:	4604      	mov	r4, r0
 8006190:	bb68      	cbnz	r0, 80061ee <f_open+0x146>
							res = move_window(fs, dw);
 8006192:	4641      	mov	r1, r8
 8006194:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8006196:	f7fe ff45 	bl	8005024 <move_window>
 800619a:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800619c:	3d01      	subs	r5, #1
 800619e:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 80061a0:	615d      	str	r5, [r3, #20]
 80061a2:	e024      	b.n	80061ee <f_open+0x146>
				res = FR_INVALID_NAME;
 80061a4:	2406      	movs	r4, #6
 80061a6:	e7b5      	b.n	8006114 <f_open+0x6c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80061a8:	f7fe fd54 	bl	8004c54 <enq_lock>
 80061ac:	b908      	cbnz	r0, 80061b2 <f_open+0x10a>
 80061ae:	2412      	movs	r4, #18
 80061b0:	e7b7      	b.n	8006122 <f_open+0x7a>
 80061b2:	a884      	add	r0, sp, #528	; 0x210
 80061b4:	f7ff fe4e 	bl	8005e54 <dir_register>
 80061b8:	4604      	mov	r4, r0
 80061ba:	e7b2      	b.n	8006122 <f_open+0x7a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80061bc:	f89d 3216 	ldrb.w	r3, [sp, #534]	; 0x216
 80061c0:	f013 0f11 	tst.w	r3, #17
 80061c4:	d112      	bne.n	80061ec <f_open+0x144>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80061c6:	f015 0f04 	tst.w	r5, #4
 80061ca:	d0ac      	beq.n	8006126 <f_open+0x7e>
 80061cc:	2408      	movs	r4, #8
 80061ce:	e00e      	b.n	80061ee <f_open+0x146>
			if (res == FR_OK) {					/* Following succeeded */
 80061d0:	b96c      	cbnz	r4, 80061ee <f_open+0x146>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80061d2:	f89d 3216 	ldrb.w	r3, [sp, #534]	; 0x216
 80061d6:	f013 0f10 	tst.w	r3, #16
 80061da:	d14c      	bne.n	8006276 <f_open+0x1ce>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80061dc:	f015 0f02 	tst.w	r5, #2
 80061e0:	d005      	beq.n	80061ee <f_open+0x146>
 80061e2:	f013 0f01 	tst.w	r3, #1
 80061e6:	d002      	beq.n	80061ee <f_open+0x146>
						res = FR_DENIED;
 80061e8:	2407      	movs	r4, #7
 80061ea:	e016      	b.n	800621a <f_open+0x172>
					res = FR_DENIED;
 80061ec:	2407      	movs	r4, #7
		if (res == FR_OK) {
 80061ee:	b9a4      	cbnz	r4, 800621a <f_open+0x172>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80061f0:	f017 0f08 	tst.w	r7, #8
 80061f4:	d001      	beq.n	80061fa <f_open+0x152>
				mode |= FA_MODIFIED;
 80061f6:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80061fa:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006200:	9b8c      	ldr	r3, [sp, #560]	; 0x230
 8006202:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006204:	f037 0301 	bics.w	r3, r7, #1
 8006208:	bf14      	ite	ne
 800620a:	2101      	movne	r1, #1
 800620c:	2100      	moveq	r1, #0
 800620e:	a884      	add	r0, sp, #528	; 0x210
 8006210:	f7fe fd30 	bl	8004c74 <inc_lock>
 8006214:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006216:	2800      	cmp	r0, #0
 8006218:	d05d      	beq.n	80062d6 <f_open+0x22e>
		if (res == FR_OK) {
 800621a:	2c00      	cmp	r4, #0
 800621c:	f47f af57 	bne.w	80060ce <f_open+0x26>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006220:	9d83      	ldr	r5, [sp, #524]	; 0x20c
 8006222:	f8dd 8230 	ldr.w	r8, [sp, #560]	; 0x230
 8006226:	4641      	mov	r1, r8
 8006228:	4628      	mov	r0, r5
 800622a:	f7fe fdd0 	bl	8004dce <ld_clust>
 800622e:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006230:	f108 001c 	add.w	r0, r8, #28
 8006234:	f7fe fc97 	bl	8004b66 <ld_dword>
 8006238:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800623a:	2100      	movs	r1, #0
 800623c:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800623e:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 8006240:	88eb      	ldrh	r3, [r5, #6]
 8006242:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8006244:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8006246:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006248:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800624a:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800624c:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8006250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006254:	4640      	mov	r0, r8
 8006256:	f7fe fca9 	bl	8004bac <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800625a:	f017 0f20 	tst.w	r7, #32
 800625e:	f43f af36 	beq.w	80060ce <f_open+0x26>
 8006262:	68f5      	ldr	r5, [r6, #12]
 8006264:	2d00      	cmp	r5, #0
 8006266:	f43f af32 	beq.w	80060ce <f_open+0x26>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800626a:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800626c:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800626e:	895f      	ldrh	r7, [r3, #10]
 8006270:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006272:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006274:	e005      	b.n	8006282 <f_open+0x1da>
					res = FR_NO_FILE;
 8006276:	2404      	movs	r4, #4
 8006278:	e7cf      	b.n	800621a <f_open+0x172>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800627a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800627e:	d00b      	beq.n	8006298 <f_open+0x1f0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006280:	1bed      	subs	r5, r5, r7
 8006282:	b95c      	cbnz	r4, 800629c <f_open+0x1f4>
 8006284:	42bd      	cmp	r5, r7
 8006286:	d909      	bls.n	800629c <f_open+0x1f4>
					clst = get_fat(&fp->obj, clst);
 8006288:	4630      	mov	r0, r6
 800628a:	f7ff f932 	bl	80054f2 <get_fat>
 800628e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8006290:	2801      	cmp	r0, #1
 8006292:	d8f2      	bhi.n	800627a <f_open+0x1d2>
 8006294:	2402      	movs	r4, #2
 8006296:	e7f0      	b.n	800627a <f_open+0x1d2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006298:	2401      	movs	r4, #1
 800629a:	e7f1      	b.n	8006280 <f_open+0x1d8>
				fp->clust = clst;
 800629c:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800629e:	2c00      	cmp	r4, #0
 80062a0:	f47f af15 	bne.w	80060ce <f_open+0x26>
 80062a4:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f43f af10 	beq.w	80060ce <f_open+0x26>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80062ae:	9f83      	ldr	r7, [sp, #524]	; 0x20c
 80062b0:	4638      	mov	r0, r7
 80062b2:	f7fe fd6f 	bl	8004d94 <clust2sect>
 80062b6:	b908      	cbnz	r0, 80062bc <f_open+0x214>
						res = FR_INT_ERR;
 80062b8:	2402      	movs	r4, #2
 80062ba:	e709      	b.n	80060d0 <f_open+0x28>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80062bc:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 80062c0:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	4641      	mov	r1, r8
 80062c6:	7878      	ldrb	r0, [r7, #1]
 80062c8:	f7fe fc24 	bl	8004b14 <disk_read>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f43f aefe 	beq.w	80060ce <f_open+0x26>
 80062d2:	2401      	movs	r4, #1
 80062d4:	e6fc      	b.n	80060d0 <f_open+0x28>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80062d6:	2402      	movs	r4, #2
 80062d8:	e6f9      	b.n	80060ce <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 80062da:	2409      	movs	r4, #9
 80062dc:	e6fe      	b.n	80060dc <f_open+0x34>

080062de <f_read>:
{
 80062de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e2:	b085      	sub	sp, #20
 80062e4:	4604      	mov	r4, r0
 80062e6:	4688      	mov	r8, r1
 80062e8:	4615      	mov	r5, r2
 80062ea:	4699      	mov	r9, r3
	*br = 0;	/* Clear read byte counter */
 80062ec:	2300      	movs	r3, #0
 80062ee:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80062f2:	a903      	add	r1, sp, #12
 80062f4:	f7ff fb1a 	bl	800592c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80062f8:	9001      	str	r0, [sp, #4]
 80062fa:	b968      	cbnz	r0, 8006318 <f_read+0x3a>
 80062fc:	7d63      	ldrb	r3, [r4, #21]
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	b953      	cbnz	r3, 8006318 <f_read+0x3a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006302:	7d23      	ldrb	r3, [r4, #20]
 8006304:	f013 0f01 	tst.w	r3, #1
 8006308:	d00e      	beq.n	8006328 <f_read+0x4a>
	remain = fp->obj.objsize - fp->fptr;
 800630a:	68e6      	ldr	r6, [r4, #12]
 800630c:	69a3      	ldr	r3, [r4, #24]
 800630e:	1af6      	subs	r6, r6, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006310:	42ae      	cmp	r6, r5
 8006312:	d375      	bcc.n	8006400 <f_read+0x122>
 8006314:	462e      	mov	r6, r5
 8006316:	e073      	b.n	8006400 <f_read+0x122>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006318:	9901      	ldr	r1, [sp, #4]
 800631a:	9803      	ldr	r0, [sp, #12]
 800631c:	f7ff faf8 	bl	8005910 <unlock_fs>
}
 8006320:	9801      	ldr	r0, [sp, #4]
 8006322:	b005      	add	sp, #20
 8006324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006328:	2107      	movs	r1, #7
 800632a:	9803      	ldr	r0, [sp, #12]
 800632c:	f7ff faf0 	bl	8005910 <unlock_fs>
 8006330:	2307      	movs	r3, #7
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	e7f4      	b.n	8006320 <f_read+0x42>
					if (fp->cltbl) {
 8006336:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006338:	b11b      	cbz	r3, 8006342 <f_read+0x64>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800633a:	4620      	mov	r0, r4
 800633c:	f7fe fd36 	bl	8004dac <clmt_clust>
 8006340:	e06e      	b.n	8006420 <f_read+0x142>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006342:	69e1      	ldr	r1, [r4, #28]
 8006344:	4620      	mov	r0, r4
 8006346:	f7ff f8d4 	bl	80054f2 <get_fat>
 800634a:	e069      	b.n	8006420 <f_read+0x142>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800634c:	2502      	movs	r5, #2
 800634e:	7565      	strb	r5, [r4, #21]
 8006350:	4629      	mov	r1, r5
 8006352:	9803      	ldr	r0, [sp, #12]
 8006354:	f7ff fadc 	bl	8005910 <unlock_fs>
 8006358:	9501      	str	r5, [sp, #4]
 800635a:	e7e1      	b.n	8006320 <f_read+0x42>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800635c:	2501      	movs	r5, #1
 800635e:	7565      	strb	r5, [r4, #21]
 8006360:	4629      	mov	r1, r5
 8006362:	9803      	ldr	r0, [sp, #12]
 8006364:	f7ff fad4 	bl	8005910 <unlock_fs>
 8006368:	9501      	str	r5, [sp, #4]
 800636a:	e7d9      	b.n	8006320 <f_read+0x42>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800636c:	2502      	movs	r5, #2
 800636e:	7565      	strb	r5, [r4, #21]
 8006370:	4629      	mov	r1, r5
 8006372:	4658      	mov	r0, fp
 8006374:	f7ff facc 	bl	8005910 <unlock_fs>
 8006378:	9501      	str	r5, [sp, #4]
 800637a:	e7d1      	b.n	8006320 <f_read+0x42>
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800637c:	2501      	movs	r5, #1
 800637e:	7565      	strb	r5, [r4, #21]
 8006380:	4629      	mov	r1, r5
 8006382:	9803      	ldr	r0, [sp, #12]
 8006384:	f7ff fac4 	bl	8005910 <unlock_fs>
 8006388:	9501      	str	r5, [sp, #4]
 800638a:	e7c9      	b.n	8006320 <f_read+0x42>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800638c:	6a20      	ldr	r0, [r4, #32]
 800638e:	eba0 000a 	sub.w	r0, r0, sl
 8006392:	42a8      	cmp	r0, r5
 8006394:	d26b      	bcs.n	800646e <f_read+0x190>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800639a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800639e:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 80063a2:	f7fe fbf9 	bl	8004b98 <mem_cpy>
 80063a6:	e062      	b.n	800646e <f_read+0x190>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80063a8:	6a22      	ldr	r2, [r4, #32]
 80063aa:	4552      	cmp	r2, sl
 80063ac:	d00d      	beq.n	80063ca <f_read+0xec>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80063ae:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	db5d      	blt.n	8006472 <f_read+0x194>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80063b6:	2301      	movs	r3, #1
 80063b8:	4652      	mov	r2, sl
 80063ba:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80063be:	9803      	ldr	r0, [sp, #12]
 80063c0:	7840      	ldrb	r0, [r0, #1]
 80063c2:	f7fe fba7 	bl	8004b14 <disk_read>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d168      	bne.n	800649c <f_read+0x1be>
			fp->sect = sect;
 80063ca:	f8c4 a020 	str.w	sl, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80063ce:	69a3      	ldr	r3, [r4, #24]
 80063d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d4:	f5c3 7500 	rsb	r5, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80063d8:	42ae      	cmp	r6, r5
 80063da:	d200      	bcs.n	80063de <f_read+0x100>
 80063dc:	4635      	mov	r5, r6
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80063de:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80063e2:	462a      	mov	r2, r5
 80063e4:	4419      	add	r1, r3
 80063e6:	4640      	mov	r0, r8
 80063e8:	f7fe fbd6 	bl	8004b98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80063ec:	44a8      	add	r8, r5
 80063ee:	69a3      	ldr	r3, [r4, #24]
 80063f0:	442b      	add	r3, r5
 80063f2:	61a3      	str	r3, [r4, #24]
 80063f4:	f8d9 3000 	ldr.w	r3, [r9]
 80063f8:	442b      	add	r3, r5
 80063fa:	f8c9 3000 	str.w	r3, [r9]
 80063fe:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
 8006400:	2e00      	cmp	r6, #0
 8006402:	d053      	beq.n	80064ac <f_read+0x1ce>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006404:	69a1      	ldr	r1, [r4, #24]
 8006406:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1df      	bne.n	80063ce <f_read+0xf0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	895f      	ldrh	r7, [r3, #10]
 8006412:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8006414:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8006418:	d108      	bne.n	800642c <f_read+0x14e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800641a:	2900      	cmp	r1, #0
 800641c:	d18b      	bne.n	8006336 <f_read+0x58>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800641e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006420:	2801      	cmp	r0, #1
 8006422:	d993      	bls.n	800634c <f_read+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006424:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006428:	d098      	beq.n	800635c <f_read+0x7e>
				fp->clust = clst;				/* Update current cluster */
 800642a:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800642c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006430:	69e1      	ldr	r1, [r4, #28]
 8006432:	4658      	mov	r0, fp
 8006434:	f7fe fcae 	bl	8004d94 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006438:	4682      	mov	sl, r0
 800643a:	2800      	cmp	r0, #0
 800643c:	d096      	beq.n	800636c <f_read+0x8e>
			sect += csect;
 800643e:	44ba      	add	sl, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006440:	0a75      	lsrs	r5, r6, #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006442:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006446:	d3af      	bcc.n	80063a8 <f_read+0xca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006448:	197b      	adds	r3, r7, r5
 800644a:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800644e:	4293      	cmp	r3, r2
 8006450:	d900      	bls.n	8006454 <f_read+0x176>
					cc = fs->csize - csect;
 8006452:	1bd5      	subs	r5, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006454:	462b      	mov	r3, r5
 8006456:	4652      	mov	r2, sl
 8006458:	4641      	mov	r1, r8
 800645a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800645e:	f7fe fb59 	bl	8004b14 <disk_read>
 8006462:	2800      	cmp	r0, #0
 8006464:	d18a      	bne.n	800637c <f_read+0x9e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006466:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	db8e      	blt.n	800638c <f_read+0xae>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800646e:	026d      	lsls	r5, r5, #9
				continue;
 8006470:	e7bc      	b.n	80063ec <f_read+0x10e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006472:	2301      	movs	r3, #1
 8006474:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006478:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800647c:	f7fe fb56 	bl	8004b2c <disk_write>
 8006480:	b920      	cbnz	r0, 800648c <f_read+0x1ae>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006482:	7d23      	ldrb	r3, [r4, #20]
 8006484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006488:	7523      	strb	r3, [r4, #20]
 800648a:	e794      	b.n	80063b6 <f_read+0xd8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800648c:	2501      	movs	r5, #1
 800648e:	7565      	strb	r5, [r4, #21]
 8006490:	4629      	mov	r1, r5
 8006492:	9803      	ldr	r0, [sp, #12]
 8006494:	f7ff fa3c 	bl	8005910 <unlock_fs>
 8006498:	9501      	str	r5, [sp, #4]
 800649a:	e741      	b.n	8006320 <f_read+0x42>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800649c:	2501      	movs	r5, #1
 800649e:	7565      	strb	r5, [r4, #21]
 80064a0:	4629      	mov	r1, r5
 80064a2:	9803      	ldr	r0, [sp, #12]
 80064a4:	f7ff fa34 	bl	8005910 <unlock_fs>
 80064a8:	9501      	str	r5, [sp, #4]
 80064aa:	e739      	b.n	8006320 <f_read+0x42>
	LEAVE_FF(fs, FR_OK);
 80064ac:	2100      	movs	r1, #0
 80064ae:	9803      	ldr	r0, [sp, #12]
 80064b0:	f7ff fa2e 	bl	8005910 <unlock_fs>
 80064b4:	e734      	b.n	8006320 <f_read+0x42>

080064b6 <f_write>:
{
 80064b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ba:	b085      	sub	sp, #20
 80064bc:	4604      	mov	r4, r0
 80064be:	4688      	mov	r8, r1
 80064c0:	4616      	mov	r6, r2
 80064c2:	4699      	mov	r9, r3
	*bw = 0;	/* Clear write byte counter */
 80064c4:	2300      	movs	r3, #0
 80064c6:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80064ca:	a903      	add	r1, sp, #12
 80064cc:	f7ff fa2e 	bl	800592c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80064d0:	9001      	str	r0, [sp, #4]
 80064d2:	b960      	cbnz	r0, 80064ee <f_write+0x38>
 80064d4:	7d63      	ldrb	r3, [r4, #21]
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	b94b      	cbnz	r3, 80064ee <f_write+0x38>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80064da:	7d23      	ldrb	r3, [r4, #20]
 80064dc:	f013 0f02 	tst.w	r3, #2
 80064e0:	d00d      	beq.n	80064fe <f_write+0x48>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80064e2:	69a3      	ldr	r3, [r4, #24]
 80064e4:	42f3      	cmn	r3, r6
 80064e6:	f0c0 80be 	bcc.w	8006666 <f_write+0x1b0>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80064ea:	43de      	mvns	r6, r3
 80064ec:	e0bb      	b.n	8006666 <f_write+0x1b0>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80064ee:	9901      	ldr	r1, [sp, #4]
 80064f0:	9803      	ldr	r0, [sp, #12]
 80064f2:	f7ff fa0d 	bl	8005910 <unlock_fs>
}
 80064f6:	9801      	ldr	r0, [sp, #4]
 80064f8:	b005      	add	sp, #20
 80064fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80064fe:	2107      	movs	r1, #7
 8006500:	9803      	ldr	r0, [sp, #12]
 8006502:	f7ff fa05 	bl	8005910 <unlock_fs>
 8006506:	2307      	movs	r3, #7
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	e7f4      	b.n	80064f6 <f_write+0x40>
					if (fp->cltbl) {
 800650c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d036      	beq.n	8006580 <f_write+0xca>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006512:	4620      	mov	r0, r4
 8006514:	f7fe fc4a 	bl	8004dac <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006518:	2800      	cmp	r0, #0
 800651a:	f000 80ce 	beq.w	80066ba <f_write+0x204>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800651e:	2801      	cmp	r0, #1
 8006520:	d033      	beq.n	800658a <f_write+0xd4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006522:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006526:	d038      	beq.n	800659a <f_write+0xe4>
				fp->clust = clst;			/* Update current cluster */
 8006528:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800652a:	68a3      	ldr	r3, [r4, #8]
 800652c:	b903      	cbnz	r3, 8006530 <f_write+0x7a>
 800652e:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006530:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	db38      	blt.n	80065aa <f_write+0xf4>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006538:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800653c:	69e1      	ldr	r1, [r4, #28]
 800653e:	4658      	mov	r0, fp
 8006540:	f7fe fc28 	bl	8004d94 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006544:	4682      	mov	sl, r0
 8006546:	2800      	cmp	r0, #0
 8006548:	d045      	beq.n	80065d6 <f_write+0x120>
			sect += csect;
 800654a:	44ba      	add	sl, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800654c:	0a75      	lsrs	r5, r6, #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 800654e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006552:	d35d      	bcc.n	8006610 <f_write+0x15a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006554:	197b      	adds	r3, r7, r5
 8006556:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800655a:	4293      	cmp	r3, r2
 800655c:	d900      	bls.n	8006560 <f_write+0xaa>
					cc = fs->csize - csect;
 800655e:	1bd5      	subs	r5, r2, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006560:	462b      	mov	r3, r5
 8006562:	4652      	mov	r2, sl
 8006564:	4641      	mov	r1, r8
 8006566:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800656a:	f7fe fadf 	bl	8004b2c <disk_write>
 800656e:	2800      	cmp	r0, #0
 8006570:	d139      	bne.n	80065e6 <f_write+0x130>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006572:	6a21      	ldr	r1, [r4, #32]
 8006574:	eba1 010a 	sub.w	r1, r1, sl
 8006578:	42a9      	cmp	r1, r5
 800657a:	d33c      	bcc.n	80065f6 <f_write+0x140>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800657c:	026d      	lsls	r5, r5, #9
				continue;
 800657e:	e063      	b.n	8006648 <f_write+0x192>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006580:	69e1      	ldr	r1, [r4, #28]
 8006582:	4620      	mov	r0, r4
 8006584:	f7ff f873 	bl	800566e <create_chain>
 8006588:	e7c6      	b.n	8006518 <f_write+0x62>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800658a:	2502      	movs	r5, #2
 800658c:	7565      	strb	r5, [r4, #21]
 800658e:	4629      	mov	r1, r5
 8006590:	9803      	ldr	r0, [sp, #12]
 8006592:	f7ff f9bd 	bl	8005910 <unlock_fs>
 8006596:	9501      	str	r5, [sp, #4]
 8006598:	e7ad      	b.n	80064f6 <f_write+0x40>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800659a:	2501      	movs	r5, #1
 800659c:	7565      	strb	r5, [r4, #21]
 800659e:	4629      	mov	r1, r5
 80065a0:	9803      	ldr	r0, [sp, #12]
 80065a2:	f7ff f9b5 	bl	8005910 <unlock_fs>
 80065a6:	9501      	str	r5, [sp, #4]
 80065a8:	e7a5      	b.n	80064f6 <f_write+0x40>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065aa:	2301      	movs	r3, #1
 80065ac:	6a22      	ldr	r2, [r4, #32]
 80065ae:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80065b2:	9803      	ldr	r0, [sp, #12]
 80065b4:	7840      	ldrb	r0, [r0, #1]
 80065b6:	f7fe fab9 	bl	8004b2c <disk_write>
 80065ba:	b920      	cbnz	r0, 80065c6 <f_write+0x110>
				fp->flag &= (BYTE)~FA_DIRTY;
 80065bc:	7d23      	ldrb	r3, [r4, #20]
 80065be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c2:	7523      	strb	r3, [r4, #20]
 80065c4:	e7b8      	b.n	8006538 <f_write+0x82>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065c6:	2501      	movs	r5, #1
 80065c8:	7565      	strb	r5, [r4, #21]
 80065ca:	4629      	mov	r1, r5
 80065cc:	9803      	ldr	r0, [sp, #12]
 80065ce:	f7ff f99f 	bl	8005910 <unlock_fs>
 80065d2:	9501      	str	r5, [sp, #4]
 80065d4:	e78f      	b.n	80064f6 <f_write+0x40>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80065d6:	2502      	movs	r5, #2
 80065d8:	7565      	strb	r5, [r4, #21]
 80065da:	4629      	mov	r1, r5
 80065dc:	4658      	mov	r0, fp
 80065de:	f7ff f997 	bl	8005910 <unlock_fs>
 80065e2:	9501      	str	r5, [sp, #4]
 80065e4:	e787      	b.n	80064f6 <f_write+0x40>
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065e6:	2501      	movs	r5, #1
 80065e8:	7565      	strb	r5, [r4, #21]
 80065ea:	4629      	mov	r1, r5
 80065ec:	9803      	ldr	r0, [sp, #12]
 80065ee:	f7ff f98f 	bl	8005910 <unlock_fs>
 80065f2:	9501      	str	r5, [sp, #4]
 80065f4:	e77f      	b.n	80064f6 <f_write+0x40>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80065f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065fa:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 80065fe:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006602:	f7fe fac9 	bl	8004b98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006606:	7d23      	ldrb	r3, [r4, #20]
 8006608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660c:	7523      	strb	r3, [r4, #20]
 800660e:	e7b5      	b.n	800657c <f_write+0xc6>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006610:	6a23      	ldr	r3, [r4, #32]
 8006612:	4553      	cmp	r3, sl
 8006614:	d003      	beq.n	800661e <f_write+0x168>
				fp->fptr < fp->obj.objsize &&
 8006616:	69a2      	ldr	r2, [r4, #24]
 8006618:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800661a:	429a      	cmp	r2, r3
 800661c:	d33b      	bcc.n	8006696 <f_write+0x1e0>
			fp->sect = sect;
 800661e:	f8c4 a020 	str.w	sl, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006622:	69a3      	ldr	r3, [r4, #24]
 8006624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006628:	f5c3 7500 	rsb	r5, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800662c:	42ae      	cmp	r6, r5
 800662e:	d200      	bcs.n	8006632 <f_write+0x17c>
 8006630:	4635      	mov	r5, r6
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006632:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006636:	462a      	mov	r2, r5
 8006638:	4641      	mov	r1, r8
 800663a:	4418      	add	r0, r3
 800663c:	f7fe faac 	bl	8004b98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006640:	7d23      	ldrb	r3, [r4, #20]
 8006642:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006646:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006648:	44a8      	add	r8, r5
 800664a:	69a3      	ldr	r3, [r4, #24]
 800664c:	442b      	add	r3, r5
 800664e:	61a3      	str	r3, [r4, #24]
 8006650:	68e2      	ldr	r2, [r4, #12]
 8006652:	4293      	cmp	r3, r2
 8006654:	bf38      	it	cc
 8006656:	4613      	movcc	r3, r2
 8006658:	60e3      	str	r3, [r4, #12]
 800665a:	f8d9 3000 	ldr.w	r3, [r9]
 800665e:	442b      	add	r3, r5
 8006660:	f8c9 3000 	str.w	r3, [r9]
 8006664:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
 8006666:	b346      	cbz	r6, 80066ba <f_write+0x204>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006668:	69a1      	ldr	r1, [r4, #24]
 800666a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1d7      	bne.n	8006622 <f_write+0x16c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	895f      	ldrh	r7, [r3, #10]
 8006676:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8006678:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800667c:	f47f af58 	bne.w	8006530 <f_write+0x7a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006680:	2900      	cmp	r1, #0
 8006682:	f47f af43 	bne.w	800650c <f_write+0x56>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006686:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8006688:	2800      	cmp	r0, #0
 800668a:	f47f af45 	bne.w	8006518 <f_write+0x62>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800668e:	4620      	mov	r0, r4
 8006690:	f7fe ffed 	bl	800566e <create_chain>
 8006694:	e740      	b.n	8006518 <f_write+0x62>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006696:	2301      	movs	r3, #1
 8006698:	4652      	mov	r2, sl
 800669a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800669e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80066a2:	f7fe fa37 	bl	8004b14 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d0b9      	beq.n	800661e <f_write+0x168>
					ABORT(fs, FR_DISK_ERR);
 80066aa:	2501      	movs	r5, #1
 80066ac:	7565      	strb	r5, [r4, #21]
 80066ae:	4629      	mov	r1, r5
 80066b0:	9803      	ldr	r0, [sp, #12]
 80066b2:	f7ff f92d 	bl	8005910 <unlock_fs>
 80066b6:	9501      	str	r5, [sp, #4]
 80066b8:	e71d      	b.n	80064f6 <f_write+0x40>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80066ba:	7d23      	ldrb	r3, [r4, #20]
 80066bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066c0:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80066c2:	2100      	movs	r1, #0
 80066c4:	9803      	ldr	r0, [sp, #12]
 80066c6:	f7ff f923 	bl	8005910 <unlock_fs>
 80066ca:	e714      	b.n	80064f6 <f_write+0x40>

080066cc <putc_bfd>:
{
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	4604      	mov	r4, r0
 80066d2:	460d      	mov	r5, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80066d4:	290a      	cmp	r1, #10
 80066d6:	d00d      	beq.n	80066f4 <putc_bfd+0x28>
	i = pb->idx;		/* Write index of pb->buf[] */
 80066d8:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 80066da:	2b00      	cmp	r3, #0
 80066dc:	db08      	blt.n	80066f0 <putc_bfd+0x24>
	pb->buf[i++] = (BYTE)c;
 80066de:	1c5e      	adds	r6, r3, #1
 80066e0:	4423      	add	r3, r4
 80066e2:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80066e4:	2e3c      	cmp	r6, #60	; 0x3c
 80066e6:	dc09      	bgt.n	80066fc <putc_bfd+0x30>
	pb->idx = i;
 80066e8:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	3301      	adds	r3, #1
 80066ee:	60a3      	str	r3, [r4, #8]
}
 80066f0:	b002      	add	sp, #8
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 80066f4:	210d      	movs	r1, #13
 80066f6:	f7ff ffe9 	bl	80066cc <putc_bfd>
 80066fa:	e7ed      	b.n	80066d8 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80066fc:	4621      	mov	r1, r4
 80066fe:	f851 0b0c 	ldr.w	r0, [r1], #12
 8006702:	ab01      	add	r3, sp, #4
 8006704:	4632      	mov	r2, r6
 8006706:	f7ff fed6 	bl	80064b6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800670a:	9b01      	ldr	r3, [sp, #4]
 800670c:	429e      	cmp	r6, r3
 800670e:	d002      	beq.n	8006716 <putc_bfd+0x4a>
 8006710:	f04f 36ff 	mov.w	r6, #4294967295
 8006714:	e7e8      	b.n	80066e8 <putc_bfd+0x1c>
 8006716:	2600      	movs	r6, #0
 8006718:	e7e6      	b.n	80066e8 <putc_bfd+0x1c>

0800671a <putc_flush>:
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800671a:	6842      	ldr	r2, [r0, #4]
 800671c:	2a00      	cmp	r2, #0
 800671e:	db10      	blt.n	8006742 <putc_flush+0x28>
{
 8006720:	b510      	push	{r4, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006726:	4601      	mov	r1, r0
 8006728:	f851 0b0c 	ldr.w	r0, [r1], #12
 800672c:	ab01      	add	r3, sp, #4
 800672e:	f7ff fec2 	bl	80064b6 <f_write>
 8006732:	b948      	cbnz	r0, 8006748 <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006734:	6862      	ldr	r2, [r4, #4]
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	429a      	cmp	r2, r3
 800673a:	d108      	bne.n	800674e <putc_flush+0x34>
 800673c:	68a0      	ldr	r0, [r4, #8]
}
 800673e:	b002      	add	sp, #8
 8006740:	bd10      	pop	{r4, pc}
	return EOF;
 8006742:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006746:	4770      	bx	lr
	return EOF;
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	e7f7      	b.n	800673e <putc_flush+0x24>
 800674e:	f04f 30ff 	mov.w	r0, #4294967295
 8006752:	e7f4      	b.n	800673e <putc_flush+0x24>

08006754 <f_sync>:
{
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800675a:	a901      	add	r1, sp, #4
 800675c:	f7ff f8e6 	bl	800592c <validate>
	if (res == FR_OK) {
 8006760:	4605      	mov	r5, r0
 8006762:	b978      	cbnz	r0, 8006784 <f_sync+0x30>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006764:	7d23      	ldrb	r3, [r4, #20]
 8006766:	f013 0f40 	tst.w	r3, #64	; 0x40
 800676a:	d00b      	beq.n	8006784 <f_sync+0x30>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800676c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006770:	d10f      	bne.n	8006792 <f_sync+0x3e>
			tm = GET_FATTIME();				/* Modified time */
 8006772:	f002 feaf 	bl	80094d4 <get_fattime>
 8006776:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 8006778:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800677a:	9801      	ldr	r0, [sp, #4]
 800677c:	f7fe fc52 	bl	8005024 <move_window>
				if (res == FR_OK) {
 8006780:	4605      	mov	r5, r0
 8006782:	b1d0      	cbz	r0, 80067ba <f_sync+0x66>
	LEAVE_FF(fs, res);
 8006784:	4629      	mov	r1, r5
 8006786:	9801      	ldr	r0, [sp, #4]
 8006788:	f7ff f8c2 	bl	8005910 <unlock_fs>
}
 800678c:	4628      	mov	r0, r5
 800678e:	b002      	add	sp, #8
 8006790:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006792:	2301      	movs	r3, #1
 8006794:	6a22      	ldr	r2, [r4, #32]
 8006796:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800679a:	9801      	ldr	r0, [sp, #4]
 800679c:	7840      	ldrb	r0, [r0, #1]
 800679e:	f7fe f9c5 	bl	8004b2c <disk_write>
 80067a2:	b920      	cbnz	r0, 80067ae <f_sync+0x5a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80067a4:	7d23      	ldrb	r3, [r4, #20]
 80067a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067aa:	7523      	strb	r3, [r4, #20]
 80067ac:	e7e1      	b.n	8006772 <f_sync+0x1e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80067ae:	2101      	movs	r1, #1
 80067b0:	9801      	ldr	r0, [sp, #4]
 80067b2:	f7ff f8ad 	bl	8005910 <unlock_fs>
 80067b6:	2501      	movs	r5, #1
 80067b8:	e7e8      	b.n	800678c <f_sync+0x38>
					dir = fp->dir_ptr;
 80067ba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80067bc:	7aeb      	ldrb	r3, [r5, #11]
 80067be:	f043 0320 	orr.w	r3, r3, #32
 80067c2:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80067c4:	68a2      	ldr	r2, [r4, #8]
 80067c6:	4629      	mov	r1, r5
 80067c8:	6820      	ldr	r0, [r4, #0]
 80067ca:	f7fe fb13 	bl	8004df4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80067ce:	68e1      	ldr	r1, [r4, #12]
 80067d0:	f105 001c 	add.w	r0, r5, #28
 80067d4:	f7fe f9d6 	bl	8004b84 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80067d8:	4631      	mov	r1, r6
 80067da:	f105 0016 	add.w	r0, r5, #22
 80067de:	f7fe f9d1 	bl	8004b84 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80067e2:	2100      	movs	r1, #0
 80067e4:	f105 0012 	add.w	r0, r5, #18
 80067e8:	f7fe f9c8 	bl	8004b7c <st_word>
					fs->wflag = 1;
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80067f2:	9801      	ldr	r0, [sp, #4]
 80067f4:	f7ff fbce 	bl	8005f94 <sync_fs>
 80067f8:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80067fa:	7d23      	ldrb	r3, [r4, #20]
 80067fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006800:	7523      	strb	r3, [r4, #20]
 8006802:	e7bf      	b.n	8006784 <f_sync+0x30>

08006804 <f_close>:
{
 8006804:	b530      	push	{r4, r5, lr}
 8006806:	b083      	sub	sp, #12
 8006808:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 800680a:	f7ff ffa3 	bl	8006754 <f_sync>
	if (res == FR_OK)
 800680e:	4605      	mov	r5, r0
 8006810:	b110      	cbz	r0, 8006818 <f_close+0x14>
}
 8006812:	4628      	mov	r0, r5
 8006814:	b003      	add	sp, #12
 8006816:	bd30      	pop	{r4, r5, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006818:	a901      	add	r1, sp, #4
 800681a:	4620      	mov	r0, r4
 800681c:	f7ff f886 	bl	800592c <validate>
		if (res == FR_OK) {
 8006820:	4605      	mov	r5, r0
 8006822:	2800      	cmp	r0, #0
 8006824:	d1f5      	bne.n	8006812 <f_close+0xe>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006826:	6920      	ldr	r0, [r4, #16]
 8006828:	f7fe fa76 	bl	8004d18 <dec_lock>
			if (res == FR_OK)
 800682c:	4605      	mov	r5, r0
 800682e:	b908      	cbnz	r0, 8006834 <f_close+0x30>
				fp->obj.fs = 0;			/* Invalidate file object */
 8006830:	2300      	movs	r3, #0
 8006832:	6023      	str	r3, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006834:	2100      	movs	r1, #0
 8006836:	9801      	ldr	r0, [sp, #4]
 8006838:	f7ff f86a 	bl	8005910 <unlock_fs>
 800683c:	e7e9      	b.n	8006812 <f_close+0xe>

0800683e <f_chdir>:
{
 800683e:	b530      	push	{r4, r5, lr}
 8006840:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006844:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, 0);
 8006846:	2200      	movs	r2, #0
 8006848:	a983      	add	r1, sp, #524	; 0x20c
 800684a:	a801      	add	r0, sp, #4
 800684c:	f7fe fc42 	bl	80050d4 <find_volume>
	if (res == FR_OK) {
 8006850:	4604      	mov	r4, r0
 8006852:	b138      	cbz	r0, 8006864 <f_chdir+0x26>
	LEAVE_FF(fs, res);
 8006854:	4621      	mov	r1, r4
 8006856:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8006858:	f7ff f85a 	bl	8005910 <unlock_fs>
}
 800685c:	4620      	mov	r0, r4
 800685e:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8006862:	bd30      	pop	{r4, r5, pc}
		dj.obj.fs = fs;
 8006864:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006866:	9384      	str	r3, [sp, #528]	; 0x210
		INIT_NAMBUF(fs);
 8006868:	aa03      	add	r2, sp, #12
 800686a:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the path */
 800686c:	9901      	ldr	r1, [sp, #4]
 800686e:	a884      	add	r0, sp, #528	; 0x210
 8006870:	f7ff fa93 	bl	8005d9a <follow_path>
		if (res == FR_OK) {					/* Follow completed */
 8006874:	4604      	mov	r4, r0
 8006876:	b990      	cbnz	r0, 800689e <f_chdir+0x60>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8006878:	f99d 323f 	ldrsb.w	r3, [sp, #575]	; 0x23f
 800687c:	2b00      	cmp	r3, #0
 800687e:	db0b      	blt.n	8006898 <f_chdir+0x5a>
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8006880:	f89d 3216 	ldrb.w	r3, [sp, #534]	; 0x216
 8006884:	f013 0f10 	tst.w	r3, #16
 8006888:	d00d      	beq.n	80068a6 <f_chdir+0x68>
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800688a:	9d83      	ldr	r5, [sp, #524]	; 0x20c
 800688c:	998c      	ldr	r1, [sp, #560]	; 0x230
 800688e:	4628      	mov	r0, r5
 8006890:	f7fe fa9d 	bl	8004dce <ld_clust>
 8006894:	61e8      	str	r0, [r5, #28]
 8006896:	e002      	b.n	800689e <f_chdir+0x60>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8006898:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 800689a:	9a86      	ldr	r2, [sp, #536]	; 0x218
 800689c:	61da      	str	r2, [r3, #28]
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800689e:	2c04      	cmp	r4, #4
 80068a0:	d1d8      	bne.n	8006854 <f_chdir+0x16>
 80068a2:	2405      	movs	r4, #5
 80068a4:	e7d6      	b.n	8006854 <f_chdir+0x16>
					res = FR_NO_PATH;		/* Reached but a file */
 80068a6:	2405      	movs	r4, #5
 80068a8:	e7d4      	b.n	8006854 <f_chdir+0x16>

080068aa <f_lseek>:
{
 80068aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ae:	b083      	sub	sp, #12
 80068b0:	4604      	mov	r4, r0
 80068b2:	460e      	mov	r6, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80068b4:	a901      	add	r1, sp, #4
 80068b6:	f7ff f839 	bl	800592c <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80068ba:	4605      	mov	r5, r0
 80068bc:	b900      	cbnz	r0, 80068c0 <f_lseek+0x16>
 80068be:	7d65      	ldrb	r5, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 80068c0:	b9ad      	cbnz	r5, 80068ee <f_lseek+0x44>
	if (fp->cltbl) {	/* Fast seek */
 80068c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80a7 	beq.w	8006a18 <f_lseek+0x16e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80068ca:	f1b6 3fff 	cmp.w	r6, #4294967295
 80068ce:	d013      	beq.n	80068f8 <f_lseek+0x4e>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80068d0:	68e7      	ldr	r7, [r4, #12]
 80068d2:	42b7      	cmp	r7, r6
 80068d4:	d300      	bcc.n	80068d8 <f_lseek+0x2e>
 80068d6:	4637      	mov	r7, r6
			fp->fptr = ofs;				/* Set file pointer */
 80068d8:	61a7      	str	r7, [r4, #24]
			if (ofs) {
 80068da:	2f00      	cmp	r7, #0
 80068dc:	d150      	bne.n	8006980 <f_lseek+0xd6>
	LEAVE_FF(fs, res);
 80068de:	4629      	mov	r1, r5
 80068e0:	9801      	ldr	r0, [sp, #4]
 80068e2:	f7ff f815 	bl	8005910 <unlock_fs>
}
 80068e6:	4628      	mov	r0, r5
 80068e8:	b003      	add	sp, #12
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res != FR_OK) LEAVE_FF(fs, res);
 80068ee:	4629      	mov	r1, r5
 80068f0:	9801      	ldr	r0, [sp, #4]
 80068f2:	f7ff f80d 	bl	8005910 <unlock_fs>
 80068f6:	e7f6      	b.n	80068e6 <f_lseek+0x3c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80068f8:	4698      	mov	r8, r3
 80068fa:	f858 bb04 	ldr.w	fp, [r8], #4
			cl = fp->obj.sclust;		/* Origin of the chain */
 80068fe:	f8d4 a008 	ldr.w	sl, [r4, #8]
			if (cl) {
 8006902:	f1ba 0f00 	cmp.w	sl, #0
 8006906:	d02f      	beq.n	8006968 <f_lseek+0xbe>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006908:	f04f 0902 	mov.w	r9, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800690c:	f109 0902 	add.w	r9, r9, #2
 8006910:	4651      	mov	r1, sl
 8006912:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 8006914:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 8006916:	460e      	mov	r6, r1
 8006918:	4620      	mov	r0, r4
 800691a:	f7fe fdea 	bl	80054f2 <get_fat>
 800691e:	4601      	mov	r1, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006920:	2801      	cmp	r0, #1
 8006922:	d913      	bls.n	800694c <f_lseek+0xa2>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006924:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006928:	d017      	beq.n	800695a <f_lseek+0xb0>
					} while (cl == pcl + 1);
 800692a:	3601      	adds	r6, #1
 800692c:	4286      	cmp	r6, r0
 800692e:	d0f1      	beq.n	8006914 <f_lseek+0x6a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006930:	45cb      	cmp	fp, r9
 8006932:	d305      	bcc.n	8006940 <f_lseek+0x96>
						*tbl++ = ncl; *tbl++ = tcl;
 8006934:	4643      	mov	r3, r8
 8006936:	f843 7b08 	str.w	r7, [r3], #8
 800693a:	f8c8 a004 	str.w	sl, [r8, #4]
 800693e:	4698      	mov	r8, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006940:	9b01      	ldr	r3, [sp, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	428b      	cmp	r3, r1
 8006946:	d911      	bls.n	800696c <f_lseek+0xc2>
						cl = get_fat(&fp->obj, cl);
 8006948:	468a      	mov	sl, r1
 800694a:	e7df      	b.n	800690c <f_lseek+0x62>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800694c:	2502      	movs	r5, #2
 800694e:	7565      	strb	r5, [r4, #21]
 8006950:	4629      	mov	r1, r5
 8006952:	9801      	ldr	r0, [sp, #4]
 8006954:	f7fe ffdc 	bl	8005910 <unlock_fs>
 8006958:	e7c5      	b.n	80068e6 <f_lseek+0x3c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800695a:	2501      	movs	r5, #1
 800695c:	7565      	strb	r5, [r4, #21]
 800695e:	4629      	mov	r1, r5
 8006960:	9801      	ldr	r0, [sp, #4]
 8006962:	f7fe ffd5 	bl	8005910 <unlock_fs>
 8006966:	e7be      	b.n	80068e6 <f_lseek+0x3c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006968:	f04f 0902 	mov.w	r9, #2
			*fp->cltbl = ulen;	/* Number of items used */
 800696c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800696e:	f8c3 9000 	str.w	r9, [r3]
			if (ulen <= tlen) {
 8006972:	45d9      	cmp	r9, fp
 8006974:	f200 8117 	bhi.w	8006ba6 <f_lseek+0x2fc>
				*tbl = 0;		/* Terminate table */
 8006978:	2300      	movs	r3, #0
 800697a:	f8c8 3000 	str.w	r3, [r8]
 800697e:	e7ae      	b.n	80068de <f_lseek+0x34>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006980:	f107 39ff 	add.w	r9, r7, #4294967295
 8006984:	4649      	mov	r1, r9
 8006986:	4620      	mov	r0, r4
 8006988:	f7fe fa10 	bl	8004dac <clmt_clust>
 800698c:	4601      	mov	r1, r0
 800698e:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
 8006990:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006994:	4640      	mov	r0, r8
 8006996:	f7fe f9fd 	bl	8004d94 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800699a:	b1d8      	cbz	r0, 80069d4 <f_lseek+0x12a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800699c:	f8b8 600a 	ldrh.w	r6, [r8, #10]
 80069a0:	3e01      	subs	r6, #1
 80069a2:	ea06 2659 	and.w	r6, r6, r9, lsr #9
 80069a6:	4406      	add	r6, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80069a8:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80069ac:	2f00      	cmp	r7, #0
 80069ae:	d096      	beq.n	80068de <f_lseek+0x34>
 80069b0:	6a22      	ldr	r2, [r4, #32]
 80069b2:	42b2      	cmp	r2, r6
 80069b4:	d093      	beq.n	80068de <f_lseek+0x34>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80069b6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	db11      	blt.n	80069e2 <f_lseek+0x138>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80069be:	2301      	movs	r3, #1
 80069c0:	4632      	mov	r2, r6
 80069c2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80069c6:	9801      	ldr	r0, [sp, #4]
 80069c8:	7840      	ldrb	r0, [r0, #1]
 80069ca:	f7fe f8a3 	bl	8004b14 <disk_read>
 80069ce:	b9e0      	cbnz	r0, 8006a0a <f_lseek+0x160>
					fp->sect = dsc;
 80069d0:	6226      	str	r6, [r4, #32]
 80069d2:	e784      	b.n	80068de <f_lseek+0x34>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80069d4:	2502      	movs	r5, #2
 80069d6:	7565      	strb	r5, [r4, #21]
 80069d8:	4629      	mov	r1, r5
 80069da:	4640      	mov	r0, r8
 80069dc:	f7fe ff98 	bl	8005910 <unlock_fs>
 80069e0:	e781      	b.n	80068e6 <f_lseek+0x3c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069e2:	2301      	movs	r3, #1
 80069e4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80069e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80069ec:	f7fe f89e 	bl	8004b2c <disk_write>
 80069f0:	b920      	cbnz	r0, 80069fc <f_lseek+0x152>
						fp->flag &= (BYTE)~FA_DIRTY;
 80069f2:	7d23      	ldrb	r3, [r4, #20]
 80069f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f8:	7523      	strb	r3, [r4, #20]
 80069fa:	e7e0      	b.n	80069be <f_lseek+0x114>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069fc:	2501      	movs	r5, #1
 80069fe:	7565      	strb	r5, [r4, #21]
 8006a00:	4629      	mov	r1, r5
 8006a02:	9801      	ldr	r0, [sp, #4]
 8006a04:	f7fe ff84 	bl	8005910 <unlock_fs>
 8006a08:	e76d      	b.n	80068e6 <f_lseek+0x3c>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006a0a:	2501      	movs	r5, #1
 8006a0c:	7565      	strb	r5, [r4, #21]
 8006a0e:	4629      	mov	r1, r5
 8006a10:	9801      	ldr	r0, [sp, #4]
 8006a12:	f7fe ff7d 	bl	8005910 <unlock_fs>
 8006a16:	e766      	b.n	80068e6 <f_lseek+0x3c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006a18:	68e3      	ldr	r3, [r4, #12]
 8006a1a:	42b3      	cmp	r3, r6
 8006a1c:	d204      	bcs.n	8006a28 <f_lseek+0x17e>
 8006a1e:	7d22      	ldrb	r2, [r4, #20]
 8006a20:	f012 0f02 	tst.w	r2, #2
 8006a24:	d100      	bne.n	8006a28 <f_lseek+0x17e>
			ofs = fp->obj.objsize;
 8006a26:	461e      	mov	r6, r3
		ifptr = fp->fptr;
 8006a28:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 8006a2e:	b1de      	cbz	r6, 8006a68 <f_lseek+0x1be>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006a30:	9a01      	ldr	r2, [sp, #4]
 8006a32:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 8006a36:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 8006a3a:	b173      	cbz	r3, 8006a5a <f_lseek+0x1b0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006a3c:	1e72      	subs	r2, r6, #1
 8006a3e:	fbb2 f2f8 	udiv	r2, r2, r8
 8006a42:	3b01      	subs	r3, #1
 8006a44:	fbb3 f1f8 	udiv	r1, r3, r8
			if (ifptr > 0 &&
 8006a48:	428a      	cmp	r2, r1
 8006a4a:	d306      	bcc.n	8006a5a <f_lseek+0x1b0>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006a4c:	f1c8 0700 	rsb	r7, r8, #0
 8006a50:	401f      	ands	r7, r3
 8006a52:	61a7      	str	r7, [r4, #24]
				ofs -= fp->fptr;
 8006a54:	1bf7      	subs	r7, r6, r7
				clst = fp->clust;
 8006a56:	69e6      	ldr	r6, [r4, #28]
 8006a58:	e004      	b.n	8006a64 <f_lseek+0x1ba>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006a5a:	68a0      	ldr	r0, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006a5c:	b330      	cbz	r0, 8006aac <f_lseek+0x202>
				fp->clust = clst;
 8006a5e:	61e0      	str	r0, [r4, #28]
 8006a60:	4637      	mov	r7, r6
 8006a62:	4606      	mov	r6, r0
			if (clst != 0) {
 8006a64:	2e00      	cmp	r6, #0
 8006a66:	d149      	bne.n	8006afc <f_lseek+0x252>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8006a68:	69a3      	ldr	r3, [r4, #24]
 8006a6a:	68e2      	ldr	r2, [r4, #12]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d904      	bls.n	8006a7a <f_lseek+0x1d0>
			fp->obj.objsize = fp->fptr;
 8006a70:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8006a72:	7d22      	ldrb	r2, [r4, #20]
 8006a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a78:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f43f af2d 	beq.w	80068de <f_lseek+0x34>
 8006a84:	6a22      	ldr	r2, [r4, #32]
 8006a86:	42b2      	cmp	r2, r6
 8006a88:	f43f af29 	beq.w	80068de <f_lseek+0x34>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006a8c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db6d      	blt.n	8006b70 <f_lseek+0x2c6>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006a94:	2301      	movs	r3, #1
 8006a96:	4632      	mov	r2, r6
 8006a98:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006a9c:	9801      	ldr	r0, [sp, #4]
 8006a9e:	7840      	ldrb	r0, [r0, #1]
 8006aa0:	f7fe f838 	bl	8004b14 <disk_read>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d177      	bne.n	8006b98 <f_lseek+0x2ee>
			fp->sect = nsect;
 8006aa8:	6226      	str	r6, [r4, #32]
 8006aaa:	e718      	b.n	80068de <f_lseek+0x34>
					clst = create_chain(&fp->obj, 0);
 8006aac:	2100      	movs	r1, #0
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f7fe fddd 	bl	800566e <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006ab4:	2801      	cmp	r0, #1
 8006ab6:	d004      	beq.n	8006ac2 <f_lseek+0x218>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ab8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006abc:	d008      	beq.n	8006ad0 <f_lseek+0x226>
					fp->obj.sclust = clst;
 8006abe:	60a0      	str	r0, [r4, #8]
 8006ac0:	e7cd      	b.n	8006a5e <f_lseek+0x1b4>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006ac2:	2502      	movs	r5, #2
 8006ac4:	7565      	strb	r5, [r4, #21]
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	9801      	ldr	r0, [sp, #4]
 8006aca:	f7fe ff21 	bl	8005910 <unlock_fs>
 8006ace:	e70a      	b.n	80068e6 <f_lseek+0x3c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ad0:	2501      	movs	r5, #1
 8006ad2:	7565      	strb	r5, [r4, #21]
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	9801      	ldr	r0, [sp, #4]
 8006ad8:	f7fe ff1a 	bl	8005910 <unlock_fs>
 8006adc:	e703      	b.n	80068e6 <f_lseek+0x3c>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f7fe fd06 	bl	80054f2 <get_fat>
 8006ae6:	4606      	mov	r6, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ae8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006aec:	d029      	beq.n	8006b42 <f_lseek+0x298>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006aee:	2e01      	cmp	r6, #1
 8006af0:	d92e      	bls.n	8006b50 <f_lseek+0x2a6>
 8006af2:	9b01      	ldr	r3, [sp, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	42b3      	cmp	r3, r6
 8006af8:	d92a      	bls.n	8006b50 <f_lseek+0x2a6>
					fp->clust = clst;
 8006afa:	61e6      	str	r6, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006afc:	4547      	cmp	r7, r8
 8006afe:	d910      	bls.n	8006b22 <f_lseek+0x278>
					ofs -= bcs; fp->fptr += bcs;
 8006b00:	eba7 0708 	sub.w	r7, r7, r8
 8006b04:	69a3      	ldr	r3, [r4, #24]
 8006b06:	4443      	add	r3, r8
 8006b08:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006b0a:	7d23      	ldrb	r3, [r4, #20]
 8006b0c:	f013 0f02 	tst.w	r3, #2
 8006b10:	d0e5      	beq.n	8006ade <f_lseek+0x234>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006b12:	4631      	mov	r1, r6
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7fe fdaa 	bl	800566e <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d1e3      	bne.n	8006ae8 <f_lseek+0x23e>
							ofs = 0; break;
 8006b20:	4607      	mov	r7, r0
				fp->fptr += ofs;
 8006b22:	69a3      	ldr	r3, [r4, #24]
 8006b24:	443b      	add	r3, r7
 8006b26:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8006b28:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8006b2c:	b1f3      	cbz	r3, 8006b6c <f_lseek+0x2c2>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006b2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b32:	4631      	mov	r1, r6
 8006b34:	4640      	mov	r0, r8
 8006b36:	f7fe f92d 	bl	8004d94 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006b3a:	b180      	cbz	r0, 8006b5e <f_lseek+0x2b4>
					nsect += (DWORD)(ofs / SS(fs));
 8006b3c:	eb00 2657 	add.w	r6, r0, r7, lsr #9
 8006b40:	e792      	b.n	8006a68 <f_lseek+0x1be>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b42:	2501      	movs	r5, #1
 8006b44:	7565      	strb	r5, [r4, #21]
 8006b46:	4629      	mov	r1, r5
 8006b48:	9801      	ldr	r0, [sp, #4]
 8006b4a:	f7fe fee1 	bl	8005910 <unlock_fs>
 8006b4e:	e6ca      	b.n	80068e6 <f_lseek+0x3c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006b50:	2502      	movs	r5, #2
 8006b52:	7565      	strb	r5, [r4, #21]
 8006b54:	4629      	mov	r1, r5
 8006b56:	9801      	ldr	r0, [sp, #4]
 8006b58:	f7fe feda 	bl	8005910 <unlock_fs>
 8006b5c:	e6c3      	b.n	80068e6 <f_lseek+0x3c>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006b5e:	2502      	movs	r5, #2
 8006b60:	7565      	strb	r5, [r4, #21]
 8006b62:	4629      	mov	r1, r5
 8006b64:	4640      	mov	r0, r8
 8006b66:	f7fe fed3 	bl	8005910 <unlock_fs>
 8006b6a:	e6bc      	b.n	80068e6 <f_lseek+0x3c>
		fp->fptr = nsect = 0;
 8006b6c:	461e      	mov	r6, r3
 8006b6e:	e77b      	b.n	8006a68 <f_lseek+0x1be>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b70:	2301      	movs	r3, #1
 8006b72:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006b76:	9801      	ldr	r0, [sp, #4]
 8006b78:	7840      	ldrb	r0, [r0, #1]
 8006b7a:	f7fd ffd7 	bl	8004b2c <disk_write>
 8006b7e:	b920      	cbnz	r0, 8006b8a <f_lseek+0x2e0>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b80:	7d23      	ldrb	r3, [r4, #20]
 8006b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b86:	7523      	strb	r3, [r4, #20]
 8006b88:	e784      	b.n	8006a94 <f_lseek+0x1ea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b8a:	2501      	movs	r5, #1
 8006b8c:	7565      	strb	r5, [r4, #21]
 8006b8e:	4629      	mov	r1, r5
 8006b90:	9801      	ldr	r0, [sp, #4]
 8006b92:	f7fe febd 	bl	8005910 <unlock_fs>
 8006b96:	e6a6      	b.n	80068e6 <f_lseek+0x3c>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006b98:	2501      	movs	r5, #1
 8006b9a:	7565      	strb	r5, [r4, #21]
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	9801      	ldr	r0, [sp, #4]
 8006ba0:	f7fe feb6 	bl	8005910 <unlock_fs>
 8006ba4:	e69f      	b.n	80068e6 <f_lseek+0x3c>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006ba6:	2511      	movs	r5, #17
 8006ba8:	e699      	b.n	80068de <f_lseek+0x34>

08006baa <f_mkdir>:
{
 8006baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bae:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006bb2:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	a983      	add	r1, sp, #524	; 0x20c
 8006bb8:	a801      	add	r0, sp, #4
 8006bba:	f7fe fa8b 	bl	80050d4 <find_volume>
	dj.obj.fs = fs;
 8006bbe:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006bc0:	9384      	str	r3, [sp, #528]	; 0x210
	if (res == FR_OK) {
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	b140      	cbz	r0, 8006bd8 <f_mkdir+0x2e>
	LEAVE_FF(fs, res);
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8006bca:	f7fe fea1 	bl	8005910 <unlock_fs>
}
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8006bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 8006bd8:	aa03      	add	r2, sp, #12
 8006bda:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 8006bdc:	9901      	ldr	r1, [sp, #4]
 8006bde:	a884      	add	r0, sp, #528	; 0x210
 8006be0:	f7ff f8db 	bl	8005d9a <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8006be4:	4603      	mov	r3, r0
 8006be6:	b140      	cbz	r0, 8006bfa <f_mkdir+0x50>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8006be8:	2804      	cmp	r0, #4
 8006bea:	d107      	bne.n	8006bfc <f_mkdir+0x52>
 8006bec:	f89d 223f 	ldrb.w	r2, [sp, #575]	; 0x23f
 8006bf0:	f012 0f20 	tst.w	r2, #32
 8006bf4:	d002      	beq.n	8006bfc <f_mkdir+0x52>
			res = FR_INVALID_NAME;
 8006bf6:	2406      	movs	r4, #6
 8006bf8:	e7e5      	b.n	8006bc6 <f_mkdir+0x1c>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8006bfa:	2308      	movs	r3, #8
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d001      	beq.n	8006c04 <f_mkdir+0x5a>
 8006c00:	461c      	mov	r4, r3
 8006c02:	e7e0      	b.n	8006bc6 <f_mkdir+0x1c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8006c04:	2100      	movs	r1, #0
 8006c06:	a884      	add	r0, sp, #528	; 0x210
 8006c08:	f7fe fd31 	bl	800566e <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8006c0c:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 8006c0e:	8953      	ldrh	r3, [r2, #10]
 8006c10:	025b      	lsls	r3, r3, #9
 8006c12:	9387      	str	r3, [sp, #540]	; 0x21c
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8006c14:	4680      	mov	r8, r0
 8006c16:	b900      	cbnz	r0, 8006c1a <f_mkdir+0x70>
 8006c18:	2407      	movs	r4, #7
			if (dcl == 1) res = FR_INT_ERR;
 8006c1a:	f1b8 0f01 	cmp.w	r8, #1
 8006c1e:	d020      	beq.n	8006c62 <f_mkdir+0xb8>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006c20:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006c24:	d024      	beq.n	8006c70 <f_mkdir+0xc6>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8006c26:	b1f4      	cbz	r4, 8006c66 <f_mkdir+0xbc>
			tm = GET_FATTIME();
 8006c28:	f002 fc54 	bl	80094d4 <get_fattime>
 8006c2c:	4682      	mov	sl, r0
			if (res == FR_OK) {					/* Initialize the new directory table */
 8006c2e:	b30c      	cbz	r4, 8006c74 <f_mkdir+0xca>
			if (res == FR_OK) {
 8006c30:	2c00      	cmp	r4, #0
 8006c32:	d071      	beq.n	8006d18 <f_mkdir+0x16e>
			if (res == FR_OK) {
 8006c34:	2c00      	cmp	r4, #0
 8006c36:	d174      	bne.n	8006d22 <f_mkdir+0x178>
					dir = dj.dir;
 8006c38:	9c8c      	ldr	r4, [sp, #560]	; 0x230
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8006c3a:	4651      	mov	r1, sl
 8006c3c:	f104 0016 	add.w	r0, r4, #22
 8006c40:	f7fd ffa0 	bl	8004b84 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8006c44:	4642      	mov	r2, r8
 8006c46:	4621      	mov	r1, r4
 8006c48:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8006c4a:	f7fe f8d3 	bl	8004df4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8006c4e:	2310      	movs	r3, #16
 8006c50:	72e3      	strb	r3, [r4, #11]
					fs->wflag = 1;
 8006c52:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006c54:	2201      	movs	r2, #1
 8006c56:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);
 8006c58:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8006c5a:	f7ff f99b 	bl	8005f94 <sync_fs>
 8006c5e:	4604      	mov	r4, r0
 8006c60:	e7b1      	b.n	8006bc6 <f_mkdir+0x1c>
			if (dcl == 1) res = FR_INT_ERR;
 8006c62:	2402      	movs	r4, #2
 8006c64:	e7dc      	b.n	8006c20 <f_mkdir+0x76>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8006c66:	4610      	mov	r0, r2
 8006c68:	f7fe f9b2 	bl	8004fd0 <sync_window>
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	e7db      	b.n	8006c28 <f_mkdir+0x7e>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006c70:	2401      	movs	r4, #1
 8006c72:	e7d9      	b.n	8006c28 <f_mkdir+0x7e>
				dsc = clust2sect(fs, dcl);
 8006c74:	9e83      	ldr	r6, [sp, #524]	; 0x20c
 8006c76:	4641      	mov	r1, r8
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f7fe f88b 	bl	8004d94 <clust2sect>
 8006c7e:	4605      	mov	r5, r0
				dir = fs->win;
 8006c80:	f106 093c 	add.w	r9, r6, #60	; 0x3c
				mem_set(dir, 0, SS(fs));
 8006c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4648      	mov	r0, r9
 8006c8c:	f7fd ff8e 	bl	8004bac <mem_set>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8006c90:	220b      	movs	r2, #11
 8006c92:	2120      	movs	r1, #32
 8006c94:	4648      	mov	r0, r9
 8006c96:	f7fd ff89 	bl	8004bac <mem_set>
					dir[DIR_Name] = '.';
 8006c9a:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
 8006c9e:	f886 b03c 	strb.w	fp, [r6, #60]	; 0x3c
					dir[DIR_Attr] = AM_DIR;
 8006ca2:	2310      	movs	r3, #16
 8006ca4:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
					st_dword(dir + DIR_ModTime, tm);
 8006ca8:	4651      	mov	r1, sl
 8006caa:	f106 0052 	add.w	r0, r6, #82	; 0x52
 8006cae:	f7fd ff69 	bl	8004b84 <st_dword>
					st_clust(fs, dir, dcl);
 8006cb2:	4642      	mov	r2, r8
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8006cb8:	f7fe f89c 	bl	8004df4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8006cbc:	f106 075c 	add.w	r7, r6, #92	; 0x5c
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f7fd ff67 	bl	8004b98 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8006cca:	f886 b05d 	strb.w	fp, [r6, #93]	; 0x5d
 8006cce:	9a86      	ldr	r2, [sp, #536]	; 0x218
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8006cd0:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8006cd2:	7803      	ldrb	r3, [r0, #0]
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d01a      	beq.n	8006d0e <f_mkdir+0x164>
					st_clust(fs, dir + SZDIRE, pcl);
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7fe f88b 	bl	8004df4 <st_clust>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8006cde:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006ce0:	895e      	ldrh	r6, [r3, #10]
 8006ce2:	2e00      	cmp	r6, #0
 8006ce4:	d0a4      	beq.n	8006c30 <f_mkdir+0x86>
					fs->winsect = dsc++;
 8006ce6:	1c6f      	adds	r7, r5, #1
 8006ce8:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8006cea:	639d      	str	r5, [r3, #56]	; 0x38
					fs->wflag = 1;
 8006cec:	2201      	movs	r2, #1
 8006cee:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8006cf0:	9883      	ldr	r0, [sp, #524]	; 0x20c
 8006cf2:	f7fe f96d 	bl	8004fd0 <sync_window>
					if (res != FR_OK) break;
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d199      	bne.n	8006c30 <f_mkdir+0x86>
					mem_set(dir, 0, SS(fs));
 8006cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d00:	2100      	movs	r1, #0
 8006d02:	4648      	mov	r0, r9
 8006d04:	f7fd ff52 	bl	8004bac <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8006d08:	3e01      	subs	r6, #1
					fs->winsect = dsc++;
 8006d0a:	463d      	mov	r5, r7
 8006d0c:	e7e9      	b.n	8006ce2 <f_mkdir+0x138>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8006d0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d1e1      	bne.n	8006cd8 <f_mkdir+0x12e>
 8006d14:	2200      	movs	r2, #0
 8006d16:	e7df      	b.n	8006cd8 <f_mkdir+0x12e>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8006d18:	a884      	add	r0, sp, #528	; 0x210
 8006d1a:	f7ff f89b 	bl	8005e54 <dir_register>
 8006d1e:	4604      	mov	r4, r0
 8006d20:	e788      	b.n	8006c34 <f_mkdir+0x8a>
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8006d22:	2200      	movs	r2, #0
 8006d24:	4641      	mov	r1, r8
 8006d26:	a884      	add	r0, sp, #528	; 0x210
 8006d28:	f7fe fd07 	bl	800573a <remove_chain>
 8006d2c:	e74b      	b.n	8006bc6 <f_mkdir+0x1c>

08006d2e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	b094      	sub	sp, #80	; 0x50
 8006d32:	4604      	mov	r4, r0
	putbuff pb;


	putc_init(&pb, fp);
 8006d34:	a801      	add	r0, sp, #4
 8006d36:	f7fe f93c 	bl	8004fb2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006d3a:	e003      	b.n	8006d44 <f_puts+0x16>
 8006d3c:	3401      	adds	r4, #1
 8006d3e:	a801      	add	r0, sp, #4
 8006d40:	f7ff fcc4 	bl	80066cc <putc_bfd>
 8006d44:	7821      	ldrb	r1, [r4, #0]
 8006d46:	2900      	cmp	r1, #0
 8006d48:	d1f8      	bne.n	8006d3c <f_puts+0xe>
	return putc_flush(&pb);
 8006d4a:	a801      	add	r0, sp, #4
 8006d4c:	f7ff fce5 	bl	800671a <putc_flush>
}
 8006d50:	b014      	add	sp, #80	; 0x50
 8006d52:	bd10      	pop	{r4, pc}

08006d54 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006d54:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <FATFS_LinkDriverEx+0x50>)
 8006d56:	7a5b      	ldrb	r3, [r3, #9]
 8006d58:	bb13      	cbnz	r3, 8006da0 <FATFS_LinkDriverEx+0x4c>
{
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8006d62:	4b10      	ldr	r3, [pc, #64]	; (8006da4 <FATFS_LinkDriverEx+0x50>)
 8006d64:	f893 c009 	ldrb.w	ip, [r3, #9]
 8006d68:	fa5f fc8c 	uxtb.w	ip, ip
 8006d6c:	f04f 0e00 	mov.w	lr, #0
 8006d70:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8006d74:	f893 c009 	ldrb.w	ip, [r3, #9]
 8006d78:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8006d7c:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8006d80:	7a5c      	ldrb	r4, [r3, #9]
 8006d82:	441c      	add	r4, r3
 8006d84:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8006d86:	7a5a      	ldrb	r2, [r3, #9]
 8006d88:	1c54      	adds	r4, r2, #1
 8006d8a:	b2e4      	uxtb	r4, r4
 8006d8c:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8006d8e:	3230      	adds	r2, #48	; 0x30
 8006d90:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8006d92:	233a      	movs	r3, #58	; 0x3a
 8006d94:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006d96:	232f      	movs	r3, #47	; 0x2f
 8006d98:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8006d9a:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8006d9e:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8006da0:	2001      	movs	r0, #1
}
 8006da2:	4770      	bx	lr
 8006da4:	200000d0 	.word	0x200000d0

08006da8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006da8:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8006daa:	2200      	movs	r2, #0
 8006dac:	f7ff ffd2 	bl	8006d54 <FATFS_LinkDriverEx>
}
 8006db0:	bd08      	pop	{r3, pc}
	...

08006db4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006db4:	287f      	cmp	r0, #127	; 0x7f
 8006db6:	d917      	bls.n	8006de8 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006db8:	b131      	cbz	r1, 8006dc8 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006dba:	28ff      	cmp	r0, #255	; 0xff
 8006dbc:	d813      	bhi.n	8006de6 <ff_convert+0x32>
 8006dbe:	3880      	subs	r0, #128	; 0x80
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <ff_convert+0x38>)
 8006dc2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006dc6:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2b7f      	cmp	r3, #127	; 0x7f
 8006dcc:	d807      	bhi.n	8006dde <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 8006dce:	4a07      	ldr	r2, [pc, #28]	; (8006dec <ff_convert+0x38>)
 8006dd0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006dd4:	4282      	cmp	r2, r0
 8006dd6:	d002      	beq.n	8006dde <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8006dd8:	3301      	adds	r3, #1
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	e7f5      	b.n	8006dca <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 8006dde:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8006de2:	b2c0      	uxtb	r0, r0
 8006de4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006de6:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	0800b440 	.word	0x0800b440

08006df0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006df0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006df4:	d207      	bcs.n	8006e06 <ff_wtoupper+0x16>
 8006df6:	4b23      	ldr	r3, [pc, #140]	; (8006e84 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 8006df8:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8006dfa:	2a00      	cmp	r2, #0
 8006dfc:	d041      	beq.n	8006e82 <ff_wtoupper+0x92>
 8006dfe:	4290      	cmp	r0, r2
 8006e00:	d33f      	bcc.n	8006e82 <ff_wtoupper+0x92>
{
 8006e02:	b510      	push	{r4, lr}
 8006e04:	e006      	b.n	8006e14 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 8006e06:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <ff_wtoupper+0x98>)
 8006e08:	e7f6      	b.n	8006df8 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006e0a:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 8006e0c:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8006e0e:	b1da      	cbz	r2, 8006e48 <ff_wtoupper+0x58>
 8006e10:	4290      	cmp	r0, r2
 8006e12:	d319      	bcc.n	8006e48 <ff_wtoupper+0x58>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006e14:	f103 0e04 	add.w	lr, r3, #4
 8006e18:	885b      	ldrh	r3, [r3, #2]
 8006e1a:	0a19      	lsrs	r1, r3, #8
 8006e1c:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 8006e1e:	eb03 0c02 	add.w	ip, r3, r2
 8006e22:	4560      	cmp	r0, ip
 8006e24:	db04      	blt.n	8006e30 <ff_wtoupper+0x40>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8006e26:	2900      	cmp	r1, #0
 8006e28:	d1ef      	bne.n	8006e0a <ff_wtoupper+0x1a>
 8006e2a:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006e2e:	e7ed      	b.n	8006e0c <ff_wtoupper+0x1c>
			switch (cmd) {
 8006e30:	2908      	cmp	r1, #8
 8006e32:	d809      	bhi.n	8006e48 <ff_wtoupper+0x58>
 8006e34:	e8df f001 	tbb	[pc, r1]
 8006e38:	120f0905 	.word	0x120f0905
 8006e3c:	1e1b1815 	.word	0x1e1b1815
 8006e40:	21          	.byte	0x21
 8006e41:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006e42:	1a82      	subs	r2, r0, r2
 8006e44:	f83e 0012 	ldrh.w	r0, [lr, r2, lsl #1]
	}

	return chr;
}
 8006e48:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006e4a:	1a83      	subs	r3, r0, r2
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	1ac0      	subs	r0, r0, r3
 8006e52:	b280      	uxth	r0, r0
 8006e54:	e7f8      	b.n	8006e48 <ff_wtoupper+0x58>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006e56:	3810      	subs	r0, #16
 8006e58:	b280      	uxth	r0, r0
 8006e5a:	e7f5      	b.n	8006e48 <ff_wtoupper+0x58>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006e5c:	3820      	subs	r0, #32
 8006e5e:	b280      	uxth	r0, r0
 8006e60:	e7f2      	b.n	8006e48 <ff_wtoupper+0x58>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006e62:	3830      	subs	r0, #48	; 0x30
 8006e64:	b280      	uxth	r0, r0
 8006e66:	e7ef      	b.n	8006e48 <ff_wtoupper+0x58>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006e68:	381a      	subs	r0, #26
 8006e6a:	b280      	uxth	r0, r0
 8006e6c:	e7ec      	b.n	8006e48 <ff_wtoupper+0x58>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006e6e:	3008      	adds	r0, #8
 8006e70:	b280      	uxth	r0, r0
 8006e72:	e7e9      	b.n	8006e48 <ff_wtoupper+0x58>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006e74:	3850      	subs	r0, #80	; 0x50
 8006e76:	b280      	uxth	r0, r0
 8006e78:	e7e6      	b.n	8006e48 <ff_wtoupper+0x58>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006e7a:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8006e7e:	b280      	uxth	r0, r0
 8006e80:	e7e2      	b.n	8006e48 <ff_wtoupper+0x58>
}
 8006e82:	4770      	bx	lr
 8006e84:	0800b5fc 	.word	0x0800b5fc
 8006e88:	0800b540 	.word	0x0800b540

08006e8c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	460c      	mov	r4, r1
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8006e92:	2300      	movs	r3, #0
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	9301      	str	r3, [sp, #4]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006e98:	2101      	movs	r1, #1
 8006e9a:	4668      	mov	r0, sp
 8006e9c:	f000 f879 	bl	8006f92 <osSemaphoreCreate>
 8006ea0:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 8006ea2:	3800      	subs	r0, #0
 8006ea4:	bf18      	it	ne
 8006ea6:	2001      	movne	r0, #1
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd10      	pop	{r4, pc}

08006eac <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8006eac:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8006eae:	f000 f8f0 	bl	8007092 <osSemaphoreDelete>
#endif
    return 1;
}
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	bd08      	pop	{r3, pc}

08006eb6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8006eb6:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8006eb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ebc:	f000 f88d 	bl	8006fda <osSemaphoreWait>
 8006ec0:	b108      	cbz	r0, 8006ec6 <ff_req_grant+0x10>
  int ret = 0;
 8006ec2:	2000      	movs	r0, #0
  {
    ret = 1;
  }

  return ret;
}
 8006ec4:	bd08      	pop	{r3, pc}
    ret = 1;
 8006ec6:	2001      	movs	r0, #1
  return ret;
 8006ec8:	e7fc      	b.n	8006ec4 <ff_req_grant+0xe>

08006eca <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8006eca:	b508      	push	{r3, lr}
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8006ecc:	f000 f8b4 	bl	8007038 <osSemaphoreRelease>
#endif
}
 8006ed0:	bd08      	pop	{r3, pc}

08006ed2 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8006ed2:	2884      	cmp	r0, #132	; 0x84
 8006ed4:	d001      	beq.n	8006eda <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8006ed6:	3003      	adds	r0, #3
 8006ed8:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006eda:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8006edc:	4770      	bx	lr

08006ede <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ede:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8006ee2:	3800      	subs	r0, #0
 8006ee4:	bf18      	it	ne
 8006ee6:	2001      	movne	r0, #1
 8006ee8:	4770      	bx	lr

08006eea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006eea:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006eec:	f001 f8b2 	bl	8008054 <vTaskStartScheduler>
  
  return osOK;
}
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	bd08      	pop	{r3, pc}

08006ef4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8006ef4:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8006ef6:	f001 fbb1 	bl	800865c <xTaskGetSchedulerState>
 8006efa:	2801      	cmp	r0, #1
 8006efc:	d001      	beq.n	8006f02 <osKernelRunning+0xe>
    return 0;
  else
    return 1;
 8006efe:	2001      	movs	r0, #1
#else
	return (-1);
#endif	
}
 8006f00:	bd08      	pop	{r3, pc}
    return 0;
 8006f02:	2000      	movs	r0, #0
 8006f04:	e7fc      	b.n	8006f00 <osKernelRunning+0xc>

08006f06 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006f06:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8006f08:	f7ff ffe9 	bl	8006ede <inHandlerMode>
 8006f0c:	b110      	cbz	r0, 8006f14 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
 8006f0e:	f001 f8ef 	bl	80080f0 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
  }
}
 8006f12:	bd08      	pop	{r3, pc}
    return xTaskGetTickCount();
 8006f14:	f001 f8e6 	bl	80080e4 <xTaskGetTickCount>
 8006f18:	e7fb      	b.n	8006f12 <osKernelSysTick+0xc>

08006f1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	4604      	mov	r4, r0
 8006f22:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f24:	6945      	ldr	r5, [r0, #20]
 8006f26:	b1bd      	cbz	r5, 8006f58 <osThreadCreate+0x3e>
 8006f28:	6986      	ldr	r6, [r0, #24]
 8006f2a:	b1ae      	cbz	r6, 8006f58 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f2c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006f30:	f8d0 9000 	ldr.w	r9, [r0]
 8006f34:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006f38:	f7ff ffcb 	bl	8006ed2 <makeFreeRtosPriority>
 8006f3c:	9602      	str	r6, [sp, #8]
 8006f3e:	9501      	str	r5, [sp, #4]
 8006f40:	9000      	str	r0, [sp, #0]
 8006f42:	463b      	mov	r3, r7
 8006f44:	6922      	ldr	r2, [r4, #16]
 8006f46:	4649      	mov	r1, r9
 8006f48:	4640      	mov	r0, r8
 8006f4a:	f001 f813 	bl	8007f74 <xTaskCreateStatic>
 8006f4e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f50:	9805      	ldr	r0, [sp, #20]
}
 8006f52:	b007      	add	sp, #28
 8006f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f58:	6865      	ldr	r5, [r4, #4]
 8006f5a:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f5c:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f60:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8006f64:	f7ff ffb5 	bl	8006ed2 <makeFreeRtosPriority>
 8006f68:	ab05      	add	r3, sp, #20
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	9000      	str	r0, [sp, #0]
 8006f6e:	463b      	mov	r3, r7
 8006f70:	fa1f f288 	uxth.w	r2, r8
 8006f74:	4631      	mov	r1, r6
 8006f76:	4628      	mov	r0, r5
 8006f78:	f001 f837 	bl	8007fea <xTaskCreate>
 8006f7c:	2801      	cmp	r0, #1
 8006f7e:	d0e7      	beq.n	8006f50 <osThreadCreate+0x36>
      return NULL;
 8006f80:	2000      	movs	r0, #0
 8006f82:	e7e6      	b.n	8006f52 <osThreadCreate+0x38>

08006f84 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f84:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f86:	b900      	cbnz	r0, 8006f8a <osDelay+0x6>
 8006f88:	2001      	movs	r0, #1
 8006f8a:	f001 f9bf 	bl	800830c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006f8e:	2000      	movs	r0, #0
 8006f90:	bd08      	pop	{r3, pc}

08006f92 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006f92:	b510      	push	{r4, lr}
 8006f94:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006f96:	6844      	ldr	r4, [r0, #4]
 8006f98:	b17c      	cbz	r4, 8006fba <osSemaphoreCreate+0x28>
    if (count == 1) {
 8006f9a:	2901      	cmp	r1, #1
 8006f9c:	d003      	beq.n	8006fa6 <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006f9e:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	b002      	add	sp, #8
 8006fa4:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	4623      	mov	r3, r4
 8006fac:	2200      	movs	r2, #0
 8006fae:	4611      	mov	r1, r2
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f000 fa43 	bl	800743c <xQueueGenericCreateStatic>
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	e7f2      	b.n	8006fa0 <osSemaphoreCreate+0xe>
    if (count == 1) {
 8006fba:	2901      	cmp	r1, #1
 8006fbc:	d1f0      	bne.n	8006fa0 <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	f000 fa84 	bl	80074d0 <xQueueGenericCreate>
 8006fc8:	4604      	mov	r4, r0
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d0e8      	beq.n	8006fa0 <osSemaphoreCreate+0xe>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	f000 faa0 	bl	8007518 <xQueueGenericSend>
      return sema;
 8006fd8:	e7e2      	b.n	8006fa0 <osSemaphoreCreate+0xe>

08006fda <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006fda:	b570      	push	{r4, r5, r6, lr}
 8006fdc:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8006fe2:	b318      	cbz	r0, 800702c <osSemaphoreWait+0x52>
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	4606      	mov	r6, r0
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8006fe8:	f7ff ff79 	bl	8006ede <inHandlerMode>
 8006fec:	4605      	mov	r5, r0
 8006fee:	b1a0      	cbz	r0, 800701a <osSemaphoreWait+0x40>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006ff0:	aa01      	add	r2, sp, #4
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f000 fd95 	bl	8007b24 <xQueueReceiveFromISR>
 8006ffa:	2801      	cmp	r0, #1
 8006ffc:	d118      	bne.n	8007030 <osSemaphoreWait+0x56>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006ffe:	9d01      	ldr	r5, [sp, #4]
 8007000:	b18d      	cbz	r5, 8007026 <osSemaphoreWait+0x4c>
 8007002:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8007016:	2500      	movs	r5, #0
 8007018:	e005      	b.n	8007026 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800701a:	4621      	mov	r1, r4
 800701c:	4630      	mov	r0, r6
 800701e:	f000 fcae 	bl	800797e <xQueueSemaphoreTake>
 8007022:	2801      	cmp	r0, #1
 8007024:	d106      	bne.n	8007034 <osSemaphoreWait+0x5a>
}
 8007026:	4628      	mov	r0, r5
 8007028:	b002      	add	sp, #8
 800702a:	bd70      	pop	{r4, r5, r6, pc}
    return osErrorParameter;
 800702c:	2580      	movs	r5, #128	; 0x80
 800702e:	e7fa      	b.n	8007026 <osSemaphoreWait+0x4c>
      return osErrorOS;
 8007030:	25ff      	movs	r5, #255	; 0xff
 8007032:	e7f8      	b.n	8007026 <osSemaphoreWait+0x4c>
    return osErrorOS;
 8007034:	25ff      	movs	r5, #255	; 0xff
 8007036:	e7f6      	b.n	8007026 <osSemaphoreWait+0x4c>

08007038 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007038:	b510      	push	{r4, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800703e:	2300      	movs	r3, #0
 8007040:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8007042:	f7ff ff4c 	bl	8006ede <inHandlerMode>
 8007046:	b198      	cbz	r0, 8007070 <osSemaphoreRelease+0x38>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007048:	a901      	add	r1, sp, #4
 800704a:	4620      	mov	r0, r4
 800704c:	f000 fb8f 	bl	800776e <xQueueGiveFromISR>
 8007050:	2801      	cmp	r0, #1
 8007052:	d11a      	bne.n	800708a <osSemaphoreRelease+0x52>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007054:	9b01      	ldr	r3, [sp, #4]
 8007056:	b1d3      	cbz	r3, 800708e <osSemaphoreRelease+0x56>
 8007058:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800705c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007060:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800706c:	2000      	movs	r0, #0
 800706e:	e008      	b.n	8007082 <osSemaphoreRelease+0x4a>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007070:	2300      	movs	r3, #0
 8007072:	461a      	mov	r2, r3
 8007074:	4619      	mov	r1, r3
 8007076:	4620      	mov	r0, r4
 8007078:	f000 fa4e 	bl	8007518 <xQueueGenericSend>
 800707c:	2801      	cmp	r0, #1
 800707e:	d002      	beq.n	8007086 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8007080:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 8007082:	b002      	add	sp, #8
 8007084:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8007086:	2000      	movs	r0, #0
 8007088:	e7fb      	b.n	8007082 <osSemaphoreRelease+0x4a>
      return osErrorOS;
 800708a:	20ff      	movs	r0, #255	; 0xff
 800708c:	e7f9      	b.n	8007082 <osSemaphoreRelease+0x4a>
  osStatus result = osOK;
 800708e:	2000      	movs	r0, #0
 8007090:	e7f7      	b.n	8007082 <osSemaphoreRelease+0x4a>

08007092 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007092:	b510      	push	{r4, lr}
 8007094:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8007096:	f7ff ff22 	bl	8006ede <inHandlerMode>
 800709a:	b920      	cbnz	r0, 80070a6 <osSemaphoreDelete+0x14>
    return osErrorISR;
  }

  vSemaphoreDelete(semaphore_id);
 800709c:	4620      	mov	r0, r4
 800709e:	f000 fdbf 	bl	8007c20 <vQueueDelete>

  return osOK; 
 80070a2:	2000      	movs	r0, #0
}
 80070a4:	bd10      	pop	{r4, pc}
    return osErrorISR;
 80070a6:	2082      	movs	r0, #130	; 0x82
 80070a8:	e7fc      	b.n	80070a4 <osSemaphoreDelete+0x12>

080070aa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80070aa:	b500      	push	{lr}
 80070ac:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80070ae:	6882      	ldr	r2, [r0, #8]
 80070b0:	b142      	cbz	r2, 80070c4 <osMessageCreate+0x1a>
 80070b2:	68c3      	ldr	r3, [r0, #12]
 80070b4:	b133      	cbz	r3, 80070c4 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80070b6:	2100      	movs	r1, #0
 80070b8:	9100      	str	r1, [sp, #0]
 80070ba:	6841      	ldr	r1, [r0, #4]
 80070bc:	6800      	ldr	r0, [r0, #0]
 80070be:	f000 f9bd 	bl	800743c <xQueueGenericCreateStatic>
 80070c2:	e004      	b.n	80070ce <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80070c4:	2200      	movs	r2, #0
 80070c6:	6841      	ldr	r1, [r0, #4]
 80070c8:	6800      	ldr	r0, [r0, #0]
 80070ca:	f000 fa01 	bl	80074d0 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80070ce:	b003      	add	sp, #12
 80070d0:	f85d fb04 	ldr.w	pc, [sp], #4

080070d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80070d4:	b530      	push	{r4, r5, lr}
 80070d6:	b085      	sub	sp, #20
 80070d8:	4604      	mov	r4, r0
 80070da:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80070dc:	2300      	movs	r3, #0
 80070de:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 80070e0:	4615      	mov	r5, r2
 80070e2:	b902      	cbnz	r2, 80070e6 <osMessagePut+0x12>
    ticks = 1;
 80070e4:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 80070e6:	f7ff fefa 	bl	8006ede <inHandlerMode>
 80070ea:	b1a8      	cbz	r0, 8007118 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80070ec:	2300      	movs	r3, #0
 80070ee:	aa03      	add	r2, sp, #12
 80070f0:	a901      	add	r1, sp, #4
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 fad4 	bl	80076a0 <xQueueGenericSendFromISR>
 80070f8:	2801      	cmp	r0, #1
 80070fa:	d118      	bne.n	800712e <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80070fc:	9b03      	ldr	r3, [sp, #12]
 80070fe:	b1c3      	cbz	r3, 8007132 <osMessagePut+0x5e>
 8007100:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007108:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8007114:	2000      	movs	r0, #0
 8007116:	e008      	b.n	800712a <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007118:	2300      	movs	r3, #0
 800711a:	462a      	mov	r2, r5
 800711c:	a901      	add	r1, sp, #4
 800711e:	4620      	mov	r0, r4
 8007120:	f000 f9fa 	bl	8007518 <xQueueGenericSend>
 8007124:	2801      	cmp	r0, #1
 8007126:	d106      	bne.n	8007136 <osMessagePut+0x62>
  return osOK;
 8007128:	2000      	movs	r0, #0
}
 800712a:	b005      	add	sp, #20
 800712c:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 800712e:	20ff      	movs	r0, #255	; 0xff
 8007130:	e7fb      	b.n	800712a <osMessagePut+0x56>
  return osOK;
 8007132:	2000      	movs	r0, #0
 8007134:	e7f9      	b.n	800712a <osMessagePut+0x56>
      return osErrorOS;
 8007136:	20ff      	movs	r0, #255	; 0xff
 8007138:	e7f7      	b.n	800712a <osMessagePut+0x56>

0800713a <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800713a:	b570      	push	{r4, r5, r6, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007140:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8007146:	b1e1      	cbz	r1, 8007182 <osMessageGet+0x48>
 8007148:	460d      	mov	r5, r1
 800714a:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800714c:	2300      	movs	r3, #0
 800714e:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8007150:	f7ff fec5 	bl	8006ede <inHandlerMode>
 8007154:	b300      	cbz	r0, 8007198 <osMessageGet+0x5e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007156:	aa03      	add	r2, sp, #12
 8007158:	a901      	add	r1, sp, #4
 800715a:	4628      	mov	r0, r5
 800715c:	f000 fce2 	bl	8007b24 <xQueueReceiveFromISR>
 8007160:	2801      	cmp	r0, #1
 8007162:	d016      	beq.n	8007192 <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8007164:	2300      	movs	r3, #0
 8007166:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007168:	9b03      	ldr	r3, [sp, #12]
 800716a:	b1fb      	cbz	r3, 80071ac <osMessageGet+0x72>
 800716c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007174:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	e014      	b.n	80071ac <osMessageGet+0x72>
    event.status = osErrorParameter;
 8007182:	2380      	movs	r3, #128	; 0x80
 8007184:	9300      	str	r3, [sp, #0]
    return event;
 8007186:	466b      	mov	r3, sp
 8007188:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800718c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007190:	e011      	b.n	80071b6 <osMessageGet+0x7c>
      event.status = osEventMessage;
 8007192:	2310      	movs	r3, #16
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	e7e7      	b.n	8007168 <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007198:	4632      	mov	r2, r6
 800719a:	a901      	add	r1, sp, #4
 800719c:	4628      	mov	r0, r5
 800719e:	f000 fb3f 	bl	8007820 <xQueueReceive>
 80071a2:	2801      	cmp	r0, #1
 80071a4:	d00a      	beq.n	80071bc <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80071a6:	b106      	cbz	r6, 80071aa <osMessageGet+0x70>
 80071a8:	2640      	movs	r6, #64	; 0x40
 80071aa:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 80071ac:	466b      	mov	r3, sp
 80071ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80071b6:	4620      	mov	r0, r4
 80071b8:	b004      	add	sp, #16
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80071bc:	2310      	movs	r3, #16
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	e7f4      	b.n	80071ac <osMessageGet+0x72>

080071c2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c2:	f100 0308 	add.w	r3, r0, #8
 80071c6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071c8:	f04f 32ff 	mov.w	r2, #4294967295
 80071cc:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ce:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071d0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071d6:	4770      	bx	lr

080071d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071d8:	2300      	movs	r3, #0
 80071da:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071dc:	4770      	bx	lr

080071de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80071de:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071e0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071e6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071e8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071ea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80071ec:	6803      	ldr	r3, [r0, #0]
 80071ee:	3301      	adds	r3, #1
 80071f0:	6003      	str	r3, [r0, #0]
}
 80071f2:	4770      	bx	lr

080071f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071f4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071f6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071f8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80071fc:	d011      	beq.n	8007222 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071fe:	f100 0308 	add.w	r3, r0, #8
 8007202:	461c      	mov	r4, r3
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	42aa      	cmp	r2, r5
 800720a:	d9fa      	bls.n	8007202 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800720c:	6863      	ldr	r3, [r4, #4]
 800720e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007210:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007212:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007214:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007216:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007218:	6803      	ldr	r3, [r0, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	6003      	str	r3, [r0, #0]
}
 800721e:	bc30      	pop	{r4, r5}
 8007220:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8007222:	6904      	ldr	r4, [r0, #16]
 8007224:	e7f2      	b.n	800720c <vListInsert+0x18>

08007226 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007226:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007228:	6841      	ldr	r1, [r0, #4]
 800722a:	6882      	ldr	r2, [r0, #8]
 800722c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800722e:	6841      	ldr	r1, [r0, #4]
 8007230:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	4282      	cmp	r2, r0
 8007236:	d006      	beq.n	8007246 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007238:	2200      	movs	r2, #0
 800723a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	3a01      	subs	r2, #1
 8007240:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007242:	6818      	ldr	r0, [r3, #0]
}
 8007244:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007246:	6882      	ldr	r2, [r0, #8]
 8007248:	605a      	str	r2, [r3, #4]
 800724a:	e7f5      	b.n	8007238 <uxListRemove+0x12>

0800724c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800724c:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800724e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007250:	b118      	cbz	r0, 800725a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800725a:	4770      	bx	lr

0800725c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800725c:	b510      	push	{r4, lr}
 800725e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007260:	f001 fc68 	bl	8008b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007264:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007268:	429a      	cmp	r2, r3
 800726a:	d004      	beq.n	8007276 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800726c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800726e:	f001 fc83 	bl	8008b78 <vPortExitCritical>

	return xReturn;
}
 8007272:	4620      	mov	r0, r4
 8007274:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007276:	2401      	movs	r4, #1
 8007278:	e7f9      	b.n	800726e <prvIsQueueFull+0x12>

0800727a <prvIsQueueEmpty>:
{
 800727a:	b510      	push	{r4, lr}
 800727c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800727e:	f001 fc59 	bl	8008b34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007284:	b923      	cbnz	r3, 8007290 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8007286:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8007288:	f001 fc76 	bl	8008b78 <vPortExitCritical>
}
 800728c:	4620      	mov	r0, r4
 800728e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8007290:	2400      	movs	r4, #0
 8007292:	e7f9      	b.n	8007288 <prvIsQueueEmpty+0xe>

08007294 <prvCopyDataToQueue>:
{
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	4604      	mov	r4, r0
 8007298:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800729a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800729c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800729e:	b95a      	cbnz	r2, 80072b8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072a0:	6803      	ldr	r3, [r0, #0]
 80072a2:	b11b      	cbz	r3, 80072ac <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80072a4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072a6:	3601      	adds	r6, #1
 80072a8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072ac:	6880      	ldr	r0, [r0, #8]
 80072ae:	f001 fa41 	bl	8008734 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60a3      	str	r3, [r4, #8]
 80072b6:	e7f6      	b.n	80072a6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80072b8:	b96d      	cbnz	r5, 80072d6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ba:	6840      	ldr	r0, [r0, #4]
 80072bc:	f003 fb6c 	bl	800a998 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	4413      	add	r3, r2
 80072c6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072c8:	68a2      	ldr	r2, [r4, #8]
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d319      	bcc.n	8007302 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80072d2:	4628      	mov	r0, r5
 80072d4:	e7e7      	b.n	80072a6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072d6:	68c0      	ldr	r0, [r0, #12]
 80072d8:	f003 fb5e 	bl	800a998 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80072de:	4251      	negs	r1, r2
 80072e0:	68e3      	ldr	r3, [r4, #12]
 80072e2:	1a9b      	subs	r3, r3, r2
 80072e4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072e6:	6822      	ldr	r2, [r4, #0]
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d202      	bcs.n	80072f2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072ec:	68a3      	ldr	r3, [r4, #8]
 80072ee:	440b      	add	r3, r1
 80072f0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80072f2:	2d02      	cmp	r5, #2
 80072f4:	d001      	beq.n	80072fa <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80072f6:	2000      	movs	r0, #0
 80072f8:	e7d5      	b.n	80072a6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072fa:	b126      	cbz	r6, 8007306 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80072fc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80072fe:	2000      	movs	r0, #0
 8007300:	e7d1      	b.n	80072a6 <prvCopyDataToQueue+0x12>
 8007302:	4628      	mov	r0, r5
 8007304:	e7cf      	b.n	80072a6 <prvCopyDataToQueue+0x12>
 8007306:	2000      	movs	r0, #0
 8007308:	e7cd      	b.n	80072a6 <prvCopyDataToQueue+0x12>

0800730a <prvCopyDataFromQueue>:
{
 800730a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800730c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800730e:	b16a      	cbz	r2, 800732c <prvCopyDataFromQueue+0x22>
{
 8007310:	b510      	push	{r4, lr}
 8007312:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007314:	68d9      	ldr	r1, [r3, #12]
 8007316:	4411      	add	r1, r2
 8007318:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800731a:	689c      	ldr	r4, [r3, #8]
 800731c:	42a1      	cmp	r1, r4
 800731e:	d301      	bcc.n	8007324 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007320:	6819      	ldr	r1, [r3, #0]
 8007322:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007324:	68d9      	ldr	r1, [r3, #12]
 8007326:	f003 fb37 	bl	800a998 <memcpy>
}
 800732a:	bd10      	pop	{r4, pc}
 800732c:	4770      	bx	lr

0800732e <prvUnlockQueue>:
{
 800732e:	b538      	push	{r3, r4, r5, lr}
 8007330:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007332:	f001 fbff 	bl	8008b34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007336:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800733a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800733c:	e001      	b.n	8007342 <prvUnlockQueue+0x14>
			--cTxLock;
 800733e:	3c01      	subs	r4, #1
 8007340:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007342:	2c00      	cmp	r4, #0
 8007344:	dd0a      	ble.n	800735c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007348:	b143      	cbz	r3, 800735c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800734a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800734e:	f001 f8ef 	bl	8008530 <xTaskRemoveFromEventList>
 8007352:	2800      	cmp	r0, #0
 8007354:	d0f3      	beq.n	800733e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8007356:	f001 f979 	bl	800864c <vTaskMissedYield>
 800735a:	e7f0      	b.n	800733e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800735c:	23ff      	movs	r3, #255	; 0xff
 800735e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007362:	f001 fc09 	bl	8008b78 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007366:	f001 fbe5 	bl	8008b34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800736a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800736e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007370:	e001      	b.n	8007376 <prvUnlockQueue+0x48>
				--cRxLock;
 8007372:	3c01      	subs	r4, #1
 8007374:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007376:	2c00      	cmp	r4, #0
 8007378:	dd0a      	ble.n	8007390 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800737a:	692b      	ldr	r3, [r5, #16]
 800737c:	b143      	cbz	r3, 8007390 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800737e:	f105 0010 	add.w	r0, r5, #16
 8007382:	f001 f8d5 	bl	8008530 <xTaskRemoveFromEventList>
 8007386:	2800      	cmp	r0, #0
 8007388:	d0f3      	beq.n	8007372 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800738a:	f001 f95f 	bl	800864c <vTaskMissedYield>
 800738e:	e7f0      	b.n	8007372 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8007390:	23ff      	movs	r3, #255	; 0xff
 8007392:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007396:	f001 fbef 	bl	8008b78 <vPortExitCritical>
}
 800739a:	bd38      	pop	{r3, r4, r5, pc}

0800739c <xQueueGenericReset>:
{
 800739c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800739e:	b1e0      	cbz	r0, 80073da <xQueueGenericReset+0x3e>
 80073a0:	460d      	mov	r5, r1
 80073a2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80073a4:	f001 fbc6 	bl	8008b34 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80073ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80073ae:	fb01 3002 	mla	r0, r1, r2, r3
 80073b2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073b4:	2000      	movs	r0, #0
 80073b6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073b8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ba:	3a01      	subs	r2, #1
 80073bc:	fb02 3301 	mla	r3, r2, r1, r3
 80073c0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073c2:	23ff      	movs	r3, #255	; 0xff
 80073c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80073cc:	b9fd      	cbnz	r5, 800740e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ce:	6923      	ldr	r3, [r4, #16]
 80073d0:	b963      	cbnz	r3, 80073ec <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80073d2:	f001 fbd1 	bl	8008b78 <vPortExitCritical>
}
 80073d6:	2001      	movs	r0, #1
 80073d8:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80073ea:	e7fe      	b.n	80073ea <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ec:	f104 0010 	add.w	r0, r4, #16
 80073f0:	f001 f89e 	bl	8008530 <xTaskRemoveFromEventList>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d0ec      	beq.n	80073d2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80073f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80073fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007400:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	e7e1      	b.n	80073d2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800740e:	f104 0010 	add.w	r0, r4, #16
 8007412:	f7ff fed6 	bl	80071c2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007416:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800741a:	f7ff fed2 	bl	80071c2 <vListInitialise>
 800741e:	e7d8      	b.n	80073d2 <xQueueGenericReset+0x36>

08007420 <prvInitialiseNewQueue>:
{
 8007420:	b510      	push	{r4, lr}
 8007422:	4603      	mov	r3, r0
 8007424:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007426:	460c      	mov	r4, r1
 8007428:	b931      	cbnz	r1, 8007438 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800742a:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800742c:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800742e:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007430:	2101      	movs	r1, #1
 8007432:	f7ff ffb3 	bl	800739c <xQueueGenericReset>
}
 8007436:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007438:	6002      	str	r2, [r0, #0]
 800743a:	e7f7      	b.n	800742c <prvInitialiseNewQueue+0xc>

0800743c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800743c:	b940      	cbnz	r0, 8007450 <xQueueGenericCreateStatic+0x14>
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	e7fe      	b.n	800744e <xQueueGenericCreateStatic+0x12>
	{
 8007450:	b510      	push	{r4, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	461c      	mov	r4, r3
 8007456:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8007458:	b153      	cbz	r3, 8007470 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800745a:	b192      	cbz	r2, 8007482 <xQueueGenericCreateStatic+0x46>
 800745c:	b989      	cbnz	r1, 8007482 <xQueueGenericCreateStatic+0x46>
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	e7fe      	b.n	800746e <xQueueGenericCreateStatic+0x32>
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8007480:	e7fe      	b.n	8007480 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007482:	b16a      	cbz	r2, 80074a0 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007484:	2348      	movs	r3, #72	; 0x48
 8007486:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007488:	9b03      	ldr	r3, [sp, #12]
 800748a:	2b48      	cmp	r3, #72	; 0x48
 800748c:	d013      	beq.n	80074b6 <xQueueGenericCreateStatic+0x7a>
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	e7fe      	b.n	800749e <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074a0:	2900      	cmp	r1, #0
 80074a2:	d0ef      	beq.n	8007484 <xQueueGenericCreateStatic+0x48>
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	e7fe      	b.n	80074b4 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074b6:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074be:	9400      	str	r4, [sp, #0]
 80074c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80074c4:	4660      	mov	r0, ip
 80074c6:	f7ff ffab 	bl	8007420 <prvInitialiseNewQueue>
	}
 80074ca:	4620      	mov	r0, r4
 80074cc:	b004      	add	sp, #16
 80074ce:	bd10      	pop	{r4, pc}

080074d0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074d0:	b940      	cbnz	r0, 80074e4 <xQueueGenericCreate+0x14>
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	e7fe      	b.n	80074e2 <xQueueGenericCreate+0x12>
	{
 80074e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e6:	b083      	sub	sp, #12
 80074e8:	460d      	mov	r5, r1
 80074ea:	4614      	mov	r4, r2
 80074ec:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ee:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074f2:	3048      	adds	r0, #72	; 0x48
 80074f4:	f001 fcc4 	bl	8008e80 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80074f8:	4607      	mov	r7, r0
 80074fa:	b150      	cbz	r0, 8007512 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007502:	9000      	str	r0, [sp, #0]
 8007504:	4623      	mov	r3, r4
 8007506:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800750a:	4629      	mov	r1, r5
 800750c:	4630      	mov	r0, r6
 800750e:	f7ff ff87 	bl	8007420 <prvInitialiseNewQueue>
	}
 8007512:	4638      	mov	r0, r7
 8007514:	b003      	add	sp, #12
 8007516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007518 <xQueueGenericSend>:
{
 8007518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800751a:	b085      	sub	sp, #20
 800751c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800751e:	b188      	cbz	r0, 8007544 <xQueueGenericSend+0x2c>
 8007520:	460f      	mov	r7, r1
 8007522:	461d      	mov	r5, r3
 8007524:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007526:	b1b1      	cbz	r1, 8007556 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007528:	2d02      	cmp	r5, #2
 800752a:	d120      	bne.n	800756e <xQueueGenericSend+0x56>
 800752c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800752e:	2b01      	cmp	r3, #1
 8007530:	d01d      	beq.n	800756e <xQueueGenericSend+0x56>
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	e7fe      	b.n	8007542 <xQueueGenericSend+0x2a>
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007554:	e7fe      	b.n	8007554 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007556:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0e5      	beq.n	8007528 <xQueueGenericSend+0x10>
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	e7fe      	b.n	800756c <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800756e:	f001 f875 	bl	800865c <xTaskGetSchedulerState>
 8007572:	4606      	mov	r6, r0
 8007574:	b958      	cbnz	r0, 800758e <xQueueGenericSend+0x76>
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d048      	beq.n	800760e <xQueueGenericSend+0xf6>
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	e7fe      	b.n	800758c <xQueueGenericSend+0x74>
 800758e:	2600      	movs	r6, #0
 8007590:	e03d      	b.n	800760e <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007592:	462a      	mov	r2, r5
 8007594:	4639      	mov	r1, r7
 8007596:	4620      	mov	r0, r4
 8007598:	f7ff fe7c 	bl	8007294 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800759c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800759e:	b97b      	cbnz	r3, 80075c0 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80075a0:	b148      	cbz	r0, 80075b6 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80075a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80075a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80075b6:	f001 fadf 	bl	8008b78 <vPortExitCritical>
				return pdPASS;
 80075ba:	2001      	movs	r0, #1
}
 80075bc:	b005      	add	sp, #20
 80075be:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80075c4:	f000 ffb4 	bl	8008530 <xTaskRemoveFromEventList>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d0f4      	beq.n	80075b6 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80075cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80075d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	e7e9      	b.n	80075b6 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80075e2:	f001 fac9 	bl	8008b78 <vPortExitCritical>
					return errQUEUE_FULL;
 80075e6:	2000      	movs	r0, #0
 80075e8:	e7e8      	b.n	80075bc <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075ea:	a802      	add	r0, sp, #8
 80075ec:	f000 ffe2 	bl	80085b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075f0:	2601      	movs	r6, #1
 80075f2:	e019      	b.n	8007628 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80075f4:	2300      	movs	r3, #0
 80075f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80075fa:	e021      	b.n	8007640 <xQueueGenericSend+0x128>
 80075fc:	2300      	movs	r3, #0
 80075fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007602:	e023      	b.n	800764c <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff fe92 	bl	800732e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800760a:	f000 fe07 	bl	800821c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800760e:	f001 fa91 	bl	8008b34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007612:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007616:	429a      	cmp	r2, r3
 8007618:	d3bb      	bcc.n	8007592 <xQueueGenericSend+0x7a>
 800761a:	2d02      	cmp	r5, #2
 800761c:	d0b9      	beq.n	8007592 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0de      	beq.n	80075e2 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8007624:	2e00      	cmp	r6, #0
 8007626:	d0e0      	beq.n	80075ea <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8007628:	f001 faa6 	bl	8008b78 <vPortExitCritical>
		vTaskSuspendAll();
 800762c:	f000 fd50 	bl	80080d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007630:	f001 fa80 	bl	8008b34 <vPortEnterCritical>
 8007634:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8007638:	b252      	sxtb	r2, r2
 800763a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800763e:	d0d9      	beq.n	80075f4 <xQueueGenericSend+0xdc>
 8007640:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8007644:	b252      	sxtb	r2, r2
 8007646:	f1b2 3fff 	cmp.w	r2, #4294967295
 800764a:	d0d7      	beq.n	80075fc <xQueueGenericSend+0xe4>
 800764c:	f001 fa94 	bl	8008b78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007650:	a901      	add	r1, sp, #4
 8007652:	a802      	add	r0, sp, #8
 8007654:	f000 ffb8 	bl	80085c8 <xTaskCheckForTimeOut>
 8007658:	b9d8      	cbnz	r0, 8007692 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800765a:	4620      	mov	r0, r4
 800765c:	f7ff fdfe 	bl	800725c <prvIsQueueFull>
 8007660:	2800      	cmp	r0, #0
 8007662:	d0cf      	beq.n	8007604 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007664:	9901      	ldr	r1, [sp, #4]
 8007666:	f104 0010 	add.w	r0, r4, #16
 800766a:	f000 ff47 	bl	80084fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800766e:	4620      	mov	r0, r4
 8007670:	f7ff fe5d 	bl	800732e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007674:	f000 fdd2 	bl	800821c <xTaskResumeAll>
 8007678:	2800      	cmp	r0, #0
 800767a:	d1c8      	bne.n	800760e <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800767c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007684:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	e7bd      	b.n	800760e <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8007692:	4620      	mov	r0, r4
 8007694:	f7ff fe4b 	bl	800732e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007698:	f000 fdc0 	bl	800821c <xTaskResumeAll>
			return errQUEUE_FULL;
 800769c:	2000      	movs	r0, #0
 800769e:	e78d      	b.n	80075bc <xQueueGenericSend+0xa4>

080076a0 <xQueueGenericSendFromISR>:
{
 80076a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80076a4:	b190      	cbz	r0, 80076cc <xQueueGenericSendFromISR+0x2c>
 80076a6:	460f      	mov	r7, r1
 80076a8:	4616      	mov	r6, r2
 80076aa:	461c      	mov	r4, r3
 80076ac:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ae:	b1b1      	cbz	r1, 80076de <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076b0:	2c02      	cmp	r4, #2
 80076b2:	d120      	bne.n	80076f6 <xQueueGenericSendFromISR+0x56>
 80076b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d01d      	beq.n	80076f6 <xQueueGenericSendFromISR+0x56>
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	e7fe      	b.n	80076ca <xQueueGenericSendFromISR+0x2a>
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80076dc:	e7fe      	b.n	80076dc <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d0e5      	beq.n	80076b0 <xQueueGenericSendFromISR+0x10>
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	e7fe      	b.n	80076f4 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076f6:	f001 fb41 	bl	8008d7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076fa:	f3ef 8911 	mrs	r9, BASEPRI
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800770e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8007710:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007712:	429a      	cmp	r2, r3
 8007714:	d306      	bcc.n	8007724 <xQueueGenericSendFromISR+0x84>
 8007716:	2c02      	cmp	r4, #2
 8007718:	d004      	beq.n	8007724 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800771a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800771c:	f389 8811 	msr	BASEPRI, r9
}
 8007720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8007724:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8007728:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800772c:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800772e:	4622      	mov	r2, r4
 8007730:	4639      	mov	r1, r7
 8007732:	4628      	mov	r0, r5
 8007734:	f7ff fdae 	bl	8007294 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007738:	f1b8 3fff 	cmp.w	r8, #4294967295
 800773c:	d006      	beq.n	800774c <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800773e:	f108 0301 	add.w	r3, r8, #1
 8007742:	b25b      	sxtb	r3, r3
 8007744:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8007748:	2001      	movs	r0, #1
 800774a:	e7e7      	b.n	800771c <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800774c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800774e:	b90b      	cbnz	r3, 8007754 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8007750:	2001      	movs	r0, #1
 8007752:	e7e3      	b.n	800771c <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007754:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007758:	f000 feea 	bl	8008530 <xTaskRemoveFromEventList>
 800775c:	b118      	cbz	r0, 8007766 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800775e:	b126      	cbz	r6, 800776a <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007760:	2001      	movs	r0, #1
 8007762:	6030      	str	r0, [r6, #0]
 8007764:	e7da      	b.n	800771c <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8007766:	2001      	movs	r0, #1
 8007768:	e7d8      	b.n	800771c <xQueueGenericSendFromISR+0x7c>
 800776a:	2001      	movs	r0, #1
 800776c:	e7d6      	b.n	800771c <xQueueGenericSendFromISR+0x7c>

0800776e <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800776e:	b168      	cbz	r0, 800778c <xQueueGiveFromISR+0x1e>
{
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	460c      	mov	r4, r1
 8007774:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007776:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007778:	b18b      	cbz	r3, 800779e <xQueueGiveFromISR+0x30>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	e7fe      	b.n	800778a <xQueueGiveFromISR+0x1c>
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800779c:	e7fe      	b.n	800779c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800779e:	6803      	ldr	r3, [r0, #0]
 80077a0:	b1eb      	cbz	r3, 80077de <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077a2:	f001 faeb 	bl	8008d7c <vPortValidateInterruptPriority>
	__asm volatile
 80077a6:	f3ef 8611 	mrs	r6, BASEPRI
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ba:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80077bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80077be:	4293      	cmp	r3, r2
 80077c0:	d926      	bls.n	8007810 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80077c2:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80077c6:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077c8:	3201      	adds	r2, #1
 80077ca:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d0:	d011      	beq.n	80077f6 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077d2:	3301      	adds	r3, #1
 80077d4:	b25b      	sxtb	r3, r3
 80077d6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80077da:	2001      	movs	r0, #1
 80077dc:	e019      	b.n	8007812 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80077de:	6883      	ldr	r3, [r0, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0de      	beq.n	80077a2 <xQueueGiveFromISR+0x34>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	e7fe      	b.n	80077f4 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077f8:	b90b      	cbnz	r3, 80077fe <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80077fa:	2001      	movs	r0, #1
 80077fc:	e009      	b.n	8007812 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077fe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007802:	f000 fe95 	bl	8008530 <xTaskRemoveFromEventList>
 8007806:	b138      	cbz	r0, 8007818 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8007808:	b144      	cbz	r4, 800781c <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800780a:	2001      	movs	r0, #1
 800780c:	6020      	str	r0, [r4, #0]
 800780e:	e000      	b.n	8007812 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 8007810:	2000      	movs	r0, #0
	__asm volatile
 8007812:	f386 8811 	msr	BASEPRI, r6
}
 8007816:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8007818:	2001      	movs	r0, #1
 800781a:	e7fa      	b.n	8007812 <xQueueGiveFromISR+0xa4>
 800781c:	2001      	movs	r0, #1
 800781e:	e7f8      	b.n	8007812 <xQueueGiveFromISR+0xa4>

08007820 <xQueueReceive>:
{
 8007820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007822:	b085      	sub	sp, #20
 8007824:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007826:	b190      	cbz	r0, 800784e <xQueueReceive+0x2e>
 8007828:	460f      	mov	r7, r1
 800782a:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800782c:	b1c1      	cbz	r1, 8007860 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800782e:	f000 ff15 	bl	800865c <xTaskGetSchedulerState>
 8007832:	4606      	mov	r6, r0
 8007834:	bb00      	cbnz	r0, 8007878 <xQueueReceive+0x58>
 8007836:	9b01      	ldr	r3, [sp, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d05e      	beq.n	80078fa <xQueueReceive+0xda>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	e7fe      	b.n	800784c <xQueueReceive+0x2c>
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800785e:	e7fe      	b.n	800785e <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007860:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0e3      	beq.n	800782e <xQueueReceive+0xe>
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	e7fe      	b.n	8007876 <xQueueReceive+0x56>
 8007878:	2600      	movs	r6, #0
 800787a:	e03e      	b.n	80078fa <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800787c:	4639      	mov	r1, r7
 800787e:	4620      	mov	r0, r4
 8007880:	f7ff fd43 	bl	800730a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007884:	3d01      	subs	r5, #1
 8007886:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	b923      	cbnz	r3, 8007896 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800788c:	f001 f974 	bl	8008b78 <vPortExitCritical>
				return pdPASS;
 8007890:	2001      	movs	r0, #1
}
 8007892:	b005      	add	sp, #20
 8007894:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007896:	f104 0010 	add.w	r0, r4, #16
 800789a:	f000 fe49 	bl	8008530 <xTaskRemoveFromEventList>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d0f4      	beq.n	800788c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80078a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80078a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	e7e9      	b.n	800788c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80078b8:	f001 f95e 	bl	8008b78 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80078bc:	2000      	movs	r0, #0
 80078be:	e7e8      	b.n	8007892 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078c0:	a802      	add	r0, sp, #8
 80078c2:	f000 fe77 	bl	80085b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078c6:	2601      	movs	r6, #1
 80078c8:	e021      	b.n	800790e <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80078ca:	2300      	movs	r3, #0
 80078cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80078d0:	e029      	b.n	8007926 <xQueueReceive+0x106>
 80078d2:	2300      	movs	r3, #0
 80078d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078d8:	e02b      	b.n	8007932 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80078da:	4620      	mov	r0, r4
 80078dc:	f7ff fd27 	bl	800732e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078e0:	f000 fc9c 	bl	800821c <xTaskResumeAll>
 80078e4:	e009      	b.n	80078fa <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7ff fd21 	bl	800732e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078ec:	f000 fc96 	bl	800821c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078f0:	4620      	mov	r0, r4
 80078f2:	f7ff fcc2 	bl	800727a <prvIsQueueEmpty>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d13f      	bne.n	800797a <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80078fa:	f001 f91b 	bl	8008b34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078fe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007900:	2d00      	cmp	r5, #0
 8007902:	d1bb      	bne.n	800787c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007904:	9b01      	ldr	r3, [sp, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0d6      	beq.n	80078b8 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800790a:	2e00      	cmp	r6, #0
 800790c:	d0d8      	beq.n	80078c0 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800790e:	f001 f933 	bl	8008b78 <vPortExitCritical>
		vTaskSuspendAll();
 8007912:	f000 fbdd 	bl	80080d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007916:	f001 f90d 	bl	8008b34 <vPortEnterCritical>
 800791a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800791e:	b25b      	sxtb	r3, r3
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007924:	d0d1      	beq.n	80078ca <xQueueReceive+0xaa>
 8007926:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800792a:	b25b      	sxtb	r3, r3
 800792c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007930:	d0cf      	beq.n	80078d2 <xQueueReceive+0xb2>
 8007932:	f001 f921 	bl	8008b78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007936:	a901      	add	r1, sp, #4
 8007938:	a802      	add	r0, sp, #8
 800793a:	f000 fe45 	bl	80085c8 <xTaskCheckForTimeOut>
 800793e:	2800      	cmp	r0, #0
 8007940:	d1d1      	bne.n	80078e6 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007942:	4620      	mov	r0, r4
 8007944:	f7ff fc99 	bl	800727a <prvIsQueueEmpty>
 8007948:	2800      	cmp	r0, #0
 800794a:	d0c6      	beq.n	80078da <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800794c:	9901      	ldr	r1, [sp, #4]
 800794e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007952:	f000 fdd3 	bl	80084fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007956:	4620      	mov	r0, r4
 8007958:	f7ff fce9 	bl	800732e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800795c:	f000 fc5e 	bl	800821c <xTaskResumeAll>
 8007960:	2800      	cmp	r0, #0
 8007962:	d1ca      	bne.n	80078fa <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8007964:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	e7bf      	b.n	80078fa <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800797a:	2000      	movs	r0, #0
 800797c:	e789      	b.n	8007892 <xQueueReceive+0x72>

0800797e <xQueueSemaphoreTake>:
{
 800797e:	b570      	push	{r4, r5, r6, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007984:	b158      	cbz	r0, 800799e <xQueueSemaphoreTake+0x20>
 8007986:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8007988:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800798a:	b18b      	cbz	r3, 80079b0 <xQueueSemaphoreTake+0x32>
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	e7fe      	b.n	800799c <xQueueSemaphoreTake+0x1e>
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80079ae:	e7fe      	b.n	80079ae <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079b0:	f000 fe54 	bl	800865c <xTaskGetSchedulerState>
 80079b4:	4605      	mov	r5, r0
 80079b6:	b950      	cbnz	r0, 80079ce <xQueueSemaphoreTake+0x50>
 80079b8:	9b01      	ldr	r3, [sp, #4]
 80079ba:	b15b      	cbz	r3, 80079d4 <xQueueSemaphoreTake+0x56>
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	e7fe      	b.n	80079cc <xQueueSemaphoreTake+0x4e>
 80079ce:	2600      	movs	r6, #0
 80079d0:	4635      	mov	r5, r6
 80079d2:	e055      	b.n	8007a80 <xQueueSemaphoreTake+0x102>
 80079d4:	4606      	mov	r6, r0
 80079d6:	e053      	b.n	8007a80 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80079d8:	3b01      	subs	r3, #1
 80079da:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	b13b      	cbz	r3, 80079f0 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	b94b      	cbnz	r3, 80079f8 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 80079e4:	f001 f8c8 	bl	8008b78 <vPortExitCritical>
				return pdPASS;
 80079e8:	2601      	movs	r6, #1
}
 80079ea:	4630      	mov	r0, r6
 80079ec:	b004      	add	sp, #16
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80079f0:	f000 ff5a 	bl	80088a8 <pvTaskIncrementMutexHeldCount>
 80079f4:	60a0      	str	r0, [r4, #8]
 80079f6:	e7f3      	b.n	80079e0 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079f8:	f104 0010 	add.w	r0, r4, #16
 80079fc:	f000 fd98 	bl	8008530 <xTaskRemoveFromEventList>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d0ef      	beq.n	80079e4 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8007a04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	e7e4      	b.n	80079e4 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a1a:	b146      	cbz	r6, 8007a2e <xQueueSemaphoreTake+0xb0>
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	e7fe      	b.n	8007a2c <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8007a2e:	f001 f8a3 	bl	8008b78 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007a32:	e7da      	b.n	80079ea <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a34:	a802      	add	r0, sp, #8
 8007a36:	f000 fdbd 	bl	80085b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a3a:	2501      	movs	r5, #1
 8007a3c:	e02a      	b.n	8007a94 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007a44:	e032      	b.n	8007aac <xQueueSemaphoreTake+0x12e>
 8007a46:	2300      	movs	r3, #0
 8007a48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a4c:	e034      	b.n	8007ab8 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8007a4e:	f001 f871 	bl	8008b34 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a52:	68a0      	ldr	r0, [r4, #8]
 8007a54:	f000 fe12 	bl	800867c <xTaskPriorityInherit>
 8007a58:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8007a5a:	f001 f88d 	bl	8008b78 <vPortExitCritical>
 8007a5e:	e03b      	b.n	8007ad8 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 8007a60:	4620      	mov	r0, r4
 8007a62:	f7ff fc64 	bl	800732e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a66:	f000 fbd9 	bl	800821c <xTaskResumeAll>
 8007a6a:	e009      	b.n	8007a80 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f7ff fc5e 	bl	800732e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a72:	f000 fbd3 	bl	800821c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a76:	4620      	mov	r0, r4
 8007a78:	f7ff fbff 	bl	800727a <prvIsQueueEmpty>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d142      	bne.n	8007b06 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 8007a80:	f001 f858 	bl	8008b34 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1a6      	bne.n	80079d8 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a8a:	9b01      	ldr	r3, [sp, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0c4      	beq.n	8007a1a <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8007a90:	2d00      	cmp	r5, #0
 8007a92:	d0cf      	beq.n	8007a34 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8007a94:	f001 f870 	bl	8008b78 <vPortExitCritical>
		vTaskSuspendAll();
 8007a98:	f000 fb1a 	bl	80080d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a9c:	f001 f84a 	bl	8008b34 <vPortEnterCritical>
 8007aa0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d0c8      	beq.n	8007a3e <xQueueSemaphoreTake+0xc0>
 8007aac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ab0:	b25b      	sxtb	r3, r3
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab6:	d0c6      	beq.n	8007a46 <xQueueSemaphoreTake+0xc8>
 8007ab8:	f001 f85e 	bl	8008b78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007abc:	a901      	add	r1, sp, #4
 8007abe:	a802      	add	r0, sp, #8
 8007ac0:	f000 fd82 	bl	80085c8 <xTaskCheckForTimeOut>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d1d1      	bne.n	8007a6c <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f7ff fbd6 	bl	800727a <prvIsQueueEmpty>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d0c6      	beq.n	8007a60 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0ba      	beq.n	8007a4e <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ad8:	9901      	ldr	r1, [sp, #4]
 8007ada:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ade:	f000 fd0d 	bl	80084fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f7ff fc23 	bl	800732e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ae8:	f000 fb98 	bl	800821c <xTaskResumeAll>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d1c7      	bne.n	8007a80 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8007af0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	e7bc      	b.n	8007a80 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8007b06:	b90e      	cbnz	r6, 8007b0c <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8007b08:	2600      	movs	r6, #0
 8007b0a:	e76e      	b.n	80079ea <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8007b0c:	f001 f812 	bl	8008b34 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b10:	4620      	mov	r0, r4
 8007b12:	f7ff fb9b 	bl	800724c <prvGetDisinheritPriorityAfterTimeout>
 8007b16:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b18:	68a0      	ldr	r0, [r4, #8]
 8007b1a:	f000 fe67 	bl	80087ec <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007b1e:	f001 f82b 	bl	8008b78 <vPortExitCritical>
 8007b22:	e7f1      	b.n	8007b08 <xQueueSemaphoreTake+0x18a>

08007b24 <xQueueReceiveFromISR>:
{
 8007b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007b28:	b1b0      	cbz	r0, 8007b58 <xQueueReceiveFromISR+0x34>
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	4616      	mov	r6, r2
 8007b2e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b30:	b1d9      	cbz	r1, 8007b6a <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b32:	f001 f923 	bl	8008d7c <vPortValidateInterruptPriority>
	__asm volatile
 8007b36:	f3ef 8811 	mrs	r8, BASEPRI
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b4a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b4c:	b9cf      	cbnz	r7, 8007b82 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8007b4e:	2000      	movs	r0, #0
	__asm volatile
 8007b50:	f388 8811 	msr	BASEPRI, r8
}
 8007b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007b68:	e7fe      	b.n	8007b68 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0e0      	beq.n	8007b32 <xQueueReceiveFromISR+0xe>
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	e7fe      	b.n	8007b80 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b82:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8007b86:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f7ff fbbc 	bl	800730a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b92:	3f01      	subs	r7, #1
 8007b94:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007b96:	f1b9 3fff 	cmp.w	r9, #4294967295
 8007b9a:	d006      	beq.n	8007baa <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b9c:	f109 0301 	add.w	r3, r9, #1
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	e7d2      	b.n	8007b50 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	b90b      	cbnz	r3, 8007bb2 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8007bae:	2001      	movs	r0, #1
 8007bb0:	e7ce      	b.n	8007b50 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bb2:	f104 0010 	add.w	r0, r4, #16
 8007bb6:	f000 fcbb 	bl	8008530 <xTaskRemoveFromEventList>
 8007bba:	b118      	cbz	r0, 8007bc4 <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 8007bbc:	b126      	cbz	r6, 8007bc8 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	6030      	str	r0, [r6, #0]
 8007bc2:	e7c5      	b.n	8007b50 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	e7c3      	b.n	8007b50 <xQueueReceiveFromISR+0x2c>
 8007bc8:	2001      	movs	r0, #1
 8007bca:	e7c1      	b.n	8007b50 <xQueueReceiveFromISR+0x2c>

08007bcc <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8007bcc:	b140      	cbz	r0, 8007be0 <uxQueueMessagesWaiting+0x14>
{
 8007bce:	b510      	push	{r4, lr}
 8007bd0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007bd2:	f000 ffaf 	bl	8008b34 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007bd6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8007bd8:	f000 ffce 	bl	8008b78 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007bdc:	4620      	mov	r0, r4
 8007bde:	bd10      	pop	{r4, pc}
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8007bf0:	e7fe      	b.n	8007bf0 <uxQueueMessagesWaiting+0x24>
	...

08007bf4 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2b07      	cmp	r3, #7
 8007bf8:	d80f      	bhi.n	8007c1a <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007bfa:	4a08      	ldr	r2, [pc, #32]	; (8007c1c <vQueueUnregisterQueue+0x28>)
 8007bfc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007c00:	6852      	ldr	r2, [r2, #4]
 8007c02:	4282      	cmp	r2, r0
 8007c04:	d001      	beq.n	8007c0a <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c06:	3301      	adds	r3, #1
 8007c08:	e7f5      	b.n	8007bf6 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007c0a:	4a04      	ldr	r2, [pc, #16]	; (8007c1c <vQueueUnregisterQueue+0x28>)
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007c12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c16:	6059      	str	r1, [r3, #4]
				break;
 8007c18:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007c1a:	4770      	bx	lr
 8007c1c:	200000dc 	.word	0x200000dc

08007c20 <vQueueDelete>:
	configASSERT( pxQueue );
 8007c20:	b138      	cbz	r0, 8007c32 <vQueueDelete+0x12>
{
 8007c22:	b510      	push	{r4, lr}
 8007c24:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8007c26:	f7ff ffe5 	bl	8007bf4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007c2a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007c2e:	b14b      	cbz	r3, 8007c44 <vQueueDelete+0x24>
}
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007c42:	e7fe      	b.n	8007c42 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8007c44:	4620      	mov	r0, r4
 8007c46:	f001 f98d 	bl	8008f64 <vPortFree>
}
 8007c4a:	e7f1      	b.n	8007c30 <vQueueDelete+0x10>

08007c4c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c4c:	4b07      	ldr	r3, [pc, #28]	; (8007c6c <prvResetNextTaskUnblockTime+0x20>)
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	b923      	cbnz	r3, 8007c5e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c54:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <prvResetNextTaskUnblockTime+0x20>)
 8007c56:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c5c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c5e:	4b03      	ldr	r3, [pc, #12]	; (8007c6c <prvResetNextTaskUnblockTime+0x20>)
 8007c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c62:	68d2      	ldr	r2, [r2, #12]
 8007c64:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c66:	6852      	ldr	r2, [r2, #4]
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8007c6a:	4770      	bx	lr
 8007c6c:	2000011c 	.word	0x2000011c

08007c70 <prvInitialiseNewTask>:
{
 8007c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c74:	4607      	mov	r7, r0
 8007c76:	4698      	mov	r8, r3
 8007c78:	9d08      	ldr	r5, [sp, #32]
 8007c7a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007c7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c80:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8007c82:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007c86:	3a01      	subs	r2, #1
 8007c88:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c8c:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8007c90:	2900      	cmp	r1, #0
 8007c92:	d048      	beq.n	8007d26 <prvInitialiseNewTask+0xb6>
 8007c94:	468e      	mov	lr, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c96:	f04f 0c00 	mov.w	ip, #0
 8007c9a:	f1bc 0f0f 	cmp.w	ip, #15
 8007c9e:	d80b      	bhi.n	8007cb8 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ca0:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8007ca4:	eb04 030c 	add.w	r3, r4, ip
 8007ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8007cac:	f81e 300c 	ldrb.w	r3, [lr, ip]
 8007cb0:	b113      	cbz	r3, 8007cb8 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cb2:	f10c 0c01 	add.w	ip, ip, #1
 8007cb6:	e7f0      	b.n	8007c9a <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cbe:	2d06      	cmp	r5, #6
 8007cc0:	d900      	bls.n	8007cc4 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cc2:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8007cc4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007cc6:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007cc8:	f04f 0a00 	mov.w	sl, #0
 8007ccc:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cd0:	1d20      	adds	r0, r4, #4
 8007cd2:	f7ff fa81 	bl	80071d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cd6:	f104 0018 	add.w	r0, r4, #24
 8007cda:	f7ff fa7d 	bl	80071d8 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cde:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce0:	f1c5 0507 	rsb	r5, r5, #7
 8007ce4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ce6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007ce8:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8007cec:	f8c4 a0b0 	str.w	sl, [r4, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cf0:	f884 a0b4 	strb.w	sl, [r4, #180]	; 0xb4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cf4:	2260      	movs	r2, #96	; 0x60
 8007cf6:	4651      	mov	r1, sl
 8007cf8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cfc:	f002 fe5a 	bl	800a9b4 <memset>
 8007d00:	4b0b      	ldr	r3, [pc, #44]	; (8007d30 <prvInitialiseNewTask+0xc0>)
 8007d02:	6563      	str	r3, [r4, #84]	; 0x54
 8007d04:	4b0b      	ldr	r3, [pc, #44]	; (8007d34 <prvInitialiseNewTask+0xc4>)
 8007d06:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d08:	4b0b      	ldr	r3, [pc, #44]	; (8007d38 <prvInitialiseNewTask+0xc8>)
 8007d0a:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d0c:	4642      	mov	r2, r8
 8007d0e:	4639      	mov	r1, r7
 8007d10:	4630      	mov	r0, r6
 8007d12:	f000 fee5 	bl	8008ae0 <pxPortInitialiseStack>
 8007d16:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007d18:	f1b9 0f00 	cmp.w	r9, #0
 8007d1c:	d001      	beq.n	8007d22 <prvInitialiseNewTask+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d1e:	f8c9 4000 	str.w	r4, [r9]
}
 8007d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d26:	2300      	movs	r3, #0
 8007d28:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8007d2c:	e7c7      	b.n	8007cbe <prvInitialiseNewTask+0x4e>
 8007d2e:	bf00      	nop
 8007d30:	0800b984 	.word	0x0800b984
 8007d34:	0800b9a4 	.word	0x0800b9a4
 8007d38:	0800b964 	.word	0x0800b964

08007d3c <prvInitialiseTaskLists>:
{
 8007d3c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d3e:	2400      	movs	r4, #0
 8007d40:	e007      	b.n	8007d52 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d42:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007d46:	0093      	lsls	r3, r2, #2
 8007d48:	4810      	ldr	r0, [pc, #64]	; (8007d8c <prvInitialiseTaskLists+0x50>)
 8007d4a:	4418      	add	r0, r3
 8007d4c:	f7ff fa39 	bl	80071c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d50:	3401      	adds	r4, #1
 8007d52:	2c06      	cmp	r4, #6
 8007d54:	d9f5      	bls.n	8007d42 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8007d56:	4c0e      	ldr	r4, [pc, #56]	; (8007d90 <prvInitialiseTaskLists+0x54>)
 8007d58:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff fa30 	bl	80071c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d62:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 8007d66:	4628      	mov	r0, r5
 8007d68:	f7ff fa2b 	bl	80071c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d6c:	f104 0014 	add.w	r0, r4, #20
 8007d70:	f7ff fa27 	bl	80071c2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007d74:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8007d78:	f7ff fa23 	bl	80071c2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f7ff fa20 	bl	80071c2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d82:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d84:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	bf00      	nop
 8007d8c:	2000014c 	.word	0x2000014c
 8007d90:	2000011c 	.word	0x2000011c

08007d94 <prvAddNewTaskToReadyList>:
{
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007d98:	f000 fecc 	bl	8008b34 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007d9c:	4b27      	ldr	r3, [pc, #156]	; (8007e3c <prvAddNewTaskToReadyList+0xa8>)
 8007d9e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8007da2:	3201      	adds	r2, #1
 8007da4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 8007da8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007dac:	b173      	cbz	r3, 8007dcc <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8007dae:	4b23      	ldr	r3, [pc, #140]	; (8007e3c <prvAddNewTaskToReadyList+0xa8>)
 8007db0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8007db4:	b98b      	cbnz	r3, 8007dda <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007db6:	4b21      	ldr	r3, [pc, #132]	; (8007e3c <prvAddNewTaskToReadyList+0xa8>)
 8007db8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d80a      	bhi.n	8007dda <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8007dc4:	4b1d      	ldr	r3, [pc, #116]	; (8007e3c <prvAddNewTaskToReadyList+0xa8>)
 8007dc6:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 8007dca:	e006      	b.n	8007dda <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8007dcc:	4b1b      	ldr	r3, [pc, #108]	; (8007e3c <prvAddNewTaskToReadyList+0xa8>)
 8007dce:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dd2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d02c      	beq.n	8007e34 <prvAddNewTaskToReadyList+0xa0>
		uxTaskNumber++;
 8007dda:	4c18      	ldr	r4, [pc, #96]	; (8007e3c <prvAddNewTaskToReadyList+0xa8>)
 8007ddc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007de0:	3301      	adds	r3, #1
 8007de2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 8007de6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007de8:	2201      	movs	r2, #1
 8007dea:	409a      	lsls	r2, r3
 8007dec:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8007df0:	430a      	orrs	r2, r1
 8007df2:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 8007df6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007dfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007dfe:	1d29      	adds	r1, r5, #4
 8007e00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007e04:	f7ff f9eb 	bl	80071de <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007e08:	f000 feb6 	bl	8008b78 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007e0c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8007e10:	b17b      	cbz	r3, 8007e32 <prvAddNewTaskToReadyList+0x9e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e12:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e18:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d209      	bcs.n	8007e32 <prvAddNewTaskToReadyList+0x9e>
			taskYIELD_IF_USING_PREEMPTION();
 8007e1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e26:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	f3bf 8f6f 	isb	sy
}
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8007e34:	f7ff ff82 	bl	8007d3c <prvInitialiseTaskLists>
 8007e38:	e7cf      	b.n	8007dda <prvAddNewTaskToReadyList+0x46>
 8007e3a:	bf00      	nop
 8007e3c:	2000011c 	.word	0x2000011c

08007e40 <prvDeleteTCB>:
	{
 8007e40:	b510      	push	{r4, lr}
 8007e42:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e44:	3050      	adds	r0, #80	; 0x50
 8007e46:	f002 fe5f 	bl	800ab08 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e4a:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8007e4e:	b163      	cbz	r3, 8007e6a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d011      	beq.n	8007e78 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d00e      	beq.n	8007e76 <prvDeleteTCB+0x36>
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	e7fe      	b.n	8007e68 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8007e6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007e6c:	f001 f87a 	bl	8008f64 <vPortFree>
				vPortFree( pxTCB );
 8007e70:	4620      	mov	r0, r4
 8007e72:	f001 f877 	bl	8008f64 <vPortFree>
	}
 8007e76:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f001 f873 	bl	8008f64 <vPortFree>
 8007e7e:	e7fa      	b.n	8007e76 <prvDeleteTCB+0x36>

08007e80 <prvCheckTasksWaitingTermination>:
{
 8007e80:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e82:	e017      	b.n	8007eb4 <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8007e84:	f000 fe56 	bl	8008b34 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e88:	4c0d      	ldr	r4, [pc, #52]	; (8007ec0 <prvCheckTasksWaitingTermination+0x40>)
 8007e8a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8007e8e:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e90:	1d28      	adds	r0, r5, #4
 8007e92:	f7ff f9c8 	bl	8007226 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e96:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				--uxDeletedTasksWaitingCleanUp;
 8007ea0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
			taskEXIT_CRITICAL();
 8007eaa:	f000 fe65 	bl	8008b78 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f7ff ffc6 	bl	8007e40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eb4:	4b02      	ldr	r3, [pc, #8]	; (8007ec0 <prvCheckTasksWaitingTermination+0x40>)
 8007eb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e2      	bne.n	8007e84 <prvCheckTasksWaitingTermination+0x4>
}
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	2000011c 	.word	0x2000011c

08007ec4 <prvIdleTask>:
{
 8007ec4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8007ec6:	f7ff ffdb 	bl	8007e80 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007eca:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <prvIdleTask+0x24>)
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d9f9      	bls.n	8007ec6 <prvIdleTask+0x2>
				taskYIELD();
 8007ed2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eda:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	e7ee      	b.n	8007ec6 <prvIdleTask+0x2>
 8007ee8:	2000011c 	.word	0x2000011c

08007eec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4604      	mov	r4, r0
 8007ef0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ef2:	4b1f      	ldr	r3, [pc, #124]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x84>)
 8007ef4:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ef8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8007efc:	3004      	adds	r0, #4
 8007efe:	f7ff f992 	bl	8007226 <uxListRemove>
 8007f02:	b960      	cbnz	r0, 8007f1e <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f04:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x84>)
 8007f06:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8007f0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	fa02 f101 	lsl.w	r1, r2, r1
 8007f12:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007f16:	ea22 0201 	bic.w	r2, r2, r1
 8007f1a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f1e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007f22:	d00f      	beq.n	8007f44 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f24:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f26:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x84>)
 8007f28:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007f2c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007f2e:	42a6      	cmp	r6, r4
 8007f30:	d911      	bls.n	8007f56 <prvAddCurrentTaskToDelayedList+0x6a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f32:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x84>)
 8007f34:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8007f38:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8007f3c:	3104      	adds	r1, #4
 8007f3e:	f7ff f959 	bl	80071f4 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f44:	2d00      	cmp	r5, #0
 8007f46:	d0ed      	beq.n	8007f24 <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f48:	4809      	ldr	r0, [pc, #36]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x84>)
 8007f4a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f4e:	3104      	adds	r1, #4
 8007f50:	f7ff f945 	bl	80071de <vListInsertEnd>
 8007f54:	e7f5      	b.n	8007f42 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f56:	4d06      	ldr	r5, [pc, #24]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x84>)
 8007f58:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8007f5a:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8007f5e:	3104      	adds	r1, #4
 8007f60:	f7ff f948 	bl	80071f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007f66:	42a3      	cmp	r3, r4
 8007f68:	d9eb      	bls.n	8007f42 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8007f6a:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8007f6c:	e7e9      	b.n	8007f42 <prvAddCurrentTaskToDelayedList+0x56>
 8007f6e:	bf00      	nop
 8007f70:	2000011c 	.word	0x2000011c

08007f74 <xTaskCreateStatic>:
	{
 8007f74:	b530      	push	{r4, r5, lr}
 8007f76:	b087      	sub	sp, #28
 8007f78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007f7a:	b17c      	cbz	r4, 8007f9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f7e:	b1b5      	cbz	r5, 8007fae <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f80:	25b8      	movs	r5, #184	; 0xb8
 8007f82:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f84:	9d04      	ldr	r5, [sp, #16]
 8007f86:	2db8      	cmp	r5, #184	; 0xb8
 8007f88:	d01a      	beq.n	8007fc0 <xTaskCreateStatic+0x4c>
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	e7fe      	b.n	8007f9a <xTaskCreateStatic+0x26>
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007fac:	e7fe      	b.n	8007fac <xTaskCreateStatic+0x38>
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007fbe:	e7fe      	b.n	8007fbe <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fc0:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fc4:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fc6:	2402      	movs	r4, #2
 8007fc8:	f885 40b5 	strb.w	r4, [r5, #181]	; 0xb5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fcc:	2400      	movs	r4, #0
 8007fce:	9403      	str	r4, [sp, #12]
 8007fd0:	9502      	str	r5, [sp, #8]
 8007fd2:	ac05      	add	r4, sp, #20
 8007fd4:	9401      	str	r4, [sp, #4]
 8007fd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fd8:	9400      	str	r4, [sp, #0]
 8007fda:	f7ff fe49 	bl	8007c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fde:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007fe0:	f7ff fed8 	bl	8007d94 <prvAddNewTaskToReadyList>
	}
 8007fe4:	9805      	ldr	r0, [sp, #20]
 8007fe6:	b007      	add	sp, #28
 8007fe8:	bd30      	pop	{r4, r5, pc}

08007fea <xTaskCreate>:
	{
 8007fea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	4688      	mov	r8, r1
 8007ff4:	4614      	mov	r4, r2
 8007ff6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ff8:	0090      	lsls	r0, r2, #2
 8007ffa:	f000 ff41 	bl	8008e80 <pvPortMalloc>
			if( pxStack != NULL )
 8007ffe:	b300      	cbz	r0, 8008042 <xTaskCreate+0x58>
 8008000:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008002:	20b8      	movs	r0, #184	; 0xb8
 8008004:	f000 ff3c 	bl	8008e80 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008008:	4605      	mov	r5, r0
 800800a:	b1b0      	cbz	r0, 800803a <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800800c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8008010:	b1e5      	cbz	r5, 800804c <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008012:	2300      	movs	r3, #0
 8008014:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008018:	9303      	str	r3, [sp, #12]
 800801a:	9502      	str	r5, [sp, #8]
 800801c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	4633      	mov	r3, r6
 8008026:	4622      	mov	r2, r4
 8008028:	4641      	mov	r1, r8
 800802a:	4638      	mov	r0, r7
 800802c:	f7ff fe20 	bl	8007c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008030:	4628      	mov	r0, r5
 8008032:	f7ff feaf 	bl	8007d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008036:	2001      	movs	r0, #1
 8008038:	e005      	b.n	8008046 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800803a:	4648      	mov	r0, r9
 800803c:	f000 ff92 	bl	8008f64 <vPortFree>
 8008040:	e7e6      	b.n	8008010 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008042:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008046:	b005      	add	sp, #20
 8008048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008050:	e7f9      	b.n	8008046 <xTaskCreate+0x5c>
	...

08008054 <vTaskStartScheduler>:
{
 8008054:	b510      	push	{r4, lr}
 8008056:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008058:	2400      	movs	r4, #0
 800805a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800805c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800805e:	aa07      	add	r2, sp, #28
 8008060:	a906      	add	r1, sp, #24
 8008062:	a805      	add	r0, sp, #20
 8008064:	f001 fa4e 	bl	8009504 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008068:	9b05      	ldr	r3, [sp, #20]
 800806a:	9302      	str	r3, [sp, #8]
 800806c:	9b06      	ldr	r3, [sp, #24]
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	9400      	str	r4, [sp, #0]
 8008072:	4623      	mov	r3, r4
 8008074:	9a07      	ldr	r2, [sp, #28]
 8008076:	4912      	ldr	r1, [pc, #72]	; (80080c0 <vTaskStartScheduler+0x6c>)
 8008078:	4812      	ldr	r0, [pc, #72]	; (80080c4 <vTaskStartScheduler+0x70>)
 800807a:	f7ff ff7b 	bl	8007f74 <xTaskCreateStatic>
 800807e:	4b12      	ldr	r3, [pc, #72]	; (80080c8 <vTaskStartScheduler+0x74>)
 8008080:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
		if( xIdleTaskHandle != NULL )
 8008084:	b1c8      	cbz	r0, 80080ba <vTaskStartScheduler+0x66>
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008096:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <vTaskStartScheduler+0x74>)
 8008098:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800809c:	3250      	adds	r2, #80	; 0x50
 800809e:	490b      	ldr	r1, [pc, #44]	; (80080cc <vTaskStartScheduler+0x78>)
 80080a0:	600a      	str	r2, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80080a2:	f04f 32ff 	mov.w	r2, #4294967295
 80080a6:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 80080a8:	2201      	movs	r2, #1
 80080aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080ae:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80080b2:	f001 fa24 	bl	80094fe <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 80080b6:	f000 fdd7 	bl	8008c68 <xPortStartScheduler>
}
 80080ba:	b008      	add	sp, #32
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	bf00      	nop
 80080c0:	0800b89c 	.word	0x0800b89c
 80080c4:	08007ec5 	.word	0x08007ec5
 80080c8:	2000011c 	.word	0x2000011c
 80080cc:	20000020 	.word	0x20000020

080080d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80080d0:	4a03      	ldr	r2, [pc, #12]	; (80080e0 <vTaskSuspendAll+0x10>)
 80080d2:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 80080d6:	3301      	adds	r3, #1
 80080d8:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	2000011c 	.word	0x2000011c

080080e4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80080e4:	4b01      	ldr	r3, [pc, #4]	; (80080ec <xTaskGetTickCount+0x8>)
 80080e6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 80080ea:	4770      	bx	lr
 80080ec:	2000011c 	.word	0x2000011c

080080f0 <xTaskGetTickCountFromISR>:
{
 80080f0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080f2:	f000 fe43 	bl	8008d7c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80080f6:	4b02      	ldr	r3, [pc, #8]	; (8008100 <xTaskGetTickCountFromISR+0x10>)
 80080f8:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 80080fc:	bd08      	pop	{r3, pc}
 80080fe:	bf00      	nop
 8008100:	2000011c 	.word	0x2000011c

08008104 <xTaskIncrementTick>:
{
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008108:	4b43      	ldr	r3, [pc, #268]	; (8008218 <xTaskIncrementTick+0x114>)
 800810a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800810e:	2b00      	cmp	r3, #0
 8008110:	d176      	bne.n	8008200 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008112:	4b41      	ldr	r3, [pc, #260]	; (8008218 <xTaskIncrementTick+0x114>)
 8008114:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
 8008118:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800811a:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800811e:	b9ce      	cbnz	r6, 8008154 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 8008120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	b143      	cbz	r3, 8008138 <xTaskIncrementTick+0x34>
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	e7fe      	b.n	8008136 <xTaskIncrementTick+0x32>
 8008138:	4b37      	ldr	r3, [pc, #220]	; (8008218 <xTaskIncrementTick+0x114>)
 800813a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800813c:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8008140:	6299      	str	r1, [r3, #40]	; 0x28
 8008142:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8008146:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800814a:	3201      	adds	r2, #1
 800814c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8008150:	f7ff fd7c 	bl	8007c4c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008154:	4b30      	ldr	r3, [pc, #192]	; (8008218 <xTaskIncrementTick+0x114>)
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	42b3      	cmp	r3, r6
 800815a:	d946      	bls.n	80081ea <xTaskIncrementTick+0xe6>
BaseType_t xSwitchRequired = pdFALSE;
 800815c:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008160:	4a2d      	ldr	r2, [pc, #180]	; (8008218 <xTaskIncrementTick+0x114>)
 8008162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800816c:	0099      	lsls	r1, r3, #2
 800816e:	440a      	add	r2, r1
 8008170:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008172:	2b01      	cmp	r3, #1
 8008174:	d901      	bls.n	800817a <xTaskIncrementTick+0x76>
				xSwitchRequired = pdTRUE;
 8008176:	f04f 0801 	mov.w	r8, #1
			if( xYieldPending != pdFALSE )
 800817a:	4b27      	ldr	r3, [pc, #156]	; (8008218 <xTaskIncrementTick+0x114>)
 800817c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008180:	2b00      	cmp	r3, #0
 8008182:	d045      	beq.n	8008210 <xTaskIncrementTick+0x10c>
				xSwitchRequired = pdTRUE;
 8008184:	f04f 0801 	mov.w	r8, #1
	return xSwitchRequired;
 8008188:	e042      	b.n	8008210 <xTaskIncrementTick+0x10c>
							xSwitchRequired = pdTRUE;
 800818a:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800818e:	4b22      	ldr	r3, [pc, #136]	; (8008218 <xTaskIncrementTick+0x114>)
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	b363      	cbz	r3, 80081f0 <xTaskIncrementTick+0xec>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008196:	4b20      	ldr	r3, [pc, #128]	; (8008218 <xTaskIncrementTick+0x114>)
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800819e:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80081a0:	429e      	cmp	r6, r3
 80081a2:	d32a      	bcc.n	80081fa <xTaskIncrementTick+0xf6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081a4:	1d27      	adds	r7, r4, #4
 80081a6:	4638      	mov	r0, r7
 80081a8:	f7ff f83d 	bl	8007226 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081ae:	b11b      	cbz	r3, 80081b8 <xTaskIncrementTick+0xb4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081b0:	f104 0018 	add.w	r0, r4, #24
 80081b4:	f7ff f837 	bl	8007226 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081ba:	2201      	movs	r2, #1
 80081bc:	409a      	lsls	r2, r3
 80081be:	4d16      	ldr	r5, [pc, #88]	; (8008218 <xTaskIncrementTick+0x114>)
 80081c0:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 80081c4:	430a      	orrs	r2, r1
 80081c6:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 80081ca:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80081ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80081d2:	009a      	lsls	r2, r3, #2
 80081d4:	4639      	mov	r1, r7
 80081d6:	4410      	add	r0, r2
 80081d8:	f7ff f801 	bl	80071de <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80081de:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d2d0      	bcs.n	800818a <xTaskIncrementTick+0x86>
 80081e8:	e7d1      	b.n	800818e <xTaskIncrementTick+0x8a>
BaseType_t xSwitchRequired = pdFALSE;
 80081ea:	f04f 0800 	mov.w	r8, #0
 80081ee:	e7ce      	b.n	800818e <xTaskIncrementTick+0x8a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f0:	4b09      	ldr	r3, [pc, #36]	; (8008218 <xTaskIncrementTick+0x114>)
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 80081f8:	e7b2      	b.n	8008160 <xTaskIncrementTick+0x5c>
						xNextTaskUnblockTime = xItemValue;
 80081fa:	4a07      	ldr	r2, [pc, #28]	; (8008218 <xTaskIncrementTick+0x114>)
 80081fc:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081fe:	e7af      	b.n	8008160 <xTaskIncrementTick+0x5c>
		++xPendedTicks;
 8008200:	4a05      	ldr	r2, [pc, #20]	; (8008218 <xTaskIncrementTick+0x114>)
 8008202:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
 8008206:	3301      	adds	r3, #1
 8008208:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
BaseType_t xSwitchRequired = pdFALSE;
 800820c:	f04f 0800 	mov.w	r8, #0
}
 8008210:	4640      	mov	r0, r8
 8008212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008216:	bf00      	nop
 8008218:	2000011c 	.word	0x2000011c

0800821c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800821c:	4b3a      	ldr	r3, [pc, #232]	; (8008308 <xTaskResumeAll+0xec>)
 800821e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008222:	b943      	cbnz	r3, 8008236 <xTaskResumeAll+0x1a>
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	e7fe      	b.n	8008234 <xTaskResumeAll+0x18>
{
 8008236:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8008238:	f000 fc7c 	bl	8008b34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800823c:	4b32      	ldr	r3, [pc, #200]	; (8008308 <xTaskResumeAll+0xec>)
 800823e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8008242:	3a01      	subs	r2, #1
 8008244:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008248:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800824c:	2b00      	cmp	r3, #0
 800824e:	d156      	bne.n	80082fe <xTaskResumeAll+0xe2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008250:	4b2d      	ldr	r3, [pc, #180]	; (8008308 <xTaskResumeAll+0xec>)
 8008252:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008256:	b90b      	cbnz	r3, 800825c <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8008258:	2400      	movs	r4, #0
 800825a:	e051      	b.n	8008300 <xTaskResumeAll+0xe4>
TCB_t *pxTCB = NULL;
 800825c:	2500      	movs	r5, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800825e:	4b2a      	ldr	r3, [pc, #168]	; (8008308 <xTaskResumeAll+0xec>)
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	b32b      	cbz	r3, 80082b0 <xTaskResumeAll+0x94>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008264:	4c28      	ldr	r4, [pc, #160]	; (8008308 <xTaskResumeAll+0xec>)
 8008266:	6a23      	ldr	r3, [r4, #32]
 8008268:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800826a:	f105 0018 	add.w	r0, r5, #24
 800826e:	f7fe ffda 	bl	8007226 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008272:	1d2e      	adds	r6, r5, #4
 8008274:	4630      	mov	r0, r6
 8008276:	f7fe ffd6 	bl	8007226 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800827a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800827c:	2201      	movs	r2, #1
 800827e:	409a      	lsls	r2, r3
 8008280:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8008284:	430a      	orrs	r2, r1
 8008286:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 800828a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800828e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008292:	4631      	mov	r1, r6
 8008294:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008298:	f7fe ffa1 	bl	80071de <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800829c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800829e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80082a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d3da      	bcc.n	800825e <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 80082a8:	2201      	movs	r2, #1
 80082aa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80082ae:	e7d6      	b.n	800825e <xTaskResumeAll+0x42>
				if( pxTCB != NULL )
 80082b0:	b10d      	cbz	r5, 80082b6 <xTaskResumeAll+0x9a>
					prvResetNextTaskUnblockTime();
 80082b2:	f7ff fccb 	bl	8007c4c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <xTaskResumeAll+0xec>)
 80082b8:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
					if( xPendedCounts > ( TickType_t ) 0U )
 80082bc:	b98c      	cbnz	r4, 80082e2 <xTaskResumeAll+0xc6>
				if( xYieldPending != pdFALSE )
 80082be:	4b12      	ldr	r3, [pc, #72]	; (8008308 <xTaskResumeAll+0xec>)
 80082c0:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 80082c4:	b1e4      	cbz	r4, 8008300 <xTaskResumeAll+0xe4>
					taskYIELD_IF_USING_PREEMPTION();
 80082c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80082da:	2401      	movs	r4, #1
 80082dc:	e010      	b.n	8008300 <xTaskResumeAll+0xe4>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082de:	3c01      	subs	r4, #1
 80082e0:	d008      	beq.n	80082f4 <xTaskResumeAll+0xd8>
							if( xTaskIncrementTick() != pdFALSE )
 80082e2:	f7ff ff0f 	bl	8008104 <xTaskIncrementTick>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d0f9      	beq.n	80082de <xTaskResumeAll+0xc2>
								xYieldPending = pdTRUE;
 80082ea:	4b07      	ldr	r3, [pc, #28]	; (8008308 <xTaskResumeAll+0xec>)
 80082ec:	2201      	movs	r2, #1
 80082ee:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80082f2:	e7f4      	b.n	80082de <xTaskResumeAll+0xc2>
						xPendedTicks = 0;
 80082f4:	4b04      	ldr	r3, [pc, #16]	; (8008308 <xTaskResumeAll+0xec>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80082fc:	e7df      	b.n	80082be <xTaskResumeAll+0xa2>
BaseType_t xAlreadyYielded = pdFALSE;
 80082fe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008300:	f000 fc3a 	bl	8008b78 <vPortExitCritical>
}
 8008304:	4620      	mov	r0, r4
 8008306:	bd70      	pop	{r4, r5, r6, pc}
 8008308:	2000011c 	.word	0x2000011c

0800830c <vTaskDelay>:
	{
 800830c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800830e:	b1b0      	cbz	r0, 800833e <vTaskDelay+0x32>
 8008310:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8008312:	4b10      	ldr	r3, [pc, #64]	; (8008354 <vTaskDelay+0x48>)
 8008314:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008318:	b143      	cbz	r3, 800832c <vTaskDelay+0x20>
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	e7fe      	b.n	800832a <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800832c:	f7ff fed0 	bl	80080d0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008330:	2100      	movs	r1, #0
 8008332:	4620      	mov	r0, r4
 8008334:	f7ff fdda 	bl	8007eec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008338:	f7ff ff70 	bl	800821c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800833c:	b948      	cbnz	r0, 8008352 <vTaskDelay+0x46>
			portYIELD_WITHIN_API();
 800833e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008346:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	f3bf 8f6f 	isb	sy
	}
 8008352:	bd10      	pop	{r4, pc}
 8008354:	2000011c 	.word	0x2000011c

08008358 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008358:	4b2d      	ldr	r3, [pc, #180]	; (8008410 <vTaskSwitchContext+0xb8>)
 800835a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800835e:	b123      	cbz	r3, 800836a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8008360:	4b2b      	ldr	r3, [pc, #172]	; (8008410 <vTaskSwitchContext+0xb8>)
 8008362:	2201      	movs	r2, #1
 8008364:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8008368:	4770      	bx	lr
{
 800836a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800836c:	4c28      	ldr	r4, [pc, #160]	; (8008410 <vTaskSwitchContext+0xb8>)
 800836e:	2300      	movs	r3, #0
 8008370:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008374:	f001 f8c4 	bl	8009500 <getRunTimeCounterValue>
 8008378:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800837c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8008380:	4298      	cmp	r0, r3
 8008382:	d905      	bls.n	8008390 <vTaskSwitchContext+0x38>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008384:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008388:	1ac3      	subs	r3, r0, r3
 800838a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800838c:	4413      	add	r3, r2
 800838e:	64cb      	str	r3, [r1, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 8008390:	4a1f      	ldr	r2, [pc, #124]	; (8008410 <vTaskSwitchContext+0xb8>)
 8008392:	f8c2 0130 	str.w	r0, [r2, #304]	; 0x130
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008396:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800839a:	fab3 f383 	clz	r3, r3
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	f1c3 031f 	rsb	r3, r3, #31
 80083a4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80083a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80083ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80083ae:	b942      	cbnz	r2, 80083c2 <vTaskSwitchContext+0x6a>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	e7fe      	b.n	80083c0 <vTaskSwitchContext+0x68>
 80083c2:	4a13      	ldr	r2, [pc, #76]	; (8008410 <vTaskSwitchContext+0xb8>)
 80083c4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80083c8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80083cc:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80083ce:	6840      	ldr	r0, [r0, #4]
 80083d0:	6348      	str	r0, [r1, #52]	; 0x34
 80083d2:	3230      	adds	r2, #48	; 0x30
 80083d4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80083d8:	0089      	lsls	r1, r1, #2
 80083da:	3108      	adds	r1, #8
 80083dc:	440a      	add	r2, r1
 80083de:	4290      	cmp	r0, r2
 80083e0:	d00e      	beq.n	8008400 <vTaskSwitchContext+0xa8>
 80083e2:	4a0b      	ldr	r2, [pc, #44]	; (8008410 <vTaskSwitchContext+0xb8>)
 80083e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80083e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083f4:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 80083f8:	3350      	adds	r3, #80	; 0x50
 80083fa:	4a06      	ldr	r2, [pc, #24]	; (8008414 <vTaskSwitchContext+0xbc>)
 80083fc:	6013      	str	r3, [r2, #0]
}
 80083fe:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008400:	6840      	ldr	r0, [r0, #4]
 8008402:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008406:	4a02      	ldr	r2, [pc, #8]	; (8008410 <vTaskSwitchContext+0xb8>)
 8008408:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800840c:	6350      	str	r0, [r2, #52]	; 0x34
 800840e:	e7e8      	b.n	80083e2 <vTaskSwitchContext+0x8a>
 8008410:	2000011c 	.word	0x2000011c
 8008414:	20000020 	.word	0x20000020

08008418 <vTaskSuspend>:
	{
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800841c:	f000 fb8a 	bl	8008b34 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008420:	b384      	cbz	r4, 8008484 <vTaskSuspend+0x6c>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008422:	1d25      	adds	r5, r4, #4
 8008424:	4628      	mov	r0, r5
 8008426:	f7fe fefe 	bl	8007226 <uxListRemove>
 800842a:	b980      	cbnz	r0, 800844e <vTaskSuspend+0x36>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800842c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800842e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008432:	4b31      	ldr	r3, [pc, #196]	; (80084f8 <vTaskSuspend+0xe0>)
 8008434:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843a:	b943      	cbnz	r3, 800844e <vTaskSuspend+0x36>
 800843c:	2301      	movs	r3, #1
 800843e:	4093      	lsls	r3, r2
 8008440:	492d      	ldr	r1, [pc, #180]	; (80084f8 <vTaskSuspend+0xe0>)
 8008442:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 8008446:	ea22 0203 	bic.w	r2, r2, r3
 800844a:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800844e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008450:	b11b      	cbz	r3, 800845a <vTaskSuspend+0x42>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008452:	f104 0018 	add.w	r0, r4, #24
 8008456:	f7fe fee6 	bl	8007226 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800845a:	4629      	mov	r1, r5
 800845c:	4826      	ldr	r0, [pc, #152]	; (80084f8 <vTaskSuspend+0xe0>)
 800845e:	f7fe febe 	bl	80071de <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008462:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b01      	cmp	r3, #1
 800846a:	d00f      	beq.n	800848c <vTaskSuspend+0x74>
		taskEXIT_CRITICAL();
 800846c:	f000 fb84 	bl	8008b78 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8008470:	4b21      	ldr	r3, [pc, #132]	; (80084f8 <vTaskSuspend+0xe0>)
 8008472:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008476:	b96b      	cbnz	r3, 8008494 <vTaskSuspend+0x7c>
		if( pxTCB == pxCurrentTCB )
 8008478:	4b1f      	ldr	r3, [pc, #124]	; (80084f8 <vTaskSuspend+0xe0>)
 800847a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800847e:	42a3      	cmp	r3, r4
 8008480:	d00f      	beq.n	80084a2 <vTaskSuspend+0x8a>
	}
 8008482:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008484:	4b1c      	ldr	r3, [pc, #112]	; (80084f8 <vTaskSuspend+0xe0>)
 8008486:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 800848a:	e7ca      	b.n	8008422 <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800848c:	2300      	movs	r3, #0
 800848e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8008492:	e7eb      	b.n	800846c <vTaskSuspend+0x54>
			taskENTER_CRITICAL();
 8008494:	f000 fb4e 	bl	8008b34 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8008498:	f7ff fbd8 	bl	8007c4c <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 800849c:	f000 fb6c 	bl	8008b78 <vPortExitCritical>
 80084a0:	e7ea      	b.n	8008478 <vTaskSuspend+0x60>
			if( xSchedulerRunning != pdFALSE )
 80084a2:	4b15      	ldr	r3, [pc, #84]	; (80084f8 <vTaskSuspend+0xe0>)
 80084a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80084a8:	b1bb      	cbz	r3, 80084da <vTaskSuspend+0xc2>
				configASSERT( uxSchedulerSuspended == 0 );
 80084aa:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <vTaskSuspend+0xe0>)
 80084ac:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80084b0:	b143      	cbz	r3, 80084c4 <vTaskSuspend+0xac>
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	e7fe      	b.n	80084c2 <vTaskSuspend+0xaa>
				portYIELD_WITHIN_API();
 80084c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	e7d3      	b.n	8008482 <vTaskSuspend+0x6a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80084da:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <vTaskSuspend+0xe0>)
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d104      	bne.n	80084f0 <vTaskSuspend+0xd8>
					pxCurrentTCB = NULL;
 80084e6:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <vTaskSuspend+0xe0>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80084ee:	e7c8      	b.n	8008482 <vTaskSuspend+0x6a>
					vTaskSwitchContext();
 80084f0:	f7ff ff32 	bl	8008358 <vTaskSwitchContext>
	}
 80084f4:	e7c5      	b.n	8008482 <vTaskSuspend+0x6a>
 80084f6:	bf00      	nop
 80084f8:	2000011c 	.word	0x2000011c

080084fc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80084fc:	b160      	cbz	r0, 8008518 <vTaskPlaceOnEventList+0x1c>
{
 80084fe:	b510      	push	{r4, lr}
 8008500:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008502:	4a0a      	ldr	r2, [pc, #40]	; (800852c <vTaskPlaceOnEventList+0x30>)
 8008504:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8008508:	3118      	adds	r1, #24
 800850a:	f7fe fe73 	bl	80071f4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800850e:	2101      	movs	r1, #1
 8008510:	4620      	mov	r0, r4
 8008512:	f7ff fceb 	bl	8007eec <prvAddCurrentTaskToDelayedList>
}
 8008516:	bd10      	pop	{r4, pc}
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8008528:	e7fe      	b.n	8008528 <vTaskPlaceOnEventList+0x2c>
 800852a:	bf00      	nop
 800852c:	2000011c 	.word	0x2000011c

08008530 <xTaskRemoveFromEventList>:
{
 8008530:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008532:	68c3      	ldr	r3, [r0, #12]
 8008534:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008536:	b34c      	cbz	r4, 800858c <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008538:	f104 0518 	add.w	r5, r4, #24
 800853c:	4628      	mov	r0, r5
 800853e:	f7fe fe72 	bl	8007226 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008542:	4b1a      	ldr	r3, [pc, #104]	; (80085ac <xTaskRemoveFromEventList+0x7c>)
 8008544:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008548:	bb4b      	cbnz	r3, 800859e <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800854a:	1d25      	adds	r5, r4, #4
 800854c:	4628      	mov	r0, r5
 800854e:	f7fe fe6a 	bl	8007226 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008552:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008554:	2201      	movs	r2, #1
 8008556:	4082      	lsls	r2, r0
 8008558:	4b14      	ldr	r3, [pc, #80]	; (80085ac <xTaskRemoveFromEventList+0x7c>)
 800855a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800855e:	430a      	orrs	r2, r1
 8008560:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8008564:	3330      	adds	r3, #48	; 0x30
 8008566:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800856a:	4629      	mov	r1, r5
 800856c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008570:	f7fe fe35 	bl	80071de <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008574:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008576:	4b0d      	ldr	r3, [pc, #52]	; (80085ac <xTaskRemoveFromEventList+0x7c>)
 8008578:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800857c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857e:	429a      	cmp	r2, r3
 8008580:	d912      	bls.n	80085a8 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 8008582:	2001      	movs	r0, #1
 8008584:	4b09      	ldr	r3, [pc, #36]	; (80085ac <xTaskRemoveFromEventList+0x7c>)
 8008586:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
}
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800859c:	e7fe      	b.n	800859c <xTaskRemoveFromEventList+0x6c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800859e:	4629      	mov	r1, r5
 80085a0:	4803      	ldr	r0, [pc, #12]	; (80085b0 <xTaskRemoveFromEventList+0x80>)
 80085a2:	f7fe fe1c 	bl	80071de <vListInsertEnd>
 80085a6:	e7e5      	b.n	8008574 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 80085a8:	2000      	movs	r0, #0
	return xReturn;
 80085aa:	e7ee      	b.n	800858a <xTaskRemoveFromEventList+0x5a>
 80085ac:	2000011c 	.word	0x2000011c
 80085b0:	20000130 	.word	0x20000130

080085b4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085b4:	4b03      	ldr	r3, [pc, #12]	; (80085c4 <vTaskInternalSetTimeOutState+0x10>)
 80085b6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80085ba:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80085c0:	6043      	str	r3, [r0, #4]
}
 80085c2:	4770      	bx	lr
 80085c4:	2000011c 	.word	0x2000011c

080085c8 <xTaskCheckForTimeOut>:
{
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80085ca:	b1d8      	cbz	r0, 8008604 <xTaskCheckForTimeOut+0x3c>
 80085cc:	460c      	mov	r4, r1
 80085ce:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80085d0:	b309      	cbz	r1, 8008616 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 80085d2:	f000 faaf 	bl	8008b34 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80085d6:	4b1c      	ldr	r3, [pc, #112]	; (8008648 <xTaskCheckForTimeOut+0x80>)
 80085d8:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085dc:	686b      	ldr	r3, [r5, #4]
 80085de:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80085e6:	d027      	beq.n	8008638 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085e8:	4e17      	ldr	r6, [pc, #92]	; (8008648 <xTaskCheckForTimeOut+0x80>)
 80085ea:	f8d6 6120 	ldr.w	r6, [r6, #288]	; 0x120
 80085ee:	682f      	ldr	r7, [r5, #0]
 80085f0:	42b7      	cmp	r7, r6
 80085f2:	d001      	beq.n	80085f8 <xTaskCheckForTimeOut+0x30>
 80085f4:	428b      	cmp	r3, r1
 80085f6:	d924      	bls.n	8008642 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085f8:	4282      	cmp	r2, r0
 80085fa:	d815      	bhi.n	8008628 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008600:	2401      	movs	r4, #1
 8008602:	e01a      	b.n	800863a <xTaskCheckForTimeOut+0x72>
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8008614:	e7fe      	b.n	8008614 <xTaskCheckForTimeOut+0x4c>
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8008626:	e7fe      	b.n	8008626 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 8008628:	1a5b      	subs	r3, r3, r1
 800862a:	4413      	add	r3, r2
 800862c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800862e:	4628      	mov	r0, r5
 8008630:	f7ff ffc0 	bl	80085b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008634:	2400      	movs	r4, #0
 8008636:	e000      	b.n	800863a <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8008638:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800863a:	f000 fa9d 	bl	8008b78 <vPortExitCritical>
}
 800863e:	4620      	mov	r0, r4
 8008640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8008642:	2401      	movs	r4, #1
 8008644:	e7f9      	b.n	800863a <xTaskCheckForTimeOut+0x72>
 8008646:	bf00      	nop
 8008648:	2000011c 	.word	0x2000011c

0800864c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <vTaskMissedYield+0xc>)
 800864e:	2201      	movs	r2, #1
 8008650:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	2000011c 	.word	0x2000011c

0800865c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800865c:	4b06      	ldr	r3, [pc, #24]	; (8008678 <xTaskGetSchedulerState+0x1c>)
 800865e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008662:	b13b      	cbz	r3, 8008674 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008664:	4b04      	ldr	r3, [pc, #16]	; (8008678 <xTaskGetSchedulerState+0x1c>)
 8008666:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800866a:	b10b      	cbz	r3, 8008670 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 800866c:	2000      	movs	r0, #0
	}
 800866e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8008670:	2002      	movs	r0, #2
 8008672:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008674:	2001      	movs	r0, #1
 8008676:	4770      	bx	lr
 8008678:	2000011c 	.word	0x2000011c

0800867c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800867c:	2800      	cmp	r0, #0
 800867e:	d051      	beq.n	8008724 <xTaskPriorityInherit+0xa8>
	{
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008684:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008686:	4a29      	ldr	r2, [pc, #164]	; (800872c <xTaskPriorityInherit+0xb0>)
 8008688:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 800868c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800868e:	4293      	cmp	r3, r2
 8008690:	d23f      	bcs.n	8008712 <xTaskPriorityInherit+0x96>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008692:	6982      	ldr	r2, [r0, #24]
 8008694:	2a00      	cmp	r2, #0
 8008696:	db06      	blt.n	80086a6 <xTaskPriorityInherit+0x2a>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008698:	4a24      	ldr	r2, [pc, #144]	; (800872c <xTaskPriorityInherit+0xb0>)
 800869a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 800869e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086a0:	f1c2 0207 	rsb	r2, r2, #7
 80086a4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80086a6:	6961      	ldr	r1, [r4, #20]
 80086a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80086ac:	4a20      	ldr	r2, [pc, #128]	; (8008730 <xTaskPriorityInherit+0xb4>)
 80086ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086b2:	4299      	cmp	r1, r3
 80086b4:	d006      	beq.n	80086c4 <xTaskPriorityInherit+0x48>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086b6:	4b1d      	ldr	r3, [pc, #116]	; (800872c <xTaskPriorityInherit+0xb0>)
 80086b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80086c0:	2001      	movs	r0, #1
	}
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086c4:	1d25      	adds	r5, r4, #4
 80086c6:	4628      	mov	r0, r5
 80086c8:	f7fe fdad 	bl	8007226 <uxListRemove>
 80086cc:	b950      	cbnz	r0, 80086e4 <xTaskPriorityInherit+0x68>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80086ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80086d0:	2301      	movs	r3, #1
 80086d2:	fa03 f202 	lsl.w	r2, r3, r2
 80086d6:	4915      	ldr	r1, [pc, #84]	; (800872c <xTaskPriorityInherit+0xb0>)
 80086d8:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 80086dc:	ea23 0302 	bic.w	r3, r3, r2
 80086e0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086e4:	4811      	ldr	r0, [pc, #68]	; (800872c <xTaskPriorityInherit+0xb0>)
 80086e6:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086ee:	2401      	movs	r4, #1
 80086f0:	fa04 f203 	lsl.w	r2, r4, r3
 80086f4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80086f8:	430a      	orrs	r2, r1
 80086fa:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 80086fe:	3030      	adds	r0, #48	; 0x30
 8008700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008704:	4629      	mov	r1, r5
 8008706:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800870a:	f7fe fd68 	bl	80071de <vListInsertEnd>
				xReturn = pdTRUE;
 800870e:	4620      	mov	r0, r4
 8008710:	e7d7      	b.n	80086c2 <xTaskPriorityInherit+0x46>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008712:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008714:	4b05      	ldr	r3, [pc, #20]	; (800872c <xTaskPriorityInherit+0xb0>)
 8008716:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	429a      	cmp	r2, r3
 800871e:	d303      	bcc.n	8008728 <xTaskPriorityInherit+0xac>
	BaseType_t xReturn = pdFALSE;
 8008720:	2000      	movs	r0, #0
 8008722:	e7ce      	b.n	80086c2 <xTaskPriorityInherit+0x46>
 8008724:	2000      	movs	r0, #0
	}
 8008726:	4770      	bx	lr
					xReturn = pdTRUE;
 8008728:	2001      	movs	r0, #1
		return xReturn;
 800872a:	e7ca      	b.n	80086c2 <xTaskPriorityInherit+0x46>
 800872c:	2000011c 	.word	0x2000011c
 8008730:	2000014c 	.word	0x2000014c

08008734 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008734:	2800      	cmp	r0, #0
 8008736:	d052      	beq.n	80087de <xTaskPriorityDisinherit+0xaa>
	{
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800873c:	4b2a      	ldr	r3, [pc, #168]	; (80087e8 <xTaskPriorityDisinherit+0xb4>)
 800873e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008742:	4283      	cmp	r3, r0
 8008744:	d008      	beq.n	8008758 <xTaskPriorityDisinherit+0x24>
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	e7fe      	b.n	8008756 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8008758:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800875a:	b943      	cbnz	r3, 800876e <xTaskPriorityDisinherit+0x3a>
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	e7fe      	b.n	800876c <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;
 800876e:	3b01      	subs	r3, #1
 8008770:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008772:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008774:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008776:	4291      	cmp	r1, r2
 8008778:	d033      	beq.n	80087e2 <xTaskPriorityDisinherit+0xae>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800877a:	b10b      	cbz	r3, 8008780 <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 800877c:	2000      	movs	r0, #0
	}
 800877e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008780:	1d05      	adds	r5, r0, #4
 8008782:	4628      	mov	r0, r5
 8008784:	f7fe fd4f 	bl	8007226 <uxListRemove>
 8008788:	b988      	cbnz	r0, 80087ae <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800878a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800878c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8008790:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <xTaskPriorityDisinherit+0xb4>)
 8008792:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	b94b      	cbnz	r3, 80087ae <xTaskPriorityDisinherit+0x7a>
 800879a:	2301      	movs	r3, #1
 800879c:	fa03 f202 	lsl.w	r2, r3, r2
 80087a0:	4911      	ldr	r1, [pc, #68]	; (80087e8 <xTaskPriorityDisinherit+0xb4>)
 80087a2:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 80087a6:	ea23 0302 	bic.w	r3, r3, r2
 80087aa:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80087b0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b2:	f1c3 0207 	rsb	r2, r3, #7
 80087b6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80087b8:	2401      	movs	r4, #1
 80087ba:	fa04 f103 	lsl.w	r1, r4, r3
 80087be:	4a0a      	ldr	r2, [pc, #40]	; (80087e8 <xTaskPriorityDisinherit+0xb4>)
 80087c0:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 80087c4:	4301      	orrs	r1, r0
 80087c6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
 80087ca:	3230      	adds	r2, #48	; 0x30
 80087cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80087d0:	4629      	mov	r1, r5
 80087d2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 80087d6:	f7fe fd02 	bl	80071de <vListInsertEnd>
					xReturn = pdTRUE;
 80087da:	4620      	mov	r0, r4
 80087dc:	e7cf      	b.n	800877e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80087de:	2000      	movs	r0, #0
	}
 80087e0:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80087e2:	2000      	movs	r0, #0
 80087e4:	e7cb      	b.n	800877e <xTaskPriorityDisinherit+0x4a>
 80087e6:	bf00      	nop
 80087e8:	2000011c 	.word	0x2000011c

080087ec <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d055      	beq.n	800889c <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80087f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80087f6:	b943      	cbnz	r3, 800880a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	e7fe      	b.n	8008808 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800880a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800880c:	428a      	cmp	r2, r1
 800880e:	d200      	bcs.n	8008812 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008810:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008812:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008814:	4291      	cmp	r1, r2
 8008816:	d001      	beq.n	800881c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008818:	2b01      	cmp	r3, #1
 800881a:	d000      	beq.n	800881e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800881c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800881e:	4b20      	ldr	r3, [pc, #128]	; (80088a0 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8008820:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008824:	42a3      	cmp	r3, r4
 8008826:	d030      	beq.n	800888a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					pxTCB->uxPriority = uxPriorityToUse;
 8008828:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800882a:	69a3      	ldr	r3, [r4, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	db02      	blt.n	8008836 <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008830:	f1c2 0207 	rsb	r2, r2, #7
 8008834:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008836:	6962      	ldr	r2, [r4, #20]
 8008838:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800883c:	4b19      	ldr	r3, [pc, #100]	; (80088a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800883e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008842:	428a      	cmp	r2, r1
 8008844:	d1ea      	bne.n	800881c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008846:	1d25      	adds	r5, r4, #4
 8008848:	4628      	mov	r0, r5
 800884a:	f7fe fcec 	bl	8007226 <uxListRemove>
 800884e:	b950      	cbnz	r0, 8008866 <vTaskPriorityDisinheritAfterTimeout+0x7a>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008850:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008852:	2301      	movs	r3, #1
 8008854:	fa03 f202 	lsl.w	r2, r3, r2
 8008858:	4911      	ldr	r1, [pc, #68]	; (80088a0 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800885a:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 800885e:	ea23 0302 	bic.w	r3, r3, r2
 8008862:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
						prvAddTaskToReadyList( pxTCB );
 8008866:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008868:	2201      	movs	r2, #1
 800886a:	4082      	lsls	r2, r0
 800886c:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800886e:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8008872:	430a      	orrs	r2, r1
 8008874:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8008878:	3330      	adds	r3, #48	; 0x30
 800887a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800887e:	4629      	mov	r1, r5
 8008880:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008884:	f7fe fcab 	bl	80071de <vListInsertEnd>
	}
 8008888:	e7c8      	b.n	800881c <vTaskPriorityDisinheritAfterTimeout+0x30>
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800889a:	e7fe      	b.n	800889a <vTaskPriorityDisinheritAfterTimeout+0xae>
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	2000011c 	.word	0x2000011c
 80088a4:	2000014c 	.word	0x2000014c

080088a8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80088a8:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <pvTaskIncrementMutexHeldCount+0x1c>)
 80088aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80088ae:	b12b      	cbz	r3, 80088bc <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
 80088b0:	4b04      	ldr	r3, [pc, #16]	; (80088c4 <pvTaskIncrementMutexHeldCount+0x1c>)
 80088b2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80088b6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80088b8:	3301      	adds	r3, #1
 80088ba:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 80088bc:	4b01      	ldr	r3, [pc, #4]	; (80088c4 <pvTaskIncrementMutexHeldCount+0x1c>)
 80088be:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	}
 80088c2:	4770      	bx	lr
 80088c4:	2000011c 	.word	0x2000011c

080088c8 <ulTaskNotifyTake>:
	{
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4605      	mov	r5, r0
 80088cc:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 80088ce:	f000 f931 	bl	8008b34 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80088d2:	4b1f      	ldr	r3, [pc, #124]	; (8008950 <ulTaskNotifyTake+0x88>)
 80088d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80088d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088dc:	b933      	cbnz	r3, 80088ec <ulTaskNotifyTake+0x24>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80088de:	4b1c      	ldr	r3, [pc, #112]	; (8008950 <ulTaskNotifyTake+0x88>)
 80088e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				if( xTicksToWait > ( TickType_t ) 0 )
 80088ea:	b9d4      	cbnz	r4, 8008922 <ulTaskNotifyTake+0x5a>
		taskEXIT_CRITICAL();
 80088ec:	f000 f944 	bl	8008b78 <vPortExitCritical>
		taskENTER_CRITICAL();
 80088f0:	f000 f920 	bl	8008b34 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80088f4:	4b16      	ldr	r3, [pc, #88]	; (8008950 <ulTaskNotifyTake+0x88>)
 80088f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80088fa:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
			if( ulReturn != 0UL )
 80088fe:	b134      	cbz	r4, 800890e <ulTaskNotifyTake+0x46>
				if( xClearCountOnExit != pdFALSE )
 8008900:	b1f5      	cbz	r5, 8008940 <ulTaskNotifyTake+0x78>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008902:	4b13      	ldr	r3, [pc, #76]	; (8008950 <ulTaskNotifyTake+0x88>)
 8008904:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008908:	2200      	movs	r2, #0
 800890a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800890e:	4b10      	ldr	r3, [pc, #64]	; (8008950 <ulTaskNotifyTake+0x88>)
 8008910:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008914:	2200      	movs	r2, #0
 8008916:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		taskEXIT_CRITICAL();
 800891a:	f000 f92d 	bl	8008b78 <vPortExitCritical>
	}
 800891e:	4620      	mov	r0, r4
 8008920:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008922:	4611      	mov	r1, r2
 8008924:	4620      	mov	r0, r4
 8008926:	f7ff fae1 	bl	8007eec <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800892a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800892e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008932:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	e7d5      	b.n	80088ec <ulTaskNotifyTake+0x24>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008940:	4b03      	ldr	r3, [pc, #12]	; (8008950 <ulTaskNotifyTake+0x88>)
 8008942:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008946:	1e62      	subs	r2, r4, #1
 8008948:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800894c:	e7df      	b.n	800890e <ulTaskNotifyTake+0x46>
 800894e:	bf00      	nop
 8008950:	2000011c 	.word	0x2000011c

08008954 <xTaskGenericNotify>:
	{
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8008956:	b1b0      	cbz	r0, 8008986 <xTaskGenericNotify+0x32>
 8008958:	460f      	mov	r7, r1
 800895a:	4614      	mov	r4, r2
 800895c:	461d      	mov	r5, r3
 800895e:	4606      	mov	r6, r0
		taskENTER_CRITICAL();
 8008960:	f000 f8e8 	bl	8008b34 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8008964:	b115      	cbz	r5, 800896c <xTaskGenericNotify+0x18>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008966:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 800896a:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800896c:	f896 30b4 	ldrb.w	r3, [r6, #180]	; 0xb4
 8008970:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008972:	2202      	movs	r2, #2
 8008974:	f886 20b4 	strb.w	r2, [r6, #180]	; 0xb4
			switch( eAction )
 8008978:	2c04      	cmp	r4, #4
 800897a:	d825      	bhi.n	80089c8 <xTaskGenericNotify+0x74>
 800897c:	e8df f004 	tbb	[pc, r4]
 8008980:	1a130c32 	.word	0x1a130c32
 8008984:	1e          	.byte	0x1e
 8008985:	00          	.byte	0x00
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 8008996:	e7fe      	b.n	8008996 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue |= ulValue;
 8008998:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 800899c:	4317      	orrs	r7, r2
 800899e:	f8c6 70b0 	str.w	r7, [r6, #176]	; 0xb0
	BaseType_t xReturn = pdPASS;
 80089a2:	2401      	movs	r4, #1
					break;
 80089a4:	e01f      	b.n	80089e6 <xTaskGenericNotify+0x92>
					( pxTCB->ulNotifiedValue )++;
 80089a6:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 80089aa:	3201      	adds	r2, #1
 80089ac:	f8c6 20b0 	str.w	r2, [r6, #176]	; 0xb0
	BaseType_t xReturn = pdPASS;
 80089b0:	2401      	movs	r4, #1
					break;
 80089b2:	e018      	b.n	80089e6 <xTaskGenericNotify+0x92>
					pxTCB->ulNotifiedValue = ulValue;
 80089b4:	f8c6 70b0 	str.w	r7, [r6, #176]	; 0xb0
	BaseType_t xReturn = pdPASS;
 80089b8:	2401      	movs	r4, #1
					break;
 80089ba:	e014      	b.n	80089e6 <xTaskGenericNotify+0x92>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d018      	beq.n	80089f2 <xTaskGenericNotify+0x9e>
						pxTCB->ulNotifiedValue = ulValue;
 80089c0:	f8c6 70b0 	str.w	r7, [r6, #176]	; 0xb0
	BaseType_t xReturn = pdPASS;
 80089c4:	2401      	movs	r4, #1
 80089c6:	e00e      	b.n	80089e6 <xTaskGenericNotify+0x92>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80089c8:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 80089cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80089d0:	d011      	beq.n	80089f6 <xTaskGenericNotify+0xa2>
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	e7fe      	b.n	80089e2 <xTaskGenericNotify+0x8e>
			switch( eAction )
 80089e4:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d007      	beq.n	80089fa <xTaskGenericNotify+0xa6>
		taskEXIT_CRITICAL();
 80089ea:	f000 f8c5 	bl	8008b78 <vPortExitCritical>
	}
 80089ee:	4620      	mov	r0, r4
 80089f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 80089f2:	2400      	movs	r4, #0
 80089f4:	e7f7      	b.n	80089e6 <xTaskGenericNotify+0x92>
	BaseType_t xReturn = pdPASS;
 80089f6:	2401      	movs	r4, #1
 80089f8:	e7f5      	b.n	80089e6 <xTaskGenericNotify+0x92>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089fa:	1d35      	adds	r5, r6, #4
 80089fc:	4628      	mov	r0, r5
 80089fe:	f7fe fc12 	bl	8007226 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008a02:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8008a04:	2201      	movs	r2, #1
 8008a06:	4082      	lsls	r2, r0
 8008a08:	4b15      	ldr	r3, [pc, #84]	; (8008a60 <xTaskGenericNotify+0x10c>)
 8008a0a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8008a14:	3330      	adds	r3, #48	; 0x30
 8008a16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a20:	f7fe fbdd 	bl	80071de <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008a24:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008a26:	b143      	cbz	r3, 8008a3a <xTaskGenericNotify+0xe6>
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	e7fe      	b.n	8008a38 <xTaskGenericNotify+0xe4>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a3a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8008a3c:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <xTaskGenericNotify+0x10c>)
 8008a3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d9d0      	bls.n	80089ea <xTaskGenericNotify+0x96>
					taskYIELD_IF_USING_PREEMPTION();
 8008a48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a50:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	e7c5      	b.n	80089ea <xTaskGenericNotify+0x96>
 8008a5e:	bf00      	nop
 8008a60:	2000011c 	.word	0x2000011c

08008a64 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a64:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	; (8008aa0 <prvTaskExitError+0x3c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a72:	d008      	beq.n	8008a86 <prvTaskExitError+0x22>
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	e7fe      	b.n	8008a84 <prvTaskExitError+0x20>
 8008a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0fc      	beq.n	8008a96 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a9c:	b002      	add	sp, #8
 8008a9e:	4770      	bx	lr
 8008aa0:	20000008 	.word	0x20000008

08008aa4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008aa4:	4808      	ldr	r0, [pc, #32]	; (8008ac8 <prvPortStartFirstTask+0x24>)
 8008aa6:	6800      	ldr	r0, [r0, #0]
 8008aa8:	6800      	ldr	r0, [r0, #0]
 8008aaa:	f380 8808 	msr	MSP, r0
 8008aae:	f04f 0000 	mov.w	r0, #0
 8008ab2:	f380 8814 	msr	CONTROL, r0
 8008ab6:	b662      	cpsie	i
 8008ab8:	b661      	cpsie	f
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	df00      	svc	0
 8008ac4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ac6:	0000      	.short	0x0000
 8008ac8:	e000ed08 	.word	0xe000ed08

08008acc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008acc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008adc <vPortEnableVFP+0x10>
 8008ad0:	6801      	ldr	r1, [r0, #0]
 8008ad2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008ad6:	6001      	str	r1, [r0, #0]
 8008ad8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ada:	0000      	.short	0x0000
 8008adc:	e000ed88 	.word	0xe000ed88

08008ae0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ae4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ae8:	f021 0101 	bic.w	r1, r1, #1
 8008aec:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008af0:	4b05      	ldr	r3, [pc, #20]	; (8008b08 <pxPortInitialiseStack+0x28>)
 8008af2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008af6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008afa:	f06f 0302 	mvn.w	r3, #2
 8008afe:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8008b02:	3844      	subs	r0, #68	; 0x44
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	08008a65 	.word	0x08008a65
 8008b0c:	00000000 	.word	0x00000000

08008b10 <SVC_Handler>:
	__asm volatile (
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <pxCurrentTCBConst2>)
 8008b12:	6819      	ldr	r1, [r3, #0]
 8008b14:	6808      	ldr	r0, [r1, #0]
 8008b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1a:	f380 8809 	msr	PSP, r0
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f04f 0000 	mov.w	r0, #0
 8008b26:	f380 8811 	msr	BASEPRI, r0
 8008b2a:	4770      	bx	lr
 8008b2c:	f3af 8000 	nop.w

08008b30 <pxCurrentTCBConst2>:
 8008b30:	2000021c 	.word	0x2000021c

08008b34 <vPortEnterCritical>:
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008b44:	4a0b      	ldr	r2, [pc, #44]	; (8008b74 <vPortEnterCritical+0x40>)
 8008b46:	6813      	ldr	r3, [r2, #0]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d000      	beq.n	8008b52 <vPortEnterCritical+0x1e>
}
 8008b50:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b56:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008b5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b5e:	d0f7      	beq.n	8008b50 <vPortEnterCritical+0x1c>
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	e7fe      	b.n	8008b70 <vPortEnterCritical+0x3c>
 8008b72:	bf00      	nop
 8008b74:	20000008 	.word	0x20000008

08008b78 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008b78:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <vPortExitCritical+0x28>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	b943      	cbnz	r3, 8008b90 <vPortExitCritical+0x18>
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	e7fe      	b.n	8008b8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008b90:	3b01      	subs	r3, #1
 8008b92:	4a03      	ldr	r2, [pc, #12]	; (8008ba0 <vPortExitCritical+0x28>)
 8008b94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b96:	b90b      	cbnz	r3, 8008b9c <vPortExitCritical+0x24>
	__asm volatile
 8008b98:	f383 8811 	msr	BASEPRI, r3
}
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000008 	.word	0x20000008
	...

08008bb0 <PendSV_Handler>:
	__asm volatile
 8008bb0:	f3ef 8009 	mrs	r0, PSP
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	4b15      	ldr	r3, [pc, #84]	; (8008c10 <pxCurrentTCBConst>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	f01e 0f10 	tst.w	lr, #16
 8008bc0:	bf08      	it	eq
 8008bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bca:	6010      	str	r0, [r2, #0]
 8008bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bd4:	f380 8811 	msr	BASEPRI, r0
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f7ff fbba 	bl	8008358 <vTaskSwitchContext>
 8008be4:	f04f 0000 	mov.w	r0, #0
 8008be8:	f380 8811 	msr	BASEPRI, r0
 8008bec:	bc09      	pop	{r0, r3}
 8008bee:	6819      	ldr	r1, [r3, #0]
 8008bf0:	6808      	ldr	r0, [r1, #0]
 8008bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf6:	f01e 0f10 	tst.w	lr, #16
 8008bfa:	bf08      	it	eq
 8008bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c00:	f380 8809 	msr	PSP, r0
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	f3af 8000 	nop.w

08008c10 <pxCurrentTCBConst>:
 8008c10:	2000021c 	.word	0x2000021c

08008c14 <SysTick_Handler>:
{
 8008c14:	b508      	push	{r3, lr}
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008c26:	f7ff fa6d 	bl	8008104 <xTaskIncrementTick>
 8008c2a:	b128      	cbz	r0, 8008c38 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f383 8811 	msr	BASEPRI, r3
}
 8008c3e:	bd08      	pop	{r3, pc}

08008c40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c40:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008c44:	2300      	movs	r3, #0
 8008c46:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c48:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c4a:	4b05      	ldr	r3, [pc, #20]	; (8008c60 <vPortSetupTimerInterrupt+0x20>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4905      	ldr	r1, [pc, #20]	; (8008c64 <vPortSetupTimerInterrupt+0x24>)
 8008c50:	fba1 1303 	umull	r1, r3, r1, r3
 8008c54:	099b      	lsrs	r3, r3, #6
 8008c56:	3b01      	subs	r3, #1
 8008c58:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c5a:	2307      	movs	r3, #7
 8008c5c:	6113      	str	r3, [r2, #16]
}
 8008c5e:	4770      	bx	lr
 8008c60:	2000001c 	.word	0x2000001c
 8008c64:	10624dd3 	.word	0x10624dd3

08008c68 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c6c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008c70:	4b3d      	ldr	r3, [pc, #244]	; (8008d68 <xPortStartScheduler+0x100>)
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d01b      	beq.n	8008cae <xPortStartScheduler+0x46>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c7a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008c7e:	4b3b      	ldr	r3, [pc, #236]	; (8008d6c <xPortStartScheduler+0x104>)
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d01d      	beq.n	8008cc0 <xPortStartScheduler+0x58>
{
 8008c84:	b530      	push	{r4, r5, lr}
 8008c86:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c88:	4b39      	ldr	r3, [pc, #228]	; (8008d70 <xPortStartScheduler+0x108>)
 8008c8a:	781a      	ldrb	r2, [r3, #0]
 8008c8c:	b2d2      	uxtb	r2, r2
 8008c8e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c90:	22ff      	movs	r2, #255	; 0xff
 8008c92:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008ca0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ca4:	4a33      	ldr	r2, [pc, #204]	; (8008d74 <xPortStartScheduler+0x10c>)
 8008ca6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ca8:	2307      	movs	r3, #7
 8008caa:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cac:	e01b      	b.n	8008ce6 <xPortStartScheduler+0x7e>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cbe:	e7fe      	b.n	8008cbe <xPortStartScheduler+0x56>
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008cd0:	e7fe      	b.n	8008cd0 <xPortStartScheduler+0x68>
			ulMaxPRIGROUPValue--;
 8008cd2:	4a28      	ldr	r2, [pc, #160]	; (8008d74 <xPortStartScheduler+0x10c>)
 8008cd4:	6853      	ldr	r3, [r2, #4]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cda:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ce6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008cea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008cee:	d1f0      	bne.n	8008cd2 <xPortStartScheduler+0x6a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cf0:	4b20      	ldr	r3, [pc, #128]	; (8008d74 <xPortStartScheduler+0x10c>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d008      	beq.n	8008d0a <xPortStartScheduler+0xa2>
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	e7fe      	b.n	8008d08 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d0a:	021b      	lsls	r3, r3, #8
 8008d0c:	4a19      	ldr	r2, [pc, #100]	; (8008d74 <xPortStartScheduler+0x10c>)
 8008d0e:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d14:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d16:	9b01      	ldr	r3, [sp, #4]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <xPortStartScheduler+0x108>)
 8008d1c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d1e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8008d22:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008d26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d2a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d2e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008d32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d36:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008d3a:	f7ff ff81 	bl	8008c40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008d3e:	2500      	movs	r5, #0
 8008d40:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <xPortStartScheduler+0x110>)
 8008d42:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008d44:	f7ff fec2 	bl	8008acc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d48:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8008d4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d50:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8008d54:	f7ff fea6 	bl	8008aa4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008d58:	f7ff fafe 	bl	8008358 <vTaskSwitchContext>
	prvTaskExitError();
 8008d5c:	f7ff fe82 	bl	8008a64 <prvTaskExitError>
}
 8008d60:	4628      	mov	r0, r5
 8008d62:	b003      	add	sp, #12
 8008d64:	bd30      	pop	{r4, r5, pc}
 8008d66:	bf00      	nop
 8008d68:	410fc271 	.word	0x410fc271
 8008d6c:	410fc270 	.word	0x410fc270
 8008d70:	e000e400 	.word	0xe000e400
 8008d74:	20000250 	.word	0x20000250
 8008d78:	20000008 	.word	0x20000008

08008d7c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d7c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d80:	2b0f      	cmp	r3, #15
 8008d82:	d90f      	bls.n	8008da4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d84:	4a11      	ldr	r2, [pc, #68]	; (8008dcc <vPortValidateInterruptPriority+0x50>)
 8008d86:	5c9b      	ldrb	r3, [r3, r2]
 8008d88:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d8a:	4a11      	ldr	r2, [pc, #68]	; (8008dd0 <vPortValidateInterruptPriority+0x54>)
 8008d8c:	7812      	ldrb	r2, [r2, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d908      	bls.n	8008da4 <vPortValidateInterruptPriority+0x28>
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	e7fe      	b.n	8008da2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008da4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008da8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008dac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008db0:	4a07      	ldr	r2, [pc, #28]	; (8008dd0 <vPortValidateInterruptPriority+0x54>)
 8008db2:	6852      	ldr	r2, [r2, #4]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d908      	bls.n	8008dca <vPortValidateInterruptPriority+0x4e>
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	e7fe      	b.n	8008dc8 <vPortValidateInterruptPriority+0x4c>
	}
 8008dca:	4770      	bx	lr
 8008dcc:	e000e3f0 	.word	0xe000e3f0
 8008dd0:	20000250 	.word	0x20000250

08008dd4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008dd4:	4a10      	ldr	r2, [pc, #64]	; (8008e18 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008dd6:	f012 0f07 	tst.w	r2, #7
 8008dda:	d01a      	beq.n	8008e12 <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ddc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dde:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008de2:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8008de6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008de8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dea:	490c      	ldr	r1, [pc, #48]	; (8008e1c <prvHeapInit+0x48>)
 8008dec:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dee:	2000      	movs	r0, #0
 8008df0:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008df2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008df4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008df6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8008dfa:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 8008dfc:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dfe:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e00:	1a98      	subs	r0, r3, r2
 8008e02:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e04:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e06:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e08:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e0e:	614b      	str	r3, [r1, #20]
}
 8008e10:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e12:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e16:	e7e8      	b.n	8008dea <prvHeapInit+0x16>
 8008e18:	20000278 	.word	0x20000278
 8008e1c:	20000258 	.word	0x20000258

08008e20 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e20:	4b16      	ldr	r3, [pc, #88]	; (8008e7c <prvInsertBlockIntoFreeList+0x5c>)
 8008e22:	461a      	mov	r2, r3
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4283      	cmp	r3, r0
 8008e28:	d3fb      	bcc.n	8008e22 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e2a:	6851      	ldr	r1, [r2, #4]
 8008e2c:	eb02 0c01 	add.w	ip, r2, r1
 8008e30:	4584      	cmp	ip, r0
 8008e32:	d009      	beq.n	8008e48 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e34:	6841      	ldr	r1, [r0, #4]
 8008e36:	eb00 0c01 	add.w	ip, r0, r1
 8008e3a:	4563      	cmp	r3, ip
 8008e3c:	d009      	beq.n	8008e52 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e3e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e40:	4290      	cmp	r0, r2
 8008e42:	d019      	beq.n	8008e78 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e44:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8008e46:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e48:	6840      	ldr	r0, [r0, #4]
 8008e4a:	4401      	add	r1, r0
 8008e4c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8008e4e:	4610      	mov	r0, r2
 8008e50:	e7f0      	b.n	8008e34 <prvInsertBlockIntoFreeList+0x14>
{
 8008e52:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e54:	4c09      	ldr	r4, [pc, #36]	; (8008e7c <prvInsertBlockIntoFreeList+0x5c>)
 8008e56:	68a4      	ldr	r4, [r4, #8]
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	d00b      	beq.n	8008e74 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	4419      	add	r1, r3
 8008e60:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e62:	6813      	ldr	r3, [r2, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8008e68:	4290      	cmp	r0, r2
 8008e6a:	d000      	beq.n	8008e6e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e6c:	6010      	str	r0, [r2, #0]
	}
}
 8008e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e72:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e74:	6004      	str	r4, [r0, #0]
 8008e76:	e7f7      	b.n	8008e68 <prvInsertBlockIntoFreeList+0x48>
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	20000258 	.word	0x20000258

08008e80 <pvPortMalloc>:
{
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8008e84:	f7ff f924 	bl	80080d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008e88:	4b35      	ldr	r3, [pc, #212]	; (8008f60 <pvPortMalloc+0xe0>)
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	b1a3      	cbz	r3, 8008eb8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e8e:	4b34      	ldr	r3, [pc, #208]	; (8008f60 <pvPortMalloc+0xe0>)
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	421d      	tst	r5, r3
 8008e94:	d14c      	bne.n	8008f30 <pvPortMalloc+0xb0>
			if( xWantedSize > 0 )
 8008e96:	b135      	cbz	r5, 8008ea6 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8008e98:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e9a:	f015 0f07 	tst.w	r5, #7
 8008e9e:	d002      	beq.n	8008ea6 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ea0:	f025 0507 	bic.w	r5, r5, #7
 8008ea4:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ea6:	2d00      	cmp	r5, #0
 8008ea8:	d044      	beq.n	8008f34 <pvPortMalloc+0xb4>
 8008eaa:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <pvPortMalloc+0xe0>)
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	42ab      	cmp	r3, r5
 8008eb0:	d34f      	bcc.n	8008f52 <pvPortMalloc+0xd2>
				pxBlock = xStart.pxNextFreeBlock;
 8008eb2:	4a2b      	ldr	r2, [pc, #172]	; (8008f60 <pvPortMalloc+0xe0>)
 8008eb4:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eb6:	e004      	b.n	8008ec2 <pvPortMalloc+0x42>
			prvHeapInit();
 8008eb8:	f7ff ff8c 	bl	8008dd4 <prvHeapInit>
 8008ebc:	e7e7      	b.n	8008e8e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8008ebe:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ec0:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ec2:	6863      	ldr	r3, [r4, #4]
 8008ec4:	42ab      	cmp	r3, r5
 8008ec6:	d202      	bcs.n	8008ece <pvPortMalloc+0x4e>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1f7      	bne.n	8008ebe <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8008ece:	4b24      	ldr	r3, [pc, #144]	; (8008f60 <pvPortMalloc+0xe0>)
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	d03f      	beq.n	8008f56 <pvPortMalloc+0xd6>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ed6:	6816      	ldr	r6, [r2, #0]
 8008ed8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ede:	6863      	ldr	r3, [r4, #4]
 8008ee0:	1b5b      	subs	r3, r3, r5
 8008ee2:	2b10      	cmp	r3, #16
 8008ee4:	d910      	bls.n	8008f08 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ee6:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee8:	f010 0f07 	tst.w	r0, #7
 8008eec:	d008      	beq.n	8008f00 <pvPortMalloc+0x80>
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	e7fe      	b.n	8008efe <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f00:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f02:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f04:	f7ff ff8c 	bl	8008e20 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f08:	6861      	ldr	r1, [r4, #4]
 8008f0a:	4a15      	ldr	r2, [pc, #84]	; (8008f60 <pvPortMalloc+0xe0>)
 8008f0c:	6913      	ldr	r3, [r2, #16]
 8008f0e:	1a5b      	subs	r3, r3, r1
 8008f10:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f12:	68d2      	ldr	r2, [r2, #12]
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d201      	bcs.n	8008f1c <pvPortMalloc+0x9c>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f18:	4a11      	ldr	r2, [pc, #68]	; (8008f60 <pvPortMalloc+0xe0>)
 8008f1a:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f1c:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <pvPortMalloc+0xe0>)
 8008f1e:	695a      	ldr	r2, [r3, #20]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	6062      	str	r2, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f24:	2200      	movs	r2, #0
 8008f26:	6022      	str	r2, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8008f28:	699a      	ldr	r2, [r3, #24]
 8008f2a:	3201      	adds	r2, #1
 8008f2c:	619a      	str	r2, [r3, #24]
 8008f2e:	e002      	b.n	8008f36 <pvPortMalloc+0xb6>
void *pvReturn = NULL;
 8008f30:	2600      	movs	r6, #0
 8008f32:	e000      	b.n	8008f36 <pvPortMalloc+0xb6>
 8008f34:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8008f36:	f7ff f971 	bl	800821c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f3a:	f016 0f07 	tst.w	r6, #7
 8008f3e:	d00c      	beq.n	8008f5a <pvPortMalloc+0xda>
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	e7fe      	b.n	8008f50 <pvPortMalloc+0xd0>
void *pvReturn = NULL;
 8008f52:	2600      	movs	r6, #0
 8008f54:	e7ef      	b.n	8008f36 <pvPortMalloc+0xb6>
 8008f56:	2600      	movs	r6, #0
 8008f58:	e7ed      	b.n	8008f36 <pvPortMalloc+0xb6>
}
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	bd70      	pop	{r4, r5, r6, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000258 	.word	0x20000258

08008f64 <vPortFree>:
	if( pv != NULL )
 8008f64:	b398      	cbz	r0, 8008fce <vPortFree+0x6a>
{
 8008f66:	b538      	push	{r3, r4, r5, lr}
 8008f68:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8008f6a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008f72:	4a17      	ldr	r2, [pc, #92]	; (8008fd0 <vPortFree+0x6c>)
 8008f74:	6952      	ldr	r2, [r2, #20]
 8008f76:	4213      	tst	r3, r2
 8008f78:	d108      	bne.n	8008f8c <vPortFree+0x28>
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	e7fe      	b.n	8008f8a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f8c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008f90:	b141      	cbz	r1, 8008fa4 <vPortFree+0x40>
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	e7fe      	b.n	8008fa2 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fa4:	ea23 0302 	bic.w	r3, r3, r2
 8008fa8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008fac:	f7ff f890 	bl	80080d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fb0:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8008fb4:	4c06      	ldr	r4, [pc, #24]	; (8008fd0 <vPortFree+0x6c>)
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	4413      	add	r3, r2
 8008fba:	6123      	str	r3, [r4, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f7ff ff2f 	bl	8008e20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fc2:	69e3      	ldr	r3, [r4, #28]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	61e3      	str	r3, [r4, #28]
				( void ) xTaskResumeAll();
 8008fc8:	f7ff f928 	bl	800821c <xTaskResumeAll>
}
 8008fcc:	bd38      	pop	{r3, r4, r5, pc}
 8008fce:	4770      	bx	lr
 8008fd0:	20000258 	.word	0x20000258

08008fd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008fd4:	b500      	push	{lr}
 8008fd6:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	9302      	str	r3, [sp, #8]
 8008fe0:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008fe2:	4879      	ldr	r0, [pc, #484]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 8008fe4:	4a79      	ldr	r2, [pc, #484]	; (80091cc <MX_ADC1_Init+0x1f8>)
 8008fe6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008fe8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008fec:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008fee:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008ff4:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008ff6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008ffa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008ffc:	4974      	ldr	r1, [pc, #464]	; (80091d0 <MX_ADC1_Init+0x1fc>)
 8008ffe:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009000:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 16;
 8009002:	2110      	movs	r1, #16
 8009004:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009006:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800900a:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800900c:	f7f8 f884 	bl	8001118 <HAL_ADC_Init>
 8009010:	2800      	cmp	r0, #0
 8009012:	f040 80a6 	bne.w	8009162 <MX_ADC1_Init+0x18e>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8009016:	2300      	movs	r3, #0
 8009018:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800901a:	2201      	movs	r2, #1
 800901c:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800901e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009020:	4669      	mov	r1, sp
 8009022:	4869      	ldr	r0, [pc, #420]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 8009024:	f7f8 f8a4 	bl	8001170 <HAL_ADC_ConfigChannel>
 8009028:	2800      	cmp	r0, #0
 800902a:	f040 809d 	bne.w	8009168 <MX_ADC1_Init+0x194>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800902e:	2301      	movs	r3, #1
 8009030:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8009032:	2302      	movs	r3, #2
 8009034:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009036:	4669      	mov	r1, sp
 8009038:	4863      	ldr	r0, [pc, #396]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 800903a:	f7f8 f899 	bl	8001170 <HAL_ADC_ConfigChannel>
 800903e:	2800      	cmp	r0, #0
 8009040:	f040 8095 	bne.w	800916e <MX_ADC1_Init+0x19a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8009044:	2302      	movs	r3, #2
 8009046:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8009048:	2303      	movs	r3, #3
 800904a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800904c:	4669      	mov	r1, sp
 800904e:	485e      	ldr	r0, [pc, #376]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 8009050:	f7f8 f88e 	bl	8001170 <HAL_ADC_ConfigChannel>
 8009054:	2800      	cmp	r0, #0
 8009056:	f040 808d 	bne.w	8009174 <MX_ADC1_Init+0x1a0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800905a:	2303      	movs	r3, #3
 800905c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 800905e:	2304      	movs	r3, #4
 8009060:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009062:	4669      	mov	r1, sp
 8009064:	4858      	ldr	r0, [pc, #352]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 8009066:	f7f8 f883 	bl	8001170 <HAL_ADC_ConfigChannel>
 800906a:	2800      	cmp	r0, #0
 800906c:	f040 8085 	bne.w	800917a <MX_ADC1_Init+0x1a6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8009070:	2304      	movs	r3, #4
 8009072:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 8009074:	2305      	movs	r3, #5
 8009076:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009078:	4669      	mov	r1, sp
 800907a:	4853      	ldr	r0, [pc, #332]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 800907c:	f7f8 f878 	bl	8001170 <HAL_ADC_ConfigChannel>
 8009080:	2800      	cmp	r0, #0
 8009082:	d17d      	bne.n	8009180 <MX_ADC1_Init+0x1ac>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8009084:	2305      	movs	r3, #5
 8009086:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 8009088:	2306      	movs	r3, #6
 800908a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800908c:	4669      	mov	r1, sp
 800908e:	484e      	ldr	r0, [pc, #312]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 8009090:	f7f8 f86e 	bl	8001170 <HAL_ADC_ConfigChannel>
 8009094:	2800      	cmp	r0, #0
 8009096:	d176      	bne.n	8009186 <MX_ADC1_Init+0x1b2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8009098:	2306      	movs	r3, #6
 800909a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 800909c:	2307      	movs	r3, #7
 800909e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80090a0:	4669      	mov	r1, sp
 80090a2:	4849      	ldr	r0, [pc, #292]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 80090a4:	f7f8 f864 	bl	8001170 <HAL_ADC_ConfigChannel>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d16f      	bne.n	800918c <MX_ADC1_Init+0x1b8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80090ac:	2307      	movs	r3, #7
 80090ae:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 80090b0:	2308      	movs	r3, #8
 80090b2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80090b4:	4669      	mov	r1, sp
 80090b6:	4844      	ldr	r0, [pc, #272]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 80090b8:	f7f8 f85a 	bl	8001170 <HAL_ADC_ConfigChannel>
 80090bc:	2800      	cmp	r0, #0
 80090be:	d168      	bne.n	8009192 <MX_ADC1_Init+0x1be>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80090c0:	2308      	movs	r3, #8
 80090c2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 80090c4:	2309      	movs	r3, #9
 80090c6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80090c8:	4669      	mov	r1, sp
 80090ca:	483f      	ldr	r0, [pc, #252]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 80090cc:	f7f8 f850 	bl	8001170 <HAL_ADC_ConfigChannel>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d161      	bne.n	8009198 <MX_ADC1_Init+0x1c4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80090d4:	2309      	movs	r3, #9
 80090d6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 80090d8:	230a      	movs	r3, #10
 80090da:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80090dc:	4669      	mov	r1, sp
 80090de:	483a      	ldr	r0, [pc, #232]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 80090e0:	f7f8 f846 	bl	8001170 <HAL_ADC_ConfigChannel>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d15a      	bne.n	800919e <MX_ADC1_Init+0x1ca>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80090e8:	230a      	movs	r3, #10
 80090ea:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 80090ec:	230b      	movs	r3, #11
 80090ee:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80090f0:	4669      	mov	r1, sp
 80090f2:	4835      	ldr	r0, [pc, #212]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 80090f4:	f7f8 f83c 	bl	8001170 <HAL_ADC_ConfigChannel>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d153      	bne.n	80091a4 <MX_ADC1_Init+0x1d0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80090fc:	230b      	movs	r3, #11
 80090fe:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 12;
 8009100:	230c      	movs	r3, #12
 8009102:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009104:	4669      	mov	r1, sp
 8009106:	4830      	ldr	r0, [pc, #192]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 8009108:	f7f8 f832 	bl	8001170 <HAL_ADC_ConfigChannel>
 800910c:	2800      	cmp	r0, #0
 800910e:	d14c      	bne.n	80091aa <MX_ADC1_Init+0x1d6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8009110:	230c      	movs	r3, #12
 8009112:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 13;
 8009114:	230d      	movs	r3, #13
 8009116:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009118:	4669      	mov	r1, sp
 800911a:	482b      	ldr	r0, [pc, #172]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 800911c:	f7f8 f828 	bl	8001170 <HAL_ADC_ConfigChannel>
 8009120:	2800      	cmp	r0, #0
 8009122:	d145      	bne.n	80091b0 <MX_ADC1_Init+0x1dc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8009124:	230d      	movs	r3, #13
 8009126:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 14;
 8009128:	230e      	movs	r3, #14
 800912a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800912c:	4669      	mov	r1, sp
 800912e:	4826      	ldr	r0, [pc, #152]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 8009130:	f7f8 f81e 	bl	8001170 <HAL_ADC_ConfigChannel>
 8009134:	2800      	cmp	r0, #0
 8009136:	d13e      	bne.n	80091b6 <MX_ADC1_Init+0x1e2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009138:	230e      	movs	r3, #14
 800913a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 15;
 800913c:	230f      	movs	r3, #15
 800913e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009140:	4669      	mov	r1, sp
 8009142:	4821      	ldr	r0, [pc, #132]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 8009144:	f7f8 f814 	bl	8001170 <HAL_ADC_ConfigChannel>
 8009148:	bbc0      	cbnz	r0, 80091bc <MX_ADC1_Init+0x1e8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800914a:	230f      	movs	r3, #15
 800914c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 16;
 800914e:	2310      	movs	r3, #16
 8009150:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009152:	4669      	mov	r1, sp
 8009154:	481c      	ldr	r0, [pc, #112]	; (80091c8 <MX_ADC1_Init+0x1f4>)
 8009156:	f7f8 f80b 	bl	8001170 <HAL_ADC_ConfigChannel>
 800915a:	bb90      	cbnz	r0, 80091c2 <MX_ADC1_Init+0x1ee>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800915c:	b005      	add	sp, #20
 800915e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8009162:	f000 fadf 	bl	8009724 <Error_Handler>
 8009166:	e756      	b.n	8009016 <MX_ADC1_Init+0x42>
    Error_Handler();
 8009168:	f000 fadc 	bl	8009724 <Error_Handler>
 800916c:	e75f      	b.n	800902e <MX_ADC1_Init+0x5a>
    Error_Handler();
 800916e:	f000 fad9 	bl	8009724 <Error_Handler>
 8009172:	e767      	b.n	8009044 <MX_ADC1_Init+0x70>
    Error_Handler();
 8009174:	f000 fad6 	bl	8009724 <Error_Handler>
 8009178:	e76f      	b.n	800905a <MX_ADC1_Init+0x86>
    Error_Handler();
 800917a:	f000 fad3 	bl	8009724 <Error_Handler>
 800917e:	e777      	b.n	8009070 <MX_ADC1_Init+0x9c>
    Error_Handler();
 8009180:	f000 fad0 	bl	8009724 <Error_Handler>
 8009184:	e77e      	b.n	8009084 <MX_ADC1_Init+0xb0>
    Error_Handler();
 8009186:	f000 facd 	bl	8009724 <Error_Handler>
 800918a:	e785      	b.n	8009098 <MX_ADC1_Init+0xc4>
    Error_Handler();
 800918c:	f000 faca 	bl	8009724 <Error_Handler>
 8009190:	e78c      	b.n	80090ac <MX_ADC1_Init+0xd8>
    Error_Handler();
 8009192:	f000 fac7 	bl	8009724 <Error_Handler>
 8009196:	e793      	b.n	80090c0 <MX_ADC1_Init+0xec>
    Error_Handler();
 8009198:	f000 fac4 	bl	8009724 <Error_Handler>
 800919c:	e79a      	b.n	80090d4 <MX_ADC1_Init+0x100>
    Error_Handler();
 800919e:	f000 fac1 	bl	8009724 <Error_Handler>
 80091a2:	e7a1      	b.n	80090e8 <MX_ADC1_Init+0x114>
    Error_Handler();
 80091a4:	f000 fabe 	bl	8009724 <Error_Handler>
 80091a8:	e7a8      	b.n	80090fc <MX_ADC1_Init+0x128>
    Error_Handler();
 80091aa:	f000 fabb 	bl	8009724 <Error_Handler>
 80091ae:	e7af      	b.n	8009110 <MX_ADC1_Init+0x13c>
    Error_Handler();
 80091b0:	f000 fab8 	bl	8009724 <Error_Handler>
 80091b4:	e7b6      	b.n	8009124 <MX_ADC1_Init+0x150>
    Error_Handler();
 80091b6:	f000 fab5 	bl	8009724 <Error_Handler>
 80091ba:	e7bd      	b.n	8009138 <MX_ADC1_Init+0x164>
    Error_Handler();
 80091bc:	f000 fab2 	bl	8009724 <Error_Handler>
 80091c0:	e7c3      	b.n	800914a <MX_ADC1_Init+0x176>
    Error_Handler();
 80091c2:	f000 faaf 	bl	8009724 <Error_Handler>
}
 80091c6:	e7c9      	b.n	800915c <MX_ADC1_Init+0x188>
 80091c8:	20003e78 	.word	0x20003e78
 80091cc:	40012000 	.word	0x40012000
 80091d0:	0f000001 	.word	0x0f000001

080091d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80091d4:	b570      	push	{r4, r5, r6, lr}
 80091d6:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d8:	2300      	movs	r3, #0
 80091da:	9305      	str	r3, [sp, #20]
 80091dc:	9306      	str	r3, [sp, #24]
 80091de:	9307      	str	r3, [sp, #28]
 80091e0:	9308      	str	r3, [sp, #32]
 80091e2:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 80091e4:	6802      	ldr	r2, [r0, #0]
 80091e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091ea:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d001      	beq.n	80091f6 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80091f2:	b00a      	add	sp, #40	; 0x28
 80091f4:	bd70      	pop	{r4, r5, r6, pc}
 80091f6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80091f8:	2500      	movs	r5, #0
 80091fa:	9501      	str	r5, [sp, #4]
 80091fc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8009200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009206:	645a      	str	r2, [r3, #68]	; 0x44
 8009208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800920a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800920e:	9201      	str	r2, [sp, #4]
 8009210:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009212:	9502      	str	r5, [sp, #8]
 8009214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009216:	f042 0204 	orr.w	r2, r2, #4
 800921a:	631a      	str	r2, [r3, #48]	; 0x30
 800921c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800921e:	f002 0204 	and.w	r2, r2, #4
 8009222:	9202      	str	r2, [sp, #8]
 8009224:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009226:	9503      	str	r5, [sp, #12]
 8009228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800922a:	f042 0201 	orr.w	r2, r2, #1
 800922e:	631a      	str	r2, [r3, #48]	; 0x30
 8009230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009232:	f002 0201 	and.w	r2, r2, #1
 8009236:	9203      	str	r2, [sp, #12]
 8009238:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800923a:	9504      	str	r5, [sp, #16]
 800923c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800923e:	f042 0202 	orr.w	r2, r2, #2
 8009242:	631a      	str	r2, [r3, #48]	; 0x30
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	9304      	str	r3, [sp, #16]
 800924c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800924e:	233f      	movs	r3, #63	; 0x3f
 8009250:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009252:	2603      	movs	r6, #3
 8009254:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009256:	a905      	add	r1, sp, #20
 8009258:	4819      	ldr	r0, [pc, #100]	; (80092c0 <HAL_ADC_MspInit+0xec>)
 800925a:	f7f8 fc33 	bl	8001ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800925e:	23ff      	movs	r3, #255	; 0xff
 8009260:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009262:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009264:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009266:	a905      	add	r1, sp, #20
 8009268:	4816      	ldr	r0, [pc, #88]	; (80092c4 <HAL_ADC_MspInit+0xf0>)
 800926a:	f7f8 fc2b 	bl	8001ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800926e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009270:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009272:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009274:	a905      	add	r1, sp, #20
 8009276:	4814      	ldr	r0, [pc, #80]	; (80092c8 <HAL_ADC_MspInit+0xf4>)
 8009278:	f7f8 fc24 	bl	8001ac4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800927c:	4813      	ldr	r0, [pc, #76]	; (80092cc <HAL_ADC_MspInit+0xf8>)
 800927e:	4b14      	ldr	r3, [pc, #80]	; (80092d0 <HAL_ADC_MspInit+0xfc>)
 8009280:	6483      	str	r3, [r0, #72]	; 0x48
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8009282:	64c5      	str	r5, [r0, #76]	; 0x4c
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009284:	6505      	str	r5, [r0, #80]	; 0x50
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009286:	6545      	str	r5, [r0, #84]	; 0x54
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800928c:	6583      	str	r3, [r0, #88]	; 0x58
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800928e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009292:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009294:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009298:	6603      	str	r3, [r0, #96]	; 0x60
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800929a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800929e:	6643      	str	r3, [r0, #100]	; 0x64
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80092a0:	6685      	str	r5, [r0, #104]	; 0x68
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80092a2:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80092a4:	3048      	adds	r0, #72	; 0x48
 80092a6:	f7f8 fa6f 	bl	8001788 <HAL_DMA_Init>
 80092aa:	b930      	cbnz	r0, 80092ba <HAL_ADC_MspInit+0xe6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80092ac:	4b07      	ldr	r3, [pc, #28]	; (80092cc <HAL_ADC_MspInit+0xf8>)
 80092ae:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80092b2:	63a2      	str	r2, [r4, #56]	; 0x38
 80092b4:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
}
 80092b8:	e79b      	b.n	80091f2 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 80092ba:	f000 fa33 	bl	8009724 <Error_Handler>
 80092be:	e7f5      	b.n	80092ac <HAL_ADC_MspInit+0xd8>
 80092c0:	40020800 	.word	0x40020800
 80092c4:	40020000 	.word	0x40020000
 80092c8:	40020400 	.word	0x40020400
 80092cc:	20003e78 	.word	0x20003e78
 80092d0:	40026410 	.word	0x40026410

080092d4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80092d4:	b508      	push	{r3, lr}
 80092d6:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80092d8:	460a      	mov	r2, r1
 80092da:	4601      	mov	r1, r0
 80092dc:	4802      	ldr	r0, [pc, #8]	; (80092e8 <BSP_SD_ReadBlocks_DMA+0x14>)
 80092de:	f7f9 fe3d 	bl	8002f5c <HAL_SD_ReadBlocks_DMA>
 80092e2:	b100      	cbz	r0, 80092e6 <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 80092e4:	2001      	movs	r0, #1
  }

  return sd_state;
}
 80092e6:	bd08      	pop	{r3, pc}
 80092e8:	20005c64 	.word	0x20005c64

080092ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80092ec:	b508      	push	{r3, lr}
 80092ee:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80092f0:	460a      	mov	r2, r1
 80092f2:	4601      	mov	r1, r0
 80092f4:	4802      	ldr	r0, [pc, #8]	; (8009300 <BSP_SD_WriteBlocks_DMA+0x14>)
 80092f6:	f7f9 fecb 	bl	8003090 <HAL_SD_WriteBlocks_DMA>
 80092fa:	b100      	cbz	r0, 80092fe <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 80092fc:	2001      	movs	r0, #1
  }

  return sd_state;
}
 80092fe:	bd08      	pop	{r3, pc}
 8009300:	20005c64 	.word	0x20005c64

08009304 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009304:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009306:	4803      	ldr	r0, [pc, #12]	; (8009314 <BSP_SD_GetCardState+0x10>)
 8009308:	f7fa f9be 	bl	8003688 <HAL_SD_GetCardState>
}
 800930c:	3804      	subs	r0, #4
 800930e:	bf18      	it	ne
 8009310:	2001      	movne	r0, #1
 8009312:	bd08      	pop	{r3, pc}
 8009314:	20005c64 	.word	0x20005c64

08009318 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009318:	b508      	push	{r3, lr}
 800931a:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800931c:	4801      	ldr	r0, [pc, #4]	; (8009324 <BSP_SD_GetCardInfo+0xc>)
 800931e:	f7fa f940 	bl	80035a2 <HAL_SD_GetCardInfo>
}
 8009322:	bd08      	pop	{r3, pc}
 8009324:	20005c64 	.word	0x20005c64

08009328 <BSP_SD_AbortCallback>:
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8009328:	4770      	bx	lr

0800932a <HAL_SD_AbortCallback>:
{
 800932a:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800932c:	f7ff fffc 	bl	8009328 <BSP_SD_AbortCallback>
}
 8009330:	bd08      	pop	{r3, pc}

08009332 <HAL_SD_TxCpltCallback>:
{
 8009332:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8009334:	f000 fd48 	bl	8009dc8 <BSP_SD_WriteCpltCallback>
}
 8009338:	bd08      	pop	{r3, pc}

0800933a <HAL_SD_RxCpltCallback>:
{
 800933a:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800933c:	f000 fd4e 	bl	8009ddc <BSP_SD_ReadCpltCallback>
}
 8009340:	bd08      	pop	{r3, pc}

08009342 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009342:	b500      	push	{lr}
 8009344:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8009346:	2301      	movs	r3, #1
 8009348:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800934c:	f000 f8c4 	bl	80094d8 <BSP_PlatformIsDetected>
 8009350:	b910      	cbnz	r0, 8009358 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8009352:	2300      	movs	r3, #0
 8009354:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8009358:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800935c:	b003      	add	sp, #12
 800935e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009364 <BSP_SD_Init>:
{
 8009364:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009366:	f7ff ffec 	bl	8009342 <BSP_SD_IsDetected>
 800936a:	2801      	cmp	r0, #1
 800936c:	d002      	beq.n	8009374 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 800936e:	2501      	movs	r5, #1
}
 8009370:	4628      	mov	r0, r5
 8009372:	bd38      	pop	{r3, r4, r5, pc}
 8009374:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd);
 8009376:	4807      	ldr	r0, [pc, #28]	; (8009394 <BSP_SD_Init+0x30>)
 8009378:	f7fa f8f8 	bl	800356c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800937c:	4605      	mov	r5, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	d1f6      	bne.n	8009370 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009386:	4803      	ldr	r0, [pc, #12]	; (8009394 <BSP_SD_Init+0x30>)
 8009388:	f7fa f91e 	bl	80035c8 <HAL_SD_ConfigWideBusOperation>
 800938c:	2800      	cmp	r0, #0
 800938e:	d0ef      	beq.n	8009370 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 8009390:	4625      	mov	r5, r4
 8009392:	e7ed      	b.n	8009370 <BSP_SD_Init+0xc>
 8009394:	20005c64 	.word	0x20005c64

08009398 <hcan1_rx_readPacketsTask>:

#include "can.h"
#include "stm32f4xx_hal_can.h"

void hcan1_rx_readPacketsTask( void * pvParameters )
{
 8009398:	b500      	push	{lr}
 800939a:	b08b      	sub	sp, #44	; 0x2c

    //configASSERT( ( ( uint32_t ) pvParameters ) == 1 );

    for( ;; )
    {
        if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0){
 800939c:	2100      	movs	r1, #0
 800939e:	4807      	ldr	r0, [pc, #28]	; (80093bc <hcan1_rx_readPacketsTask+0x24>)
 80093a0:	f7f8 f907 	bl	80015b2 <HAL_CAN_GetRxFifoFillLevel>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d0f9      	beq.n	800939c <hcan1_rx_readPacketsTask+0x4>
        	uint8_t r_Data[8];
        	CAN_RxHeaderTypeDef r_Header;

        	//might be FIFO1?
        	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &r_Header, r_Data);
 80093a8:	ab01      	add	r3, sp, #4
 80093aa:	aa03      	add	r2, sp, #12
 80093ac:	2100      	movs	r1, #0
 80093ae:	4803      	ldr	r0, [pc, #12]	; (80093bc <hcan1_rx_readPacketsTask+0x24>)
 80093b0:	f7f8 f85a 	bl	8001468 <HAL_CAN_GetRxMessage>

        	if(r_Header.IDE == CAN_ID_EXT){
 80093b4:	9b05      	ldr	r3, [sp, #20]
 80093b6:	2b04      	cmp	r3, #4
 80093b8:	e7f0      	b.n	800939c <hcan1_rx_readPacketsTask+0x4>
 80093ba:	bf00      	nop
 80093bc:	20003f20 	.word	0x20003f20

080093c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80093c0:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80093c2:	480b      	ldr	r0, [pc, #44]	; (80093f0 <MX_CAN1_Init+0x30>)
 80093c4:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <MX_CAN1_Init+0x34>)
 80093c6:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 80093c8:	2310      	movs	r3, #16
 80093ca:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80093cc:	2300      	movs	r3, #0
 80093ce:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80093d0:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80093d2:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80093d4:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80093d6:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80093d8:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80093da:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80093dc:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80093de:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80093e0:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80093e2:	f7f7 ff9b 	bl	800131c <HAL_CAN_Init>
 80093e6:	b900      	cbnz	r0, 80093ea <MX_CAN1_Init+0x2a>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80093e8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80093ea:	f000 f99b 	bl	8009724 <Error_Handler>
}
 80093ee:	e7fb      	b.n	80093e8 <MX_CAN1_Init+0x28>
 80093f0:	20003f20 	.word	0x20003f20
 80093f4:	40006400 	.word	0x40006400

080093f8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80093f8:	b500      	push	{lr}
 80093fa:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093fc:	2300      	movs	r3, #0
 80093fe:	9303      	str	r3, [sp, #12]
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	9305      	str	r3, [sp, #20]
 8009404:	9306      	str	r3, [sp, #24]
 8009406:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 8009408:	6802      	ldr	r2, [r0, #0]
 800940a:	4b15      	ldr	r3, [pc, #84]	; (8009460 <HAL_CAN_MspInit+0x68>)
 800940c:	429a      	cmp	r2, r3
 800940e:	d002      	beq.n	8009416 <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8009410:	b009      	add	sp, #36	; 0x24
 8009412:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009416:	2100      	movs	r1, #0
 8009418:	9101      	str	r1, [sp, #4]
 800941a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800941e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009420:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009424:	641a      	str	r2, [r3, #64]	; 0x40
 8009426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009428:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800942c:	9201      	str	r2, [sp, #4]
 800942e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009430:	9102      	str	r1, [sp, #8]
 8009432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009434:	f042 0201 	orr.w	r2, r2, #1
 8009438:	631a      	str	r2, [r3, #48]	; 0x30
 800943a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	9302      	str	r3, [sp, #8]
 8009442:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009444:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009448:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800944a:	2302      	movs	r3, #2
 800944c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800944e:	2303      	movs	r3, #3
 8009450:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8009452:	2309      	movs	r3, #9
 8009454:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009456:	a903      	add	r1, sp, #12
 8009458:	4802      	ldr	r0, [pc, #8]	; (8009464 <HAL_CAN_MspInit+0x6c>)
 800945a:	f7f8 fb33 	bl	8001ac4 <HAL_GPIO_Init>
}
 800945e:	e7d7      	b.n	8009410 <HAL_CAN_MspInit+0x18>
 8009460:	40006400 	.word	0x40006400
 8009464:	40020000 	.word	0x40020000

08009468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009468:	b510      	push	{r4, lr}
 800946a:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800946c:	2400      	movs	r4, #0
 800946e:	9401      	str	r4, [sp, #4]
 8009470:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <MX_DMA_Init+0x50>)
 8009472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009474:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009478:	631a      	str	r2, [r3, #48]	; 0x30
 800947a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8009484:	4622      	mov	r2, r4
 8009486:	2105      	movs	r1, #5
 8009488:	2038      	movs	r0, #56	; 0x38
 800948a:	f7f8 f8b7 	bl	80015fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800948e:	2038      	movs	r0, #56	; 0x38
 8009490:	f7f8 f8ec 	bl	800166c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8009494:	4622      	mov	r2, r4
 8009496:	2105      	movs	r1, #5
 8009498:	203b      	movs	r0, #59	; 0x3b
 800949a:	f7f8 f8af 	bl	80015fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800949e:	203b      	movs	r0, #59	; 0x3b
 80094a0:	f7f8 f8e4 	bl	800166c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80094a4:	4622      	mov	r2, r4
 80094a6:	2105      	movs	r1, #5
 80094a8:	2045      	movs	r0, #69	; 0x45
 80094aa:	f7f8 f8a7 	bl	80015fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80094ae:	2045      	movs	r0, #69	; 0x45
 80094b0:	f7f8 f8dc 	bl	800166c <HAL_NVIC_EnableIRQ>

}
 80094b4:	b002      	add	sp, #8
 80094b6:	bd10      	pop	{r4, pc}
 80094b8:	40023800 	.word	0x40023800

080094bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80094bc:	b510      	push	{r4, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80094be:	4c03      	ldr	r4, [pc, #12]	; (80094cc <MX_FATFS_Init+0x10>)
 80094c0:	4621      	mov	r1, r4
 80094c2:	4803      	ldr	r0, [pc, #12]	; (80094d0 <MX_FATFS_Init+0x14>)
 80094c4:	f7fd fc70 	bl	8006da8 <FATFS_LinkDriver>
 80094c8:	7120      	strb	r0, [r4, #4]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80094ca:	bd10      	pop	{r4, pc}
 80094cc:	20003f48 	.word	0x20003f48
 80094d0:	0800b828 	.word	0x0800b828

080094d4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80094d4:	2000      	movs	r0, #0
 80094d6:	4770      	bx	lr

080094d8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80094d8:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80094da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80094de:	4804      	ldr	r0, [pc, #16]	; (80094f0 <BSP_PlatformIsDetected+0x18>)
 80094e0:	f7f8 fbdc 	bl	8001c9c <HAL_GPIO_ReadPin>
 80094e4:	b908      	cbnz	r0, 80094ea <BSP_PlatformIsDetected+0x12>
    uint8_t status = SD_PRESENT;
 80094e6:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80094e8:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 80094ea:	2000      	movs	r0, #0
 80094ec:	e7fc      	b.n	80094e8 <BSP_PlatformIsDetected+0x10>
 80094ee:	bf00      	nop
 80094f0:	40020800 	.word	0x40020800

080094f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80094f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80094f6:	2001      	movs	r0, #1
 80094f8:	f7fd fd44 	bl	8006f84 <osDelay>
  for(;;)
 80094fc:	e7fb      	b.n	80094f6 <StartDefaultTask+0x2>

080094fe <configureTimerForRunTimeStats>:
}
 80094fe:	4770      	bx	lr

08009500 <getRunTimeCounterValue>:
}
 8009500:	2000      	movs	r0, #0
 8009502:	4770      	bx	lr

08009504 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009504:	4b03      	ldr	r3, [pc, #12]	; (8009514 <vApplicationGetIdleTaskMemory+0x10>)
 8009506:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009508:	33b8      	adds	r3, #184	; 0xb8
 800950a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800950c:	2380      	movs	r3, #128	; 0x80
 800950e:	6013      	str	r3, [r2, #0]
}
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	200043bc 	.word	0x200043bc

08009518 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8009518:	b510      	push	{r4, lr}
 800951a:	b088      	sub	sp, #32
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800951c:	f10d 0c04 	add.w	ip, sp, #4
 8009520:	4c08      	ldr	r4, [pc, #32]	; (8009544 <MX_FREERTOS_Init+0x2c>)
 8009522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009524:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009528:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800952c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8009530:	2100      	movs	r1, #0
 8009532:	a801      	add	r0, sp, #4
 8009534:	f7fd fcf1 	bl	8006f1a <osThreadCreate>
 8009538:	4b03      	ldr	r3, [pc, #12]	; (8009548 <MX_FREERTOS_Init+0x30>)
 800953a:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
}
 800953e:	b008      	add	sp, #32
 8009540:	bd10      	pop	{r4, pc}
 8009542:	bf00      	nop
 8009544:	0800b7f0 	.word	0x0800b7f0
 8009548:	200043bc 	.word	0x200043bc

0800954c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800954c:	b530      	push	{r4, r5, lr}
 800954e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009550:	2400      	movs	r4, #0
 8009552:	9405      	str	r4, [sp, #20]
 8009554:	9406      	str	r4, [sp, #24]
 8009556:	9407      	str	r4, [sp, #28]
 8009558:	9408      	str	r4, [sp, #32]
 800955a:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800955c:	9401      	str	r4, [sp, #4]
 800955e:	4b1f      	ldr	r3, [pc, #124]	; (80095dc <MX_GPIO_Init+0x90>)
 8009560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009562:	f042 0204 	orr.w	r2, r2, #4
 8009566:	631a      	str	r2, [r3, #48]	; 0x30
 8009568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800956a:	f002 0204 	and.w	r2, r2, #4
 800956e:	9201      	str	r2, [sp, #4]
 8009570:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009572:	9402      	str	r4, [sp, #8]
 8009574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009576:	f042 0201 	orr.w	r2, r2, #1
 800957a:	631a      	str	r2, [r3, #48]	; 0x30
 800957c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800957e:	f002 0201 	and.w	r2, r2, #1
 8009582:	9202      	str	r2, [sp, #8]
 8009584:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009586:	9403      	str	r4, [sp, #12]
 8009588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800958a:	f042 0202 	orr.w	r2, r2, #2
 800958e:	631a      	str	r2, [r3, #48]	; 0x30
 8009590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009592:	f002 0202 	and.w	r2, r2, #2
 8009596:	9203      	str	r2, [sp, #12]
 8009598:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800959a:	9404      	str	r4, [sp, #16]
 800959c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800959e:	f042 0208 	orr.w	r2, r2, #8
 80095a2:	631a      	str	r2, [r3, #48]	; 0x30
 80095a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a6:	f003 0308 	and.w	r3, r3, #8
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80095ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80095b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80095b8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80095ba:	4d09      	ldr	r5, [pc, #36]	; (80095e0 <MX_GPIO_Init+0x94>)
 80095bc:	a905      	add	r1, sp, #20
 80095be:	4628      	mov	r0, r5
 80095c0:	f7f8 fa80 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_Card_Detect_Pin;
 80095c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095ca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095cc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SD_Card_Detect_GPIO_Port, &GPIO_InitStruct);
 80095ce:	a905      	add	r1, sp, #20
 80095d0:	4628      	mov	r0, r5
 80095d2:	f7f8 fa77 	bl	8001ac4 <HAL_GPIO_Init>

}
 80095d6:	b00b      	add	sp, #44	; 0x2c
 80095d8:	bd30      	pop	{r4, r5, pc}
 80095da:	bf00      	nop
 80095dc:	40023800 	.word	0x40023800
 80095e0:	40020800 	.word	0x40020800

080095e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80095e4:	b530      	push	{r4, r5, lr}
 80095e6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80095e8:	2234      	movs	r2, #52	; 0x34
 80095ea:	2100      	movs	r1, #0
 80095ec:	a807      	add	r0, sp, #28
 80095ee:	f001 f9e1 	bl	800a9b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80095f2:	2400      	movs	r4, #0
 80095f4:	9402      	str	r4, [sp, #8]
 80095f6:	9403      	str	r4, [sp, #12]
 80095f8:	9404      	str	r4, [sp, #16]
 80095fa:	9405      	str	r4, [sp, #20]
 80095fc:	9406      	str	r4, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80095fe:	9400      	str	r4, [sp, #0]
 8009600:	4b1d      	ldr	r3, [pc, #116]	; (8009678 <SystemClock_Config+0x94>)
 8009602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
 800960a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009614:	9401      	str	r4, [sp, #4]
 8009616:	4b19      	ldr	r3, [pc, #100]	; (800967c <SystemClock_Config+0x98>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	9b01      	ldr	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800962a:	230a      	movs	r3, #10
 800962c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800962e:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009630:	2301      	movs	r3, #1
 8009632:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009634:	2210      	movs	r2, #16
 8009636:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009638:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800963a:	2502      	movs	r5, #2
 800963c:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800963e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009640:	2308      	movs	r3, #8
 8009642:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8009644:	22b4      	movs	r2, #180	; 0xb4
 8009646:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009648:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800964a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800964c:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800964e:	a807      	add	r0, sp, #28
 8009650:	f7f8 ff58 	bl	8002504 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009654:	f7f8 fb2a 	bl	8001cac <HAL_PWREx_EnableOverDrive>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009658:	230f      	movs	r3, #15
 800965a:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800965c:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800965e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009664:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800966a:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800966c:	2105      	movs	r1, #5
 800966e:	a802      	add	r0, sp, #8
 8009670:	f7f8 fb5a 	bl	8001d28 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8009674:	b015      	add	sp, #84	; 0x54
 8009676:	bd30      	pop	{r4, r5, pc}
 8009678:	40023800 	.word	0x40023800
 800967c:	40007000 	.word	0x40007000

08009680 <main>:
{
 8009680:	b500      	push	{lr}
 8009682:	b083      	sub	sp, #12
  HAL_Init();
 8009684:	f7f7 fc7a 	bl	8000f7c <HAL_Init>
  SystemClock_Config();
 8009688:	f7ff ffac 	bl	80095e4 <SystemClock_Config>
  MX_GPIO_Init();
 800968c:	f7ff ff5e 	bl	800954c <MX_GPIO_Init>
  MX_DMA_Init();
 8009690:	f7ff feea 	bl	8009468 <MX_DMA_Init>
  MX_ADC1_Init();
 8009694:	f7ff fc9e 	bl	8008fd4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8009698:	f000 ffc0 	bl	800a61c <MX_USART1_UART_Init>
  MX_CAN1_Init();
 800969c:	f7ff fe90 	bl	80093c0 <MX_CAN1_Init>
  MX_SDIO_SD_Init();
 80096a0:	f000 fba6 	bl	8009df0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80096a4:	f7ff ff0a 	bl	80094bc <MX_FATFS_Init>
  MX_RTC_Init();
 80096a8:	f000 f83e 	bl	8009728 <MX_RTC_Init>
  MX_TIM1_Init();
 80096ac:	f000 fd8c 	bl	800a1c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80096b0:	f000 fdc4 	bl	800a23c <MX_TIM2_Init>
  MX_TIM3_Init();
 80096b4:	f000 fe16 	bl	800a2e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80096b8:	f000 fe6e 	bl	800a398 <MX_TIM4_Init>
  Init_SD_Card();
 80096bc:	f000 f9c2 	bl	8009a44 <Init_SD_Card>
  HAL_TIM_Base_Start_IT(&htim1);
 80096c0:	4813      	ldr	r0, [pc, #76]	; (8009710 <main+0x90>)
 80096c2:	f7fa f9cf 	bl	8003a64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80096c6:	4e13      	ldr	r6, [pc, #76]	; (8009714 <main+0x94>)
 80096c8:	4630      	mov	r0, r6
 80096ca:	f7fa f9cb 	bl	8003a64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80096ce:	4d12      	ldr	r5, [pc, #72]	; (8009718 <main+0x98>)
 80096d0:	4628      	mov	r0, r5
 80096d2:	f7fa f9c7 	bl	8003a64 <HAL_TIM_Base_Start_IT>
  xTaskCreate(&hcan1_rx_readPacketsTask, "hcan1_rxTask", 200, ( void * ) 1, 3, NULL);
 80096d6:	2400      	movs	r4, #0
 80096d8:	9401      	str	r4, [sp, #4]
 80096da:	2303      	movs	r3, #3
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	2301      	movs	r3, #1
 80096e0:	22c8      	movs	r2, #200	; 0xc8
 80096e2:	490e      	ldr	r1, [pc, #56]	; (800971c <main+0x9c>)
 80096e4:	480e      	ldr	r0, [pc, #56]	; (8009720 <main+0xa0>)
 80096e6:	f7fe fc80 	bl	8007fea <xTaskCreate>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); 		// Start input capture
 80096ea:	4621      	mov	r1, r4
 80096ec:	4630      	mov	r0, r6
 80096ee:	f7fa fcb7 	bl	8004060 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); 		// Start input capture
 80096f2:	4621      	mov	r1, r4
 80096f4:	4628      	mov	r0, r5
 80096f6:	f7fa fcb3 	bl	8004060 <HAL_TIM_IC_Start_IT>
  MX_FREERTOS_Init();
 80096fa:	f7ff ff0d 	bl	8009518 <MX_FREERTOS_Init>
  Init_SD_RTOS_Tasks();
 80096fe:	f000 f9bf 	bl	8009a80 <Init_SD_RTOS_Tasks>
  Init_WheelSpeed_Logging_Task();					// Start the wheelspeed logging task
 8009702:	f000 ffdf 	bl	800a6c4 <Init_WheelSpeed_Logging_Task>
  MX_FREERTOS_Init();
 8009706:	f7ff ff07 	bl	8009518 <MX_FREERTOS_Init>
  osKernelStart();
 800970a:	f7fd fbee 	bl	8006eea <osKernelStart>
  while (1)
 800970e:	e7fe      	b.n	800970e <main+0x8e>
 8009710:	20005df0 	.word	0x20005df0
 8009714:	20005e38 	.word	0x20005e38
 8009718:	20005e80 	.word	0x20005e80
 800971c:	0800b8b0 	.word	0x0800b8b0
 8009720:	08009399 	.word	0x08009399

08009724 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009724:	4770      	bx	lr
	...

08009728 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8009728:	b500      	push	{lr}
 800972a:	b087      	sub	sp, #28

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800972c:	2300      	movs	r3, #0
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	9302      	str	r3, [sp, #8]
 8009732:	9303      	str	r3, [sp, #12]
 8009734:	9304      	str	r3, [sp, #16]
 8009736:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8009738:	9300      	str	r3, [sp, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800973a:	481d      	ldr	r0, [pc, #116]	; (80097b0 <MX_RTC_Init+0x88>)
 800973c:	4a1d      	ldr	r2, [pc, #116]	; (80097b4 <MX_RTC_Init+0x8c>)
 800973e:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009740:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009742:	227f      	movs	r2, #127	; 0x7f
 8009744:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8009746:	22ff      	movs	r2, #255	; 0xff
 8009748:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800974a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800974c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800974e:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009750:	f7f9 f94b 	bl	80029ea <HAL_RTC_Init>
 8009754:	bb18      	cbnz	r0, 800979e <MX_RTC_Init+0x76>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8009756:	2312      	movs	r3, #18
 8009758:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 800975c:	2300      	movs	r3, #0
 800975e:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8009762:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009766:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009768:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800976a:	2201      	movs	r2, #1
 800976c:	a901      	add	r1, sp, #4
 800976e:	4810      	ldr	r0, [pc, #64]	; (80097b0 <MX_RTC_Init+0x88>)
 8009770:	f7f9 f98d 	bl	8002a8e <HAL_RTC_SetTime>
 8009774:	b9b0      	cbnz	r0, 80097a4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8009776:	2307      	movs	r3, #7
 8009778:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_AUGUST;
 800977c:	2208      	movs	r2, #8
 800977e:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x7;
 8009782:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 0x0;
 8009786:	2300      	movs	r3, #0
 8009788:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800978c:	2201      	movs	r2, #1
 800978e:	4669      	mov	r1, sp
 8009790:	4807      	ldr	r0, [pc, #28]	; (80097b0 <MX_RTC_Init+0x88>)
 8009792:	f7f9 f9db 	bl	8002b4c <HAL_RTC_SetDate>
 8009796:	b940      	cbnz	r0, 80097aa <MX_RTC_Init+0x82>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009798:	b007      	add	sp, #28
 800979a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800979e:	f7ff ffc1 	bl	8009724 <Error_Handler>
 80097a2:	e7d8      	b.n	8009756 <MX_RTC_Init+0x2e>
    Error_Handler();
 80097a4:	f7ff ffbe 	bl	8009724 <Error_Handler>
 80097a8:	e7e5      	b.n	8009776 <MX_RTC_Init+0x4e>
    Error_Handler();
 80097aa:	f7ff ffbb 	bl	8009724 <Error_Handler>
}
 80097ae:	e7f3      	b.n	8009798 <MX_RTC_Init+0x70>
 80097b0:	20004678 	.word	0x20004678
 80097b4:	40002800 	.word	0x40002800

080097b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80097b8:	b510      	push	{r4, lr}
 80097ba:	b098      	sub	sp, #96	; 0x60
 80097bc:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80097be:	225c      	movs	r2, #92	; 0x5c
 80097c0:	2100      	movs	r1, #0
 80097c2:	a801      	add	r0, sp, #4
 80097c4:	f001 f8f6 	bl	800a9b4 <memset>
  if(rtcHandle->Instance==RTC)
 80097c8:	6822      	ldr	r2, [r4, #0]
 80097ca:	4b0b      	ldr	r3, [pc, #44]	; (80097f8 <HAL_RTC_MspInit+0x40>)
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d001      	beq.n	80097d4 <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80097d0:	b018      	add	sp, #96	; 0x60
 80097d2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80097d4:	2320      	movs	r3, #32
 80097d6:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80097d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097dc:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80097de:	a801      	add	r0, sp, #4
 80097e0:	f7f8 fb96 	bl	8001f10 <HAL_RCCEx_PeriphCLKConfig>
 80097e4:	b920      	cbnz	r0, 80097f0 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <HAL_RTC_MspInit+0x44>)
 80097e8:	2201      	movs	r2, #1
 80097ea:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
}
 80097ee:	e7ef      	b.n	80097d0 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80097f0:	f7ff ff98 	bl	8009724 <Error_Handler>
 80097f4:	e7f7      	b.n	80097e6 <HAL_RTC_MspInit+0x2e>
 80097f6:	bf00      	nop
 80097f8:	40002800 	.word	0x40002800
 80097fc:	42470000 	.word	0x42470000

08009800 <SD_Task_Read>:
//	Read from the SD card
// 	For now, will start from beginning of file and read btr num of bytes from there.
// 	Variables can be static in this function as only one instance of them should run at once within the
// 	SD_Gatekeeper task
//TODO: More extensive error checking
static _Bool SD_Task_Read(int32_t btr, char * buff, FileEnum fileNum){
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	4606      	mov	r6, r0
 8009804:	460f      	mov	r7, r1

	//can get away with static as there will only be one instance of xSD_Card_Gatekeeper running
	static FSIZE_t ofs;					//	offset from the beginning of the file
	ofs = f_tell(&fil[fileNum]);		// Get file pointer of open file
 8009806:	4d17      	ldr	r5, [pc, #92]	; (8009864 <SD_Task_Read+0x64>)
 8009808:	f44f 740c 	mov.w	r4, #560	; 0x230
 800980c:	fb04 5402 	mla	r4, r4, r2, r5
 8009810:	69a3      	ldr	r3, [r4, #24]
 8009812:	f8c5 3690 	str.w	r3, [r5, #1680]	; 0x690

	f_res = f_lseek(&fil[fileNum], 0);	// point to beginning of file
 8009816:	2100      	movs	r1, #0
 8009818:	4620      	mov	r0, r4
 800981a:	f7fd f846 	bl	80068aa <f_lseek>
 800981e:	f885 0694 	strb.w	r0, [r5, #1684]	; 0x694

	f_res = f_read(&fil[fileNum], buff, btr, &br);		// Read the desired file
 8009822:	f505 63d3 	add.w	r3, r5, #1688	; 0x698
 8009826:	4632      	mov	r2, r6
 8009828:	4639      	mov	r1, r7
 800982a:	4620      	mov	r0, r4
 800982c:	f7fc fd57 	bl	80062de <f_read>
 8009830:	f885 0694 	strb.w	r0, [r5, #1684]	; 0x694

	// If the read doesn't work
	if(f_res != FR_OK){
 8009834:	b9a0      	cbnz	r0, 8009860 <SD_Task_Read+0x60>
		return 0;
	}

	if(br < btr){
 8009836:	f8d5 3698 	ldr.w	r3, [r5, #1688]	; 0x698
 800983a:	429e      	cmp	r6, r3
 800983c:	d900      	bls.n	8009840 <SD_Task_Read+0x40>
		// Reached End of File during read
		__NOP();
 800983e:	bf00      	nop
	}//if

	f_res = f_lseek(&fil[fileNum], ofs);	// point back to where we were in the file
 8009840:	4d08      	ldr	r5, [pc, #32]	; (8009864 <SD_Task_Read+0x64>)
 8009842:	f8d5 1690 	ldr.w	r1, [r5, #1680]	; 0x690
 8009846:	4620      	mov	r0, r4
 8009848:	f7fd f82f 	bl	80068aa <f_lseek>
 800984c:	f885 0694 	strb.w	r0, [r5, #1684]	; 0x694

	f_res = f_puts("SD Logger - Read From SD Card\n\n", &fil[LogFile]);
 8009850:	4629      	mov	r1, r5
 8009852:	4805      	ldr	r0, [pc, #20]	; (8009868 <SD_Task_Read+0x68>)
 8009854:	f7fd fa6b 	bl	8006d2e <f_puts>
 8009858:	f885 0694 	strb.w	r0, [r5, #1684]	; 0x694

	return 1;
 800985c:	2001      	movs	r0, #1

}// SD Task Read
 800985e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 8009860:	2000      	movs	r0, #0
 8009862:	e7fc      	b.n	800985e <SD_Task_Read+0x5e>
 8009864:	20004698 	.word	0x20004698
 8009868:	0800b8c0 	.word	0x0800b8c0

0800986c <SD_Task_Write>:
//	Write a string to the current log file
//	Should only be called by the SD_Card_Gatekeeper
// int32_t btw (bytes to write)
// char * str (string we are logging)
// FileEnum fileNum (file number)
static _Bool SD_Task_Write(int32_t btw, char * str, FileEnum fileNum){
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	460e      	mov	r6, r1
 8009870:	4614      	mov	r4, r2

	static uint32_t len;			// length of string

	if(btw == -1)
 8009872:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009876:	d008      	beq.n	800988a <SD_Task_Write+0x1e>
		len = strlen(str);			// Dont need this feature but eh
	else
		len = btw;
 8009878:	4b16      	ldr	r3, [pc, #88]	; (80098d4 <SD_Task_Write+0x68>)
 800987a:	f8c3 069c 	str.w	r0, [r3, #1692]	; 0x69c

	// Writing brokey
	if(f_res != FR_OK){
 800987e:	4b15      	ldr	r3, [pc, #84]	; (80098d4 <SD_Task_Write+0x68>)
 8009880:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8009884:	b143      	cbz	r3, 8009898 <SD_Task_Write+0x2c>
		return 0;
 8009886:	2000      	movs	r0, #0
	// Writing brokey
	if(f_res != FR_OK){
		return 0;
	}
	return 1;
}// SD_Task_Write
 8009888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = strlen(str);			// Dont need this feature but eh
 800988a:	4608      	mov	r0, r1
 800988c:	f7f6 fcc0 	bl	8000210 <strlen>
 8009890:	4b10      	ldr	r3, [pc, #64]	; (80098d4 <SD_Task_Write+0x68>)
 8009892:	f8c3 069c 	str.w	r0, [r3, #1692]	; 0x69c
 8009896:	e7f2      	b.n	800987e <SD_Task_Write+0x12>
	f_res = f_write(&fil[fileNum], str, len, &bw);							// Write to SD buffer
 8009898:	4d0e      	ldr	r5, [pc, #56]	; (80098d4 <SD_Task_Write+0x68>)
 800989a:	f44f 720c 	mov.w	r2, #560	; 0x230
 800989e:	fb02 5404 	mla	r4, r2, r4, r5
 80098a2:	f505 67d4 	add.w	r7, r5, #1696	; 0x6a0
 80098a6:	463b      	mov	r3, r7
 80098a8:	f8d5 269c 	ldr.w	r2, [r5, #1692]	; 0x69c
 80098ac:	4631      	mov	r1, r6
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7fc fe01 	bl	80064b6 <f_write>
 80098b4:	f885 0694 	strb.w	r0, [r5, #1684]	; 0x694
	f_res = f_write(&fil[fileNum], newLine, SD_LOG_MSG_SPACING, &bw);		// write to SD buffer
 80098b8:	463b      	mov	r3, r7
 80098ba:	2204      	movs	r2, #4
 80098bc:	4906      	ldr	r1, [pc, #24]	; (80098d8 <SD_Task_Write+0x6c>)
 80098be:	4620      	mov	r0, r4
 80098c0:	f7fc fdf9 	bl	80064b6 <f_write>
 80098c4:	f885 0694 	strb.w	r0, [r5, #1684]	; 0x694
	if(f_res != FR_OK){
 80098c8:	b908      	cbnz	r0, 80098ce <SD_Task_Write+0x62>
	return 1;
 80098ca:	2001      	movs	r0, #1
 80098cc:	e7dc      	b.n	8009888 <SD_Task_Write+0x1c>
		return 0;
 80098ce:	2000      	movs	r0, #0
 80098d0:	e7da      	b.n	8009888 <SD_Task_Write+0x1c>
 80098d2:	bf00      	nop
 80098d4:	20004698 	.word	0x20004698
 80098d8:	0800b80c 	.word	0x0800b80c

080098dc <xSD_Card_Gatekeeper>:


//	Reads and Writes to the SD card upon request of other RTOS tasks.
// 	This Task should have a higher priority within RTOS
// 	than sender Tasks which report to this task through its Queue: xSD_Card_Queue
void xSD_Card_Gatekeeper(void* pvParameters){
 80098dc:	b538      	push	{r3, r4, r5, lr}

	static BaseType_t xStatus;					// storage for RTOS function returns
	static SD_Request sd_req;					// request being sent to SD gatekeeper


	f_res = f_mount(&fs, "", 1);		// mount the SD card's default drive immediately
 80098de:	4c43      	ldr	r4, [pc, #268]	; (80099ec <xSD_Card_Gatekeeper+0x110>)
 80098e0:	2201      	movs	r2, #1
 80098e2:	4943      	ldr	r1, [pc, #268]	; (80099f0 <xSD_Card_Gatekeeper+0x114>)
 80098e4:	f204 60a4 	addw	r0, r4, #1700	; 0x6a4
 80098e8:	f7fc fb9a 	bl	8006020 <f_mount>
 80098ec:	f884 0694 	strb.w	r0, [r4, #1684]	; 0x694

	if(f_res != FR_OK){
 80098f0:	b100      	cbz	r0, 80098f4 <xSD_Card_Gatekeeper+0x18>
		__NOP();	//debug
 80098f2:	bf00      	nop
		//Send message to Queue of Error Handler ()		//TODO: RTOS Error Handler
	}//if mounted

	f_res = f_mkdir(LOG_DIR_NAME);		// Make the directory if it hasn't been made
 80098f4:	4d3f      	ldr	r5, [pc, #252]	; (80099f4 <xSD_Card_Gatekeeper+0x118>)
 80098f6:	4628      	mov	r0, r5
 80098f8:	f7fd f957 	bl	8006baa <f_mkdir>
 80098fc:	4c3b      	ldr	r4, [pc, #236]	; (80099ec <xSD_Card_Gatekeeper+0x110>)
 80098fe:	f884 0694 	strb.w	r0, [r4, #1684]	; 0x694
	f_res = f_chdir(LOG_DIR_NAME);		// open the logs directory
 8009902:	4628      	mov	r0, r5
 8009904:	f7fc ff9b 	bl	800683e <f_chdir>
 8009908:	f884 0694 	strb.w	r0, [r4, #1684]	; 0x694

	f_res = f_open(&fil[LogFile], LOG_FILE_NAME, FA_READ | FA_WRITE | FA_OPEN_APPEND);
 800990c:	2233      	movs	r2, #51	; 0x33
 800990e:	493a      	ldr	r1, [pc, #232]	; (80099f8 <xSD_Card_Gatekeeper+0x11c>)
 8009910:	4620      	mov	r0, r4
 8009912:	f7fc fbc9 	bl	80060a8 <f_open>
 8009916:	f884 0694 	strb.w	r0, [r4, #1684]	; 0x694
	f_res = f_sync(&fil[LogFile]);		// sync so we dont lose the opened file
 800991a:	4620      	mov	r0, r4
 800991c:	f7fc ff1a 	bl	8006754 <f_sync>
 8009920:	f884 0694 	strb.w	r0, [r4, #1684]	; 0x694
 8009924:	e00c      	b.n	8009940 <xSD_Card_Gatekeeper+0x64>
			// Trace which task beat this task's priority?
			__NOP();
		}//if

		// Wait for new request to be sent to the Queue
		xStatus = xQueueReceive(xSD_Card_Queue, &sd_req, portMAX_DELAY);	//TODO: Make this timeout and check for errors (We should be constantly logging from BMS)
 8009926:	4c31      	ldr	r4, [pc, #196]	; (80099ec <xSD_Card_Gatekeeper+0x110>)
 8009928:	f04f 32ff 	mov.w	r2, #4294967295
 800992c:	f604 01e4 	addw	r1, r4, #2276	; 0x8e4
 8009930:	f8d4 08e0 	ldr.w	r0, [r4, #2272]	; 0x8e0
 8009934:	f7fd ff74 	bl	8007820 <xQueueReceive>
 8009938:	f8c4 08f0 	str.w	r0, [r4, #2288]	; 0x8f0

		// If data received within time frame (if we decide to have a wait time)
		if(xStatus == pdTRUE){
 800993c:	2801      	cmp	r0, #1
 800993e:	d008      	beq.n	8009952 <xSD_Card_Gatekeeper+0x76>
		if( uxQueueMessagesWaiting(xSD_Card_Queue) != 0 )
 8009940:	4b2a      	ldr	r3, [pc, #168]	; (80099ec <xSD_Card_Gatekeeper+0x110>)
 8009942:	f8d3 08e0 	ldr.w	r0, [r3, #2272]	; 0x8e0
 8009946:	f7fe f941 	bl	8007bcc <uxQueueMessagesWaiting>
 800994a:	2800      	cmp	r0, #0
 800994c:	d0eb      	beq.n	8009926 <xSD_Card_Gatekeeper+0x4a>
			__NOP();
 800994e:	bf00      	nop
 8009950:	e7e9      	b.n	8009926 <xSD_Card_Gatekeeper+0x4a>

			switch (sd_req.type) {
 8009952:	f894 38e4 	ldrb.w	r3, [r4, #2276]	; 0x8e4
 8009956:	2b03      	cmp	r3, #3
 8009958:	d8f2      	bhi.n	8009940 <xSD_Card_Gatekeeper+0x64>
 800995a:	e8df f003 	tbb	[pc, r3]
 800995e:	1302      	.short	0x1302
 8009960:	3024      	.short	0x3024
				case Read:
					SD_Task_Read(sd_req.size, sd_req.buff, sd_req.fileName);
 8009962:	4c22      	ldr	r4, [pc, #136]	; (80099ec <xSD_Card_Gatekeeper+0x110>)
 8009964:	f894 28e5 	ldrb.w	r2, [r4, #2277]	; 0x8e5
 8009968:	f8d4 18ec 	ldr.w	r1, [r4, #2284]	; 0x8ec
 800996c:	f8d4 08e8 	ldr.w	r0, [r4, #2280]	; 0x8e8
 8009970:	f7ff ff46 	bl	8009800 <SD_Task_Read>
					//Let the SD Sync task know that it can request a sync now during downtime
					xTaskNotifyGive(xSD_Card_Sync_Handle);
 8009974:	2300      	movs	r3, #0
 8009976:	2202      	movs	r2, #2
 8009978:	4619      	mov	r1, r3
 800997a:	f8d4 08f4 	ldr.w	r0, [r4, #2292]	; 0x8f4
 800997e:	f7fe ffe9 	bl	8008954 <xTaskGenericNotify>
					break;
 8009982:	e7dd      	b.n	8009940 <xSD_Card_Gatekeeper+0x64>
				case Write:
					SD_Task_Write(sd_req.size, sd_req.buff, sd_req.fileName);
 8009984:	4c19      	ldr	r4, [pc, #100]	; (80099ec <xSD_Card_Gatekeeper+0x110>)
 8009986:	f894 28e5 	ldrb.w	r2, [r4, #2277]	; 0x8e5
 800998a:	f8d4 18ec 	ldr.w	r1, [r4, #2284]	; 0x8ec
 800998e:	f8d4 08e8 	ldr.w	r0, [r4, #2280]	; 0x8e8
 8009992:	f7ff ff6b 	bl	800986c <SD_Task_Write>
					//Let the SD Sync task know that it can request a sync now during downtime
					xTaskNotifyGive(xSD_Card_Sync_Handle);
 8009996:	2300      	movs	r3, #0
 8009998:	2202      	movs	r2, #2
 800999a:	4619      	mov	r1, r3
 800999c:	f8d4 08f4 	ldr.w	r0, [r4, #2292]	; 0x8f4
 80099a0:	f7fe ffd8 	bl	8008954 <xTaskGenericNotify>
					break;
 80099a4:	e7cc      	b.n	8009940 <xSD_Card_Gatekeeper+0x64>
			switch (sd_req.type) {
 80099a6:	2400      	movs	r4, #0
				case Sync:
					//Sync all files
					for(int i=0; i<FS_MAX_CONCURRENT_FILES; i++){
 80099a8:	2c02      	cmp	r4, #2
 80099aa:	dcc9      	bgt.n	8009940 <xSD_Card_Gatekeeper+0x64>
						f_sync(&fil[i]);
 80099ac:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <xSD_Card_Gatekeeper+0x110>)
 80099ae:	f44f 700c 	mov.w	r0, #560	; 0x230
 80099b2:	fb00 3004 	mla	r0, r0, r4, r3
 80099b6:	f7fc fecd 	bl	8006754 <f_sync>
					for(int i=0; i<FS_MAX_CONCURRENT_FILES; i++){
 80099ba:	3401      	adds	r4, #1
 80099bc:	e7f4      	b.n	80099a8 <xSD_Card_Gatekeeper+0xcc>
			switch (sd_req.type) {
 80099be:	2400      	movs	r4, #0
					}
					break;
				case Eject:
					//Close all files
					for(int i=0; i<FS_MAX_CONCURRENT_FILES; i++){
 80099c0:	2c02      	cmp	r4, #2
 80099c2:	dc08      	bgt.n	80099d6 <xSD_Card_Gatekeeper+0xfa>
						f_close(&fil[i]);
 80099c4:	4b09      	ldr	r3, [pc, #36]	; (80099ec <xSD_Card_Gatekeeper+0x110>)
 80099c6:	f44f 700c 	mov.w	r0, #560	; 0x230
 80099ca:	fb00 3004 	mla	r0, r0, r4, r3
 80099ce:	f7fc ff19 	bl	8006804 <f_close>
					for(int i=0; i<FS_MAX_CONCURRENT_FILES; i++){
 80099d2:	3401      	adds	r4, #1
 80099d4:	e7f4      	b.n	80099c0 <xSD_Card_Gatekeeper+0xe4>
					}
					f_mount(0,"",0);	//unmount the fs
 80099d6:	2200      	movs	r2, #0
 80099d8:	4905      	ldr	r1, [pc, #20]	; (80099f0 <xSD_Card_Gatekeeper+0x114>)
 80099da:	4610      	mov	r0, r2
 80099dc:	f7fc fb20 	bl	8006020 <f_mount>
					vTaskSuspend(xSD_Card_Gatekeeper_Handle);	// Suspend this task
 80099e0:	4b02      	ldr	r3, [pc, #8]	; (80099ec <xSD_Card_Gatekeeper+0x110>)
 80099e2:	f8d3 08f8 	ldr.w	r0, [r3, #2296]	; 0x8f8
 80099e6:	f7fe fd17 	bl	8008418 <vTaskSuspend>
					break;
 80099ea:	e7a9      	b.n	8009940 <xSD_Card_Gatekeeper+0x64>
 80099ec:	20004698 	.word	0x20004698
 80099f0:	0800b91c 	.word	0x0800b91c
 80099f4:	0800b810 	.word	0x0800b810
 80099f8:	2000000c 	.word	0x2000000c

080099fc <xSD_Sync>:



// Low priority Task which will call the Gate-keeper to sync the write buffer to the sd card
// TODO: Add Error Handling
void xSD_Sync(void * pvparameters){
 80099fc:	b510      	push	{r4, lr}
	static BaseType_t ret;			// ret
	static SD_Request syncRequest;		// Request Struct

	uint32_t MS_WAIT = pdMS_TO_TICKS(SD_SYNC_ERROR_CHECK_TIMEOUT);		//	MS to wait for notification

	syncRequest.type = Sync;	// Sync
 80099fe:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <xSD_Sync+0x44>)
 8009a00:	2202      	movs	r2, #2
 8009a02:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 8009a06:	e003      	b.n	8009a10 <xSD_Sync+0x14>

		}// if task was notified

		else{
			//Check for errors, did gatekeeper fail?
			__NOP();
 8009a08:	bf00      	nop
		}

		vTaskDelay(MS_WAIT);	//Delay this much at least to sync again.
 8009a0a:	2064      	movs	r0, #100	; 0x64
 8009a0c:	f7fe fc7e 	bl	800830c <vTaskDelay>
		ret = ulTaskNotifyTake(pdTRUE, MS_WAIT);		// enter blocked state and wait for a write
 8009a10:	2164      	movs	r1, #100	; 0x64
 8009a12:	2001      	movs	r0, #1
 8009a14:	f7fe ff58 	bl	80088c8 <ulTaskNotifyTake>
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <xSD_Sync+0x44>)
 8009a1a:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
		if(ret == pdTRUE){
 8009a1e:	2801      	cmp	r0, #1
 8009a20:	d1f2      	bne.n	8009a08 <xSD_Sync+0xc>
			ret = xQueueSendToBack(xSD_Card_Queue, &syncRequest, 0);	//Queue should never have more than one value in it thus wait = 0
 8009a22:	461c      	mov	r4, r3
 8009a24:	2300      	movs	r3, #0
 8009a26:	461a      	mov	r2, r3
 8009a28:	f604 01fc 	addw	r1, r4, #2300	; 0x8fc
 8009a2c:	f8d4 08e0 	ldr.w	r0, [r4, #2272]	; 0x8e0
 8009a30:	f7fd fd72 	bl	8007518 <xQueueGenericSend>
 8009a34:	f8c4 0908 	str.w	r0, [r4, #2312]	; 0x908
			if(ret != pdPASS){
 8009a38:	2801      	cmp	r0, #1
 8009a3a:	d0e6      	beq.n	8009a0a <xSD_Sync+0xe>
				__NOP();
 8009a3c:	bf00      	nop
 8009a3e:	e7e4      	b.n	8009a0a <xSD_Sync+0xe>
 8009a40:	20004698 	.word	0x20004698

08009a44 <Init_SD_Card>:
void Init_SD_Card(){
 8009a44:	b510      	push	{r4, lr}
 8009a46:	b082      	sub	sp, #8
	xSD_Card_Queue = xQueueCreateStatic(SD_QUEUE_LEN,
 8009a48:	4c0c      	ldr	r4, [pc, #48]	; (8009a7c <Init_SD_Card+0x38>)
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	f604 130c 	addw	r3, r4, #2316	; 0x90c
 8009a52:	f604 1254 	addw	r2, r4, #2388	; 0x954
 8009a56:	210c      	movs	r1, #12
 8009a58:	2006      	movs	r0, #6
 8009a5a:	f7fd fcef 	bl	800743c <xQueueGenericCreateStatic>
 8009a5e:	f8c4 08e0 	str.w	r0, [r4, #2272]	; 0x8e0
	configASSERT(xSD_Card_Queue);	// xSD_Card_Queue_Storage was not NULL so xQueue should not be NULL.
 8009a62:	b108      	cbz	r0, 8009a68 <Init_SD_Card+0x24>
}// Init_SD_Card
 8009a64:	b002      	add	sp, #8
 8009a66:	bd10      	pop	{r4, pc}
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
	configASSERT(xSD_Card_Queue);	// xSD_Card_Queue_Storage was not NULL so xQueue should not be NULL.
 8009a78:	e7fe      	b.n	8009a78 <Init_SD_Card+0x34>
 8009a7a:	bf00      	nop
 8009a7c:	20004698 	.word	0x20004698

08009a80 <Init_SD_RTOS_Tasks>:
void Init_SD_RTOS_Tasks(){
 8009a80:	b510      	push	{r4, lr}
 8009a82:	b084      	sub	sp, #16
	 xSD_Card_Gatekeeper_Handle = xTaskCreateStatic(	xSD_Card_Gatekeeper,
 8009a84:	4c1a      	ldr	r4, [pc, #104]	; (8009af0 <Init_SD_RTOS_Tasks+0x70>)
 8009a86:	f604 139c 	addw	r3, r4, #2460	; 0x99c
 8009a8a:	9302      	str	r3, [sp, #8]
 8009a8c:	f604 2354 	addw	r3, r4, #2644	; 0xa54
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	2303      	movs	r3, #3
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	2300      	movs	r3, #0
 8009a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a9c:	4915      	ldr	r1, [pc, #84]	; (8009af4 <Init_SD_RTOS_Tasks+0x74>)
 8009a9e:	4816      	ldr	r0, [pc, #88]	; (8009af8 <Init_SD_RTOS_Tasks+0x78>)
 8009aa0:	f7fe fa68 	bl	8007f74 <xTaskCreateStatic>
 8009aa4:	f8c4 08f8 	str.w	r0, [r4, #2296]	; 0x8f8
	xSD_Card_Sync_Handle = xTaskCreateStatic(	xSD_Sync,
 8009aa8:	f604 6354 	addw	r3, r4, #3668	; 0xe54
 8009aac:	9302      	str	r3, [sp, #8]
 8009aae:	f604 730c 	addw	r3, r4, #3852	; 0xf0c
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	f06f 0301 	mvn.w	r3, #1
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	2300      	movs	r3, #0
 8009abc:	2280      	movs	r2, #128	; 0x80
 8009abe:	490f      	ldr	r1, [pc, #60]	; (8009afc <Init_SD_RTOS_Tasks+0x7c>)
 8009ac0:	480f      	ldr	r0, [pc, #60]	; (8009b00 <Init_SD_RTOS_Tasks+0x80>)
 8009ac2:	f7fe fa57 	bl	8007f74 <xTaskCreateStatic>
 8009ac6:	f8c4 08f4 	str.w	r0, [r4, #2292]	; 0x8f4
	xSD_Card_Test_Handle = xTaskCreateStatic(	xTest_Sender_Task,
 8009aca:	4c0e      	ldr	r4, [pc, #56]	; (8009b04 <Init_SD_RTOS_Tasks+0x84>)
 8009acc:	f104 0314 	add.w	r3, r4, #20
 8009ad0:	9302      	str	r3, [sp, #8]
 8009ad2:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
 8009ad6:	9301      	str	r3, [sp, #4]
 8009ad8:	2300      	movs	r3, #0
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ae0:	4909      	ldr	r1, [pc, #36]	; (8009b08 <Init_SD_RTOS_Tasks+0x88>)
 8009ae2:	480a      	ldr	r0, [pc, #40]	; (8009b0c <Init_SD_RTOS_Tasks+0x8c>)
 8009ae4:	f7fe fa46 	bl	8007f74 <xTaskCreateStatic>
 8009ae8:	f8c4 04cc 	str.w	r0, [r4, #1228]	; 0x4cc
}//init RTOS tasks
 8009aec:	b004      	add	sp, #16
 8009aee:	bd10      	pop	{r4, pc}
 8009af0:	20004698 	.word	0x20004698
 8009af4:	0800b8e0 	.word	0x0800b8e0
 8009af8:	080098dd 	.word	0x080098dd
 8009afc:	0800b8f0 	.word	0x0800b8f0
 8009b00:	080099fd 	.word	0x080099fd
 8009b04:	20005790 	.word	0x20005790
 8009b08:	0800b8f8 	.word	0x0800b8f8
 8009b0c:	08009b45 	.word	0x08009b45

08009b10 <SD_Log>:
_Bool SD_Log(char * msg, int32_t bytesToWrite){
 8009b10:	b500      	push	{lr}
 8009b12:	b085      	sub	sp, #20
	request.type = Write;
 8009b14:	2301      	movs	r3, #1
 8009b16:	f88d 3004 	strb.w	r3, [sp, #4]
	request.buff = msg;
 8009b1a:	9003      	str	r0, [sp, #12]
	request.fileName = LogFile;
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f88d 2005 	strb.w	r2, [sp, #5]
	request.size = bytesToWrite;
 8009b22:	9102      	str	r1, [sp, #8]
	ret = xQueueSendToBack(xSD_Card_Queue, &request, 0);	//Queue should never have more than one value in it thus wait = 0
 8009b24:	4613      	mov	r3, r2
 8009b26:	a901      	add	r1, sp, #4
 8009b28:	4805      	ldr	r0, [pc, #20]	; (8009b40 <SD_Log+0x30>)
 8009b2a:	f8d0 08e0 	ldr.w	r0, [r0, #2272]	; 0x8e0
 8009b2e:	f7fd fcf3 	bl	8007518 <xQueueGenericSend>
	if(ret != pdPASS){
 8009b32:	2801      	cmp	r0, #1
 8009b34:	d000      	beq.n	8009b38 <SD_Log+0x28>
		return 0;
 8009b36:	2000      	movs	r0, #0
}//SD_ Log
 8009b38:	b005      	add	sp, #20
 8009b3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b3e:	bf00      	nop
 8009b40:	20004698 	.word	0x20004698

08009b44 <xTest_Sender_Task>:
}
*/


//Test
void xTest_Sender_Task(void * pvParameters){
 8009b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b48:	b0a9      	sub	sp, #164	; 0xa4
	uint32_t MS_WAIT = pdMS_TO_TICKS(1000);
	RTC_TimeTypeDef timeStruct;

	char rtcTimeBuff[128];			// Buffer for a rtc time string

	int i = 0;
 8009b4a:	2400      	movs	r4, #0
 8009b4c:	e02e      	b.n	8009bac <xTest_Sender_Task+0x68>
		if(i> 1000){
			//gotQueued = SD_Eject();			// Read from the log file
		}
		else{

			HAL_RTC_GetTime(&hrtc, &timeStruct, RTC_FORMAT_BCD);			// Get the time of the recording
 8009b4e:	2201      	movs	r2, #1
 8009b50:	a923      	add	r1, sp, #140	; 0x8c
 8009b52:	4818      	ldr	r0, [pc, #96]	; (8009bb4 <xTest_Sender_Task+0x70>)
 8009b54:	f7f9 f851 	bl	8002bfa <HAL_RTC_GetTime>

			sprintf(rtcTimeBuff, "Time: %2d:%2d:%2.7lf	-> ", timeStruct.Hours, timeStruct.Minutes, timeStruct.Seconds+(double)1/timeStruct.SubSeconds);
 8009b58:	f89d 508c 	ldrb.w	r5, [sp, #140]	; 0x8c
 8009b5c:	f89d 808d 	ldrb.w	r8, [sp, #141]	; 0x8d
 8009b60:	f89d 908e 	ldrb.w	r9, [sp, #142]	; 0x8e
 8009b64:	9824      	ldr	r0, [sp, #144]	; 0x90
 8009b66:	f7f6 fced 	bl	8000544 <__aeabi_ui2d>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	2000      	movs	r0, #0
 8009b70:	4911      	ldr	r1, [pc, #68]	; (8009bb8 <xTest_Sender_Task+0x74>)
 8009b72:	f7f6 fe8b 	bl	800088c <__aeabi_ddiv>
 8009b76:	4606      	mov	r6, r0
 8009b78:	460f      	mov	r7, r1
 8009b7a:	4648      	mov	r0, r9
 8009b7c:	f7f6 fcf2 	bl	8000564 <__aeabi_i2d>
 8009b80:	4632      	mov	r2, r6
 8009b82:	463b      	mov	r3, r7
 8009b84:	f7f6 fba2 	bl	80002cc <__adddf3>
 8009b88:	e9cd 0100 	strd	r0, r1, [sp]
 8009b8c:	4643      	mov	r3, r8
 8009b8e:	462a      	mov	r2, r5
 8009b90:	490a      	ldr	r1, [pc, #40]	; (8009bbc <xTest_Sender_Task+0x78>)
 8009b92:	a803      	add	r0, sp, #12
 8009b94:	f001 f824 	bl	800abe0 <siprintf>

			gotQueued = SD_Log(rtcTimeBuff, -1);
 8009b98:	f04f 31ff 	mov.w	r1, #4294967295
 8009b9c:	a803      	add	r0, sp, #12
 8009b9e:	f7ff ffb7 	bl	8009b10 <SD_Log>
			i++;
 8009ba2:	3401      	adds	r4, #1
		}


		vTaskDelay(MS_WAIT);	// delay a second
 8009ba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ba8:	f7fe fbb0 	bl	800830c <vTaskDelay>
		if(i> 1000){
 8009bac:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8009bb0:	dcf8      	bgt.n	8009ba4 <xTest_Sender_Task+0x60>
 8009bb2:	e7cc      	b.n	8009b4e <xTest_Sender_Task+0xa>
 8009bb4:	20004678 	.word	0x20004678
 8009bb8:	3ff00000 	.word	0x3ff00000
 8009bbc:	0800b904 	.word	0x0800b904

08009bc0 <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009bc0:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8009bc2:	4b07      	ldr	r3, [pc, #28]	; (8009be0 <SD_CheckStatus+0x20>)
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009bc8:	f7ff fb9c 	bl	8009304 <BSP_SD_GetCardState>
 8009bcc:	b920      	cbnz	r0, 8009bd8 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8009bce:	4a04      	ldr	r2, [pc, #16]	; (8009be0 <SD_CheckStatus+0x20>)
 8009bd0:	7813      	ldrb	r3, [r2, #0]
 8009bd2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009bd6:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8009bd8:	4b01      	ldr	r3, [pc, #4]	; (8009be0 <SD_CheckStatus+0x20>)
 8009bda:	7818      	ldrb	r0, [r3, #0]
}
 8009bdc:	bd08      	pop	{r3, pc}
 8009bde:	bf00      	nop
 8009be0:	20000019 	.word	0x20000019

08009be4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009be4:	b510      	push	{r4, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8009bea:	4b18      	ldr	r3, [pc, #96]	; (8009c4c <SD_initialize+0x68>)
 8009bec:	2201      	movs	r2, #1
 8009bee:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8009bf0:	f7fd f980 	bl	8006ef4 <osKernelRunning>
 8009bf4:	b918      	cbnz	r0, 8009bfe <SD_initialize+0x1a>
        Stat |= STA_NOINIT;
      }
    }
  }

  return Stat;
 8009bf6:	4b15      	ldr	r3, [pc, #84]	; (8009c4c <SD_initialize+0x68>)
 8009bf8:	7818      	ldrb	r0, [r3, #0]
}
 8009bfa:	b004      	add	sp, #16
 8009bfc:	bd10      	pop	{r4, pc}
    if(BSP_SD_Init() == MSD_OK)
 8009bfe:	f7ff fbb1 	bl	8009364 <BSP_SD_Init>
 8009c02:	b188      	cbz	r0, 8009c28 <SD_initialize+0x44>
    if (Stat != STA_NOINIT)
 8009c04:	4b11      	ldr	r3, [pc, #68]	; (8009c4c <SD_initialize+0x68>)
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d0f3      	beq.n	8009bf6 <SD_initialize+0x12>
      if (SDQueueID == NULL)
 8009c0e:	4b10      	ldr	r3, [pc, #64]	; (8009c50 <SD_initialize+0x6c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	b17b      	cbz	r3, 8009c34 <SD_initialize+0x50>
      if (SDQueueID == NULL)
 8009c14:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <SD_initialize+0x6c>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1ec      	bne.n	8009bf6 <SD_initialize+0x12>
        Stat |= STA_NOINIT;
 8009c1c:	4a0b      	ldr	r2, [pc, #44]	; (8009c4c <SD_initialize+0x68>)
 8009c1e:	7813      	ldrb	r3, [r2, #0]
 8009c20:	f043 0301 	orr.w	r3, r3, #1
 8009c24:	7013      	strb	r3, [r2, #0]
 8009c26:	e7e6      	b.n	8009bf6 <SD_initialize+0x12>
      Stat = SD_CheckStatus(lun);
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f7ff ffc9 	bl	8009bc0 <SD_CheckStatus>
 8009c2e:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <SD_initialize+0x68>)
 8009c30:	7018      	strb	r0, [r3, #0]
 8009c32:	e7e7      	b.n	8009c04 <SD_initialize+0x20>
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8009c34:	4b07      	ldr	r3, [pc, #28]	; (8009c54 <SD_initialize+0x70>)
 8009c36:	466c      	mov	r4, sp
 8009c38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009c3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8009c3e:	2100      	movs	r1, #0
 8009c40:	4620      	mov	r0, r4
 8009c42:	f7fd fa32 	bl	80070aa <osMessageCreate>
 8009c46:	4b02      	ldr	r3, [pc, #8]	; (8009c50 <SD_initialize+0x6c>)
 8009c48:	6018      	str	r0, [r3, #0]
 8009c4a:	e7e3      	b.n	8009c14 <SD_initialize+0x30>
 8009c4c:	20000019 	.word	0x20000019
 8009c50:	20005c60 	.word	0x20005c60
 8009c54:	0800b818 	.word	0x0800b818

08009c58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009c58:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8009c5a:	f7ff ffb1 	bl	8009bc0 <SD_CheckStatus>
}
 8009c5e:	bd08      	pop	{r3, pc}

08009c60 <SD_CheckStatusWithTimeout>:
{
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4605      	mov	r5, r0
  timer = osKernelSysTick();
 8009c64:	f7fd f94f 	bl	8006f06 <osKernelSysTick>
 8009c68:	4604      	mov	r4, r0
  while( osKernelSysTick() - timer < timeout)
 8009c6a:	f7fd f94c 	bl	8006f06 <osKernelSysTick>
 8009c6e:	1b00      	subs	r0, r0, r4
 8009c70:	42a8      	cmp	r0, r5
 8009c72:	d205      	bcs.n	8009c80 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009c74:	f7ff fb46 	bl	8009304 <BSP_SD_GetCardState>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d1f6      	bne.n	8009c6a <SD_CheckStatusWithTimeout+0xa>
      return 0;
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e001      	b.n	8009c84 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009c84:	bd38      	pop	{r3, r4, r5, pc}
	...

08009c88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	4615      	mov	r5, r2
 8009c90:	461e      	mov	r6, r3
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009c92:	f247 5030 	movw	r0, #30000	; 0x7530
 8009c96:	f7ff ffe3 	bl	8009c60 <SD_CheckStatusWithTimeout>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	db29      	blt.n	8009cf2 <SD_read+0x6a>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009c9e:	4632      	mov	r2, r6
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f7ff fb16 	bl	80092d4 <BSP_SD_ReadBlocks_DMA>

    if (ret == MSD_OK) {
 8009ca8:	b108      	cbz	r0, 8009cae <SD_read+0x26>
  DRESULT res = RES_ERROR;
 8009caa:	2001      	movs	r0, #1
 8009cac:	e022      	b.n	8009cf4 <SD_read+0x6c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009cae:	f247 5230 	movw	r2, #30000	; 0x7530
 8009cb2:	4b11      	ldr	r3, [pc, #68]	; (8009cf8 <SD_read+0x70>)
 8009cb4:	6819      	ldr	r1, [r3, #0]
 8009cb6:	a801      	add	r0, sp, #4
 8009cb8:	f7fd fa3f 	bl	800713a <osMessageGet>

    if (event.status == osEventMessage)
 8009cbc:	9b01      	ldr	r3, [sp, #4]
 8009cbe:	2b10      	cmp	r3, #16
 8009cc0:	d001      	beq.n	8009cc6 <SD_read+0x3e>
  DRESULT res = RES_ERROR;
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	e016      	b.n	8009cf4 <SD_read+0x6c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8009cc6:	9b02      	ldr	r3, [sp, #8]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d001      	beq.n	8009cd0 <SD_read+0x48>
  DRESULT res = RES_ERROR;
 8009ccc:	2001      	movs	r0, #1
 8009cce:	e011      	b.n	8009cf4 <SD_read+0x6c>
      {
        timer = osKernelSysTick();
 8009cd0:	f7fd f919 	bl	8006f06 <osKernelSysTick>
 8009cd4:	4604      	mov	r4, r0
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8009cd6:	f7fd f916 	bl	8006f06 <osKernelSysTick>
 8009cda:	1b00      	subs	r0, r0, r4
 8009cdc:	f247 532f 	movw	r3, #29999	; 0x752f
 8009ce0:	4298      	cmp	r0, r3
 8009ce2:	d804      	bhi.n	8009cee <SD_read+0x66>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009ce4:	f7ff fb0e 	bl	8009304 <BSP_SD_GetCardState>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d1f4      	bne.n	8009cd6 <SD_read+0x4e>
 8009cec:	e002      	b.n	8009cf4 <SD_read+0x6c>
  DRESULT res = RES_ERROR;
 8009cee:	2001      	movs	r0, #1
 8009cf0:	e000      	b.n	8009cf4 <SD_read+0x6c>
    return res;
 8009cf2:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 8009cf4:	b004      	add	sp, #16
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	20005c60 	.word	0x20005c60

08009cfc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009cfc:	b570      	push	{r4, r5, r6, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	460c      	mov	r4, r1
 8009d02:	4615      	mov	r5, r2
 8009d04:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009d06:	f247 5030 	movw	r0, #30000	; 0x7530
 8009d0a:	f7ff ffa9 	bl	8009c60 <SD_CheckStatusWithTimeout>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	db29      	blt.n	8009d66 <SD_write+0x6a>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009d12:	4632      	mov	r2, r6
 8009d14:	4629      	mov	r1, r5
 8009d16:	4620      	mov	r0, r4
 8009d18:	f7ff fae8 	bl	80092ec <BSP_SD_WriteBlocks_DMA>
 8009d1c:	b108      	cbz	r0, 8009d22 <SD_write+0x26>
  DRESULT res = RES_ERROR;
 8009d1e:	2001      	movs	r0, #1
 8009d20:	e022      	b.n	8009d68 <SD_write+0x6c>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009d22:	f247 5230 	movw	r2, #30000	; 0x7530
 8009d26:	4b11      	ldr	r3, [pc, #68]	; (8009d6c <SD_write+0x70>)
 8009d28:	6819      	ldr	r1, [r3, #0]
 8009d2a:	a801      	add	r0, sp, #4
 8009d2c:	f7fd fa05 	bl	800713a <osMessageGet>

    if (event.status == osEventMessage)
 8009d30:	9b01      	ldr	r3, [sp, #4]
 8009d32:	2b10      	cmp	r3, #16
 8009d34:	d001      	beq.n	8009d3a <SD_write+0x3e>
  DRESULT res = RES_ERROR;
 8009d36:	2001      	movs	r0, #1
 8009d38:	e016      	b.n	8009d68 <SD_write+0x6c>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8009d3a:	9b02      	ldr	r3, [sp, #8]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d001      	beq.n	8009d44 <SD_write+0x48>
  DRESULT res = RES_ERROR;
 8009d40:	2001      	movs	r0, #1
 8009d42:	e011      	b.n	8009d68 <SD_write+0x6c>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8009d44:	f7fd f8df 	bl	8006f06 <osKernelSysTick>
 8009d48:	4604      	mov	r4, r0
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8009d4a:	f7fd f8dc 	bl	8006f06 <osKernelSysTick>
 8009d4e:	1b00      	subs	r0, r0, r4
 8009d50:	f247 532f 	movw	r3, #29999	; 0x752f
 8009d54:	4298      	cmp	r0, r3
 8009d56:	d804      	bhi.n	8009d62 <SD_write+0x66>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d58:	f7ff fad4 	bl	8009304 <BSP_SD_GetCardState>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d1f4      	bne.n	8009d4a <SD_write+0x4e>
 8009d60:	e002      	b.n	8009d68 <SD_write+0x6c>
  DRESULT res = RES_ERROR;
 8009d62:	2001      	movs	r0, #1
 8009d64:	e000      	b.n	8009d68 <SD_write+0x6c>
    return res;
 8009d66:	2001      	movs	r0, #1

  }
#endif

  return res;
}
 8009d68:	b004      	add	sp, #16
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}
 8009d6c:	20005c60 	.word	0x20005c60

08009d70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009d70:	b530      	push	{r4, r5, lr}
 8009d72:	b089      	sub	sp, #36	; 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d74:	4b13      	ldr	r3, [pc, #76]	; (8009dc4 <SD_ioctl+0x54>)
 8009d76:	7818      	ldrb	r0, [r3, #0]
 8009d78:	f010 0401 	ands.w	r4, r0, #1
 8009d7c:	d11b      	bne.n	8009db6 <SD_ioctl+0x46>
 8009d7e:	4615      	mov	r5, r2

  switch (cmd)
 8009d80:	2903      	cmp	r1, #3
 8009d82:	d81c      	bhi.n	8009dbe <SD_ioctl+0x4e>
 8009d84:	e8df f001 	tbb	[pc, r1]
 8009d88:	100a0402 	.word	0x100a0402
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	e013      	b.n	8009db8 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d90:	4668      	mov	r0, sp
 8009d92:	f7ff fac1 	bl	8009318 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009d96:	9b06      	ldr	r3, [sp, #24]
 8009d98:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8009d9a:	e00d      	b.n	8009db8 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d9c:	4668      	mov	r0, sp
 8009d9e:	f7ff fabb 	bl	8009318 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009da2:	9b07      	ldr	r3, [sp, #28]
 8009da4:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8009da6:	e007      	b.n	8009db8 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009da8:	4668      	mov	r0, sp
 8009daa:	f7ff fab5 	bl	8009318 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009dae:	9b07      	ldr	r3, [sp, #28]
 8009db0:	0a5b      	lsrs	r3, r3, #9
 8009db2:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8009db4:	e000      	b.n	8009db8 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009db6:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8009db8:	4620      	mov	r0, r4
 8009dba:	b009      	add	sp, #36	; 0x24
 8009dbc:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8009dbe:	2404      	movs	r4, #4
 8009dc0:	e7fa      	b.n	8009db8 <SD_ioctl+0x48>
 8009dc2:	bf00      	nop
 8009dc4:	20000019 	.word	0x20000019

08009dc8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009dc8:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8009dca:	2200      	movs	r2, #0
 8009dcc:	2102      	movs	r1, #2
 8009dce:	4b02      	ldr	r3, [pc, #8]	; (8009dd8 <BSP_SD_WriteCpltCallback+0x10>)
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	f7fd f97f 	bl	80070d4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8009dd6:	bd08      	pop	{r3, pc}
 8009dd8:	20005c60 	.word	0x20005c60

08009ddc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009ddc:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8009dde:	2200      	movs	r2, #0
 8009de0:	2101      	movs	r1, #1
 8009de2:	4b02      	ldr	r3, [pc, #8]	; (8009dec <BSP_SD_ReadCpltCallback+0x10>)
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f7fd f975 	bl	80070d4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8009dea:	bd08      	pop	{r3, pc}
 8009dec:	20005c60 	.word	0x20005c60

08009df0 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8009df0:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <MX_SDIO_SD_Init+0x18>)
 8009df2:	4a06      	ldr	r2, [pc, #24]	; (8009e0c <MX_SDIO_SD_Init+0x1c>)
 8009df4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8009df6:	2200      	movs	r2, #0
 8009df8:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8009dfa:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009dfc:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8009dfe:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e00:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8009e02:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	20005c64 	.word	0x20005c64
 8009e0c:	40012c00 	.word	0x40012c00

08009e10 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8009e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e14:	b0a1      	sub	sp, #132	; 0x84
 8009e16:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e18:	2100      	movs	r1, #0
 8009e1a:	911b      	str	r1, [sp, #108]	; 0x6c
 8009e1c:	911c      	str	r1, [sp, #112]	; 0x70
 8009e1e:	911d      	str	r1, [sp, #116]	; 0x74
 8009e20:	911e      	str	r1, [sp, #120]	; 0x78
 8009e22:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009e24:	225c      	movs	r2, #92	; 0x5c
 8009e26:	a804      	add	r0, sp, #16
 8009e28:	f000 fdc4 	bl	800a9b4 <memset>
  if(sdHandle->Instance==SDIO)
 8009e2c:	6822      	ldr	r2, [r4, #0]
 8009e2e:	4b6f      	ldr	r3, [pc, #444]	; (8009fec <HAL_SD_MspInit+0x1dc>)
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d002      	beq.n	8009e3a <HAL_SD_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8009e34:	b021      	add	sp, #132	; 0x84
 8009e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8009e3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e3e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e40:	a804      	add	r0, sp, #16
 8009e42:	f7f8 f865 	bl	8001f10 <HAL_RCCEx_PeriphCLKConfig>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f040 80c6 	bne.w	8009fd8 <HAL_SD_MspInit+0x1c8>
    __HAL_RCC_SDIO_CLK_ENABLE();
 8009e4c:	2500      	movs	r5, #0
 8009e4e:	9500      	str	r5, [sp, #0]
 8009e50:	4b67      	ldr	r3, [pc, #412]	; (8009ff0 <HAL_SD_MspInit+0x1e0>)
 8009e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e58:	645a      	str	r2, [r3, #68]	; 0x44
 8009e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e5c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009e60:	9200      	str	r2, [sp, #0]
 8009e62:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e64:	9501      	str	r5, [sp, #4]
 8009e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e68:	f042 0202 	orr.w	r2, r2, #2
 8009e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8009e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e70:	f002 0202 	and.w	r2, r2, #2
 8009e74:	9201      	str	r2, [sp, #4]
 8009e76:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e78:	9502      	str	r5, [sp, #8]
 8009e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e7c:	f042 0204 	orr.w	r2, r2, #4
 8009e80:	631a      	str	r2, [r3, #48]	; 0x30
 8009e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e84:	f002 0204 	and.w	r2, r2, #4
 8009e88:	9202      	str	r2, [sp, #8]
 8009e8a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009e8c:	9503      	str	r5, [sp, #12]
 8009e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e90:	f042 0208 	orr.w	r2, r2, #8
 8009e94:	631a      	str	r2, [r3, #48]	; 0x30
 8009e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e98:	f003 0308 	and.w	r3, r3, #8
 8009e9c:	9303      	str	r3, [sp, #12]
 8009e9e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009ea0:	2704      	movs	r7, #4
 8009ea2:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ea4:	f04f 0902 	mov.w	r9, #2
 8009ea8:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eac:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009eae:	2603      	movs	r6, #3
 8009eb0:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009eb2:	f04f 080c 	mov.w	r8, #12
 8009eb6:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009eba:	a91b      	add	r1, sp, #108	; 0x6c
 8009ebc:	484d      	ldr	r0, [pc, #308]	; (8009ff4 <HAL_SD_MspInit+0x1e4>)
 8009ebe:	f7f7 fe01 	bl	8001ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8009ec2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8009ec6:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ec8:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ecc:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ece:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009ed0:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ed4:	a91b      	add	r1, sp, #108	; 0x6c
 8009ed6:	4848      	ldr	r0, [pc, #288]	; (8009ff8 <HAL_SD_MspInit+0x1e8>)
 8009ed8:	f7f7 fdf4 	bl	8001ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009edc:	971b      	str	r7, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ede:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ee2:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ee4:	961e      	str	r6, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009ee6:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009eea:	a91b      	add	r1, sp, #108	; 0x6c
 8009eec:	4843      	ldr	r0, [pc, #268]	; (8009ffc <HAL_SD_MspInit+0x1ec>)
 8009eee:	f7f7 fde9 	bl	8001ac4 <HAL_GPIO_Init>
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8009ef2:	4843      	ldr	r0, [pc, #268]	; (800a000 <HAL_SD_MspInit+0x1f0>)
 8009ef4:	4b43      	ldr	r3, [pc, #268]	; (800a004 <HAL_SD_MspInit+0x1f4>)
 8009ef6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8009efa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009efe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f02:	2340      	movs	r3, #64	; 0x40
 8009f04:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f08:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f10:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f18:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009f1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f20:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8009f24:	2320      	movs	r3, #32
 8009f26:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009f2a:	f8c0 50a4 	str.w	r5, [r0, #164]	; 0xa4
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009f2e:	f8c0 70a8 	str.w	r7, [r0, #168]	; 0xa8
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8009f32:	f8c0 60ac 	str.w	r6, [r0, #172]	; 0xac
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8009f36:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009f3a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8009f3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009f42:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8009f46:	3084      	adds	r0, #132	; 0x84
 8009f48:	f7f7 fc1e 	bl	8001788 <HAL_DMA_Init>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d146      	bne.n	8009fde <HAL_SD_MspInit+0x1ce>
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8009f50:	482b      	ldr	r0, [pc, #172]	; (800a000 <HAL_SD_MspInit+0x1f0>)
 8009f52:	f100 0384 	add.w	r3, r0, #132	; 0x84
 8009f56:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009f58:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8009f5c:	4b2a      	ldr	r3, [pc, #168]	; (800a008 <HAL_SD_MspInit+0x1f8>)
 8009f5e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8009f62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f66:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f70:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f78:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009f7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009f80:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009f84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009f88:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009f92:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009f96:	2304      	movs	r3, #4
 8009f98:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8009fa2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009fa6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8009faa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009fae:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8009fb2:	30e4      	adds	r0, #228	; 0xe4
 8009fb4:	f7f7 fbe8 	bl	8001788 <HAL_DMA_Init>
 8009fb8:	b9a0      	cbnz	r0, 8009fe4 <HAL_SD_MspInit+0x1d4>
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8009fba:	4b11      	ldr	r3, [pc, #68]	; (800a000 <HAL_SD_MspInit+0x1f0>)
 8009fbc:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 8009fc0:	6422      	str	r2, [r4, #64]	; 0x40
 8009fc2:	f8c3 411c 	str.w	r4, [r3, #284]	; 0x11c
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2105      	movs	r1, #5
 8009fca:	2031      	movs	r0, #49	; 0x31
 8009fcc:	f7f7 fb16 	bl	80015fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8009fd0:	2031      	movs	r0, #49	; 0x31
 8009fd2:	f7f7 fb4b 	bl	800166c <HAL_NVIC_EnableIRQ>
}
 8009fd6:	e72d      	b.n	8009e34 <HAL_SD_MspInit+0x24>
      Error_Handler();
 8009fd8:	f7ff fba4 	bl	8009724 <Error_Handler>
 8009fdc:	e736      	b.n	8009e4c <HAL_SD_MspInit+0x3c>
      Error_Handler();
 8009fde:	f7ff fba1 	bl	8009724 <Error_Handler>
 8009fe2:	e7b5      	b.n	8009f50 <HAL_SD_MspInit+0x140>
      Error_Handler();
 8009fe4:	f7ff fb9e 	bl	8009724 <Error_Handler>
 8009fe8:	e7e7      	b.n	8009fba <HAL_SD_MspInit+0x1aa>
 8009fea:	bf00      	nop
 8009fec:	40012c00 	.word	0x40012c00
 8009ff0:	40023800 	.word	0x40023800
 8009ff4:	40020400 	.word	0x40020400
 8009ff8:	40020800 	.word	0x40020800
 8009ffc:	40020c00 	.word	0x40020c00
 800a000:	20005c64 	.word	0x20005c64
 800a004:	40026458 	.word	0x40026458
 800a008:	400264a0 	.word	0x400264a0

0800a00c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a00c:	b500      	push	{lr}
 800a00e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a010:	2200      	movs	r2, #0
 800a012:	9200      	str	r2, [sp, #0]
 800a014:	4b0d      	ldr	r3, [pc, #52]	; (800a04c <HAL_MspInit+0x40>)
 800a016:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a018:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800a01c:	6459      	str	r1, [r3, #68]	; 0x44
 800a01e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a020:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800a024:	9100      	str	r1, [sp, #0]
 800a026:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a028:	9201      	str	r2, [sp, #4]
 800a02a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a02c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800a030:	6419      	str	r1, [r3, #64]	; 0x40
 800a032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a03c:	210f      	movs	r1, #15
 800a03e:	f06f 0001 	mvn.w	r0, #1
 800a042:	f7f7 fadb 	bl	80015fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a046:	b003      	add	sp, #12
 800a048:	f85d fb04 	ldr.w	pc, [sp], #4
 800a04c:	40023800 	.word	0x40023800

0800a050 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a050:	b530      	push	{r4, r5, lr}
 800a052:	b089      	sub	sp, #36	; 0x24
 800a054:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800a056:	2400      	movs	r4, #0
 800a058:	9401      	str	r4, [sp, #4]
 800a05a:	4b1e      	ldr	r3, [pc, #120]	; (800a0d4 <HAL_InitTick+0x84>)
 800a05c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a05e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a062:	645a      	str	r2, [r3, #68]	; 0x44
 800a064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a06e:	a902      	add	r1, sp, #8
 800a070:	a803      	add	r0, sp, #12
 800a072:	f7f7 ff2f 	bl	8001ed4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a076:	f7f7 ff1d 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 800a07a:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a07c:	4816      	ldr	r0, [pc, #88]	; (800a0d8 <HAL_InitTick+0x88>)
 800a07e:	fba0 2303 	umull	r2, r3, r0, r3
 800a082:	0c9b      	lsrs	r3, r3, #18
 800a084:	3b01      	subs	r3, #1

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800a086:	4815      	ldr	r0, [pc, #84]	; (800a0dc <HAL_InitTick+0x8c>)
 800a088:	4a15      	ldr	r2, [pc, #84]	; (800a0e0 <HAL_InitTick+0x90>)
 800a08a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800a08c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a090:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800a092:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 800a094:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a096:	6084      	str	r4, [r0, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a098:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800a09a:	f7f9 fe4d 	bl	8003d38 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800a09e:	4604      	mov	r4, r0
 800a0a0:	b110      	cbz	r0, 800a0a8 <HAL_InitTick+0x58>
    }
  }

 /* Return function status */
  return status;
}
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	b009      	add	sp, #36	; 0x24
 800a0a6:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim10);
 800a0a8:	480c      	ldr	r0, [pc, #48]	; (800a0dc <HAL_InitTick+0x8c>)
 800a0aa:	f7f9 fcdb 	bl	8003a64 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d1f6      	bne.n	800a0a2 <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a0b4:	2019      	movs	r0, #25
 800a0b6:	f7f7 fad9 	bl	800166c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a0ba:	2d0f      	cmp	r5, #15
 800a0bc:	d901      	bls.n	800a0c2 <HAL_InitTick+0x72>
        status = HAL_ERROR;
 800a0be:	2401      	movs	r4, #1
 800a0c0:	e7ef      	b.n	800a0a2 <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	2019      	movs	r0, #25
 800a0c8:	f7f7 fa98 	bl	80015fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a0cc:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <HAL_InitTick+0x94>)
 800a0ce:	601d      	str	r5, [r3, #0]
 800a0d0:	e7e7      	b.n	800a0a2 <HAL_InitTick+0x52>
 800a0d2:	bf00      	nop
 800a0d4:	40023800 	.word	0x40023800
 800a0d8:	431bde83 	.word	0x431bde83
 800a0dc:	20005da8 	.word	0x20005da8
 800a0e0:	40014400 	.word	0x40014400
 800a0e4:	20000004 	.word	0x20000004

0800a0e8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a0e8:	4770      	bx	lr

0800a0ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a0ea:	e7fe      	b.n	800a0ea <HardFault_Handler>

0800a0ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a0ec:	e7fe      	b.n	800a0ec <MemManage_Handler>

0800a0ee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a0ee:	e7fe      	b.n	800a0ee <BusFault_Handler>

0800a0f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a0f0:	e7fe      	b.n	800a0f0 <UsageFault_Handler>

0800a0f2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a0f2:	4770      	bx	lr

0800a0f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a0f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a0f6:	4803      	ldr	r0, [pc, #12]	; (800a104 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a0f8:	f7f9 fcfc 	bl	8003af4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800a0fc:	4802      	ldr	r0, [pc, #8]	; (800a108 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800a0fe:	f7f9 fcf9 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a102:	bd08      	pop	{r3, pc}
 800a104:	20005df0 	.word	0x20005df0
 800a108:	20005da8 	.word	0x20005da8

0800a10c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a10c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a10e:	4802      	ldr	r0, [pc, #8]	; (800a118 <TIM2_IRQHandler+0xc>)
 800a110:	f7f9 fcf0 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a114:	bd08      	pop	{r3, pc}
 800a116:	bf00      	nop
 800a118:	20005e38 	.word	0x20005e38

0800a11c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a11c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a11e:	4802      	ldr	r0, [pc, #8]	; (800a128 <TIM3_IRQHandler+0xc>)
 800a120:	f7f9 fce8 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a124:	bd08      	pop	{r3, pc}
 800a126:	bf00      	nop
 800a128:	20005e80 	.word	0x20005e80

0800a12c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a12c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a12e:	4802      	ldr	r0, [pc, #8]	; (800a138 <TIM4_IRQHandler+0xc>)
 800a130:	f7f9 fce0 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a134:	bd08      	pop	{r3, pc}
 800a136:	bf00      	nop
 800a138:	20005ec8 	.word	0x20005ec8

0800a13c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800a13c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800a13e:	4802      	ldr	r0, [pc, #8]	; (800a148 <SDIO_IRQHandler+0xc>)
 800a140:	f7f9 fb2c 	bl	800379c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800a144:	bd08      	pop	{r3, pc}
 800a146:	bf00      	nop
 800a148:	20005c64 	.word	0x20005c64

0800a14c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a14c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a14e:	4802      	ldr	r0, [pc, #8]	; (800a158 <DMA2_Stream0_IRQHandler+0xc>)
 800a150:	f7f7 fbc8 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a154:	bd08      	pop	{r3, pc}
 800a156:	bf00      	nop
 800a158:	20003ec0 	.word	0x20003ec0

0800a15c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800a15c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800a15e:	4802      	ldr	r0, [pc, #8]	; (800a168 <DMA2_Stream3_IRQHandler+0xc>)
 800a160:	f7f7 fbc0 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800a164:	bd08      	pop	{r3, pc}
 800a166:	bf00      	nop
 800a168:	20005ce8 	.word	0x20005ce8

0800a16c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800a16c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800a16e:	4802      	ldr	r0, [pc, #8]	; (800a178 <DMA2_Stream6_IRQHandler+0xc>)
 800a170:	f7f7 fbb8 	bl	80018e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a174:	bd08      	pop	{r3, pc}
 800a176:	bf00      	nop
 800a178:	20005d48 	.word	0x20005d48

0800a17c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a17c:	490f      	ldr	r1, [pc, #60]	; (800a1bc <SystemInit+0x40>)
 800a17e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a182:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a18a:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <SystemInit+0x44>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	f042 0201 	orr.w	r2, r2, #1
 800a192:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a194:	2000      	movs	r0, #0
 800a196:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800a19e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a1a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a1a4:	4a07      	ldr	r2, [pc, #28]	; (800a1c4 <SystemInit+0x48>)
 800a1a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a1ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a1b0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a1b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a1b6:	608b      	str	r3, [r1, #8]
#endif
}
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	e000ed00 	.word	0xe000ed00
 800a1c0:	40023800 	.word	0x40023800
 800a1c4:	24003010 	.word	0x24003010

0800a1c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a1c8:	b500      	push	{lr}
 800a1ca:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9302      	str	r3, [sp, #8]
 800a1d0:	9303      	str	r3, [sp, #12]
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a1da:	4816      	ldr	r0, [pc, #88]	; (800a234 <MX_TIM1_Init+0x6c>)
 800a1dc:	4a16      	ldr	r2, [pc, #88]	; (800a238 <MX_TIM1_Init+0x70>)
 800a1de:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 1500;
 800a1e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a1e4:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1e6:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 800a1e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1ec:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1ee:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800a1f0:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a1f2:	2380      	movs	r3, #128	; 0x80
 800a1f4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a1f6:	f7f9 fd9f 	bl	8003d38 <HAL_TIM_Base_Init>
 800a1fa:	b990      	cbnz	r0, 800a222 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a1fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a200:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a202:	a902      	add	r1, sp, #8
 800a204:	480b      	ldr	r0, [pc, #44]	; (800a234 <MX_TIM1_Init+0x6c>)
 800a206:	f7f9 fe9c 	bl	8003f42 <HAL_TIM_ConfigClockSource>
 800a20a:	b968      	cbnz	r0, 800a228 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a20c:	2300      	movs	r3, #0
 800a20e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a210:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a212:	4669      	mov	r1, sp
 800a214:	4807      	ldr	r0, [pc, #28]	; (800a234 <MX_TIM1_Init+0x6c>)
 800a216:	f7f9 ffdd 	bl	80041d4 <HAL_TIMEx_MasterConfigSynchronization>
 800a21a:	b940      	cbnz	r0, 800a22e <MX_TIM1_Init+0x66>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a21c:	b007      	add	sp, #28
 800a21e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a222:	f7ff fa7f 	bl	8009724 <Error_Handler>
 800a226:	e7e9      	b.n	800a1fc <MX_TIM1_Init+0x34>
    Error_Handler();
 800a228:	f7ff fa7c 	bl	8009724 <Error_Handler>
 800a22c:	e7ee      	b.n	800a20c <MX_TIM1_Init+0x44>
    Error_Handler();
 800a22e:	f7ff fa79 	bl	8009724 <Error_Handler>
}
 800a232:	e7f3      	b.n	800a21c <MX_TIM1_Init+0x54>
 800a234:	20005df0 	.word	0x20005df0
 800a238:	40010000 	.word	0x40010000

0800a23c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a23c:	b500      	push	{lr}
 800a23e:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a240:	2300      	movs	r3, #0
 800a242:	9306      	str	r3, [sp, #24]
 800a244:	9307      	str	r3, [sp, #28]
 800a246:	9308      	str	r3, [sp, #32]
 800a248:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a24a:	9304      	str	r3, [sp, #16]
 800a24c:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	9302      	str	r3, [sp, #8]
 800a254:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a256:	4821      	ldr	r0, [pc, #132]	; (800a2dc <MX_TIM2_Init+0xa0>)
 800a258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a25c:	6482      	str	r2, [r0, #72]	; 0x48
  htim2.Init.Prescaler = 55;
 800a25e:	2237      	movs	r2, #55	; 0x37
 800a260:	64c2      	str	r2, [r0, #76]	; 0x4c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a262:	6503      	str	r3, [r0, #80]	; 0x50
  htim2.Init.Period = 65535;
 800a264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a268:	6542      	str	r2, [r0, #84]	; 0x54
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a26a:	6583      	str	r3, [r0, #88]	; 0x58
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a26c:	2380      	movs	r3, #128	; 0x80
 800a26e:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a270:	3048      	adds	r0, #72	; 0x48
 800a272:	f7f9 fd61 	bl	8003d38 <HAL_TIM_Base_Init>
 800a276:	bb08      	cbnz	r0, 800a2bc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a27c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a27e:	a906      	add	r1, sp, #24
 800a280:	4817      	ldr	r0, [pc, #92]	; (800a2e0 <MX_TIM2_Init+0xa4>)
 800a282:	f7f9 fe5e 	bl	8003f42 <HAL_TIM_ConfigClockSource>
 800a286:	b9e0      	cbnz	r0, 800a2c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800a288:	4815      	ldr	r0, [pc, #84]	; (800a2e0 <MX_TIM2_Init+0xa4>)
 800a28a:	f7f9 fd81 	bl	8003d90 <HAL_TIM_IC_Init>
 800a28e:	b9d8      	cbnz	r0, 800a2c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a290:	2300      	movs	r3, #0
 800a292:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a294:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a296:	a904      	add	r1, sp, #16
 800a298:	4811      	ldr	r0, [pc, #68]	; (800a2e0 <MX_TIM2_Init+0xa4>)
 800a29a:	f7f9 ff9b 	bl	80041d4 <HAL_TIMEx_MasterConfigSynchronization>
 800a29e:	b9b0      	cbnz	r0, 800a2ce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a2a8:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800a2aa:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a2ac:	4669      	mov	r1, sp
 800a2ae:	480c      	ldr	r0, [pc, #48]	; (800a2e0 <MX_TIM2_Init+0xa4>)
 800a2b0:	f7f9 fdd8 	bl	8003e64 <HAL_TIM_IC_ConfigChannel>
 800a2b4:	b970      	cbnz	r0, 800a2d4 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a2b6:	b00b      	add	sp, #44	; 0x2c
 800a2b8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a2bc:	f7ff fa32 	bl	8009724 <Error_Handler>
 800a2c0:	e7da      	b.n	800a278 <MX_TIM2_Init+0x3c>
    Error_Handler();
 800a2c2:	f7ff fa2f 	bl	8009724 <Error_Handler>
 800a2c6:	e7df      	b.n	800a288 <MX_TIM2_Init+0x4c>
    Error_Handler();
 800a2c8:	f7ff fa2c 	bl	8009724 <Error_Handler>
 800a2cc:	e7e0      	b.n	800a290 <MX_TIM2_Init+0x54>
    Error_Handler();
 800a2ce:	f7ff fa29 	bl	8009724 <Error_Handler>
 800a2d2:	e7e5      	b.n	800a2a0 <MX_TIM2_Init+0x64>
    Error_Handler();
 800a2d4:	f7ff fa26 	bl	8009724 <Error_Handler>
}
 800a2d8:	e7ed      	b.n	800a2b6 <MX_TIM2_Init+0x7a>
 800a2da:	bf00      	nop
 800a2dc:	20005df0 	.word	0x20005df0
 800a2e0:	20005e38 	.word	0x20005e38

0800a2e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a2e4:	b500      	push	{lr}
 800a2e6:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9306      	str	r3, [sp, #24]
 800a2ec:	9307      	str	r3, [sp, #28]
 800a2ee:	9308      	str	r3, [sp, #32]
 800a2f0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2f2:	9304      	str	r3, [sp, #16]
 800a2f4:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	9301      	str	r3, [sp, #4]
 800a2fa:	9302      	str	r3, [sp, #8]
 800a2fc:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a2fe:	4823      	ldr	r0, [pc, #140]	; (800a38c <MX_TIM3_Init+0xa8>)
 800a300:	4a23      	ldr	r2, [pc, #140]	; (800a390 <MX_TIM3_Init+0xac>)
 800a302:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  htim3.Init.Prescaler = 55;
 800a306:	2237      	movs	r2, #55	; 0x37
 800a308:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a30c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  htim3.Init.Period = 65535;
 800a310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a314:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a318:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a31c:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a320:	3090      	adds	r0, #144	; 0x90
 800a322:	f7f9 fd09 	bl	8003d38 <HAL_TIM_Base_Init>
 800a326:	bb08      	cbnz	r0, 800a36c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a32c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a32e:	a906      	add	r1, sp, #24
 800a330:	4818      	ldr	r0, [pc, #96]	; (800a394 <MX_TIM3_Init+0xb0>)
 800a332:	f7f9 fe06 	bl	8003f42 <HAL_TIM_ConfigClockSource>
 800a336:	b9e0      	cbnz	r0, 800a372 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800a338:	4816      	ldr	r0, [pc, #88]	; (800a394 <MX_TIM3_Init+0xb0>)
 800a33a:	f7f9 fd29 	bl	8003d90 <HAL_TIM_IC_Init>
 800a33e:	b9d8      	cbnz	r0, 800a378 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a340:	2300      	movs	r3, #0
 800a342:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a344:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a346:	a904      	add	r1, sp, #16
 800a348:	4812      	ldr	r0, [pc, #72]	; (800a394 <MX_TIM3_Init+0xb0>)
 800a34a:	f7f9 ff43 	bl	80041d4 <HAL_TIMEx_MasterConfigSynchronization>
 800a34e:	b9b0      	cbnz	r0, 800a37e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a350:	2200      	movs	r2, #0
 800a352:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a354:	2301      	movs	r3, #1
 800a356:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a358:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800a35a:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a35c:	4669      	mov	r1, sp
 800a35e:	480d      	ldr	r0, [pc, #52]	; (800a394 <MX_TIM3_Init+0xb0>)
 800a360:	f7f9 fd80 	bl	8003e64 <HAL_TIM_IC_ConfigChannel>
 800a364:	b970      	cbnz	r0, 800a384 <MX_TIM3_Init+0xa0>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a366:	b00b      	add	sp, #44	; 0x2c
 800a368:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a36c:	f7ff f9da 	bl	8009724 <Error_Handler>
 800a370:	e7da      	b.n	800a328 <MX_TIM3_Init+0x44>
    Error_Handler();
 800a372:	f7ff f9d7 	bl	8009724 <Error_Handler>
 800a376:	e7df      	b.n	800a338 <MX_TIM3_Init+0x54>
    Error_Handler();
 800a378:	f7ff f9d4 	bl	8009724 <Error_Handler>
 800a37c:	e7e0      	b.n	800a340 <MX_TIM3_Init+0x5c>
    Error_Handler();
 800a37e:	f7ff f9d1 	bl	8009724 <Error_Handler>
 800a382:	e7e5      	b.n	800a350 <MX_TIM3_Init+0x6c>
    Error_Handler();
 800a384:	f7ff f9ce 	bl	8009724 <Error_Handler>
}
 800a388:	e7ed      	b.n	800a366 <MX_TIM3_Init+0x82>
 800a38a:	bf00      	nop
 800a38c:	20005df0 	.word	0x20005df0
 800a390:	40000400 	.word	0x40000400
 800a394:	20005e80 	.word	0x20005e80

0800a398 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800a398:	b500      	push	{lr}
 800a39a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a39c:	2300      	movs	r3, #0
 800a39e:	9304      	str	r3, [sp, #16]
 800a3a0:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	9301      	str	r3, [sp, #4]
 800a3a6:	9302      	str	r3, [sp, #8]
 800a3a8:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a3aa:	4819      	ldr	r0, [pc, #100]	; (800a410 <MX_TIM4_Init+0x78>)
 800a3ac:	4a19      	ldr	r2, [pc, #100]	; (800a414 <MX_TIM4_Init+0x7c>)
 800a3ae:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
  htim4.Init.Prescaler = 0;
 800a3b2:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3b6:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
  htim4.Init.Period = 65535;
 800a3ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3be:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3c2:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3c6:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800a3ca:	30d8      	adds	r0, #216	; 0xd8
 800a3cc:	f7f9 fce0 	bl	8003d90 <HAL_TIM_IC_Init>
 800a3d0:	b9a8      	cbnz	r0, 800a3fe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a3d6:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a3d8:	a904      	add	r1, sp, #16
 800a3da:	480f      	ldr	r0, [pc, #60]	; (800a418 <MX_TIM4_Init+0x80>)
 800a3dc:	f7f9 fefa 	bl	80041d4 <HAL_TIMEx_MasterConfigSynchronization>
 800a3e0:	b980      	cbnz	r0, 800a404 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a3ea:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800a3ec:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a3ee:	4669      	mov	r1, sp
 800a3f0:	4809      	ldr	r0, [pc, #36]	; (800a418 <MX_TIM4_Init+0x80>)
 800a3f2:	f7f9 fd37 	bl	8003e64 <HAL_TIM_IC_ConfigChannel>
 800a3f6:	b940      	cbnz	r0, 800a40a <MX_TIM4_Init+0x72>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a3f8:	b007      	add	sp, #28
 800a3fa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a3fe:	f7ff f991 	bl	8009724 <Error_Handler>
 800a402:	e7e6      	b.n	800a3d2 <MX_TIM4_Init+0x3a>
    Error_Handler();
 800a404:	f7ff f98e 	bl	8009724 <Error_Handler>
 800a408:	e7eb      	b.n	800a3e2 <MX_TIM4_Init+0x4a>
    Error_Handler();
 800a40a:	f7ff f98b 	bl	8009724 <Error_Handler>
}
 800a40e:	e7f3      	b.n	800a3f8 <MX_TIM4_Init+0x60>
 800a410:	20005df0 	.word	0x20005df0
 800a414:	40000800 	.word	0x40000800
 800a418:	20005ec8 	.word	0x20005ec8

0800a41c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a41c:	b510      	push	{r4, lr}
 800a41e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a420:	2300      	movs	r3, #0
 800a422:	9305      	str	r3, [sp, #20]
 800a424:	9306      	str	r3, [sp, #24]
 800a426:	9307      	str	r3, [sp, #28]
 800a428:	9308      	str	r3, [sp, #32]
 800a42a:	9309      	str	r3, [sp, #36]	; 0x24
  if(tim_baseHandle->Instance==TIM1)
 800a42c:	6803      	ldr	r3, [r0, #0]
 800a42e:	4a39      	ldr	r2, [pc, #228]	; (800a514 <HAL_TIM_Base_MspInit+0xf8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d007      	beq.n	800a444 <HAL_TIM_Base_MspInit+0x28>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 800a434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a438:	d018      	beq.n	800a46c <HAL_TIM_Base_MspInit+0x50>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 800a43a:	4a37      	ldr	r2, [pc, #220]	; (800a518 <HAL_TIM_Base_MspInit+0xfc>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d040      	beq.n	800a4c2 <HAL_TIM_Base_MspInit+0xa6>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800a440:	b00a      	add	sp, #40	; 0x28
 800a442:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a444:	2200      	movs	r2, #0
 800a446:	9200      	str	r2, [sp, #0]
 800a448:	4b34      	ldr	r3, [pc, #208]	; (800a51c <HAL_TIM_Base_MspInit+0x100>)
 800a44a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a44c:	f041 0101 	orr.w	r1, r1, #1
 800a450:	6459      	str	r1, [r3, #68]	; 0x44
 800a452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a45c:	2105      	movs	r1, #5
 800a45e:	2019      	movs	r0, #25
 800a460:	f7f7 f8cc 	bl	80015fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a464:	2019      	movs	r0, #25
 800a466:	f7f7 f901 	bl	800166c <HAL_NVIC_EnableIRQ>
 800a46a:	e7e9      	b.n	800a440 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a46c:	2400      	movs	r4, #0
 800a46e:	9401      	str	r4, [sp, #4]
 800a470:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800a474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	641a      	str	r2, [r3, #64]	; 0x40
 800a47c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a47e:	f002 0201 	and.w	r2, r2, #1
 800a482:	9201      	str	r2, [sp, #4]
 800a484:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a486:	9402      	str	r4, [sp, #8]
 800a488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a48a:	f042 0201 	orr.w	r2, r2, #1
 800a48e:	631a      	str	r2, [r3, #48]	; 0x30
 800a490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	9302      	str	r3, [sp, #8]
 800a498:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a49a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a49e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4a8:	a905      	add	r1, sp, #20
 800a4aa:	481d      	ldr	r0, [pc, #116]	; (800a520 <HAL_TIM_Base_MspInit+0x104>)
 800a4ac:	f7f7 fb0a 	bl	8001ac4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	2105      	movs	r1, #5
 800a4b4:	201c      	movs	r0, #28
 800a4b6:	f7f7 f8a1 	bl	80015fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a4ba:	201c      	movs	r0, #28
 800a4bc:	f7f7 f8d6 	bl	800166c <HAL_NVIC_EnableIRQ>
 800a4c0:	e7be      	b.n	800a440 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a4c2:	2400      	movs	r4, #0
 800a4c4:	9403      	str	r4, [sp, #12]
 800a4c6:	4b15      	ldr	r3, [pc, #84]	; (800a51c <HAL_TIM_Base_MspInit+0x100>)
 800a4c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4ca:	f042 0202 	orr.w	r2, r2, #2
 800a4ce:	641a      	str	r2, [r3, #64]	; 0x40
 800a4d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4d2:	f002 0202 	and.w	r2, r2, #2
 800a4d6:	9203      	str	r2, [sp, #12]
 800a4d8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4da:	9404      	str	r4, [sp, #16]
 800a4dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4de:	f042 0204 	orr.w	r2, r2, #4
 800a4e2:	631a      	str	r2, [r3, #48]	; 0x30
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e6:	f003 0304 	and.w	r3, r3, #4
 800a4ea:	9304      	str	r3, [sp, #16]
 800a4ec:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a4ee:	2340      	movs	r3, #64	; 0x40
 800a4f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a4f6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4f8:	a905      	add	r1, sp, #20
 800a4fa:	480a      	ldr	r0, [pc, #40]	; (800a524 <HAL_TIM_Base_MspInit+0x108>)
 800a4fc:	f7f7 fae2 	bl	8001ac4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800a500:	4622      	mov	r2, r4
 800a502:	2105      	movs	r1, #5
 800a504:	201d      	movs	r0, #29
 800a506:	f7f7 f879 	bl	80015fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a50a:	201d      	movs	r0, #29
 800a50c:	f7f7 f8ae 	bl	800166c <HAL_NVIC_EnableIRQ>
}
 800a510:	e796      	b.n	800a440 <HAL_TIM_Base_MspInit+0x24>
 800a512:	bf00      	nop
 800a514:	40010000 	.word	0x40010000
 800a518:	40000400 	.word	0x40000400
 800a51c:	40023800 	.word	0x40023800
 800a520:	40020000 	.word	0x40020000
 800a524:	40020800 	.word	0x40020800

0800a528 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800a528:	b510      	push	{r4, lr}
 800a52a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a52c:	2300      	movs	r3, #0
 800a52e:	9303      	str	r3, [sp, #12]
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	9305      	str	r3, [sp, #20]
 800a534:	9306      	str	r3, [sp, #24]
 800a536:	9307      	str	r3, [sp, #28]
  if(tim_icHandle->Instance==TIM4)
 800a538:	6802      	ldr	r2, [r0, #0]
 800a53a:	4b17      	ldr	r3, [pc, #92]	; (800a598 <HAL_TIM_IC_MspInit+0x70>)
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d001      	beq.n	800a544 <HAL_TIM_IC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800a540:	b008      	add	sp, #32
 800a542:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a544:	2400      	movs	r4, #0
 800a546:	9401      	str	r4, [sp, #4]
 800a548:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800a54c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a54e:	f042 0204 	orr.w	r2, r2, #4
 800a552:	641a      	str	r2, [r3, #64]	; 0x40
 800a554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a556:	f002 0204 	and.w	r2, r2, #4
 800a55a:	9201      	str	r2, [sp, #4]
 800a55c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a55e:	9402      	str	r4, [sp, #8]
 800a560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a562:	f042 0202 	orr.w	r2, r2, #2
 800a566:	631a      	str	r2, [r3, #48]	; 0x30
 800a568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	9302      	str	r3, [sp, #8]
 800a570:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a572:	2340      	movs	r3, #64	; 0x40
 800a574:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a576:	2302      	movs	r3, #2
 800a578:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a57a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a57c:	a903      	add	r1, sp, #12
 800a57e:	4807      	ldr	r0, [pc, #28]	; (800a59c <HAL_TIM_IC_MspInit+0x74>)
 800a580:	f7f7 faa0 	bl	8001ac4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800a584:	4622      	mov	r2, r4
 800a586:	2105      	movs	r1, #5
 800a588:	201e      	movs	r0, #30
 800a58a:	f7f7 f837 	bl	80015fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a58e:	201e      	movs	r0, #30
 800a590:	f7f7 f86c 	bl	800166c <HAL_NVIC_EnableIRQ>
}
 800a594:	e7d4      	b.n	800a540 <HAL_TIM_IC_MspInit+0x18>
 800a596:	bf00      	nop
 800a598:	40000800 	.word	0x40000800
 800a59c:	40020400 	.word	0x40020400

0800a5a0 <getTime>:
static time_delta prev_time_delta;			// Save the previous time to error check
											// a case where the time just rolls over when getting the time


// Return the time delta at the moment the function is called
time_delta getTime(){
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	ed2d 8b02 	vpush	{d8}
 800a5a6:	4604      	mov	r4, r0

	time_delta time_delta_var_local;

	//Ensure we don't get pre-empted here
	portENTER_CRITICAL();
 800a5a8:	f7fe fac4 	bl	8008b34 <vPortEnterCritical>

	time_delta_var_local = time_delta_var;		// Copy the seconds value
 800a5ac:	4d18      	ldr	r5, [pc, #96]	; (800a610 <getTime+0x70>)
 800a5ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a5b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	time_delta_var_local.subseconds = (float) TIM1->CNT/TIM1->ARR;  // CNT divided by the auto reload would be the
 800a5b6:	4b17      	ldr	r3, [pc, #92]	; (800a614 <getTime+0x74>)
 800a5b8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800a5bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a5c0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a5c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800a5cc:	ed84 8a02 	vstr	s16, [r4, #8]

	portEXIT_CRITICAL();
 800a5d0:	f7fe fad2 	bl	8008b78 <vPortExitCritical>

	//assert(time_delta_var_local.seconds>-1);
	//assert(time_delta_var_local.subseconds<1);

	// Error! Timer CNT rollover during reading
	if(	prev_time_delta.seconds == time_delta_var_local.seconds
 800a5d4:	6928      	ldr	r0, [r5, #16]
 800a5d6:	6969      	ldr	r1, [r5, #20]
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	6862      	ldr	r2, [r4, #4]
 800a5dc:	4291      	cmp	r1, r2
 800a5de:	bf08      	it	eq
 800a5e0:	4298      	cmpeq	r0, r3
 800a5e2:	d008      	beq.n	800a5f6 <getTime+0x56>
		&& prev_time_delta.subseconds > time_delta_var_local.subseconds){
		time_delta_var_local.seconds++;
	}

	prev_time_delta = time_delta_var_local;
 800a5e4:	4d0c      	ldr	r5, [pc, #48]	; (800a618 <getTime+0x78>)
 800a5e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a5ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	return time_delta_var_local;				// Return the copied value

}
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	ecbd 8b02 	vpop	{d8}
 800a5f4:	bd38      	pop	{r3, r4, r5, pc}
		&& prev_time_delta.subseconds > time_delta_var_local.subseconds){
 800a5f6:	edd5 7a06 	vldr	s15, [r5, #24]
 800a5fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a602:	d5ef      	bpl.n	800a5e4 <getTime+0x44>
		time_delta_var_local.seconds++;
 800a604:	3301      	adds	r3, #1
 800a606:	f142 0200 	adc.w	r2, r2, #0
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	6062      	str	r2, [r4, #4]
 800a60e:	e7e9      	b.n	800a5e4 <getTime+0x44>
 800a610:	20005f10 	.word	0x20005f10
 800a614:	40010000 	.word	0x40010000
 800a618:	20005f20 	.word	0x20005f20

0800a61c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a61c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a61e:	480a      	ldr	r0, [pc, #40]	; (800a648 <MX_USART1_UART_Init+0x2c>)
 800a620:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <MX_USART1_UART_Init+0x30>)
 800a622:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800a624:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800a628:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a62a:	2300      	movs	r3, #0
 800a62c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a62e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a630:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a632:	220c      	movs	r2, #12
 800a634:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a636:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a638:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a63a:	f7f9 fe9b 	bl	8004374 <HAL_UART_Init>
 800a63e:	b900      	cbnz	r0, 800a642 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a640:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a642:	f7ff f86f 	bl	8009724 <Error_Handler>
}
 800a646:	e7fb      	b.n	800a640 <MX_USART1_UART_Init+0x24>
 800a648:	20005f30 	.word	0x20005f30
 800a64c:	40011000 	.word	0x40011000

0800a650 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a650:	b500      	push	{lr}
 800a652:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a654:	2300      	movs	r3, #0
 800a656:	9303      	str	r3, [sp, #12]
 800a658:	9304      	str	r3, [sp, #16]
 800a65a:	9305      	str	r3, [sp, #20]
 800a65c:	9306      	str	r3, [sp, #24]
 800a65e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 800a660:	6802      	ldr	r2, [r0, #0]
 800a662:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a666:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d002      	beq.n	800a674 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a66e:	b009      	add	sp, #36	; 0x24
 800a670:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800a674:	2100      	movs	r1, #0
 800a676:	9101      	str	r1, [sp, #4]
 800a678:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800a67c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a67e:	f042 0210 	orr.w	r2, r2, #16
 800a682:	645a      	str	r2, [r3, #68]	; 0x44
 800a684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a686:	f002 0210 	and.w	r2, r2, #16
 800a68a:	9201      	str	r2, [sp, #4]
 800a68c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a68e:	9102      	str	r1, [sp, #8]
 800a690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a692:	f042 0201 	orr.w	r2, r2, #1
 800a696:	631a      	str	r2, [r3, #48]	; 0x30
 800a698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	9302      	str	r3, [sp, #8]
 800a6a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a6a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a6a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a6b0:	2307      	movs	r3, #7
 800a6b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6b4:	a903      	add	r1, sp, #12
 800a6b6:	4802      	ldr	r0, [pc, #8]	; (800a6c0 <HAL_UART_MspInit+0x70>)
 800a6b8:	f7f7 fa04 	bl	8001ac4 <HAL_GPIO_Init>
}
 800a6bc:	e7d7      	b.n	800a66e <HAL_UART_MspInit+0x1e>
 800a6be:	bf00      	nop
 800a6c0:	40020000 	.word	0x40020000

0800a6c4 <Init_WheelSpeed_Logging_Task>:

/* Private functions ---------------------------------------------------------*/



void Init_WheelSpeed_Logging_Task(){
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	b084      	sub	sp, #16

	//Gatekeeper
	xWheelSpeed_Logger_Handle = xTaskCreateStatic(	xWheelSpeed_Logger,
 800a6c8:	4c08      	ldr	r4, [pc, #32]	; (800a6ec <Init_WheelSpeed_Logging_Task+0x28>)
 800a6ca:	9402      	str	r4, [sp, #8]
 800a6cc:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 800a6d0:	9301      	str	r3, [sp, #4]
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6dc:	4904      	ldr	r1, [pc, #16]	; (800a6f0 <Init_WheelSpeed_Logging_Task+0x2c>)
 800a6de:	4805      	ldr	r0, [pc, #20]	; (800a6f4 <Init_WheelSpeed_Logging_Task+0x30>)
 800a6e0:	f7fd fc48 	bl	8007f74 <xTaskCreateStatic>
 800a6e4:	f8c4 04b8 	str.w	r0, [r4, #1208]	; 0x4b8
														NULL,
														WHEELSPEED_LOG_TASK_PRIORITY,
														xWheelSpeed_Logger_Stack,
														&xWheelSpeed_Logger_Buffer);	// Create static task for logging the wheelspeed sensor to the sdcard

}
 800a6e8:	b004      	add	sp, #16
 800a6ea:	bd10      	pop	{r4, pc}
 800a6ec:	20005f74 	.word	0x20005f74
 800a6f0:	0800b920 	.word	0x0800b920
 800a6f4:	0800a7b1 	.word	0x0800a7b1

0800a6f8 <get_wheel_ang_vel>:
/*get_wheel_ang_vel
 *
 * 		@Brief returns the param wheel's speed in revolutions per second
 *
 */
float get_wheel_ang_vel(enum wheelPosition wheel) {
 800a6f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t overflow = 0;

	uint32_t sys_clk = 0;

	//get wheel specific data buffer
	switch (wheel) {
 800a6fa:	2803      	cmp	r0, #3
 800a6fc:	d845      	bhi.n	800a78a <get_wheel_ang_vel+0x92>
 800a6fe:	e8df f000 	tbb	[pc, r0]
 800a702:	2c02      	.short	0x2c02
 800a704:	3c34      	.short	0x3c34

	case frontLeftWheel:
		overflow = periodOF_FL;
 800a706:	4b27      	ldr	r3, [pc, #156]	; (800a7a4 <get_wheel_ang_vel+0xac>)
 800a708:	f8d3 44bc 	ldr.w	r4, [r3, #1212]	; 0x4bc
		periodcurr = periodFLcurr;
 800a70c:	f8d3 54c0 	ldr.w	r5, [r3, #1216]	; 0x4c0
		periodprev = periodFLprev;
 800a710:	f8d3 64c4 	ldr.w	r6, [r3, #1220]	; 0x4c4
		periodprev = periodBRprev;
		break;
	}

	//get clock frequency
	sys_clk = HAL_RCC_GetSysClockFreq();
 800a714:	f7f7 fe36 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 800a718:	ee07 0a90 	vmov	s15, r0

	//get wheel speed
	clkFrq =  (float)sys_clk/55;						// Timer peripheral frequency
 800a71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a720:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a7a8 <get_wheel_ang_vel+0xb0>
 800a724:	eec7 6a87 	vdiv.f32	s13, s15, s14

	if(periodcurr != 0 && periodprev !=0 && overflow != 0){
 800a728:	b39d      	cbz	r5, 800a792 <get_wheel_ang_vel+0x9a>
 800a72a:	b3ae      	cbz	r6, 800a798 <get_wheel_ang_vel+0xa0>
 800a72c:	b3bc      	cbz	r4, 800a79e <get_wheel_ang_vel+0xa6>

		if(overflow > 0){
			speed = ((float)clkFrq) / (NUM_TEETH * (float)(periodcurr + (65535 - periodprev) + ((overflow-1) * 65535)));			// calculate speed
 800a72e:	1bad      	subs	r5, r5, r6
 800a730:	ebc4 4404 	rsb	r4, r4, r4, lsl #16
 800a734:	442c      	add	r4, r5
 800a736:	ee07 4a90 	vmov	s15, r4
 800a73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a73e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a742:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a746:	ee86 0aa7 	vdiv.f32	s0, s13, s15
			assert_param(periodcurr - periodprev >= 0);					// ensure that this assumption holds. (If we're getting negative values, we're not counting overflows)
			speed = ((float)clkFrq) / (NUM_TEETH * (float)(periodcurr - periodprev));			// calculate speed
		}

		//check that the division didnt give nan
		if (isnan(speed))
 800a74a:	eeb4 0a40 	vcmp.f32	s0, s0
 800a74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a752:	d720      	bvc.n	800a796 <get_wheel_ang_vel+0x9e>
			speed = 0;
 800a754:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800a7ac <get_wheel_ang_vel+0xb4>

	}

	return speed;
 800a758:	e01d      	b.n	800a796 <get_wheel_ang_vel+0x9e>
		overflow = periodOF_FR;
 800a75a:	4b12      	ldr	r3, [pc, #72]	; (800a7a4 <get_wheel_ang_vel+0xac>)
 800a75c:	f8d3 44c8 	ldr.w	r4, [r3, #1224]	; 0x4c8
		periodcurr = periodFRcurr;
 800a760:	f8d3 54cc 	ldr.w	r5, [r3, #1228]	; 0x4cc
		periodprev = periodFRprev;
 800a764:	f8d3 64d0 	ldr.w	r6, [r3, #1232]	; 0x4d0
		break;
 800a768:	e7d4      	b.n	800a714 <get_wheel_ang_vel+0x1c>
		overflow = periodOF_BL;
 800a76a:	4b0e      	ldr	r3, [pc, #56]	; (800a7a4 <get_wheel_ang_vel+0xac>)
 800a76c:	f8d3 44d4 	ldr.w	r4, [r3, #1236]	; 0x4d4
		periodcurr = periodBLcurr;
 800a770:	f8d3 54d8 	ldr.w	r5, [r3, #1240]	; 0x4d8
		periodprev = periodBLprev;
 800a774:	f8d3 64dc 	ldr.w	r6, [r3, #1244]	; 0x4dc
		break;
 800a778:	e7cc      	b.n	800a714 <get_wheel_ang_vel+0x1c>
		overflow = periodOF_BR;
 800a77a:	4b0a      	ldr	r3, [pc, #40]	; (800a7a4 <get_wheel_ang_vel+0xac>)
 800a77c:	f8d3 44e0 	ldr.w	r4, [r3, #1248]	; 0x4e0
		periodcurr = periodBRcurr;
 800a780:	f8d3 54e4 	ldr.w	r5, [r3, #1252]	; 0x4e4
		periodprev = periodBRprev;
 800a784:	f8d3 64e8 	ldr.w	r6, [r3, #1256]	; 0x4e8
		break;
 800a788:	e7c4      	b.n	800a714 <get_wheel_ang_vel+0x1c>
	switch (wheel) {
 800a78a:	2400      	movs	r4, #0
 800a78c:	4626      	mov	r6, r4
 800a78e:	4625      	mov	r5, r4
 800a790:	e7c0      	b.n	800a714 <get_wheel_ang_vel+0x1c>
	float speed = 0;												//the wheel speed
 800a792:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800a7ac <get_wheel_ang_vel+0xb4>
}
 800a796:	bd70      	pop	{r4, r5, r6, pc}
	float speed = 0;												//the wheel speed
 800a798:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800a7ac <get_wheel_ang_vel+0xb4>
 800a79c:	e7fb      	b.n	800a796 <get_wheel_ang_vel+0x9e>
 800a79e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800a7ac <get_wheel_ang_vel+0xb4>
 800a7a2:	e7f8      	b.n	800a796 <get_wheel_ang_vel+0x9e>
 800a7a4:	20005f74 	.word	0x20005f74
 800a7a8:	425c0000 	.word	0x425c0000
 800a7ac:	00000000 	.word	0x00000000

0800a7b0 <xWheelSpeed_Logger>:



void xWheelSpeed_Logger(void* pvParameters){
 800a7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b2:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c

	char logged_msgFR[256] =  {0};
 800a7b6:	2400      	movs	r4, #0
 800a7b8:	944a      	str	r4, [sp, #296]	; 0x128
 800a7ba:	25fc      	movs	r5, #252	; 0xfc
 800a7bc:	462a      	mov	r2, r5
 800a7be:	4621      	mov	r1, r4
 800a7c0:	a84b      	add	r0, sp, #300	; 0x12c
 800a7c2:	f000 f8f7 	bl	800a9b4 <memset>
	char logged_msgFL[256] =  {0};
 800a7c6:	940a      	str	r4, [sp, #40]	; 0x28
 800a7c8:	462a      	mov	r2, r5
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	a80b      	add	r0, sp, #44	; 0x2c
 800a7ce:	f000 f8f1 	bl	800a9b4 <memset>
	time_delta td;
	float timedelt;
	float wheelsped_bufferFL, wheelsped_bufferFR;

	for(;;){
		wheelsped_bufferFL = get_wheel_ang_vel(frontLeftWheel);
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	f7ff ff90 	bl	800a6f8 <get_wheel_ang_vel>
 800a7d8:	ee10 5a10 	vmov	r5, s0
		td = getTime();
 800a7dc:	ac06      	add	r4, sp, #24
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f7ff fede 	bl	800a5a0 <getTime>
		timedelt = (float)td.seconds + td.subseconds;
 800a7e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7e8:	f7f6 fa00 	bl	8000bec <__aeabi_ul2f>
 800a7ec:	ee07 0a10 	vmov	s14, r0
 800a7f0:	eddd 7a08 	vldr	s15, [sp, #32]

		sprintf(logged_msgFL, "Delta: %f, WSPD(FL): %f", timedelt, wheelsped_bufferFL);
 800a7f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7f8:	ee17 0a90 	vmov	r0, s15
 800a7fc:	f7f5 fec4 	bl	8000588 <__aeabi_f2d>
 800a800:	4606      	mov	r6, r0
 800a802:	460f      	mov	r7, r1
 800a804:	4628      	mov	r0, r5
 800a806:	f7f5 febf 	bl	8000588 <__aeabi_f2d>
 800a80a:	e9cd 0100 	strd	r0, r1, [sp]
 800a80e:	4632      	mov	r2, r6
 800a810:	463b      	mov	r3, r7
 800a812:	491d      	ldr	r1, [pc, #116]	; (800a888 <xWheelSpeed_Logger+0xd8>)
 800a814:	a80a      	add	r0, sp, #40	; 0x28
 800a816:	f000 f9e3 	bl	800abe0 <siprintf>

		wheelsped_bufferFR = get_wheel_ang_vel(frontRightWheel);
 800a81a:	2001      	movs	r0, #1
 800a81c:	f7ff ff6c 	bl	800a6f8 <get_wheel_ang_vel>
 800a820:	ee10 6a10 	vmov	r6, s0
		td = getTime();
 800a824:	ad02      	add	r5, sp, #8
 800a826:	4628      	mov	r0, r5
 800a828:	f7ff feba 	bl	800a5a0 <getTime>
 800a82c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		timedelt = (float)td.seconds + td.subseconds;
 800a834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a838:	f7f6 f9d8 	bl	8000bec <__aeabi_ul2f>
 800a83c:	ee07 0a10 	vmov	s14, r0
 800a840:	edd4 7a02 	vldr	s15, [r4, #8]

		sprintf(logged_msgFR, "Delta: %f, WSPD(FR): %f", timedelt, wheelsped_bufferFR);
 800a844:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a848:	ee17 0a90 	vmov	r0, s15
 800a84c:	f7f5 fe9c 	bl	8000588 <__aeabi_f2d>
 800a850:	4604      	mov	r4, r0
 800a852:	460d      	mov	r5, r1
 800a854:	4630      	mov	r0, r6
 800a856:	f7f5 fe97 	bl	8000588 <__aeabi_f2d>
 800a85a:	e9cd 0100 	strd	r0, r1, [sp]
 800a85e:	4622      	mov	r2, r4
 800a860:	462b      	mov	r3, r5
 800a862:	490a      	ldr	r1, [pc, #40]	; (800a88c <xWheelSpeed_Logger+0xdc>)
 800a864:	a84a      	add	r0, sp, #296	; 0x128
 800a866:	f000 f9bb 	bl	800abe0 <siprintf>

		// Log both wheels
		SD_Log(logged_msgFL, -1);
 800a86a:	f04f 31ff 	mov.w	r1, #4294967295
 800a86e:	a80a      	add	r0, sp, #40	; 0x28
 800a870:	f7ff f94e 	bl	8009b10 <SD_Log>
		SD_Log(logged_msgFR, -1);
 800a874:	f04f 31ff 	mov.w	r1, #4294967295
 800a878:	a84a      	add	r0, sp, #296	; 0x128
 800a87a:	f7ff f949 	bl	8009b10 <SD_Log>

		vTaskDelay(pdMS_TO_TICKS(5));	// Log the wheel speeds every 5ms
 800a87e:	2005      	movs	r0, #5
 800a880:	f7fd fd44 	bl	800830c <vTaskDelay>
	for(;;){
 800a884:	e7a5      	b.n	800a7d2 <xWheelSpeed_Logger+0x22>
 800a886:	bf00      	nop
 800a888:	0800b934 	.word	0x0800b934
 800a88c:	0800b94c 	.word	0x0800b94c

0800a890 <HAL_TIM_IC_CaptureCallback>:
 * @brief interrupt on rising edge of wheel speed pins. Puts most recently captred value in circular buffer
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
	// Timer Channel 1, PA8 -> Rear Right Wheel

	if(htim->Instance == TIM2){
 800a890:	6803      	ldr	r3, [r0, #0]
 800a892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a896:	d003      	beq.n	800a8a0 <HAL_TIM_IC_CaptureCallback+0x10>
		periodFRprev = periodFRcurr;						// Save the old value
		periodFRcurr = htim2.Instance->CCR1;				// Get capture compare register 1's value, CC1 flag is cleared from reading this
		periodOF_FR = overflow_cnt_FR;						// Save the period of the overflow counter
		overflow_cnt_FR = 0;								// Reset the overflow counter.
	}
	if(htim->Instance == TIM3){
 800a898:	4a13      	ldr	r2, [pc, #76]	; (800a8e8 <HAL_TIM_IC_CaptureCallback+0x58>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d012      	beq.n	800a8c4 <HAL_TIM_IC_CaptureCallback+0x34>
		periodFLcurr = htim3.Instance->CCR1;					// Get capture compare register 2's value
		periodOF_FL = overflow_cnt_FL;						// Save the period of the overflow counter
		overflow_cnt_FL = 0;								// Reset the overflow counter.
	}

}
 800a89e:	4770      	bx	lr
		periodFRprev = periodFRcurr;						// Save the old value
 800a8a0:	4a12      	ldr	r2, [pc, #72]	; (800a8ec <HAL_TIM_IC_CaptureCallback+0x5c>)
 800a8a2:	f8d2 14cc 	ldr.w	r1, [r2, #1228]	; 0x4cc
 800a8a6:	f8c2 14d0 	str.w	r1, [r2, #1232]	; 0x4d0
		periodFRcurr = htim2.Instance->CCR1;				// Get capture compare register 1's value, CC1 flag is cleared from reading this
 800a8aa:	4911      	ldr	r1, [pc, #68]	; (800a8f0 <HAL_TIM_IC_CaptureCallback+0x60>)
 800a8ac:	6809      	ldr	r1, [r1, #0]
 800a8ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a8b0:	f8c2 14cc 	str.w	r1, [r2, #1228]	; 0x4cc
		periodOF_FR = overflow_cnt_FR;						// Save the period of the overflow counter
 800a8b4:	f8d2 14ec 	ldr.w	r1, [r2, #1260]	; 0x4ec
 800a8b8:	f8c2 14c8 	str.w	r1, [r2, #1224]	; 0x4c8
		overflow_cnt_FR = 0;								// Reset the overflow counter.
 800a8bc:	2100      	movs	r1, #0
 800a8be:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 800a8c2:	e7e9      	b.n	800a898 <HAL_TIM_IC_CaptureCallback+0x8>
		periodFLprev = periodFLcurr;						// Save the old value
 800a8c4:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <HAL_TIM_IC_CaptureCallback+0x5c>)
 800a8c6:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	; 0x4c0
 800a8ca:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
		periodFLcurr = htim3.Instance->CCR1;					// Get capture compare register 2's value
 800a8ce:	4a09      	ldr	r2, [pc, #36]	; (800a8f4 <HAL_TIM_IC_CaptureCallback+0x64>)
 800a8d0:	6812      	ldr	r2, [r2, #0]
 800a8d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a8d4:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
		periodOF_FL = overflow_cnt_FL;						// Save the period of the overflow counter
 800a8d8:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800a8dc:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
		overflow_cnt_FL = 0;								// Reset the overflow counter.
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
}
 800a8e6:	e7da      	b.n	800a89e <HAL_TIM_IC_CaptureCallback+0xe>
 800a8e8:	40000400 	.word	0x40000400
 800a8ec:	20005f74 	.word	0x20005f74
 800a8f0:	20005e38 	.word	0x20005e38
 800a8f4:	20005e80 	.word	0x20005e80

0800a8f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a8f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a930 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a8fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a8fe:	e003      	b.n	800a908 <LoopCopyDataInit>

0800a900 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a900:	4b0c      	ldr	r3, [pc, #48]	; (800a934 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a902:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a904:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a906:	3104      	adds	r1, #4

0800a908 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a908:	480b      	ldr	r0, [pc, #44]	; (800a938 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a90a:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a90c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a90e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a910:	d3f6      	bcc.n	800a900 <CopyDataInit>
  ldr  r2, =_sbss
 800a912:	4a0b      	ldr	r2, [pc, #44]	; (800a940 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a914:	e002      	b.n	800a91c <LoopFillZerobss>

0800a916 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a916:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a918:	f842 3b04 	str.w	r3, [r2], #4

0800a91c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a91c:	4b09      	ldr	r3, [pc, #36]	; (800a944 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a91e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a920:	d3f9      	bcc.n	800a916 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a922:	f7ff fc2b 	bl	800a17c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a926:	f000 f811 	bl	800a94c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a92a:	f7fe fea9 	bl	8009680 <main>
  bx  lr    
 800a92e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a930:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a934:	0800ba08 	.word	0x0800ba08
  ldr  r0, =_sdata
 800a938:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a93c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800a940:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 800a944:	2000648c 	.word	0x2000648c

0800a948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a948:	e7fe      	b.n	800a948 <ADC_IRQHandler>
	...

0800a94c <__libc_init_array>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	4d0d      	ldr	r5, [pc, #52]	; (800a984 <__libc_init_array+0x38>)
 800a950:	4c0d      	ldr	r4, [pc, #52]	; (800a988 <__libc_init_array+0x3c>)
 800a952:	1b64      	subs	r4, r4, r5
 800a954:	10a4      	asrs	r4, r4, #2
 800a956:	2600      	movs	r6, #0
 800a958:	42a6      	cmp	r6, r4
 800a95a:	d109      	bne.n	800a970 <__libc_init_array+0x24>
 800a95c:	4d0b      	ldr	r5, [pc, #44]	; (800a98c <__libc_init_array+0x40>)
 800a95e:	4c0c      	ldr	r4, [pc, #48]	; (800a990 <__libc_init_array+0x44>)
 800a960:	f000 fd06 	bl	800b370 <_init>
 800a964:	1b64      	subs	r4, r4, r5
 800a966:	10a4      	asrs	r4, r4, #2
 800a968:	2600      	movs	r6, #0
 800a96a:	42a6      	cmp	r6, r4
 800a96c:	d105      	bne.n	800a97a <__libc_init_array+0x2e>
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	f855 3b04 	ldr.w	r3, [r5], #4
 800a974:	4798      	blx	r3
 800a976:	3601      	adds	r6, #1
 800a978:	e7ee      	b.n	800a958 <__libc_init_array+0xc>
 800a97a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a97e:	4798      	blx	r3
 800a980:	3601      	adds	r6, #1
 800a982:	e7f2      	b.n	800a96a <__libc_init_array+0x1e>
 800a984:	0800ba00 	.word	0x0800ba00
 800a988:	0800ba00 	.word	0x0800ba00
 800a98c:	0800ba00 	.word	0x0800ba00
 800a990:	0800ba04 	.word	0x0800ba04

0800a994 <__retarget_lock_acquire_recursive>:
 800a994:	4770      	bx	lr

0800a996 <__retarget_lock_release_recursive>:
 800a996:	4770      	bx	lr

0800a998 <memcpy>:
 800a998:	440a      	add	r2, r1
 800a99a:	4291      	cmp	r1, r2
 800a99c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9a0:	d100      	bne.n	800a9a4 <memcpy+0xc>
 800a9a2:	4770      	bx	lr
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ae:	4291      	cmp	r1, r2
 800a9b0:	d1f9      	bne.n	800a9a6 <memcpy+0xe>
 800a9b2:	bd10      	pop	{r4, pc}

0800a9b4 <memset>:
 800a9b4:	4402      	add	r2, r0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d100      	bne.n	800a9be <memset+0xa>
 800a9bc:	4770      	bx	lr
 800a9be:	f803 1b01 	strb.w	r1, [r3], #1
 800a9c2:	e7f9      	b.n	800a9b8 <memset+0x4>

0800a9c4 <sbrk_aligned>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	4e0e      	ldr	r6, [pc, #56]	; (800aa00 <sbrk_aligned+0x3c>)
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	6831      	ldr	r1, [r6, #0]
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	b911      	cbnz	r1, 800a9d6 <sbrk_aligned+0x12>
 800a9d0:	f000 f8f6 	bl	800abc0 <_sbrk_r>
 800a9d4:	6030      	str	r0, [r6, #0]
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4628      	mov	r0, r5
 800a9da:	f000 f8f1 	bl	800abc0 <_sbrk_r>
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	d00a      	beq.n	800a9f8 <sbrk_aligned+0x34>
 800a9e2:	1cc4      	adds	r4, r0, #3
 800a9e4:	f024 0403 	bic.w	r4, r4, #3
 800a9e8:	42a0      	cmp	r0, r4
 800a9ea:	d007      	beq.n	800a9fc <sbrk_aligned+0x38>
 800a9ec:	1a21      	subs	r1, r4, r0
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f000 f8e6 	bl	800abc0 <_sbrk_r>
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	d101      	bne.n	800a9fc <sbrk_aligned+0x38>
 800a9f8:	f04f 34ff 	mov.w	r4, #4294967295
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	20006480 	.word	0x20006480

0800aa04 <_malloc_r>:
 800aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa08:	1ccd      	adds	r5, r1, #3
 800aa0a:	f025 0503 	bic.w	r5, r5, #3
 800aa0e:	3508      	adds	r5, #8
 800aa10:	2d0c      	cmp	r5, #12
 800aa12:	bf38      	it	cc
 800aa14:	250c      	movcc	r5, #12
 800aa16:	2d00      	cmp	r5, #0
 800aa18:	4607      	mov	r7, r0
 800aa1a:	db01      	blt.n	800aa20 <_malloc_r+0x1c>
 800aa1c:	42a9      	cmp	r1, r5
 800aa1e:	d905      	bls.n	800aa2c <_malloc_r+0x28>
 800aa20:	230c      	movs	r3, #12
 800aa22:	603b      	str	r3, [r7, #0]
 800aa24:	2600      	movs	r6, #0
 800aa26:	4630      	mov	r0, r6
 800aa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa2c:	4e2e      	ldr	r6, [pc, #184]	; (800aae8 <_malloc_r+0xe4>)
 800aa2e:	f000 f8f7 	bl	800ac20 <__malloc_lock>
 800aa32:	6833      	ldr	r3, [r6, #0]
 800aa34:	461c      	mov	r4, r3
 800aa36:	bb34      	cbnz	r4, 800aa86 <_malloc_r+0x82>
 800aa38:	4629      	mov	r1, r5
 800aa3a:	4638      	mov	r0, r7
 800aa3c:	f7ff ffc2 	bl	800a9c4 <sbrk_aligned>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	4604      	mov	r4, r0
 800aa44:	d14d      	bne.n	800aae2 <_malloc_r+0xde>
 800aa46:	6834      	ldr	r4, [r6, #0]
 800aa48:	4626      	mov	r6, r4
 800aa4a:	2e00      	cmp	r6, #0
 800aa4c:	d140      	bne.n	800aad0 <_malloc_r+0xcc>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	4631      	mov	r1, r6
 800aa52:	4638      	mov	r0, r7
 800aa54:	eb04 0803 	add.w	r8, r4, r3
 800aa58:	f000 f8b2 	bl	800abc0 <_sbrk_r>
 800aa5c:	4580      	cmp	r8, r0
 800aa5e:	d13a      	bne.n	800aad6 <_malloc_r+0xd2>
 800aa60:	6821      	ldr	r1, [r4, #0]
 800aa62:	3503      	adds	r5, #3
 800aa64:	1a6d      	subs	r5, r5, r1
 800aa66:	f025 0503 	bic.w	r5, r5, #3
 800aa6a:	3508      	adds	r5, #8
 800aa6c:	2d0c      	cmp	r5, #12
 800aa6e:	bf38      	it	cc
 800aa70:	250c      	movcc	r5, #12
 800aa72:	4629      	mov	r1, r5
 800aa74:	4638      	mov	r0, r7
 800aa76:	f7ff ffa5 	bl	800a9c4 <sbrk_aligned>
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	d02b      	beq.n	800aad6 <_malloc_r+0xd2>
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	442b      	add	r3, r5
 800aa82:	6023      	str	r3, [r4, #0]
 800aa84:	e00e      	b.n	800aaa4 <_malloc_r+0xa0>
 800aa86:	6822      	ldr	r2, [r4, #0]
 800aa88:	1b52      	subs	r2, r2, r5
 800aa8a:	d41e      	bmi.n	800aaca <_malloc_r+0xc6>
 800aa8c:	2a0b      	cmp	r2, #11
 800aa8e:	d916      	bls.n	800aabe <_malloc_r+0xba>
 800aa90:	1961      	adds	r1, r4, r5
 800aa92:	42a3      	cmp	r3, r4
 800aa94:	6025      	str	r5, [r4, #0]
 800aa96:	bf18      	it	ne
 800aa98:	6059      	strne	r1, [r3, #4]
 800aa9a:	6863      	ldr	r3, [r4, #4]
 800aa9c:	bf08      	it	eq
 800aa9e:	6031      	streq	r1, [r6, #0]
 800aaa0:	5162      	str	r2, [r4, r5]
 800aaa2:	604b      	str	r3, [r1, #4]
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	f104 060b 	add.w	r6, r4, #11
 800aaaa:	f000 f8bf 	bl	800ac2c <__malloc_unlock>
 800aaae:	f026 0607 	bic.w	r6, r6, #7
 800aab2:	1d23      	adds	r3, r4, #4
 800aab4:	1af2      	subs	r2, r6, r3
 800aab6:	d0b6      	beq.n	800aa26 <_malloc_r+0x22>
 800aab8:	1b9b      	subs	r3, r3, r6
 800aaba:	50a3      	str	r3, [r4, r2]
 800aabc:	e7b3      	b.n	800aa26 <_malloc_r+0x22>
 800aabe:	6862      	ldr	r2, [r4, #4]
 800aac0:	42a3      	cmp	r3, r4
 800aac2:	bf0c      	ite	eq
 800aac4:	6032      	streq	r2, [r6, #0]
 800aac6:	605a      	strne	r2, [r3, #4]
 800aac8:	e7ec      	b.n	800aaa4 <_malloc_r+0xa0>
 800aaca:	4623      	mov	r3, r4
 800aacc:	6864      	ldr	r4, [r4, #4]
 800aace:	e7b2      	b.n	800aa36 <_malloc_r+0x32>
 800aad0:	4634      	mov	r4, r6
 800aad2:	6876      	ldr	r6, [r6, #4]
 800aad4:	e7b9      	b.n	800aa4a <_malloc_r+0x46>
 800aad6:	230c      	movs	r3, #12
 800aad8:	603b      	str	r3, [r7, #0]
 800aada:	4638      	mov	r0, r7
 800aadc:	f000 f8a6 	bl	800ac2c <__malloc_unlock>
 800aae0:	e7a1      	b.n	800aa26 <_malloc_r+0x22>
 800aae2:	6025      	str	r5, [r4, #0]
 800aae4:	e7de      	b.n	800aaa4 <_malloc_r+0xa0>
 800aae6:	bf00      	nop
 800aae8:	2000647c 	.word	0x2000647c

0800aaec <cleanup_glue>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	460c      	mov	r4, r1
 800aaf0:	6809      	ldr	r1, [r1, #0]
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	b109      	cbz	r1, 800aafa <cleanup_glue+0xe>
 800aaf6:	f7ff fff9 	bl	800aaec <cleanup_glue>
 800aafa:	4621      	mov	r1, r4
 800aafc:	4628      	mov	r0, r5
 800aafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab02:	f000 b899 	b.w	800ac38 <_free_r>
	...

0800ab08 <_reclaim_reent>:
 800ab08:	4b2c      	ldr	r3, [pc, #176]	; (800abbc <_reclaim_reent+0xb4>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4283      	cmp	r3, r0
 800ab0e:	b570      	push	{r4, r5, r6, lr}
 800ab10:	4604      	mov	r4, r0
 800ab12:	d051      	beq.n	800abb8 <_reclaim_reent+0xb0>
 800ab14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab16:	b143      	cbz	r3, 800ab2a <_reclaim_reent+0x22>
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d14a      	bne.n	800abb4 <_reclaim_reent+0xac>
 800ab1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab20:	6819      	ldr	r1, [r3, #0]
 800ab22:	b111      	cbz	r1, 800ab2a <_reclaim_reent+0x22>
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 f887 	bl	800ac38 <_free_r>
 800ab2a:	6961      	ldr	r1, [r4, #20]
 800ab2c:	b111      	cbz	r1, 800ab34 <_reclaim_reent+0x2c>
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 f882 	bl	800ac38 <_free_r>
 800ab34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab36:	b111      	cbz	r1, 800ab3e <_reclaim_reent+0x36>
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 f87d 	bl	800ac38 <_free_r>
 800ab3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab40:	b111      	cbz	r1, 800ab48 <_reclaim_reent+0x40>
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 f878 	bl	800ac38 <_free_r>
 800ab48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab4a:	b111      	cbz	r1, 800ab52 <_reclaim_reent+0x4a>
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 f873 	bl	800ac38 <_free_r>
 800ab52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ab54:	b111      	cbz	r1, 800ab5c <_reclaim_reent+0x54>
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 f86e 	bl	800ac38 <_free_r>
 800ab5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ab5e:	b111      	cbz	r1, 800ab66 <_reclaim_reent+0x5e>
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 f869 	bl	800ac38 <_free_r>
 800ab66:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ab68:	b111      	cbz	r1, 800ab70 <_reclaim_reent+0x68>
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 f864 	bl	800ac38 <_free_r>
 800ab70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab72:	b111      	cbz	r1, 800ab7a <_reclaim_reent+0x72>
 800ab74:	4620      	mov	r0, r4
 800ab76:	f000 f85f 	bl	800ac38 <_free_r>
 800ab7a:	69a3      	ldr	r3, [r4, #24]
 800ab7c:	b1e3      	cbz	r3, 800abb8 <_reclaim_reent+0xb0>
 800ab7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab80:	4620      	mov	r0, r4
 800ab82:	4798      	blx	r3
 800ab84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ab86:	b1b9      	cbz	r1, 800abb8 <_reclaim_reent+0xb0>
 800ab88:	4620      	mov	r0, r4
 800ab8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab8e:	f7ff bfad 	b.w	800aaec <cleanup_glue>
 800ab92:	5949      	ldr	r1, [r1, r5]
 800ab94:	b941      	cbnz	r1, 800aba8 <_reclaim_reent+0xa0>
 800ab96:	3504      	adds	r5, #4
 800ab98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab9a:	2d80      	cmp	r5, #128	; 0x80
 800ab9c:	68d9      	ldr	r1, [r3, #12]
 800ab9e:	d1f8      	bne.n	800ab92 <_reclaim_reent+0x8a>
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 f849 	bl	800ac38 <_free_r>
 800aba6:	e7ba      	b.n	800ab1e <_reclaim_reent+0x16>
 800aba8:	680e      	ldr	r6, [r1, #0]
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 f844 	bl	800ac38 <_free_r>
 800abb0:	4631      	mov	r1, r6
 800abb2:	e7ef      	b.n	800ab94 <_reclaim_reent+0x8c>
 800abb4:	2500      	movs	r5, #0
 800abb6:	e7ef      	b.n	800ab98 <_reclaim_reent+0x90>
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	bf00      	nop
 800abbc:	20000020 	.word	0x20000020

0800abc0 <_sbrk_r>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	4d06      	ldr	r5, [pc, #24]	; (800abdc <_sbrk_r+0x1c>)
 800abc4:	2300      	movs	r3, #0
 800abc6:	4604      	mov	r4, r0
 800abc8:	4608      	mov	r0, r1
 800abca:	602b      	str	r3, [r5, #0]
 800abcc:	f000 fbc2 	bl	800b354 <_sbrk>
 800abd0:	1c43      	adds	r3, r0, #1
 800abd2:	d102      	bne.n	800abda <_sbrk_r+0x1a>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	b103      	cbz	r3, 800abda <_sbrk_r+0x1a>
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	bd38      	pop	{r3, r4, r5, pc}
 800abdc:	20006484 	.word	0x20006484

0800abe0 <siprintf>:
 800abe0:	b40e      	push	{r1, r2, r3}
 800abe2:	b500      	push	{lr}
 800abe4:	b09c      	sub	sp, #112	; 0x70
 800abe6:	ab1d      	add	r3, sp, #116	; 0x74
 800abe8:	9002      	str	r0, [sp, #8]
 800abea:	9006      	str	r0, [sp, #24]
 800abec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abf0:	4809      	ldr	r0, [pc, #36]	; (800ac18 <siprintf+0x38>)
 800abf2:	9107      	str	r1, [sp, #28]
 800abf4:	9104      	str	r1, [sp, #16]
 800abf6:	4909      	ldr	r1, [pc, #36]	; (800ac1c <siprintf+0x3c>)
 800abf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abfc:	9105      	str	r1, [sp, #20]
 800abfe:	6800      	ldr	r0, [r0, #0]
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	a902      	add	r1, sp, #8
 800ac04:	f000 f8c0 	bl	800ad88 <_svfiprintf_r>
 800ac08:	9b02      	ldr	r3, [sp, #8]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	701a      	strb	r2, [r3, #0]
 800ac0e:	b01c      	add	sp, #112	; 0x70
 800ac10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac14:	b003      	add	sp, #12
 800ac16:	4770      	bx	lr
 800ac18:	20000020 	.word	0x20000020
 800ac1c:	ffff0208 	.word	0xffff0208

0800ac20 <__malloc_lock>:
 800ac20:	4801      	ldr	r0, [pc, #4]	; (800ac28 <__malloc_lock+0x8>)
 800ac22:	f7ff beb7 	b.w	800a994 <__retarget_lock_acquire_recursive>
 800ac26:	bf00      	nop
 800ac28:	20006478 	.word	0x20006478

0800ac2c <__malloc_unlock>:
 800ac2c:	4801      	ldr	r0, [pc, #4]	; (800ac34 <__malloc_unlock+0x8>)
 800ac2e:	f7ff beb2 	b.w	800a996 <__retarget_lock_release_recursive>
 800ac32:	bf00      	nop
 800ac34:	20006478 	.word	0x20006478

0800ac38 <_free_r>:
 800ac38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac3a:	2900      	cmp	r1, #0
 800ac3c:	d044      	beq.n	800acc8 <_free_r+0x90>
 800ac3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac42:	9001      	str	r0, [sp, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f1a1 0404 	sub.w	r4, r1, #4
 800ac4a:	bfb8      	it	lt
 800ac4c:	18e4      	addlt	r4, r4, r3
 800ac4e:	f7ff ffe7 	bl	800ac20 <__malloc_lock>
 800ac52:	4a1e      	ldr	r2, [pc, #120]	; (800accc <_free_r+0x94>)
 800ac54:	9801      	ldr	r0, [sp, #4]
 800ac56:	6813      	ldr	r3, [r2, #0]
 800ac58:	b933      	cbnz	r3, 800ac68 <_free_r+0x30>
 800ac5a:	6063      	str	r3, [r4, #4]
 800ac5c:	6014      	str	r4, [r2, #0]
 800ac5e:	b003      	add	sp, #12
 800ac60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac64:	f7ff bfe2 	b.w	800ac2c <__malloc_unlock>
 800ac68:	42a3      	cmp	r3, r4
 800ac6a:	d908      	bls.n	800ac7e <_free_r+0x46>
 800ac6c:	6825      	ldr	r5, [r4, #0]
 800ac6e:	1961      	adds	r1, r4, r5
 800ac70:	428b      	cmp	r3, r1
 800ac72:	bf01      	itttt	eq
 800ac74:	6819      	ldreq	r1, [r3, #0]
 800ac76:	685b      	ldreq	r3, [r3, #4]
 800ac78:	1949      	addeq	r1, r1, r5
 800ac7a:	6021      	streq	r1, [r4, #0]
 800ac7c:	e7ed      	b.n	800ac5a <_free_r+0x22>
 800ac7e:	461a      	mov	r2, r3
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	b10b      	cbz	r3, 800ac88 <_free_r+0x50>
 800ac84:	42a3      	cmp	r3, r4
 800ac86:	d9fa      	bls.n	800ac7e <_free_r+0x46>
 800ac88:	6811      	ldr	r1, [r2, #0]
 800ac8a:	1855      	adds	r5, r2, r1
 800ac8c:	42a5      	cmp	r5, r4
 800ac8e:	d10b      	bne.n	800aca8 <_free_r+0x70>
 800ac90:	6824      	ldr	r4, [r4, #0]
 800ac92:	4421      	add	r1, r4
 800ac94:	1854      	adds	r4, r2, r1
 800ac96:	42a3      	cmp	r3, r4
 800ac98:	6011      	str	r1, [r2, #0]
 800ac9a:	d1e0      	bne.n	800ac5e <_free_r+0x26>
 800ac9c:	681c      	ldr	r4, [r3, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	6053      	str	r3, [r2, #4]
 800aca2:	4421      	add	r1, r4
 800aca4:	6011      	str	r1, [r2, #0]
 800aca6:	e7da      	b.n	800ac5e <_free_r+0x26>
 800aca8:	d902      	bls.n	800acb0 <_free_r+0x78>
 800acaa:	230c      	movs	r3, #12
 800acac:	6003      	str	r3, [r0, #0]
 800acae:	e7d6      	b.n	800ac5e <_free_r+0x26>
 800acb0:	6825      	ldr	r5, [r4, #0]
 800acb2:	1961      	adds	r1, r4, r5
 800acb4:	428b      	cmp	r3, r1
 800acb6:	bf04      	itt	eq
 800acb8:	6819      	ldreq	r1, [r3, #0]
 800acba:	685b      	ldreq	r3, [r3, #4]
 800acbc:	6063      	str	r3, [r4, #4]
 800acbe:	bf04      	itt	eq
 800acc0:	1949      	addeq	r1, r1, r5
 800acc2:	6021      	streq	r1, [r4, #0]
 800acc4:	6054      	str	r4, [r2, #4]
 800acc6:	e7ca      	b.n	800ac5e <_free_r+0x26>
 800acc8:	b003      	add	sp, #12
 800acca:	bd30      	pop	{r4, r5, pc}
 800accc:	2000647c 	.word	0x2000647c

0800acd0 <__ssputs_r>:
 800acd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd4:	688e      	ldr	r6, [r1, #8]
 800acd6:	429e      	cmp	r6, r3
 800acd8:	4682      	mov	sl, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	4690      	mov	r8, r2
 800acde:	461f      	mov	r7, r3
 800ace0:	d838      	bhi.n	800ad54 <__ssputs_r+0x84>
 800ace2:	898a      	ldrh	r2, [r1, #12]
 800ace4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ace8:	d032      	beq.n	800ad50 <__ssputs_r+0x80>
 800acea:	6825      	ldr	r5, [r4, #0]
 800acec:	6909      	ldr	r1, [r1, #16]
 800acee:	eba5 0901 	sub.w	r9, r5, r1
 800acf2:	6965      	ldr	r5, [r4, #20]
 800acf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acfc:	3301      	adds	r3, #1
 800acfe:	444b      	add	r3, r9
 800ad00:	106d      	asrs	r5, r5, #1
 800ad02:	429d      	cmp	r5, r3
 800ad04:	bf38      	it	cc
 800ad06:	461d      	movcc	r5, r3
 800ad08:	0553      	lsls	r3, r2, #21
 800ad0a:	d531      	bpl.n	800ad70 <__ssputs_r+0xa0>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7ff fe79 	bl	800aa04 <_malloc_r>
 800ad12:	4606      	mov	r6, r0
 800ad14:	b950      	cbnz	r0, 800ad2c <__ssputs_r+0x5c>
 800ad16:	230c      	movs	r3, #12
 800ad18:	f8ca 3000 	str.w	r3, [sl]
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad22:	81a3      	strh	r3, [r4, #12]
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2c:	6921      	ldr	r1, [r4, #16]
 800ad2e:	464a      	mov	r2, r9
 800ad30:	f7ff fe32 	bl	800a998 <memcpy>
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	6126      	str	r6, [r4, #16]
 800ad42:	6165      	str	r5, [r4, #20]
 800ad44:	444e      	add	r6, r9
 800ad46:	eba5 0509 	sub.w	r5, r5, r9
 800ad4a:	6026      	str	r6, [r4, #0]
 800ad4c:	60a5      	str	r5, [r4, #8]
 800ad4e:	463e      	mov	r6, r7
 800ad50:	42be      	cmp	r6, r7
 800ad52:	d900      	bls.n	800ad56 <__ssputs_r+0x86>
 800ad54:	463e      	mov	r6, r7
 800ad56:	6820      	ldr	r0, [r4, #0]
 800ad58:	4632      	mov	r2, r6
 800ad5a:	4641      	mov	r1, r8
 800ad5c:	f000 faa8 	bl	800b2b0 <memmove>
 800ad60:	68a3      	ldr	r3, [r4, #8]
 800ad62:	1b9b      	subs	r3, r3, r6
 800ad64:	60a3      	str	r3, [r4, #8]
 800ad66:	6823      	ldr	r3, [r4, #0]
 800ad68:	4433      	add	r3, r6
 800ad6a:	6023      	str	r3, [r4, #0]
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	e7db      	b.n	800ad28 <__ssputs_r+0x58>
 800ad70:	462a      	mov	r2, r5
 800ad72:	f000 fab7 	bl	800b2e4 <_realloc_r>
 800ad76:	4606      	mov	r6, r0
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d1e1      	bne.n	800ad40 <__ssputs_r+0x70>
 800ad7c:	6921      	ldr	r1, [r4, #16]
 800ad7e:	4650      	mov	r0, sl
 800ad80:	f7ff ff5a 	bl	800ac38 <_free_r>
 800ad84:	e7c7      	b.n	800ad16 <__ssputs_r+0x46>
	...

0800ad88 <_svfiprintf_r>:
 800ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	4698      	mov	r8, r3
 800ad8e:	898b      	ldrh	r3, [r1, #12]
 800ad90:	061b      	lsls	r3, r3, #24
 800ad92:	b09d      	sub	sp, #116	; 0x74
 800ad94:	4607      	mov	r7, r0
 800ad96:	460d      	mov	r5, r1
 800ad98:	4614      	mov	r4, r2
 800ad9a:	d50e      	bpl.n	800adba <_svfiprintf_r+0x32>
 800ad9c:	690b      	ldr	r3, [r1, #16]
 800ad9e:	b963      	cbnz	r3, 800adba <_svfiprintf_r+0x32>
 800ada0:	2140      	movs	r1, #64	; 0x40
 800ada2:	f7ff fe2f 	bl	800aa04 <_malloc_r>
 800ada6:	6028      	str	r0, [r5, #0]
 800ada8:	6128      	str	r0, [r5, #16]
 800adaa:	b920      	cbnz	r0, 800adb6 <_svfiprintf_r+0x2e>
 800adac:	230c      	movs	r3, #12
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295
 800adb4:	e0d1      	b.n	800af5a <_svfiprintf_r+0x1d2>
 800adb6:	2340      	movs	r3, #64	; 0x40
 800adb8:	616b      	str	r3, [r5, #20]
 800adba:	2300      	movs	r3, #0
 800adbc:	9309      	str	r3, [sp, #36]	; 0x24
 800adbe:	2320      	movs	r3, #32
 800adc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc8:	2330      	movs	r3, #48	; 0x30
 800adca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af74 <_svfiprintf_r+0x1ec>
 800adce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800add2:	f04f 0901 	mov.w	r9, #1
 800add6:	4623      	mov	r3, r4
 800add8:	469a      	mov	sl, r3
 800adda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adde:	b10a      	cbz	r2, 800ade4 <_svfiprintf_r+0x5c>
 800ade0:	2a25      	cmp	r2, #37	; 0x25
 800ade2:	d1f9      	bne.n	800add8 <_svfiprintf_r+0x50>
 800ade4:	ebba 0b04 	subs.w	fp, sl, r4
 800ade8:	d00b      	beq.n	800ae02 <_svfiprintf_r+0x7a>
 800adea:	465b      	mov	r3, fp
 800adec:	4622      	mov	r2, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	4638      	mov	r0, r7
 800adf2:	f7ff ff6d 	bl	800acd0 <__ssputs_r>
 800adf6:	3001      	adds	r0, #1
 800adf8:	f000 80aa 	beq.w	800af50 <_svfiprintf_r+0x1c8>
 800adfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adfe:	445a      	add	r2, fp
 800ae00:	9209      	str	r2, [sp, #36]	; 0x24
 800ae02:	f89a 3000 	ldrb.w	r3, [sl]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 80a2 	beq.w	800af50 <_svfiprintf_r+0x1c8>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae16:	f10a 0a01 	add.w	sl, sl, #1
 800ae1a:	9304      	str	r3, [sp, #16]
 800ae1c:	9307      	str	r3, [sp, #28]
 800ae1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae22:	931a      	str	r3, [sp, #104]	; 0x68
 800ae24:	4654      	mov	r4, sl
 800ae26:	2205      	movs	r2, #5
 800ae28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2c:	4851      	ldr	r0, [pc, #324]	; (800af74 <_svfiprintf_r+0x1ec>)
 800ae2e:	f7f5 f9f7 	bl	8000220 <memchr>
 800ae32:	9a04      	ldr	r2, [sp, #16]
 800ae34:	b9d8      	cbnz	r0, 800ae6e <_svfiprintf_r+0xe6>
 800ae36:	06d0      	lsls	r0, r2, #27
 800ae38:	bf44      	itt	mi
 800ae3a:	2320      	movmi	r3, #32
 800ae3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae40:	0711      	lsls	r1, r2, #28
 800ae42:	bf44      	itt	mi
 800ae44:	232b      	movmi	r3, #43	; 0x2b
 800ae46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae50:	d015      	beq.n	800ae7e <_svfiprintf_r+0xf6>
 800ae52:	9a07      	ldr	r2, [sp, #28]
 800ae54:	4654      	mov	r4, sl
 800ae56:	2000      	movs	r0, #0
 800ae58:	f04f 0c0a 	mov.w	ip, #10
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae62:	3b30      	subs	r3, #48	; 0x30
 800ae64:	2b09      	cmp	r3, #9
 800ae66:	d94e      	bls.n	800af06 <_svfiprintf_r+0x17e>
 800ae68:	b1b0      	cbz	r0, 800ae98 <_svfiprintf_r+0x110>
 800ae6a:	9207      	str	r2, [sp, #28]
 800ae6c:	e014      	b.n	800ae98 <_svfiprintf_r+0x110>
 800ae6e:	eba0 0308 	sub.w	r3, r0, r8
 800ae72:	fa09 f303 	lsl.w	r3, r9, r3
 800ae76:	4313      	orrs	r3, r2
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	46a2      	mov	sl, r4
 800ae7c:	e7d2      	b.n	800ae24 <_svfiprintf_r+0x9c>
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	1d19      	adds	r1, r3, #4
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	9103      	str	r1, [sp, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bfbb      	ittet	lt
 800ae8a:	425b      	neglt	r3, r3
 800ae8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae90:	9307      	strge	r3, [sp, #28]
 800ae92:	9307      	strlt	r3, [sp, #28]
 800ae94:	bfb8      	it	lt
 800ae96:	9204      	strlt	r2, [sp, #16]
 800ae98:	7823      	ldrb	r3, [r4, #0]
 800ae9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae9c:	d10c      	bne.n	800aeb8 <_svfiprintf_r+0x130>
 800ae9e:	7863      	ldrb	r3, [r4, #1]
 800aea0:	2b2a      	cmp	r3, #42	; 0x2a
 800aea2:	d135      	bne.n	800af10 <_svfiprintf_r+0x188>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	1d1a      	adds	r2, r3, #4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	9203      	str	r2, [sp, #12]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	bfb8      	it	lt
 800aeb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeb4:	3402      	adds	r4, #2
 800aeb6:	9305      	str	r3, [sp, #20]
 800aeb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af84 <_svfiprintf_r+0x1fc>
 800aebc:	7821      	ldrb	r1, [r4, #0]
 800aebe:	2203      	movs	r2, #3
 800aec0:	4650      	mov	r0, sl
 800aec2:	f7f5 f9ad 	bl	8000220 <memchr>
 800aec6:	b140      	cbz	r0, 800aeda <_svfiprintf_r+0x152>
 800aec8:	2340      	movs	r3, #64	; 0x40
 800aeca:	eba0 000a 	sub.w	r0, r0, sl
 800aece:	fa03 f000 	lsl.w	r0, r3, r0
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	4303      	orrs	r3, r0
 800aed6:	3401      	adds	r4, #1
 800aed8:	9304      	str	r3, [sp, #16]
 800aeda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aede:	4826      	ldr	r0, [pc, #152]	; (800af78 <_svfiprintf_r+0x1f0>)
 800aee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aee4:	2206      	movs	r2, #6
 800aee6:	f7f5 f99b 	bl	8000220 <memchr>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d038      	beq.n	800af60 <_svfiprintf_r+0x1d8>
 800aeee:	4b23      	ldr	r3, [pc, #140]	; (800af7c <_svfiprintf_r+0x1f4>)
 800aef0:	bb1b      	cbnz	r3, 800af3a <_svfiprintf_r+0x1b2>
 800aef2:	9b03      	ldr	r3, [sp, #12]
 800aef4:	3307      	adds	r3, #7
 800aef6:	f023 0307 	bic.w	r3, r3, #7
 800aefa:	3308      	adds	r3, #8
 800aefc:	9303      	str	r3, [sp, #12]
 800aefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af00:	4433      	add	r3, r6
 800af02:	9309      	str	r3, [sp, #36]	; 0x24
 800af04:	e767      	b.n	800add6 <_svfiprintf_r+0x4e>
 800af06:	fb0c 3202 	mla	r2, ip, r2, r3
 800af0a:	460c      	mov	r4, r1
 800af0c:	2001      	movs	r0, #1
 800af0e:	e7a5      	b.n	800ae5c <_svfiprintf_r+0xd4>
 800af10:	2300      	movs	r3, #0
 800af12:	3401      	adds	r4, #1
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	4619      	mov	r1, r3
 800af18:	f04f 0c0a 	mov.w	ip, #10
 800af1c:	4620      	mov	r0, r4
 800af1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af22:	3a30      	subs	r2, #48	; 0x30
 800af24:	2a09      	cmp	r2, #9
 800af26:	d903      	bls.n	800af30 <_svfiprintf_r+0x1a8>
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0c5      	beq.n	800aeb8 <_svfiprintf_r+0x130>
 800af2c:	9105      	str	r1, [sp, #20]
 800af2e:	e7c3      	b.n	800aeb8 <_svfiprintf_r+0x130>
 800af30:	fb0c 2101 	mla	r1, ip, r1, r2
 800af34:	4604      	mov	r4, r0
 800af36:	2301      	movs	r3, #1
 800af38:	e7f0      	b.n	800af1c <_svfiprintf_r+0x194>
 800af3a:	ab03      	add	r3, sp, #12
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	462a      	mov	r2, r5
 800af40:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <_svfiprintf_r+0x1f8>)
 800af42:	a904      	add	r1, sp, #16
 800af44:	4638      	mov	r0, r7
 800af46:	f3af 8000 	nop.w
 800af4a:	1c42      	adds	r2, r0, #1
 800af4c:	4606      	mov	r6, r0
 800af4e:	d1d6      	bne.n	800aefe <_svfiprintf_r+0x176>
 800af50:	89ab      	ldrh	r3, [r5, #12]
 800af52:	065b      	lsls	r3, r3, #25
 800af54:	f53f af2c 	bmi.w	800adb0 <_svfiprintf_r+0x28>
 800af58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af5a:	b01d      	add	sp, #116	; 0x74
 800af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af60:	ab03      	add	r3, sp, #12
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	462a      	mov	r2, r5
 800af66:	4b06      	ldr	r3, [pc, #24]	; (800af80 <_svfiprintf_r+0x1f8>)
 800af68:	a904      	add	r1, sp, #16
 800af6a:	4638      	mov	r0, r7
 800af6c:	f000 f87a 	bl	800b064 <_printf_i>
 800af70:	e7eb      	b.n	800af4a <_svfiprintf_r+0x1c2>
 800af72:	bf00      	nop
 800af74:	0800b9c4 	.word	0x0800b9c4
 800af78:	0800b9ce 	.word	0x0800b9ce
 800af7c:	00000000 	.word	0x00000000
 800af80:	0800acd1 	.word	0x0800acd1
 800af84:	0800b9ca 	.word	0x0800b9ca

0800af88 <_printf_common>:
 800af88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8c:	4616      	mov	r6, r2
 800af8e:	4699      	mov	r9, r3
 800af90:	688a      	ldr	r2, [r1, #8]
 800af92:	690b      	ldr	r3, [r1, #16]
 800af94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af98:	4293      	cmp	r3, r2
 800af9a:	bfb8      	it	lt
 800af9c:	4613      	movlt	r3, r2
 800af9e:	6033      	str	r3, [r6, #0]
 800afa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afa4:	4607      	mov	r7, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	b10a      	cbz	r2, 800afae <_printf_common+0x26>
 800afaa:	3301      	adds	r3, #1
 800afac:	6033      	str	r3, [r6, #0]
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	0699      	lsls	r1, r3, #26
 800afb2:	bf42      	ittt	mi
 800afb4:	6833      	ldrmi	r3, [r6, #0]
 800afb6:	3302      	addmi	r3, #2
 800afb8:	6033      	strmi	r3, [r6, #0]
 800afba:	6825      	ldr	r5, [r4, #0]
 800afbc:	f015 0506 	ands.w	r5, r5, #6
 800afc0:	d106      	bne.n	800afd0 <_printf_common+0x48>
 800afc2:	f104 0a19 	add.w	sl, r4, #25
 800afc6:	68e3      	ldr	r3, [r4, #12]
 800afc8:	6832      	ldr	r2, [r6, #0]
 800afca:	1a9b      	subs	r3, r3, r2
 800afcc:	42ab      	cmp	r3, r5
 800afce:	dc26      	bgt.n	800b01e <_printf_common+0x96>
 800afd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afd4:	1e13      	subs	r3, r2, #0
 800afd6:	6822      	ldr	r2, [r4, #0]
 800afd8:	bf18      	it	ne
 800afda:	2301      	movne	r3, #1
 800afdc:	0692      	lsls	r2, r2, #26
 800afde:	d42b      	bmi.n	800b038 <_printf_common+0xb0>
 800afe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afe4:	4649      	mov	r1, r9
 800afe6:	4638      	mov	r0, r7
 800afe8:	47c0      	blx	r8
 800afea:	3001      	adds	r0, #1
 800afec:	d01e      	beq.n	800b02c <_printf_common+0xa4>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	68e5      	ldr	r5, [r4, #12]
 800aff2:	6832      	ldr	r2, [r6, #0]
 800aff4:	f003 0306 	and.w	r3, r3, #6
 800aff8:	2b04      	cmp	r3, #4
 800affa:	bf08      	it	eq
 800affc:	1aad      	subeq	r5, r5, r2
 800affe:	68a3      	ldr	r3, [r4, #8]
 800b000:	6922      	ldr	r2, [r4, #16]
 800b002:	bf0c      	ite	eq
 800b004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b008:	2500      	movne	r5, #0
 800b00a:	4293      	cmp	r3, r2
 800b00c:	bfc4      	itt	gt
 800b00e:	1a9b      	subgt	r3, r3, r2
 800b010:	18ed      	addgt	r5, r5, r3
 800b012:	2600      	movs	r6, #0
 800b014:	341a      	adds	r4, #26
 800b016:	42b5      	cmp	r5, r6
 800b018:	d11a      	bne.n	800b050 <_printf_common+0xc8>
 800b01a:	2000      	movs	r0, #0
 800b01c:	e008      	b.n	800b030 <_printf_common+0xa8>
 800b01e:	2301      	movs	r3, #1
 800b020:	4652      	mov	r2, sl
 800b022:	4649      	mov	r1, r9
 800b024:	4638      	mov	r0, r7
 800b026:	47c0      	blx	r8
 800b028:	3001      	adds	r0, #1
 800b02a:	d103      	bne.n	800b034 <_printf_common+0xac>
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b034:	3501      	adds	r5, #1
 800b036:	e7c6      	b.n	800afc6 <_printf_common+0x3e>
 800b038:	18e1      	adds	r1, r4, r3
 800b03a:	1c5a      	adds	r2, r3, #1
 800b03c:	2030      	movs	r0, #48	; 0x30
 800b03e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b042:	4422      	add	r2, r4
 800b044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b04c:	3302      	adds	r3, #2
 800b04e:	e7c7      	b.n	800afe0 <_printf_common+0x58>
 800b050:	2301      	movs	r3, #1
 800b052:	4622      	mov	r2, r4
 800b054:	4649      	mov	r1, r9
 800b056:	4638      	mov	r0, r7
 800b058:	47c0      	blx	r8
 800b05a:	3001      	adds	r0, #1
 800b05c:	d0e6      	beq.n	800b02c <_printf_common+0xa4>
 800b05e:	3601      	adds	r6, #1
 800b060:	e7d9      	b.n	800b016 <_printf_common+0x8e>
	...

0800b064 <_printf_i>:
 800b064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b068:	7e0f      	ldrb	r7, [r1, #24]
 800b06a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b06c:	2f78      	cmp	r7, #120	; 0x78
 800b06e:	4691      	mov	r9, r2
 800b070:	4680      	mov	r8, r0
 800b072:	460c      	mov	r4, r1
 800b074:	469a      	mov	sl, r3
 800b076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b07a:	d807      	bhi.n	800b08c <_printf_i+0x28>
 800b07c:	2f62      	cmp	r7, #98	; 0x62
 800b07e:	d80a      	bhi.n	800b096 <_printf_i+0x32>
 800b080:	2f00      	cmp	r7, #0
 800b082:	f000 80d8 	beq.w	800b236 <_printf_i+0x1d2>
 800b086:	2f58      	cmp	r7, #88	; 0x58
 800b088:	f000 80a3 	beq.w	800b1d2 <_printf_i+0x16e>
 800b08c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b094:	e03a      	b.n	800b10c <_printf_i+0xa8>
 800b096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b09a:	2b15      	cmp	r3, #21
 800b09c:	d8f6      	bhi.n	800b08c <_printf_i+0x28>
 800b09e:	a101      	add	r1, pc, #4	; (adr r1, 800b0a4 <_printf_i+0x40>)
 800b0a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0a4:	0800b0fd 	.word	0x0800b0fd
 800b0a8:	0800b111 	.word	0x0800b111
 800b0ac:	0800b08d 	.word	0x0800b08d
 800b0b0:	0800b08d 	.word	0x0800b08d
 800b0b4:	0800b08d 	.word	0x0800b08d
 800b0b8:	0800b08d 	.word	0x0800b08d
 800b0bc:	0800b111 	.word	0x0800b111
 800b0c0:	0800b08d 	.word	0x0800b08d
 800b0c4:	0800b08d 	.word	0x0800b08d
 800b0c8:	0800b08d 	.word	0x0800b08d
 800b0cc:	0800b08d 	.word	0x0800b08d
 800b0d0:	0800b21d 	.word	0x0800b21d
 800b0d4:	0800b141 	.word	0x0800b141
 800b0d8:	0800b1ff 	.word	0x0800b1ff
 800b0dc:	0800b08d 	.word	0x0800b08d
 800b0e0:	0800b08d 	.word	0x0800b08d
 800b0e4:	0800b23f 	.word	0x0800b23f
 800b0e8:	0800b08d 	.word	0x0800b08d
 800b0ec:	0800b141 	.word	0x0800b141
 800b0f0:	0800b08d 	.word	0x0800b08d
 800b0f4:	0800b08d 	.word	0x0800b08d
 800b0f8:	0800b207 	.word	0x0800b207
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	1d1a      	adds	r2, r3, #4
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	602a      	str	r2, [r5, #0]
 800b104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b10c:	2301      	movs	r3, #1
 800b10e:	e0a3      	b.n	800b258 <_printf_i+0x1f4>
 800b110:	6820      	ldr	r0, [r4, #0]
 800b112:	6829      	ldr	r1, [r5, #0]
 800b114:	0606      	lsls	r6, r0, #24
 800b116:	f101 0304 	add.w	r3, r1, #4
 800b11a:	d50a      	bpl.n	800b132 <_printf_i+0xce>
 800b11c:	680e      	ldr	r6, [r1, #0]
 800b11e:	602b      	str	r3, [r5, #0]
 800b120:	2e00      	cmp	r6, #0
 800b122:	da03      	bge.n	800b12c <_printf_i+0xc8>
 800b124:	232d      	movs	r3, #45	; 0x2d
 800b126:	4276      	negs	r6, r6
 800b128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b12c:	485e      	ldr	r0, [pc, #376]	; (800b2a8 <_printf_i+0x244>)
 800b12e:	230a      	movs	r3, #10
 800b130:	e019      	b.n	800b166 <_printf_i+0x102>
 800b132:	680e      	ldr	r6, [r1, #0]
 800b134:	602b      	str	r3, [r5, #0]
 800b136:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b13a:	bf18      	it	ne
 800b13c:	b236      	sxthne	r6, r6
 800b13e:	e7ef      	b.n	800b120 <_printf_i+0xbc>
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	6820      	ldr	r0, [r4, #0]
 800b144:	1d19      	adds	r1, r3, #4
 800b146:	6029      	str	r1, [r5, #0]
 800b148:	0601      	lsls	r1, r0, #24
 800b14a:	d501      	bpl.n	800b150 <_printf_i+0xec>
 800b14c:	681e      	ldr	r6, [r3, #0]
 800b14e:	e002      	b.n	800b156 <_printf_i+0xf2>
 800b150:	0646      	lsls	r6, r0, #25
 800b152:	d5fb      	bpl.n	800b14c <_printf_i+0xe8>
 800b154:	881e      	ldrh	r6, [r3, #0]
 800b156:	4854      	ldr	r0, [pc, #336]	; (800b2a8 <_printf_i+0x244>)
 800b158:	2f6f      	cmp	r7, #111	; 0x6f
 800b15a:	bf0c      	ite	eq
 800b15c:	2308      	moveq	r3, #8
 800b15e:	230a      	movne	r3, #10
 800b160:	2100      	movs	r1, #0
 800b162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b166:	6865      	ldr	r5, [r4, #4]
 800b168:	60a5      	str	r5, [r4, #8]
 800b16a:	2d00      	cmp	r5, #0
 800b16c:	bfa2      	ittt	ge
 800b16e:	6821      	ldrge	r1, [r4, #0]
 800b170:	f021 0104 	bicge.w	r1, r1, #4
 800b174:	6021      	strge	r1, [r4, #0]
 800b176:	b90e      	cbnz	r6, 800b17c <_printf_i+0x118>
 800b178:	2d00      	cmp	r5, #0
 800b17a:	d04d      	beq.n	800b218 <_printf_i+0x1b4>
 800b17c:	4615      	mov	r5, r2
 800b17e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b182:	fb03 6711 	mls	r7, r3, r1, r6
 800b186:	5dc7      	ldrb	r7, [r0, r7]
 800b188:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b18c:	4637      	mov	r7, r6
 800b18e:	42bb      	cmp	r3, r7
 800b190:	460e      	mov	r6, r1
 800b192:	d9f4      	bls.n	800b17e <_printf_i+0x11a>
 800b194:	2b08      	cmp	r3, #8
 800b196:	d10b      	bne.n	800b1b0 <_printf_i+0x14c>
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	07de      	lsls	r6, r3, #31
 800b19c:	d508      	bpl.n	800b1b0 <_printf_i+0x14c>
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	6861      	ldr	r1, [r4, #4]
 800b1a2:	4299      	cmp	r1, r3
 800b1a4:	bfde      	ittt	le
 800b1a6:	2330      	movle	r3, #48	; 0x30
 800b1a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1b0:	1b52      	subs	r2, r2, r5
 800b1b2:	6122      	str	r2, [r4, #16]
 800b1b4:	f8cd a000 	str.w	sl, [sp]
 800b1b8:	464b      	mov	r3, r9
 800b1ba:	aa03      	add	r2, sp, #12
 800b1bc:	4621      	mov	r1, r4
 800b1be:	4640      	mov	r0, r8
 800b1c0:	f7ff fee2 	bl	800af88 <_printf_common>
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	d14c      	bne.n	800b262 <_printf_i+0x1fe>
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	b004      	add	sp, #16
 800b1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d2:	4835      	ldr	r0, [pc, #212]	; (800b2a8 <_printf_i+0x244>)
 800b1d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1d8:	6829      	ldr	r1, [r5, #0]
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1e0:	6029      	str	r1, [r5, #0]
 800b1e2:	061d      	lsls	r5, r3, #24
 800b1e4:	d514      	bpl.n	800b210 <_printf_i+0x1ac>
 800b1e6:	07df      	lsls	r7, r3, #31
 800b1e8:	bf44      	itt	mi
 800b1ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b1ee:	6023      	strmi	r3, [r4, #0]
 800b1f0:	b91e      	cbnz	r6, 800b1fa <_printf_i+0x196>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	f023 0320 	bic.w	r3, r3, #32
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	2310      	movs	r3, #16
 800b1fc:	e7b0      	b.n	800b160 <_printf_i+0xfc>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	f043 0320 	orr.w	r3, r3, #32
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	2378      	movs	r3, #120	; 0x78
 800b208:	4828      	ldr	r0, [pc, #160]	; (800b2ac <_printf_i+0x248>)
 800b20a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b20e:	e7e3      	b.n	800b1d8 <_printf_i+0x174>
 800b210:	0659      	lsls	r1, r3, #25
 800b212:	bf48      	it	mi
 800b214:	b2b6      	uxthmi	r6, r6
 800b216:	e7e6      	b.n	800b1e6 <_printf_i+0x182>
 800b218:	4615      	mov	r5, r2
 800b21a:	e7bb      	b.n	800b194 <_printf_i+0x130>
 800b21c:	682b      	ldr	r3, [r5, #0]
 800b21e:	6826      	ldr	r6, [r4, #0]
 800b220:	6961      	ldr	r1, [r4, #20]
 800b222:	1d18      	adds	r0, r3, #4
 800b224:	6028      	str	r0, [r5, #0]
 800b226:	0635      	lsls	r5, r6, #24
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	d501      	bpl.n	800b230 <_printf_i+0x1cc>
 800b22c:	6019      	str	r1, [r3, #0]
 800b22e:	e002      	b.n	800b236 <_printf_i+0x1d2>
 800b230:	0670      	lsls	r0, r6, #25
 800b232:	d5fb      	bpl.n	800b22c <_printf_i+0x1c8>
 800b234:	8019      	strh	r1, [r3, #0]
 800b236:	2300      	movs	r3, #0
 800b238:	6123      	str	r3, [r4, #16]
 800b23a:	4615      	mov	r5, r2
 800b23c:	e7ba      	b.n	800b1b4 <_printf_i+0x150>
 800b23e:	682b      	ldr	r3, [r5, #0]
 800b240:	1d1a      	adds	r2, r3, #4
 800b242:	602a      	str	r2, [r5, #0]
 800b244:	681d      	ldr	r5, [r3, #0]
 800b246:	6862      	ldr	r2, [r4, #4]
 800b248:	2100      	movs	r1, #0
 800b24a:	4628      	mov	r0, r5
 800b24c:	f7f4 ffe8 	bl	8000220 <memchr>
 800b250:	b108      	cbz	r0, 800b256 <_printf_i+0x1f2>
 800b252:	1b40      	subs	r0, r0, r5
 800b254:	6060      	str	r0, [r4, #4]
 800b256:	6863      	ldr	r3, [r4, #4]
 800b258:	6123      	str	r3, [r4, #16]
 800b25a:	2300      	movs	r3, #0
 800b25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b260:	e7a8      	b.n	800b1b4 <_printf_i+0x150>
 800b262:	6923      	ldr	r3, [r4, #16]
 800b264:	462a      	mov	r2, r5
 800b266:	4649      	mov	r1, r9
 800b268:	4640      	mov	r0, r8
 800b26a:	47d0      	blx	sl
 800b26c:	3001      	adds	r0, #1
 800b26e:	d0ab      	beq.n	800b1c8 <_printf_i+0x164>
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	079b      	lsls	r3, r3, #30
 800b274:	d413      	bmi.n	800b29e <_printf_i+0x23a>
 800b276:	68e0      	ldr	r0, [r4, #12]
 800b278:	9b03      	ldr	r3, [sp, #12]
 800b27a:	4298      	cmp	r0, r3
 800b27c:	bfb8      	it	lt
 800b27e:	4618      	movlt	r0, r3
 800b280:	e7a4      	b.n	800b1cc <_printf_i+0x168>
 800b282:	2301      	movs	r3, #1
 800b284:	4632      	mov	r2, r6
 800b286:	4649      	mov	r1, r9
 800b288:	4640      	mov	r0, r8
 800b28a:	47d0      	blx	sl
 800b28c:	3001      	adds	r0, #1
 800b28e:	d09b      	beq.n	800b1c8 <_printf_i+0x164>
 800b290:	3501      	adds	r5, #1
 800b292:	68e3      	ldr	r3, [r4, #12]
 800b294:	9903      	ldr	r1, [sp, #12]
 800b296:	1a5b      	subs	r3, r3, r1
 800b298:	42ab      	cmp	r3, r5
 800b29a:	dcf2      	bgt.n	800b282 <_printf_i+0x21e>
 800b29c:	e7eb      	b.n	800b276 <_printf_i+0x212>
 800b29e:	2500      	movs	r5, #0
 800b2a0:	f104 0619 	add.w	r6, r4, #25
 800b2a4:	e7f5      	b.n	800b292 <_printf_i+0x22e>
 800b2a6:	bf00      	nop
 800b2a8:	0800b9d5 	.word	0x0800b9d5
 800b2ac:	0800b9e6 	.word	0x0800b9e6

0800b2b0 <memmove>:
 800b2b0:	4288      	cmp	r0, r1
 800b2b2:	b510      	push	{r4, lr}
 800b2b4:	eb01 0402 	add.w	r4, r1, r2
 800b2b8:	d902      	bls.n	800b2c0 <memmove+0x10>
 800b2ba:	4284      	cmp	r4, r0
 800b2bc:	4623      	mov	r3, r4
 800b2be:	d807      	bhi.n	800b2d0 <memmove+0x20>
 800b2c0:	1e43      	subs	r3, r0, #1
 800b2c2:	42a1      	cmp	r1, r4
 800b2c4:	d008      	beq.n	800b2d8 <memmove+0x28>
 800b2c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2ce:	e7f8      	b.n	800b2c2 <memmove+0x12>
 800b2d0:	4402      	add	r2, r0
 800b2d2:	4601      	mov	r1, r0
 800b2d4:	428a      	cmp	r2, r1
 800b2d6:	d100      	bne.n	800b2da <memmove+0x2a>
 800b2d8:	bd10      	pop	{r4, pc}
 800b2da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2e2:	e7f7      	b.n	800b2d4 <memmove+0x24>

0800b2e4 <_realloc_r>:
 800b2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	4614      	mov	r4, r2
 800b2ec:	460e      	mov	r6, r1
 800b2ee:	b921      	cbnz	r1, 800b2fa <_realloc_r+0x16>
 800b2f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	f7ff bb85 	b.w	800aa04 <_malloc_r>
 800b2fa:	b92a      	cbnz	r2, 800b308 <_realloc_r+0x24>
 800b2fc:	f7ff fc9c 	bl	800ac38 <_free_r>
 800b300:	4625      	mov	r5, r4
 800b302:	4628      	mov	r0, r5
 800b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b308:	f000 f81b 	bl	800b342 <_malloc_usable_size_r>
 800b30c:	4284      	cmp	r4, r0
 800b30e:	4607      	mov	r7, r0
 800b310:	d802      	bhi.n	800b318 <_realloc_r+0x34>
 800b312:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b316:	d812      	bhi.n	800b33e <_realloc_r+0x5a>
 800b318:	4621      	mov	r1, r4
 800b31a:	4640      	mov	r0, r8
 800b31c:	f7ff fb72 	bl	800aa04 <_malloc_r>
 800b320:	4605      	mov	r5, r0
 800b322:	2800      	cmp	r0, #0
 800b324:	d0ed      	beq.n	800b302 <_realloc_r+0x1e>
 800b326:	42bc      	cmp	r4, r7
 800b328:	4622      	mov	r2, r4
 800b32a:	4631      	mov	r1, r6
 800b32c:	bf28      	it	cs
 800b32e:	463a      	movcs	r2, r7
 800b330:	f7ff fb32 	bl	800a998 <memcpy>
 800b334:	4631      	mov	r1, r6
 800b336:	4640      	mov	r0, r8
 800b338:	f7ff fc7e 	bl	800ac38 <_free_r>
 800b33c:	e7e1      	b.n	800b302 <_realloc_r+0x1e>
 800b33e:	4635      	mov	r5, r6
 800b340:	e7df      	b.n	800b302 <_realloc_r+0x1e>

0800b342 <_malloc_usable_size_r>:
 800b342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b346:	1f18      	subs	r0, r3, #4
 800b348:	2b00      	cmp	r3, #0
 800b34a:	bfbc      	itt	lt
 800b34c:	580b      	ldrlt	r3, [r1, r0]
 800b34e:	18c0      	addlt	r0, r0, r3
 800b350:	4770      	bx	lr
	...

0800b354 <_sbrk>:
 800b354:	4a04      	ldr	r2, [pc, #16]	; (800b368 <_sbrk+0x14>)
 800b356:	6811      	ldr	r1, [r2, #0]
 800b358:	4603      	mov	r3, r0
 800b35a:	b909      	cbnz	r1, 800b360 <_sbrk+0xc>
 800b35c:	4903      	ldr	r1, [pc, #12]	; (800b36c <_sbrk+0x18>)
 800b35e:	6011      	str	r1, [r2, #0]
 800b360:	6810      	ldr	r0, [r2, #0]
 800b362:	4403      	add	r3, r0
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	4770      	bx	lr
 800b368:	20006488 	.word	0x20006488
 800b36c:	20006490 	.word	0x20006490

0800b370 <_init>:
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	bf00      	nop
 800b374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b376:	bc08      	pop	{r3}
 800b378:	469e      	mov	lr, r3
 800b37a:	4770      	bx	lr

0800b37c <_fini>:
 800b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37e:	bf00      	nop
 800b380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b382:	bc08      	pop	{r3}
 800b384:	469e      	mov	lr, r3
 800b386:	4770      	bx	lr
